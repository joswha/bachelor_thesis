{"version": "v3.5.2 Beta", "title": "Static Analysis", "file_name": "installer3778.apk", "app_name": "Form-N-Fun", "app_type": "apk", "size": "58.39MB", "md5": "29073329d9dac9dcdfa4e8eee3023705", "sha1": "72d4e5540b446b86270a98d764d4fcac3106a200", "sha256": "4864e16a5155c293f66ec2e5dc9837638bbf4c0d23d1e5d3500b31e85ada6001", "package_name": "com.formfun", "main_activity": "com.formfun.MainActivity", "exported_activities": "[]", "browsable_activities": {}, "activities": ["com.formfun.MainActivity"], "receivers": [], "providers": [], "services": [], "libraries": [], "target_sdk": "27", "max_sdk": "", "min_sdk": "15", "version_name": "1.0", "version_code": "1", "icon_hidden": false, "icon_found": true, "permissions": {"android.permission.CAMERA": {"status": "dangerous", "info": "take pictures and videos", "description": "Allows application to take pictures and videos with the camera. This allows the application to collect images that the camera is seeing at any time."}}, "certificate_analysis": {"certificate_info": "APK is signed\nv1 signature: True\nv2 signature: False\nv3 signature: False\nFound 1 unique certificates\nSubject: C=UK, ST=ORG, L=ORG, O=fdroid.org, OU=FDroid, CN=FDroid\nSignature Algorithm: rsassa_pkcs1v15\nValid From: 2019-05-21 16:02:46+00:00\nValid To: 2046-10-06 16:02:46+00:00\nIssuer: C=UK, ST=ORG, L=ORG, O=fdroid.org, OU=FDroid, CN=FDroid\nSerial Number: 0x18f63ae4\nHash Algorithm: sha256\nmd5: 30e4c86bd471530fcf8bc393cff41ff8\nsha1: 0598ca020e486ef196f1fc68b28639d1a144905a\nsha256: 3195f8f212901da38a622351468f4338207ebc8483f5aa529853616fe70c7ad3\nsha512: c5d9ab89e41829c41cea5054445a6d6d9ff801142b8db96badff7d7c97dae44de238beb32678600f0a7eb6fa350d307dcfc30387b83b5b3a248d6933091d4f0a", "certificate_findings": [["info", "Application is signed with a code signing certificate", "Signed Application"], ["high", "Application is signed with v1 signature scheme, making it vulnerable to Janus vulnerability on Android 5.0-8.0, if signed only with v1 signature scheme. Applications running on Android 5.0-7.0 signed with v1, and v2/v3 scheme is also vulnerable.", "Application vulnerable to Janus Vulnerability"]]}, "manifest_analysis": [{"title": "Application Data can be Backed up<br>[android:allowBackup=true]", "stat": "warning", "desc": "This flag allows anyone to backup your application data via adb. It allows users who have enabled USB debugging to copy application data off of the device.", "name": "Application Data can be Backed up [android:allowBackup=true]", "component": []}], "network_security": [], "binary_analysis": [{"name": "lib/armeabi-v7a/libprocess.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": true, "severity": "info", "description": "This shared object has a stack canary value added to the stack so that it will be overwritten by a stack buffer that overflows the return address. This allows detection of overflows by verifying the integrity of the canary before function return."}, "relocation_readonly": {"relro": "Full RELRO", "severity": "info", "description": "This shared object has full RELRO enabled. RELRO ensures that the GOT cannot be overwritten in vulnerable ELF binaries. In Full RELRO, the entire GOT (.got and .got.plt both) is marked as read-only."}, "rpath": {"rpath": null, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": null, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/armeabi-v7a/libopencv_java4.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": true, "severity": "info", "description": "This shared object has a stack canary value added to the stack so that it will be overwritten by a stack buffer that overflows the return address. This allows detection of overflows by verifying the integrity of the canary before function return."}, "relocation_readonly": {"relro": "Full RELRO", "severity": "info", "description": "This shared object has full RELRO enabled. RELRO ensures that the GOT cannot be overwritten in vulnerable ELF binaries. In Full RELRO, the entire GOT (.got and .got.plt both) is marked as read-only."}, "rpath": {"rpath": null, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": null, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/x86/libprocess.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": true, "severity": "info", "description": "This shared object has a stack canary value added to the stack so that it will be overwritten by a stack buffer that overflows the return address. This allows detection of overflows by verifying the integrity of the canary before function return."}, "relocation_readonly": {"relro": "Full RELRO", "severity": "info", "description": "This shared object has full RELRO enabled. RELRO ensures that the GOT cannot be overwritten in vulnerable ELF binaries. In Full RELRO, the entire GOT (.got and .got.plt both) is marked as read-only."}, "rpath": {"rpath": null, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": null, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/x86/libopencv_java4.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": true, "severity": "info", "description": "This shared object has a stack canary value added to the stack so that it will be overwritten by a stack buffer that overflows the return address. This allows detection of overflows by verifying the integrity of the canary before function return."}, "relocation_readonly": {"relro": "Full RELRO", "severity": "info", "description": "This shared object has full RELRO enabled. RELRO ensures that the GOT cannot be overwritten in vulnerable ELF binaries. In Full RELRO, the entire GOT (.got and .got.plt both) is marked as read-only."}, "rpath": {"rpath": null, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": null, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/arm64-v8a/libprocess.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": true, "severity": "info", "description": "This shared object has a stack canary value added to the stack so that it will be overwritten by a stack buffer that overflows the return address. This allows detection of overflows by verifying the integrity of the canary before function return."}, "relocation_readonly": {"relro": "Partial RELRO", "severity": "warning", "description": "This shared object has partial RELRO enabled. RELRO ensures that the GOT cannot be overwritten in vulnerable ELF binaries. In partial RELRO, the non-PLT part of the GOT section is read only but .got.plt is still writeable. Use the option -z,relro,-z,now to enable full RELRO."}, "rpath": {"rpath": null, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": null, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/arm64-v8a/libopencv_java4.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": true, "severity": "info", "description": "This shared object has a stack canary value added to the stack so that it will be overwritten by a stack buffer that overflows the return address. This allows detection of overflows by verifying the integrity of the canary before function return."}, "relocation_readonly": {"relro": "Partial RELRO", "severity": "warning", "description": "This shared object has partial RELRO enabled. RELRO ensures that the GOT cannot be overwritten in vulnerable ELF binaries. In partial RELRO, the non-PLT part of the GOT section is read only but .got.plt is still writeable. Use the option -z,relro,-z,now to enable full RELRO."}, "rpath": {"rpath": null, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": null, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/x86_64/libprocess.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": true, "severity": "info", "description": "This shared object has a stack canary value added to the stack so that it will be overwritten by a stack buffer that overflows the return address. This allows detection of overflows by verifying the integrity of the canary before function return."}, "relocation_readonly": {"relro": "Full RELRO", "severity": "info", "description": "This shared object has full RELRO enabled. RELRO ensures that the GOT cannot be overwritten in vulnerable ELF binaries. In Full RELRO, the entire GOT (.got and .got.plt both) is marked as read-only."}, "rpath": {"rpath": null, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": null, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}, {"name": "lib/x86_64/libopencv_java4.so", "nx": {"is_nx": true, "severity": "info", "description": "The shared object has NX bit set. This marks a memory page non-executable making attacker injected shellcode non-executable."}, "stack_canary": {"has_canary": true, "severity": "info", "description": "This shared object has a stack canary value added to the stack so that it will be overwritten by a stack buffer that overflows the return address. This allows detection of overflows by verifying the integrity of the canary before function return."}, "relocation_readonly": {"relro": "Full RELRO", "severity": "info", "description": "This shared object has full RELRO enabled. RELRO ensures that the GOT cannot be overwritten in vulnerable ELF binaries. In Full RELRO, the entire GOT (.got and .got.plt both) is marked as read-only."}, "rpath": {"rpath": null, "severity": "info", "description": "The shared object does not have run-time search path or RPATH set."}, "runpath": {"runpath": null, "severity": "info", "description": "The shared object does not have RUNPATH set."}, "fortify": {"is_fortified": false, "severity": "warning", "description": "The shared object does not have any fortified functions. Fortified functions provides buffer overflow checks against glibc's commons insecure functions like strcpy, gets etc. Use the compiler option -D_FORTIFY_SOURCE=2 to fortify functions."}, "symbol": {"is_stripped": true, "severity": "info", "description": "Symbols are stripped."}}], "file_analysis": [], "android_api": {"api_native_code": {"files": {"com/formfun/FindMazesAndBalls.java": "17", "org/opencv/android/StaticHelper.java": "50,28", "com/formfun/graphics/GraphicThread.java": "36", "com/formfun/MainActivity.java": "100", "org/opencv/android/AsyncServiceHelper.java": "302"}, "metadata": {"description": "Loading Native Code (Shared Library)", "severity": "info"}}, "api_get_system_service": {"files": {"com/formfun/MainActivity.java": "128"}, "metadata": {"description": "Get System Service", "severity": "info"}}, "api_start_activity": {"files": {"org/opencv/android/AsyncServiceHelper.java": "210"}, "metadata": {"description": "Starting Activity", "severity": "info"}}, "api_start_service": {"files": {"org/opencv/android/AsyncServiceHelper.java": "98,173,90,85,41,195,138,109,156,161,192,67"}, "metadata": {"description": "Starting Service", "severity": "info"}}, "api_ipc": {"files": {"org/opencv/android/AsyncServiceHelper.java": "26,208,190,190,8,5,208", "org/opencv/engine/OpenCVEngineInterface.java": "93,88,30,86,42,4"}, "metadata": {"description": "Inter Process Communication", "severity": "info"}}}, "code_analysis": {"android_logging": {"files": {"org/opencv/android/FpsMeter.java": "48,58", "org/opencv/android/JavaCameraView.java": "254,232,178,180,147,64,90,95,162,186,239,78,235,322,59,217,182,222,68,73,133", "com/formfun/graphics/Createbox2d.java": "36", "org/jbox2d/profile/BasicPerformanceTest.java": "61,65", "org/opencv/android/StaticHelper.java": "54,43,39,48,26,36,51,68,34,31,33,62", "com/formfun/graphics/GraphicSurface.java": "48,43,61", "com/formfun/graphics/GraphicThread.java": "90", "com/formfun/MainActivity.java": "77,80,240,92,228,54,237", "org/opencv/android/BaseLoaderCallback.java": "52,38,24,56", "org/opencv/android/AsyncServiceHelper.java": "55,136,238,243,53,153,159,65,87,99,171,155,250,40,68,252,66,162,279,32,258,219,58,315,150,129,145,62,42,46,88,91,97,174,149,287,172,29,326,242,49,106,79,83,116,139,303,286,234,264,241,306,317,148,96,84,107,110,39,160,251,284,89,108,244,300,52,137,134", "org/opencv/android/CameraBridgeViewBase.java": "334,340,275,295,333,163,106,332,151,239,253"}, "metadata": {"cvss": 7.5, "cwe": "CWE-532: Insertion of Sensitive Information into Log File", "owasp-mobile": "", "masvs": "MSTG-STORAGE-3", "ref": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#logs", "description": "The App logs information. Sensitive information should never be logged.", "severity": "info"}}, "android_insecure_random": {"files": {"org/jbox2d/common/MathUtils.java": "3"}, "metadata": {"cvss": 7.5, "cwe": "CWE-330: Use of Insufficiently Random Values", "owasp-mobile": "M5: Insufficient Cryptography", "ref": "https://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#weak-random-number-generators", "masvs": "MSTG-CRYPTO-6", "description": "The App uses an insecure Random Number Generator.", "severity": "warning"}}}, "niap_analysis": {"FCS_RBG_EXT.1.1": {"choice": "The application use no DRBG functionality for its cryptographic operations.", "description": "Random Bit Generation Services", "class": "Security Functional Requirements"}, "FCS_STO_EXT.1.1": {"choice": "The application does not store any credentials to non-volatile memory.", "description": "Storage of Credentials", "class": "Security Functional Requirements"}, "FCS_CKM_EXT.1.1": {"choice": "The application generate no asymmetric cryptographic keys.", "description": "Cryptographic Key Generation Services", "class": "Security Functional Requirements"}, "FDP_DEC_EXT.1.1": {"choice": "The application has access to ['camera'].", "description": "Access to Platform Resources", "class": "Security Functional Requirements"}, "FDP_DEC_EXT.1.2": {"choice": "The application has access to no sensitive information repositories.", "description": "Access to Platform Resources", "class": "Security Functional Requirements"}, "FDP_NET_EXT.1.1": {"choice": "The application has no network communications.", "description": "Network Communications", "class": "Security Functional Requirements"}, "FDP_DAR_EXT.1.1": {"choice": "The application implement functionality to encrypt sensitive data in non-volatile memory.", "description": "Encryption Of Sensitive Application Data", "class": "Security Functional Requirements"}, "FMT_MEC_EXT.1.1": {"choice": "The application invoke the mechanisms recommended by the platform vendor for storing and setting configuration options.", "description": "Supported Configuration Mechanism", "class": "Security Functional Requirements"}, "FTP_DIT_EXT.1.1": {"choice": "The application does encrypt some transmitted data with HTTPS/TLS/SSH between itself and another trusted IT product.", "description": "Protection of Data in Transit", "class": "Security Functional Requirements"}}, "urls": [{"urls": ["https://github.com/opencv/opencv/issues/14058"], "path": "lib/armeabi-v7a/libopencv_java4.so"}, {"urls": ["https://github.com/opencv/opencv/issues/14058"], "path": "lib/x86/libopencv_java4.so"}, {"urls": ["https://github.com/opencv/opencv/issues/14058"], "path": "lib/arm64-v8a/libopencv_java4.so"}, {"urls": ["https://github.com/opencv/opencv/issues/14058"], "path": "lib/x86_64/libopencv_java4.so"}], "domains": {"github.com": {"bad": "no", "geolocation": {"ip": "140.82.121.4", "country_short": "US", "country_long": "United States of America", "region": "California", "city": "San Francisco", "latitude": "37.775700", "longitude": "-122.395203"}}}, "emails": [], "strings": ["cvInitLineIterator", "H]OJPKOLNKNJOHPGSFVFYGZIZKYMWOTQPSMUKWI[ VFXGYIYKXMVOPS JYKXMXRZUZWYXW MXR[U[WZXW", "void cv::cpu_baseline::bilateralFilterInvoker_8u(cv::Mat &, const cv::Mat &, int, int, int *, float *, float *)", "Parallel", "Unsupported depth! Only CV_8U and CV_16U are supported for NORM_L1", "Can not write scanlines to a tiled image", "photometric == PHOTOMETRIC_LOGLUV", "LYVMVNWNWMVLTKRKPLOMNPNUOWQXTXVWWUWSVQTPQPNR RKPMOPOUPWQX TXUWVUVSUQTP", "imgproc::distanceTransform_10()", "ReadProtoFromBinaryBuffer(data, len, param)", "sums.isContinuous()", "virtual void cv::cpu_baseline::RowFilter<float, double, cv::cpu_baseline::RowNoVec>::operator()(const uchar *, uchar *, int, int) [ST = float, DT = double, VecOp = cv::cpu_baseline::RowNoVec]", "An empty key", "E_^F\\GXHUHQGOFMFKGJIJKLMNMPLQJQHOF ^FF[ XTVTTUSWSYU[W[YZZXZVXT", "\"abc_shareactionprovider_share_with\" : \"Dela med\"", "setTrainTestSplitRatio", "LXLLLXXXXLLL", "imgproc::line_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_116SymmColumnFilterINS2_4CastIisEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "output_batch_offset", "!base.empty()", "imgcodecs::imencode_10()", "videoio::read_10()", "self_idx >= 0", "backgroundRatio", "N2cv10opt_SSE4_112ColumnFilterINS0_13FixedPtCastExIihEENS0_11ColumnNoVecEEE", "invert", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_8Gray2RGBItEEEE", "%s%4ld", "UiTDS!R", "forward", "__itt_region_begin", "getUMatVector", "PSSRRSQSPRPQQPRPSQSSRUQV QQQRRRRQQQ", "\"abc_action_menu_overflow_description\" : \"Aukera gehiago\"", "NSt6__ndk19__num_getIwEE", "VersionYear", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/eltwise_layer.cpp", "\"abc_action_bar_home_subtitle_description_format\" : \"%1$s, %2$s \u2013 %3$s\"", "(FF)V", "CL_INVALID_DEVICE_TYPE", "LYXKLX YKMX QKONPKYK LXUXVUTX", "void cv::hal::max16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, void *)", "total(srcShape, srcRange.start, srcRange.end) == maskTotal", "photo::decolor_10()", "imgproc::HuMoments_10()", "N6google8protobuf8internal16MapFieldAccessorE", "src1.size == dst.size && src1.type() == dst.type()", "Invalid line order in image header.", "imgproc::edgeDst_11()", "ushort2", "GetUInt64", "\"abc_searchview_description_clear\" : \"Hapus kueri\"", "cvPerspectiveTransform", "CHECK failed: (temp[size-1]) == ('5'): ", "DataType", "LYONRKRQ VNSKSQ RQPROTOUPWRXSXUWVUVTURSQ RTRUSUSTRT", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_19ColumnSumIdtEENS_9allocatorIS5_EEEE", "indices", "cvCloneImage", "MXSMRNROSPTPUOUNTMSM SNSOTOTNSN Q[P[OZOYPXQXRYR[Q]P^N_ PYPZQZQYPY Q[Q\\P^", "NSt6__ndk114default_deleteIN2cv23HomographyDecomposition21HomographyDecompInriaEEE", "N3Imf14TypedAttributeIN5Imath4Vec2IdEEEE", "\"abc_searchview_description_voice\" : \"\u03a6\u03c9\u03bd\u03b7\u03c4\u03b9\u03ba\u03ae \u03b1\u03bd\u03b1\u03b6\u03ae\u03c4\u03b7\u03c3\u03b7\"", "imgproc::cornerSubPix_10()", "WARNING", "This shouldn't be called if all the sizes are equal.", "stream ", "?TIFFInitSGILog", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ElementWiseLayerINS2_12ReLU6FunctorEEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "ulong2", "N2cv16ReplacementDFT2DE", "quality", "29TegraCvtColor_bgr2hsv_Invoker", "isContinuous", "H]QMONMPLRKUKXLZN[P[RZUWWTYPZM QMSMTNUPWXXZY[Z[", "\" was listed twice.", "PixelYDimension", "\"search_menu_title\" : \"Hledat\"", "\"abc_action_mode_done\" : \"\u05d1\u05d5\u05e6\u05e2\"", "_findAndRemoveEntryFromAllocatedList(entry, buffer)", "std::bad_alloc", "void cv::hal::sub32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, void *)", "bad background index (internal error)", "imgproc::Scharr_10()", "Custom kernel is not set", "N2cv7details10Chessboard5BoardE", "$0$1$2 $3 = $4", "\"abc_action_bar_home_description\" : \"\u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u043d\u0430 \u0433\u043e\u043b\u043e\u0432\u043d\u0438\u0439\"", "KYRKLX RMWX RKXX MWVW LXXX", "N17opencv_tensorflow11TensorProtoE", "\"abc_action_bar_home_description\" : \"\u0bae\u0bc1\u0b95\u0baa\u0bcd\u0baa\u0bbf\u0bb1\u0bcd\u0b95\u0bc1 \u0bb5\u0bb4\u0bbf\u0b9a\u0bc6\u0bb2\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\"", "k < 16", "Value out of range for uint32 option \"", "invalid embedded Abstract ICC profile", "N7cvflann5IndexINS_10HammingLUTEEE", "N2cv8opt_AVX212_GLOBAL__N_16RowSumIfdEE", "Invalid character", "F^JJQJUKWLYNZQZSYVWXUYQZJZ QFQ^", "Video I/O: plugin is incompatible, missing init function: '", "cov_mat_type", "virtual void cv::dnn::BlankLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "video::create_10()", "N2cv3dnn14dnn4_v2019012212BufferStreamE", "Unknown backend identifier", "\"abc_searchview_description_query\" : \"S\u00f6kfr\u00e5ga\"", "N3Iex6ArgExcE", "createMorphologyFilter", "(!desc.rows || (desc.type() == descriptorType()))", "box2i", "MWNPOPPQPSOV PSQQRPTPUQURTTTUUVVV", "features2d::getQualityLevel_10()", "objdetect::detectMultiScale2_14()", "video::set_1measurementMatrix_10()", "RST%d", "calib3d::Rodrigues_11()", "void cv::opt_AVX2::cvt32f16s(const float *, size_t, uchar *, size_t, short *, size_t, cv::Size, void *)", "tilewidth", "cvPyrDown", "\"abc_action_mode_done\" : \"Selesai\"", "preview", "Expect a decimal number, got: ", "virtual void cv::opt_SSE4_1::(anonymous namespace)::SqrRowSum<float, double>::operator()(const uchar *, uchar *, int, int) [T = float, ST = double]", "!flow_v.empty() && flow_v.depth() == CV_32F && flow_v.channels() == 1", "Model", "NSt6__ndk18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE", "void cv::hal::opt_SSE4_1::addWeighted16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, const double *)", "google.protobuf.", "\"abc_action_bar_up_description\" : \"\u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u0432\u0432\u0435\u0440\u0445\"", "video::setNSamples_10()", "N6google8protobuf8internal20RepeatedPtrFieldBaseE", "virtual bool cv::FeatureEvaluator::setImage(cv::InputArray, const std::vector<float> &)", "Non-zero skew is not supported by the function", "\"abc_searchview_description_voice\" : \"\u12e8\u12f5\u121d\u1345 \u134d\u1208\u130b\"", "cv::Mat cv::findHomography(cv::InputArray, cv::InputArray, int, double, cv::OutputArray, const int, const double)", "Feature_Description", "__itt_metadata_add_with_scope", "loc_pred_transposed", "src.size() > 0", "\"abc_action_menu_overflow_description\" : \"Th\u00eam t\u00f9y ch\u1ecdn\"", "Sorry, can not handle contiguous data with %s=%d, and %s=%d and Bits/Sample=%d", "feat_stride", "thread-local initialization routine for ", "I]NONPMPMONNPMTMVNWOXQXXYZZ[ WOWXXZZ[[[ WQVRPSMTLVLXMZP[S[UZWX PSNTMVMXNZP[", "o_labels", "NSt6__ndk115basic_streambufIcNS_11char_traitsIcEEEE", "N7cvflann7anyimpl21typed_base_any_policyIPPNS_11KDTreeIndexINS_2L2IfEEE4NodeEEE", "\"abc_action_bar_up_description\" : \"Navigate up\"", "Unknown/unsupported array type", "NSt6__ndk120__shared_ptr_pointerIPN2cv13HaarEvaluatorENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "TIFFWriteEncodedTile", "OpenCV was build without OpenGL support", "plugin_api_->Writer_write", "exposure_weight", "ml::trainEM_11()", "N7cvflann7anyimpl21typed_base_any_policyIiEE", "N2cv3dnn14dnn4_v201901229BNLLLayerE", "N2cv8opt_AVX28Filter2DItNS0_4CastIddEENS0_11FilterNoVecEEE", "ContrastiveLoss", "N2cv3dnn15RegionLayerImplE", "CL_MEM_COPY_OVERLAP", "\"abc_toolbar_collapse_description\" : \"Recolher\"", "type == CV_32S || type == CV_32F || type == CV_64F", "video::createBackgroundSubtractorKNN_12()", "void cv::cpu_baseline::cvt64s(const int64 *, size_t, uchar *, size_t, int64 *, size_t, cv::Size, void *)", "\"abc_searchview_description_query\" : \"Query di ricerca\"", "out.size[0] == inp.size[order[0]] && out.size[1] == inp.size[order[1]] && out.size[2] == inp.size[order[2]] && out.size[3] == inp.size[order[3]]", "N3Iex9EspipeExcE", "__cxa_guard_abort failed to release mutex", "core::randn_10()", "png_image_write_: out of memory", "E`WNVLTKQKOLNMMPMSNUPVSVUUVS QKOMNPNSOUPV WKVSVUXVZV\\T]Q]O\\L[JYHWGTFQFNGLHJJILHOHRIUJWLYNZQ[T[WZYYZX XKWSWUXV", "incorrect count for field \"%s\", expected %d, got %d", "/home/vagrant/build/srclib/opencv/modules/calib3d/src/five-point.cpp", "virtual void cv::cpu_baseline::SymmColumnFilter<cv::cpu_baseline::Cast<int, short>, cv::cpu_baseline::SymmColumnSmallVec_32s16s>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::Cast<int, short>, VecOp = cv::cpu_baseline::SymmColumnSmallVec_32s16s]", "\"abc_toolbar_collapse_description\" : \"\u0417\u0433\u043e\u0440\u043d\u0443\u0442\u0438\"", "void cv::ml::DTreesImplForRTrees::getVotes(cv::InputArray, cv::OutputArray, int) const", "\"abc_capital_off\" : \"Aus\"", "void cv::hal::cpu_baseline::add8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int)", "features2d::setFastThreshold_10()", "features2d::setScaleFactor_10()", "e[%d][%d]=%f ", "void cv::hal::opt_AVX2::cvtTwoPlaneYUVtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "para.min_scale >= 0 && para.min_scale <= para.max_scale", "OpenCV TIFF: failed TIFFSetField(tif, TIFFTAG_PLANARCONFIG, PLANARCONFIG_CONTIG)", "src->dims <= CV_MAX_DIM", "N6google8protobuf2io19OstreamOutputStreamE", "SetData", "\"abc_searchview_description_voice\" : \"Tafuta kwa kutamka\"", "minValue <= maxValue", "inv_scale_x > 0", "perspectiveTransform", "training_params", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_11Gray2RGB5x5EEE", "virtual void cv::cpu_baseline::ColumnFilter<cv::cpu_baseline::Cast<double, short>, cv::cpu_baseline::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::Cast<double, short>, VecOp = cv::cpu_baseline::ColumnNoVec]", "R.type() == CV_64FC1 && R.rows >= 3 && R.cols >= 3", "N3Iex9ElnrngExcE", "__itt_model_record_allocation", "double cv::norm(const cv::SparseMat &, int)", "The signatures must be 32fC1", "virtual void cv::opt_AVX2::(anonymous namespace)::RowSum<unsigned short, double>::operator()(const uchar *, uchar *, int, int) [T = unsigned short, ST = double]", "\"abc_searchview_description_voice\" : \"Pretra\u017eivanje glasom\"", "KZTKQ\\ UKP\\ QONPMRMUNWQXTXWWXUXRWPTOQO QOOPNRNUOWQX TXVWWUWRVPTO", "\"abc_action_mode_done\" : \"\u0d2a\u0d42\u0d7c\u0d24\u0d4d\u0d24\u0d3f\u0d2f\u0d3e\u0d15\u0d4d\u0d15\u0d3f\"", "w.type() == u.type() && u.type() == vt.type() && u.data && vt.data && w.data", "cvStartWindowThread", "cvSeqSort", "N2cv3hal8opt_AVX212_GLOBAL__N_119YUV422toRGB8InvokerILi0ELi0ELi1ELi3EEE", "dims == 2 || dims == 4", "isSubDirectory(): base: ", "type == CV_32FC3 || type == CV_32FC4", "\"abc_capital_off\" : \"\u0e9b\u0eb4\u0e94\"", "_dst.channels() == _src.channels()", "cvThreshold", "ml::setTermCriteria_10()", "Invalid sCAL height ignored", "virtual void cv::opt_AVX2::RowFilter<short, double, cv::opt_AVX2::RowNoVec>::operator()(const uchar *, uchar *, int, int) [ST = short, DT = double, VecOp = cv::opt_AVX2::RowNoVec]", "N2cv8opt_AVX219resizeNNInvokerAVX2E", "void cv::hal::cpu_baseline::div8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, const double *)", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_19HSV2RGB_fEEE", "Can not read TIFF directory", "!fnodes.empty()", "N2cv12cpu_baseline12ColumnFilterINS0_4CastIfsEENS0_20SymmColumnVec_32f16sEEE", "NSt6__ndk19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE", "Bad CvMat header", "pt0.x % cacheStride.width == 0 && pt0.y % cacheStride.height == 0", "png_set_filter: UP/AVG/PAETH cannot be added after start", "patchNaNs", "masks.total() == (size_t)nimages", "dw_max", "_HINT", "NULL VP8Io parameter in VP8Decode().", "N2cv10opt_SSE4_112ColumnFilterINS0_4CastIfsEENS0_20SymmColumnVec_32f16sEEE", "Don't lookup extension types if they aren't present (1). ", "getParameter", "void cv::hal::cpu_baseline::cvtBGRtoTwoPlaneYUV(const uchar *, size_t, uchar *, uchar *, size_t, int, int, int, bool, int)", "$0oneof $1 {", "\"abc_searchview_description_submit\" : \"\uac80\uc0c9\uc5b4 \ubcf4\ub0b4\uae30\"", "\"abc_searchview_description_submit\" : \"Slanje upita\"", "QSRQQRRSSRRQ", "void cv::watershed(cv::InputArray, cv::InputOutputArray)", "N2cv10opt_SSE4_19RowFilterIhiNS0_21SymmRowSmallVec_8u32sEEE", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/cornersubpix.cpp", "Unknown parameter weight_filler for layer type ", "int cv::Subdiv2D::findNearest(cv::Point2f, cv::Point2f *)", "ml::setRegressionAccuracy_10()", "GetUInt32", "cvPtrND", "\"abc_searchview_description_submit\" : \"\u10db\u10dd\u10d7\u10ee\u10dd\u10d5\u10dc\u10d8\u10e1 \u10d2\u10d0\u10d3\u10d0\u10d2\u10d6\u10d0\u10d5\u10dc\u10d0\"", "AcRAPCMDJDGCEABGAKAPBTDXG\\L`Rc RATCWDZD]C_AbGcKcPbT`X]\\X`Rc BHbH", "static Ptr<cv::dnn::dnn4_v20190122::Layer> cv::dnn::dnn4_v20190122::LayerFactory::createLayerInstance(const cv::String &, cv::dnn::dnn4_v20190122::LayerParams &)", "static void EllipticKeyPoint::convert(const std::vector<EllipticKeyPoint> &, std::vector<KeyPoint> &)", "\"abc_action_bar_up_description\" : \"G\u00e5 opp\"", "\"abc_action_menu_overflow_description\" : \"Wi\u0119cej opcji\"", "MWTMQY RPPQOSPURVSVUUVSUQSPRP", "Unknown APP14 marker (not Adobe), length %u", "Both input images must have the same size", "brow2", "dCos_HA", "void cv::hal::opt_AVX2::absdiff64f(const double *, size_t, const double *, size_t, double *, size_t, int, int)", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi2EEEij7DistAbsiE", "unable to seek at end of file", "Cannot determine size of unknown tag type %d", "calcValue", "written_len <= (int)buffer.size()", "__itt_counter_inc_delta", "imgproc::rectangle_14()", "ReLU-name", "VALID", "F^FY^K", "\"abc_shareactionprovider_share_with\" : \"\u5206\u4eab\u5c0d\u8c61\"", "\"abc_capital_on\" : \"ATIVAR\"", "nu < MAX_ARRS && m.u && m.u->urefcount > 0", "inputs.size() > 0", "putBytes", "m.size[0] == 1", "KXMQNPOPPQPUQVSVTUUSVP", "maxWeakCount", "\"abc_searchview_description_clear\" : \"Hreinsa fyrirspurn\"", "\"abc_capital_on\" : \"\u0395\u039d\u0395\u03a1\u0393\u039f\u03a0\u039f\u0399\u0397\u03a3\u0397\"", "MYWFUFSGRJR[ OMVM", "MapKey::type MapKey is not initialized. ", "Quantizing to %d = %d*%d*%d colors", "calib3d::composeRT_12()", "G]JXK[O[MWKSJPJLKIMGPFTFWGYIZLZPYSWWU[Y[ZX MWLTKPKLLINGPF TFVGXIYLYPXTWW KZNZ VZYZ", "\"abc_search_hint\" : \"\u0e8a\u0ead\u0e81\u0eab\u0eb2\"", "video::buildOpticalFlowPyramid_10()", "center_size", "strings::Substitute format string invalid: asked for \"$", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/reorg_layer.cpp", "N3Iex15EpfnosupportExcE", "\"abc_capital_on\" : \"\u0a9a\u0abe\u0ab2\u0ac1\"", "Homogeneous coordinates are not supported", "N3Imf14TypedAttributeIN5Imath8Matrix44IdEEEE", "average.type() == CV_32FC1", "\"abc_activitychooserview_choose_application\" : \"Wybierz aplikacj\u0119\"", "\"abc_activity_chooser_view_see_all\" : \"\u0411\u0430\u0440\u043b\u044b\u0493\u044b\u043d \u043a\u04e9\u0440\u0443\"", "images[j].channels() == 1", "void cv::hal::fastAtan64f(const double *, const double *, double *, int, bool)", "J.isContinuous() && J.cols == 6", "Out of Memory", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_114MorphRowFilterINS3_5MinOpIhEENS3_11MorphRowVecINS3_4VMinINS1_8hal_AVX210v_uint8x32EEEEEEENS_9allocatorISD_EEEE", "int cv::opt_AVX2::RowVec_16s32f::operator()(const uchar *, uchar *, int, int) const", "Invalid escape sequence in string literal.", "\"abc_activitychooserview_choose_application\" : \"\u049a\u043e\u043b\u0434\u0430\u043d\u0431\u0430\u043d\u044b \u0442\u0430\u04a3\u0434\u0430\u0443\"", "static void cv::KeyPoint::convert(const std::vector<Point2f> &, std::vector<KeyPoint> &, float, float, int, int)", "IZYFWHUKSPPYN] YMWOTPQPOONMNKOIQGUFYFWIVKSTQXPZN]M^K_J^J\\KZMXOWRVVU", "DILATION_H", "N6google8protobuf12OneofOptionsE", "27FastNlMeansDenoisingInvokerItxy7DistAbsiE", "MXWKXLXKVKTLSNPYO[N\\ VKULTNQYP[N\\L\\L[M\\ POVO", "N2cv8opt_AVX221SymmColumnSmallFilterINS0_4CastIffEENS0_22SymmColumnSmallVec_32fEEE", "cvtColorYUV2Gray_ch", "calcScale", "src.size == dst.size && dst.type() == CV_8UC(src.channels())", "PURPRQSQSPRP RURVSVSURU", "cvGetCentralMoment", "png_image_write_to_memory: incorrect PNG_IMAGE_VERSION", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_19ColumnSumIidEENS_9allocatorIS5_EEEE", "Merging Deflate codec-specific tags failed", "MWUQSPRPPQOSPURVSVUU OSSS", "N2cv12MatOp_InvertE", "Cannot update preview image pixels. File \"", "F_RIRZSZ RISISZ JQ[Q[R JQJR[R", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212ColumnFilterINS2_4CastIftEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "E_IM[M IR[R IW[W K[YI", "N2cv3hal12cpu_baseline12_GLOBAL__N_119YUV422toRGB8InvokerILi0ELi0ELi1ELi3EEE", "operator<", "for chopped \"StripByteCounts\" array", "The storage is not opened", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112ColumnFilterINS2_4CastIfhEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "SVM model data is invalid, check sv_count, var_* and class_count tags", "TileDepth", "NSt6__ndk114default_deleteIN2cv8opt_AVX230FAST_t_patternSize16_AVX2_ImplEEE", "calib3d::setTextureThreshold_10()", "wrong mask type", "NULL destination", "\"abc_searchview_description_query\" : \"Hakulauseke\"", "N2cv8IBackendE", "N2cv2ml19DTreesImplForRTreesE", "@AN2cv5BRISKE", "NSt6__ndk115__time_get_tempIcEE", "Mat::n_1submat_1ranges()", "BatchNorm-name", "Unknown error %d", "imgproc::arrowedLine_14()", "N3Iex9EchildExcE", "void cv::cpu_baseline::cvt32s32f(const int *, size_t, uchar *, size_t, float *, size_t, cv::Size, void *)", "blockSize % 2 == 1 && blockSize > 1", "minDisparity", "\"abc_action_mode_done\" : \"U krye!\"", "\"abc_activity_chooser_view_see_all\" : \"Visualizza tutte\"", "\"abc_action_bar_up_description\" : \"Vai in alto\"", "\"status_bar_notification_info_overflow\" : \"\u09ef\u09ef\u09ef+\"", "!src.empty()", "org.opencv.photo", "GpuMat", "Unsupported video format: %d", "int cv::opt_AVX2::FilterVec_32f::operator()(const uchar **, uchar *, int) const", "void cv::convertMaps(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, int, bool)", "v.type() == type", "\" is specified multiple times.", "N2cv3hal8opt_AVX212_GLOBAL__N_120YUV420sp2RGB8InvokerILi0ELi0ELi3EEE", "Merging CCITT Fax 3 codec-specific tags failed", "cvRodrigues2", "virtual void cv::opt_AVX2::(anonymous namespace)::SqrRowSum<double, double>::operator()(const uchar *, uchar *, int, int) [T = double, ST = double]", "InputArray:", "dnn::readNet_10()", "inputs.size() == 1", "__itt_model_observe_uses", "The flags argument must be one of SOLVEPNP_ITERATIVE, SOLVEPNP_P3P, SOLVEPNP_EPNP or SOLVEPNP_DLS", "objdetect::detectMultiScale2_10()", "?void cv::edgePreservingFilter(cv::InputArray, cv::OutputArray, int, float, float)", "N2cv19FMEstimatorCallbackE", "): failed TIFFSetField(tif, TIFFTAG_SAMPLEFORMAT, depth >= CV_32F ? SAMPLEFORMAT_IEEEFP : SAMPLEFORMAT_UINT)", "Invalid weak dependency index.", "The fundamental matrix must be a 3x3 matrix", "accum_scale", "\"abc_action_mode_done\" : \"\u092a\u0942\u0930\u094d\u0923 \u091d\u093e\u0932\u0947\"", "N2cv25RANSACPointSetRegistratorE", "class_count", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::mRGBA2RGBA<uchar> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::mRGBA2RGBA<uchar>]", "opencv_tensorflow.OpDef.AttrDef.name", "hdf5_data", "calib3d::composeRT_18()", "N3Imf14TypedAttributeIiEE", "arithm_ipp_cmp16u", "features2d::setThreshold_10()", "InputArray Datatype %d is not supported.", "_lines2.depth() == CV_32F || _lines2.depth() == CV_32S", "minValue.total()", "BrightnessValue", "N2cv3hal8opt_AVX212_GLOBAL__N_119YUV420p2RGB8InvokerILi0ELi3EEE", "NSt6__ndk115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "ml::getWeakCount_10()", "\"abc_action_bar_up_description\" : \"Nenda juu\"", "sample_fraction", "core::clear_10()", "KZQKOLNMMPMSNVOWQXTXVWWVXSXPWMVLTKQK QKOMNPNSOVQX TXVVWSWPVMTK QOQT TOTT QQTQ QRTR", "N6google8protobuf8internal20RepeatedFieldWrapperIyEE", "%s data at scanline %lu (%llu != %llu)", "\"abc_searchview_description_clear\" : \"\u179f\u1798\u17d2\u17a2\u17b6\u178f\u200b\u179f\u17c6\u178e\u17bd\u179a\"", "void cv::inRange(cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray)", "sample_size*batch_size == outBlob.total()", "clipObjects", "thetas.rows > 0", "G[IOLORW KORX [FRX", "decode", "void cv::hal::opt_AVX2::cvtBGR5x5toBGR(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "could not open directory: %s", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_117MorphColumnFilterINS3_5MinOpIdEENS3_16MorphColumnNoVecEEENS_9allocatorIS8_EEEE", "\"abc_action_menu_overflow_description\" : \"Weitere Optionen\"", "Bogus marker length", "start", "axes.getIntValue(axes.size()-1) <= dims.size()", "H]QMQ[ RMR[ LMKRKMUM RTVTYUZWZXYZV[N[ VTXUYWYXXZV[", "cvCreateChildMemStorage", "cn <= 4 && func != 0", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml9BoostImplENS_9allocatorIS3_EEEE", "find4QuadCornerSubpix", "CHECK failed: field != NULL: ", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_19RowFilterIhiNS2_12RowVec_8u32sEEENS_9allocatorIS5_EEEE", "cvGraphVtxDegree", "void cv::opt_AVX2::cvt32s8s(const int *, size_t, uchar *, size_t, schar *, size_t, cv::Size, void *)", "\"abc_searchview_description_search\" : \"H\u013eada\u0165\"", "void cv::hal::cpu_baseline::cvtThreePlaneYUVtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "src.channels() == 1 && src.dims == 2", "\"abc_activitychooserview_choose_application\" : \"Ch\u1ecdn m\u1ed9t \u1ee9ng d\u1ee5ng\"", "void cv::hal::cpu_baseline::cmp8s(const schar *, size_t, const schar *, size_t, uchar *, size_t, int, int, int)", "data == 0", "core::solvePoly_11()", "Get_MSURF_Upright_Descriptor_64", "c.factors[0] == c.factors[c.nf-1]", "getDescriptorSize", "void cv::hal::opt_AVX2::recip8s(const schar *, size_t, schar *, size_t, int, int, const double *)", "total >= 0 && (depth == CV_32F || depth == CV_32S)", "N2cv27ipp_bilateralFilterParallelE", "Mat::n_1create__JDDI()", "H]KFRV LFSV ZFSVQYPZN[M[LZLYMXNYMZ IFOF VF\\F", "H]YIXJYKZJZIYGWFTFQGOIMLLOKSKWLYMZO[R[UZWXXVXSWQVPTOQOOPMRLT TFRGPINLMOLSLXMZ R[TZVXWVWRVP", "opencv_tensorflow.OpDef.ArgDef.type_list_attr", "N2cv17DescriptorMatcherE", "N3Iex11EnotuniqExcE", "java/lang/Exception", "flatten", "N2cv10opt_SSE4_112_GLOBAL__N_19ColumnSumIihEE", "<cv::ml::ParamGrid::ParamGrid(double, double, double)", "N2cv10PngEncoderE", "new_stride", "ml::getC_10()", " arguments. ", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", "CALIB_CHECK_COND - Ill-conditioned matrix for input array %d", "hdr && hdr->dims == 2", "Only curves with integer coordinates are supported in case of contour slice", "NSt6__ndk114default_deleteIN2cv3dnn12MVNLayerImplEEE", "heights", "I\\XMX]W`VaTbQbOa XPVNTMQMONMPLSLUMXOZQ[T[VZXX", "\"abc_searchview_description_submit\" : \"Po\u0161iljanje poizvedbe\"", "NSt6__ndk115__codecvt_utf16IwLb0EEE", "cvGraphAddEdgeByPtr", "__float128", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_16RowSumIhdEENS_9allocatorIS5_EEEE", "vdCos", "NSt6__ndk120__shared_ptr_emplaceIN2cv11TiffDecoderENS_9allocatorIS2_EEEE", "}:i!\"4i!\"4i!\"4i!\"4i!\"4i!\"4i!\"4i!\"4i!\"4i!\"4i!\"4i!\"4i!\"4i!\"4i!\"4i!\"4", "\"abc_activity_chooser_view_see_all\" : \"Prika\u017ei sve\"", "/home/vagrant/build/srclib/opencv/modules/core/src/array.cpp", "\"abc_activity_chooser_view_see_all\" : \"\u0639\u0631\u0636 \u0627\u0644\u0643\u0644\"", "dw_min", "N2cv16ParallelLoopBodyE", "Unknown padding type: ", "void cv::hal::cpu_baseline::cvtBGRtoHSV(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool, bool, bool)", "lookModTransform", "N6google8protobuf19FileDescriptorProtoE", ") ? (", "void cv::pow(cv::InputArray, double, cv::OutputArray)", "/home/vagrant/build/srclib/opencv/modules/core/src/opengl.cpp", "power", "/home/vagrant/build/srclib/opencv/modules/core/src/split.dispatch.cpp", "void cv::hal::cpu_baseline::max8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "\"abc_searchview_description_submit\" : \"Skicka fr\u00e5ga\"", "F_SHTITLSPRSQUOXMZK[J[IZIWJRKOLMNJPHRGUFYF[G\\H]J]M\\O[PYQVQSPTQUSUXVZX[ZZ[Y]V", "Reached an unintended state: CPPTYPE_MESSAGE", "SplitLayerImpl", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/featureselect.cpp", "Sanity check on tag count failed, likely corrupt TIFF", "/home/vagrant/build/srclib/opencv/modules/core/src/lda.cpp", "imgproc::HoughLinesPointSet_10()", "calib3d::setP1_10()", "cvDFT", "Portable image format - auto (*.pnm)", "disp.size() == _3dimg.size()", "Video I/O: exception during plugin initialization: ", "global_off", "cvMinS", "setTexCoordArray", "void cv::hal::opt_AVX2::add32f(const float *, size_t, const float *, size_t, float *, size_t, int, int)", "N2cv3dnn16PoolingLayerImplE", "N2cv3hal10opt_SSE4_112_GLOBAL__N_119YUV420p2RGB8InvokerILi0ELi4EEE", "St12future_error", "motionType == MOTION_AFFINE || motionType == MOTION_HOMOGRAPHY || motionType == MOTION_EUCLIDEAN || motionType == MOTION_TRANSLATION", "virtual void cv::dnn::RNNLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "\"e\" must be followed by exponent.", "H\\LFL[ MGM[L[ LFTFWGXHYJYMXOWPTQMQ MGTGWHXJXMWOTPMP RQX[Y[ SQY[", "void cv::convertPointsHomogeneous(cv::InputArray, cv::OutputArray)", "Unknown freer parameter in png_data_freer", "NSt6__ndk120__shared_ptr_emplaceIN2cv10BmpDecoderENS_9allocatorIS2_EEEE", "N >= K", "/home/vagrant/build/srclib/opencv/modules/core/src/matrix_c.cpp", "void cv::hal::opt_AVX2::mul8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, const double *)", "void cv::AKAZEFeatures::Do_Subpixel_Refinement(std::vector<Mat> &, std::vector<KeyPoint> &)", "void cv::hal::addWeighted16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, void *)", "\"abc_capital_on\" : \"A\u00c7\"", "coeffs[i*3] >= 0 && coeffs[i*3+1] >= 0 && coeffs[i*3+2] >= 0 && softfloat(coeffs[i*3]) + softfloat(coeffs[i*3+1]) + softfloat(coeffs[i*3+2]) < softfloat(1.5f)", "J[NKNX OKOX VKVX WKWX LKYK LXQX TXYX", "CalibrateDebevec", "LXTLSLSMTMTLSKQKPLPNQPTRUS PNQOTQUSUUSW QPOROTPVSXTY OTPUSWTYT[S\\Q\\P[PZQZQ[P[", "Warning, ", "Insufficient memory for pCAL parameter", "\" is not compatible with the frame buffer's pixel type.", "void cv::blur(cv::InputArray, cv::OutputArray, cv::Size, cv::Point, int)", "MWOSTSURUQSPRPPQOSPURVTV", "void cv::opt_AVX2::cvt32f16f(const float *, size_t, uchar *, size_t, cv::float16_t *, size_t, cv::Size, void *)", "N2cv14DownhillSolverE", "AVX512CD", "image row stride too large", "DateTime", "m.size[j] == sizes[j]", "_src1.sameSize(_dst) && dcn == scn", "Specified descriptor matcher type is not supported.", "N6google8protobuf8internal29CodedOutputStreamFieldSkipperE", "InputArrayOfArrays:", "Error while parsing option value for \"", "!hasVotes || voteOutBuf_.size() == oldSize", "CHECK failed: value != NULL: ", "void cv::dnn::dnn4_v20190122::Net::connect(int, int, int, int)", "blob.total()", "photo::fastNlMeansDenoising_12()", "(x.type() == Y.type()) && (Y.type() == xi.type())", "addLayer", "__itt_model_record_deallocation", "getLocalIdx", "watershed", "N2cv10opt_SSE4_112_GLOBAL__N_16RowSumIsiEE", "void cv::setMouseCallback(const cv::String &, cv::MouseCallback, void *)", "__itt_heap_internal_access_end", "cvCornerMinEigenVal", "core::subtract_13()", "N3Imf11StdOSStreamE", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphRowFilter<cv::opt_AVX2::(anonymous namespace)::MaxOp<float>, cv::opt_AVX2::(anonymous namespace)::MorphRowVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_float32x8> > >::operator()(const uchar *, uchar *, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MaxOp<float>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphRowVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_float32x8> >]", "ml::getCVFolds_10()", "void cv::hal::cmp16s(const short *, size_t, const short *, size_t, uchar *, size_t, int, int, void *)", "CL_MEM_OBJECT_BUFFER == mem_type", "opoints.isContinuous()", "13CvVideoWriter", "void cv::CascadeClassifier::detectMultiScale(cv::InputArray, std::vector<Rect> &, double, int, int, cv::Size, cv::Size)", "imgproc::rotateEdge_10()", "I]]Z]X\\U[SXPVOSNONLOJPIQISJTLUOVSVVUXT[Q\\O]L]J", "photo::setScale_10()", "N2cv12_GLOBAL__N_124FarnebackOpticalFlowImplE", "N12_GLOBAL__N_124CLAHE_Interpolation_BodyItLi0EEE", "N10__cxxabiv117__array_type_infoE", "Orders of dimensions in Permute layer parametermust be in [0...%zu]", "N7cvflann27HierarchicalClusteringIndexINS_2L2IfEEEE", "ihi != inhi", "GetFloat", "nInputDim", "Attempt to perform a memory-mapped read on a file that is not memory mapped.", "Trace: Total events: ", "contourMoments", "void cv::dnn::dnn4_v20190122::Net::forward(cv::OutputArrayOfArrays, const cv::String &)", "_src.getObj() != _dst.getObj()", "\"abc_toolbar_collapse_description\" : \"\u0422\u0430\u0441\u0430\u043b\u0430\u0443\"", "calib3d::validateDisparity_11()", "Expected integer or identifier, got: ", "features2d::BFMatcher_12()", "N2cv12CalibrateCRFE", "Saturday", "void cv::polylines(cv::InputOutputArray, const cv::Point *const *, const int *, int, bool, const cv::Scalar &, int, int, int)", "org_x", "SetRepeatedDouble", "CL_IMAGE_FORMAT_MISMATCH", "N2cv10opt_SSE4_18Filter2DIhNS0_4CastIfhEENS0_12FilterVec_8uEEE", "Name should start with a letter or underscore", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline8Filter2DIhNS2_4CastIffEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "Extension number $0 has already been used in \"$1\" by extension \"$2\".", "points.isContinuous()", "CV_8S", "/home/vagrant/build/srclib/opencv/modules/java/generator/src/cpp/utils.cpp", "\"abc_searchview_description_voice\" : \"\u092d\u094d\u0935\u093e\u0907\u0938 \u0916\u094b\u091c\u0940\"", "Unsupported padding mode", "imgproc::HoughCircles_10()", "Currently, JSON parser does not support base64 data", "/home/vagrant/build/srclib/opencv/modules/core/src/kmeans.cpp", "Tensor", "UNKNOWN_ENUM_VALUE_%s_%d", "\"abc_searchview_description_voice\" : \"\u0413\u043b\u0430\u0441\u043e\u0432\u043d\u043e \u043f\u0440\u0435\u0431\u0430\u0440\u0443\u0432\u0430\u045a\u0435\"", "\"abc_capital_on\" : \"K\u00c4YT\u00d6SS\u00c4\"", "dnn::getStringValue_11()", "segsym", "ml::getTestResponses_10()", "N3Imf14TypedAttributeIN5Imath4Vec3IdEEEE", "src1.rows == dst.rows", "N3Iex8InputExcE", "minInertiaRatio", "m1type == CV_16SC2 || m1type == CV_32F || m1type <=0", "ml::setAlgorithmType_10()", "srcY >= this_.startY", "\"abc_searchview_description_submit\" : \"\u0625\u0631\u0633\u0627\u0644 \u0637\u0644\u0628 \u0627\u0644\u0628\u062d\u062b\"", "apply", "NSt6__ndk115time_put_bynameIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE", "MapValueRef::GetDoubleValue", "imgproc::drawMarker_10()", "N2cv3hal10opt_SSE4_112_GLOBAL__N_119YUV422toRGB8InvokerILi2ELi1ELi0ELi3EEE", "Buffer is too small", "supplied row stride too small", "void cv::cpu_baseline::cvt16f8u(const cv::float16_t *, size_t, uchar *, size_t, uchar *, size_t, cv::Size, void *)", "CL_COMPILE_PROGRAM_FAILURE", "N3Imf7OStreamE", "CropAndResize", "void cv::hal::opt_SSE4_1::min16s(const short *, size_t, const short *, size_t, short *, size_t, int, int)", "torchCAddTable", "cvLogPolar", "virtual void cv::cpu_baseline::(anonymous namespace)::RowSum<unsigned char, double>::operator()(const uchar *, uchar *, int, int) [T = unsigned char, ST = double]", "\"abc_shareactionprovider_share_with_application\" : \"\u0414\u0435\u043b\u0438 \u0441\u0430 \u0430\u043f\u043b\u0438\u043a\u0430\u0446\u0438\u0458\u043e\u043c %s\"", " +0000", "N2cv10opt_SSE4_18Filter2DIdNS0_4CastIddEENS0_11FilterNoVecEEE", "Can't BackUp() after failed Next().", "src.dims == 4", "int cv::opt_AVX2::(anonymous namespace)::MorphVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_uint8x32> >::operator()(uchar **, int, uchar *, int) const [VecUpdate = cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_uint8x32>]", "/home/vagrant/build/srclib/opencv/modules/videoio/src/container_avi.cpp", "ch.size == mat.size && ch.depth() == mat.depth() && 0 <= coi && coi < mat.channels()", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::Gray2RGB5x5>::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::Gray2RGB5x5]", "radiusMatchImpl", "Ptr<cv::BaseRowFilter> cv::cpu_baseline::getLinearRowFilter(int, int, const cv::Mat &, int, int)", "matches1to2.size() == correctMatches1to2Mask.size()", "video::setFastPyramids_10()", "Lower bound of the grid must be less then the upper one", "\"abc_action_mode_done\" : \"\u1015\u103c\u102e\u1038\u1006\u102f\u1036\u1038\u1015\u102b\u1015\u103c\u102e\"", "VIDEOIO(%s): can't create writer", "N2cv2ml3SVM6KernelE", "curr_output.data == output_slice.data", "photo::createCalibrateRobertson_10()", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphColumnFilter<cv::opt_SSE4_1::(anonymous namespace)::MaxOp<double>, cv::opt_SSE4_1::(anonymous namespace)::MorphColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MaxOp<double>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphColumnNoVec]", "virtual void cv::opt_AVX2::(anonymous namespace)::ColumnSum<unsigned short, unsigned char>::operator()(const uchar **, uchar *, int, int, int)", "shortcut", "No space in chunk cache for sPLT", "internal write transform logic error", "void cv::hconcat(const cv::Mat *, size_t, cv::OutputArray)", "int cv::dnn::dnn4_v20190122::Net::addLayerToPrev(const cv::String &, const cv::String &, cv::dnn::dnn4_v20190122::LayerParams &)", "core::sumElems_10()", "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", "Iterations flag is set and maximum number of iterations is <= 0", "TextFormat::Parser for Any supports only type.googleapis.com and type.googleprod.com, but found \"", "cn == CV_MAT_CN(bufType) && ddepth >= std::max(sdepth, CV_32S) && kernel.type() == ddepth", "N2cv8opt_AVX216SymmColumnFilterINS0_4CastIfsEENS0_20SymmColumnVec_32f16sEEE", "NWQMTV WMNV", "N2cv12cpu_baseline12ColumnFilterINS0_4CastIfhEENS0_11ColumnNoVecEEE", "unsigned char", "getData", "features2d::getThreshold_10()", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ElementWiseLayerINS2_11TanHFunctorEEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "\"abc_action_menu_overflow_description\" : \"\u041a\u04e9\u0431\u04af\u0440\u04e9\u04e9\u043a \u043c\u04af\u043c\u043a\u04af\u043d\u0447\u04af\u043b\u04af\u043a\u0442\u04e9\u0440\"", "ExposureProgram", "cv::BinaryFunc cv::getCvtScaleAbsFunc(int)", "video::set_1processNoiseCov_10()", "params.minRepeatability != 0", "{default arg#", "Gpu API call", "N2cv4impl13PluginBackendE", "X and/or y subsampling factors of \"", "N2cv2ml17ParallelCalcErrorE", "New dimension sizes are not specified", "NSt6__ndk120__shared_ptr_emplaceIN2cv18TonemapMantiukImplENS_9allocatorIS2_EEEE", "cvNormalize", "_Function.empty()==false", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX29RowFilterIhiNS2_12RowVec_8u32sEEENS_9allocatorIS5_EEEE", "core::inRange_10()", "\"abc_searchview_description_clear\" : \"Vymaza\u0165 dopyt\"", "F^KFK[ LGLZ MFM[ WFW[ XGXZ YFY[ HF\\F H[P[ T[\\[ IFKG JFKH NFMH OFMG UFWG VFWH ZFYH [FYG KZI[ KYJ[ MYN[ MZO[ WZU[ WYV[ YYZ[ YZ[[", "cvInRange", " const", "CHECK failed: (count) <= (target_->size()): ", "group_size", "NSt6__ndk111__money_getIwEE", "dnn::blobFromImage_12()", "@ffffff @", "box.size.width >= 0 && box.size.height >= 0 && thickness <= MAX_THICKNESS", "At least two classes are needed to perform a LDA. Reason: Only one class was given!", "\"abc_searchview_description_submit\" : \"\u178a\u17b6\u1780\u17cb\u200b\u200b\u200b\u179f\u17d2\u1793\u17be\u200b\u179f\u17c6\u178e\u17bd\u179a\"", "PURPRQSQSPRP SVRVRUSUSWRY", "\"abc_toolbar_collapse_description\" : \"\u09b8\u0999\u09cd\u0995\u09c1\u099a\u09bf\u09a4 \u0995\u09b0\u09c1\u09a8\"", "N2cv2ml10SVMSGDImplE", "?N2cv8colormap3HSVE", "png_do_encode_alpha: unexpected call", "OpenCV TIFF: failed TIFFSetField(tif, TIFFTAG_YRESOLUTION, (float)dpiY)", "void cv::hal::opt_AVX2::split32s(const int *, int **, int, int)", "H\\LKLJMHNGPFTFVGWHXJXLWNUQL[ LKMKMJNHPGTGVHWJWLVNTQK[ LZYZY[ K[Y[", "_roots.data == _roots0.data", "N6google8protobuf8internal8MapEntryIN17opencv_tensorflow26NodeDef_AttrEntry_DoNotUseENSt6__ndk112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSE_11ELi0EEE", "cvCreateGraphScanner", "Too large tile byte count %llu, tile %lu. Limiting to %llu", "ord_var_count", "ml::setKernel_10()", "has_weight", "m0_$@", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_16RowSumIiiEENS_9allocatorIS5_EEEE", "objdetect::detectMultiScale_12()", "wrong K type", "initialStepSize", "__itt_heap_record_memory_growth_begin", "MXPPOQOSPURVSVUUVSVQUPTPSQRSQY", "video::getGamma_10()", "void cv::cpu_baseline::cvt64f32s(const double *, size_t, uchar *, size_t, int *, size_t, cv::Size, void *)", "Principal point must be within the image", "colorFormat: %d", "\"abc_capital_on\" : \"ACTIVA\u021aI\"", "homogeneous2dualQuaternion", "cHRM White X", "bytes >= 0", "ni == ni2", "ml::getAnnealCoolingRatio_10()", "Unable to auto-correct subsampling values, likely corrupt JPEG compressed data in first strip/tile; auto-correcting skipped", "N6google8protobuf8internal23RepeatedPtrFieldWrapperINS0_7MessageEEE", "double cv::dotProd_8s(const schar *, const schar *, int)", "KXUFUHWHWFUF VFVH UGWG MQNOPMRMSNTPTSRZQ]P_NaLbJbIaI_K_KaJaJ` SNSSQZP]O_ SPRTP[O^N`Lb", "int cv::hal::normHamming(const uchar *, const uchar *, int)", "\"search_menu_title\" : \"Rechercher\"", "\"abc_searchview_description_voice\" : \"\u09ad\u09af\u09bc\u09c7\u09b8 \u0985\u09a8\u09c1\u09b8\u09a8\u09cd\u09a7\u09be\u09a8\"", "invalid array data type", "Invalid message set extension.", "__itt_counter_set_value_ex", "\"abc_shareactionprovider_share_with\" : \"\u015eununla payla\u015f\"", "void cv::hal::cpu_baseline::cvtBGRtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, int, int, bool)", "(remaining % cn) == 0", "unsupported locale for standard input", "void cv::hal::opt_SSE4_1::recip64f(const double *, size_t, double *, size_t, int, int, const double *)", "KYVBTDRGPKOPOTPYR]T`Vb", "write_mode", "cvFindFundamentalMat", "?@Cannot get \"Predictor\" tag as plugin is not configured", "isReal() || isInt() || isString()", "gemmImpl", "(varIdx.checkVector(1, CV_32S, true) > 0 && checkRange(varIdx, true, 0, 0, ninputvars)) || varIdx.checkVector(1, CV_8U, true) == ninputvars", "JZMRNPPOROSPSR QORPRRQUPWNXMXLWLVMVLW XPWQXQXPWOVOTPSRRURWSX QUQWRXTXVWWU", "Fr?xGr?<hr?", "N12opencv_caffe14NormalizedBBoxE", "void cv::hal::cpu_baseline::cmp32s(const int *, size_t, const int *, size_t, uchar *, size_t, int, int, int)", "H\\NJPISFS[", "NSt6__ndk120__shared_ptr_pointerIP12CvMemStorageN2cv14DefaultDeleterIS1_EENS_9allocatorIS1_EEEE", "GAMMA=%g", "(3DQgp(:9Wmhyd3<EPgqxg=78>M\\ec", "WebP files (*.webp)", "objectPoints should not contain empty vector of vectors of points", "NSt6__ndk114default_deleteIN2cv10OcvDftImplEEE", "FaxDcs", "virtual void cv::MatOp_AddEx::subtract(const cv::Scalar &, const cv::MatExpr &, cv::MatExpr &) const", "JZRKRY MKMPNRPSTSVRWPWK LMMKNM QMRKSM VMWKXM OVUV", "N2cv15TonemapReinhardE", "arithm_ipp_mul16s", "sepFilter2D", "virtual bool cv::ml::RTreesImpl::train(const Ptr<cv::ml::TrainData> &, int)", "video::setDelta_10()", "desc_size == dsize", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IfffEENS_15VResizeLanczos4IfffNS_4CastIffEENS_22VResizeLanczos4Vec_32fEEEEE", "write_params", "N2cv10opt_SSE4_18Filter2DIfNS0_4CastIffEENS0_13FilterVec_32fEEE", "void cv::hal::opt_AVX2::sub64f(const double *, size_t, const double *, size_t, double *, size_t, int, int)", "ReadProtoFromTextBuffer(data, len, param)", "\"abc_searchview_description_voice\" : \"\u0e04\u0e49\u0e19\u0e2b\u0e32\u0e14\u0e49\u0e27\u0e22\u0e40\u0e2a\u0e35\u0e22\u0e07\"", "FocalLengthIn35mmFilm", "LYVKVX NKVK QQVQ NXVX", "AndroidBitmap_getInfo(env, bitmap, &info) >= 0", "VIDEOIO: Updated backends priorities: ", "b.empty() || numOutput == b.total()", "\"abc_action_bar_up_description\" : \"\u1021\u1015\u1031\u102b\u103a\u101e\u102d\u102f\u1037\u101e\u103d\u102c\u1038\u101b\u1014\u103a\"", "ml::setIsClassifier_10()", "!flow.empty() && flow.depth() == CV_32F && flow.channels() == 2", "photo::stylization_12()", "photo::getMaxBits_10()", "void cv::hal::cpu_baseline::sqrt32f(const float *, float *, int)", "_rvec.total() * _rvec.channels() == 3 && (_rvec.depth() == CV_32F || _rvec.depth() == CV_64F)", "?!!!?%%%?)))?---?111?555?999?===?AAA?EEE?III?MMM?QQQ?UUU?YYY?]]]?aaa?eee?iii?mmm?qqq?uuu?yyy?}}}?", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120YUV420sp2RGB8InvokerILi2ELi0ELi4EEE", "Unexpected tile y level number coordinate.", "diagonal", "dSin_HA", "setTermCriteria", "UniqueCameraModel", "BlackLevel", "N2cv3hal12cpu_baseline12_GLOBAL__N_119YUV422toRGB8InvokerILi0ELi0ELi0ELi3EEE", "convert_%s_sat", "IPP:((ippicviCopy_16u_C1MR)((const Ipp16u *)_src, (int)sstep, (Ipp16u *)_dst, (int)dstep, ippiSize(size), mask, (int)mstep)) >= 0", "ml::getTestNormCatResponses_10()", "automatic_thresh != (CV_THRESH_OTSU | CV_THRESH_TRIANGLE)", "virtual void cv::opt_SSE4_1::(anonymous namespace)::SqrRowSum<unsigned char, double>::operator()(const uchar *, uchar *, int, int) [T = unsigned char, ST = double]", "Internal error, unknown tag 0x%x", "tensorParams.count(\"weight\")", "N12_GLOBAL__N_110CLAHE_ImplE", "KXOMO[ OSPPRNTMWM", "basic_string::assign", "nMatToBitmap caught cv::Exception: %s", "F^IOLLPN KMOORLUN QMTOWLYN VMXO[L IULRPT KSOURRUT QSTUWRYT VSXU[R", "ml::trainE_12()", "J[PKLX QKMX XKTX YKUX NKSK VK[K OQVQ JXOX RXWX", "LogL16InitState", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_114MorphRowFilterINS3_5MinOpIsEENS3_11MorphRowVecINS3_4VMinINS1_8hal_AVX210v_int16x16EEEEEEENS_9allocatorISD_EEEE", "N2cv3hal12cpu_baseline12_GLOBAL__N_119YUV422toRGB8InvokerILi0ELi0ELi0ELi4EEE", "Only compression windows >= 256 supported by PNG", " bytes).  To increase the limit (or to disable these warnings), see CodedInputStream::SetTotalBytesLimit() in google/protobuf/io/coded_stream.h.", "N2cv3dnn14dnn4_v2019012210BlankLayerE", "5/Or7L>", "scale_bias", "generic", "Successfully upgraded file specified using deprecated ", "getFeatureType", "virtual void cv::opt_AVX2::ColumnFilter<cv::opt_AVX2::Cast<float, short>, cv::opt_AVX2::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::Cast<float, short>, VecOp = cv::opt_AVX2::ColumnNoVec]", "\"abc_action_bar_up_description\" : \"\u067e\u06cc\u0645\u0627\u06cc\u0634 \u0628\u0647 \u0628\u0627\u0644\u0627\"", "src1.rows == src2.rows", "N7cvflann7anyimpl9empty_anyE", "H\\QHQ[ RHRZ SFS[ SFPINJ M[W[ QZO[ QYP[ SYT[ SZU[", "CCITT RLE/W", "No space for LZW state block", "nclusters", "i < (int)vv.size()", "G]LFL[ MFM[ IFUFXGYHZJZLYNXOUPMP UFWGXHYJYLXNWOUP I[P[ RPTQURXYYZZZ[Y TQUSWZX[Z[[Y[X", "N2cv3dnn14dnn4_v201901229ReLULayerE", "N3Iex14EinprogressExcE", "virtual void cv::cpu_baseline::SymmColumnSmallFilter<cv::cpu_baseline::Cast<int, short>, cv::cpu_baseline::SymmColumnSmallVec_32s16s>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::Cast<int, short>, VecOp = cv::cpu_baseline::SymmColumnSmallVec_32s16s]", "/home/vagrant/build/srclib/opencv/modules/videoio/src/cap_mjpeg_encoder.cpp", "channels <= max_channels", "virtual void cv::opt_SSE4_1::RowFilter<unsigned char, int, cv::opt_SSE4_1::RowVec_8u32s>::operator()(const uchar *, uchar *, int, int) [ST = unsigned char, DT = int, VecOp = cv::opt_SSE4_1::RowVec_8u32s]", "N7cvflann7anyimpl15base_any_policyE", "Sorry, LogL data must have %s=%d", "!umatWrapper.empty()", "cs[%d] = %d; ce[%d] = %d; ", "sizes", "dnn::readNetFromTorch_12()", "!_mv.fixedType() || _mv.empty() || _mv.type() == m.depth()", "tlsSlotsSize == tlsSlots.size()", "ctx.dummy_stack_top.region == NULL", "Error writing SubIFD directory link", "void cv::CascadeClassifier::detectMultiScale(cv::InputArray, std::vector<Rect> &, std::vector<int> &, double, int, int, cv::Size, cv::Size)", "backendId", "calib3d::projectPoints_10()", "E_\\O\\N[N[P]P]N\\M[MYNWPRXPZN[K[HZGXGVHTISKRPPROTMUKUITGRFPGOIOLPRQURWTZV[X[YYYX L[HZ IZHXHVITJSLR PPQSTYVZ K[JZIXIVJTKSMRRO OLPOQRSVUYWZXZYY", "\" failed. The files have different line orders.", "N2cv16GeneralizedHoughE", "\"abc_activitychooserview_choose_application\" : \"Valige rakendus\"", "void cv::compute_determinant(cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray, float)", "Miscellaneous marker 0x%02x, length %u", "cHRM Green X", "Unknown / unsupported color conversion code", "imageDy_.type() == imageDx_.type() && imageDy_.size() == imageSize_", "glob_rec", "NSt6__ndk110money_baseE", "photo::createTonemapDrago_10()", "!weightsMat.empty()", "sPLT chunk too long", " \"#%&()+,./124578:;=>????????????????????", "input.size[0] == 1", "JZMJLM XJWM PPOS UPTS MVLY XVWY MKWK MLWL PQTQ PRTR MWWW MXWX", "void cv::BackgroundSubtractorMOG2Impl::getBackgroundImage_intern(cv::OutputArray) const [T = float, CN = 1]", "OpenCV TIFF: failed TIFFSetField(tif, TIFFTAG_BITSPERSAMPLE, bitsPerChannel)", "calib3d::initCameraMatrix2D_11()", "convert_%s%s_rte", "calib3d::stereoCalibrate_12()", "unhandled critical chunk", "total", "addEdges", "N2cv10MatOp_GEMME", "@aEMCLBJBICGEFFFHGIIIKHPGTE[ GTJLLHMGOFPFRGSISKRPQTO[ QTTLVHWGYFZF\\G]I]K\\PZWZZ[[\\[^Z_YaV", "\"$0\" does not declare $1 as an extension number.", "/home/vagrant/build/srclib/opencv/modules/ml/src/boost.cpp", "\"abc_searchview_description_submit\" : \"Senda fyrirspurn\"", "MWRMQNROSNRM R[QZRYSZS\\R^Q_", "void cv::resizeWindow(const cv::String &, const cv::Size &)", "objdetect::decode_10()", "cvtColor", "index=", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_111MorphFilterINS3_5MaxOpIfEENS3_8MorphVecINS3_4VMaxINS1_8hal_AVX211v_float32x8EEEEEEENS_9allocatorISD_EEEE", "Not a TIFF or MDI file, bad magic number %d (0x%x)", "PredictorSetup", "\"LookupMapValue\"", "ml::setRegularization_10()", "scores.size() == 4", "var_type", "\"search_menu_title\" : \"Otsing\"", "compute", "SpatialMaxUnpooling", "decimal64", "imgproc::erode_12()", "\"abc_toolbar_collapse_description\" : \"\u0a28\u0a38\u0a3c\u0a1f \u0a15\u0a30\u0a4b\"", "CENTER_SIZE", "begins.size() == sizesOrEnds.size()", "\"abc_toolbar_collapse_description\" : \"\u0938\u0902\u0915\u094d\u0937\u093f\u092a\u094d\u0924 \u092a\u093e\u0930\u094d\u0928\u0941\u0939\u094b\u0938\u094d\"", "D`DUDO`O`U", "!flag && \"OpenVX support isn't enabled at compile time\"", "(I0.depth() == CV_8U && I1.depth() == CV_8U) || (I0.depth() == CV_32F && I1.depth() == CV_32F)", "TIFFVTileSize64", "InitExtrinsics", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_19SqrRowSumItdEENS_9allocatorIS5_EEEE", "NSt6__ndk115time_get_bynameIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE", "ImageLength", "virtual void cv::opt_SSE4_1::SymmColumnFilter<cv::opt_SSE4_1::Cast<float, unsigned char>, cv::opt_SSE4_1::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::Cast<float, unsigned char>, VecOp = cv::opt_SSE4_1::ColumnNoVec]", "line != 0", "mapx0.data == mapx.data && mapy0.data == mapy.data", "photo::setThreshold_10()", "crossCorr", "virtual void cv::opt_SSE4_1::(anonymous namespace)::ColumnSum<int, float>::operator()(const uchar **, uchar *, int, int, int)", "virtual void cv::opt_AVX2::SymmColumnFilter<cv::opt_AVX2::Cast<float, float>, cv::opt_AVX2::SymmColumnVec_32f>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::Cast<float, float>, VecOp = cv::opt_AVX2::SymmColumnVec_32f]", "!pp.empty() && N > 0", "fastNlMeansDenoisingColoredMulti", "nnfunc != 0", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::YCrCb2RGB_f<float> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::YCrCb2RGB_f<float>]", "uchar3", "MWSMMV SMUV OSTS", "cvGetTrackbarPos", "\"abc_action_bar_home_description_format\" : \"%1$s\u1363 %2$s\"", "tensorParams[\"weight\"].second.total() == 1", "Halide pipeline of ", "scalarParams.has(\"pad_l\")", "ranges", "Goldfish", "brow3", "photo::pencilSketch_11()", "inp.isContinuous() && (inp.type() == CV_32F || inp.type() == CV_16S) && inp.dims == 4 && inp.size[0] == output.size[0] && inp.size[2] == output.size[2] && inp.size[3] == output.size[3]", "!bgdSamples.empty() && !fgdSamples.empty()", "LYVFUGVHWGVF NQOOQMTMUNUQR[Q^P`OaMbKbJaJ`K_L`Ka SMTNTQQ[P^O`Mb", "__itt_region_end", "\"abc_action_menu_overflow_description\" : \"Dodatne opcije\"", "dnn::NMSBoxes_15()", "virtual void cv::opt_SSE4_1::(anonymous namespace)::RowSum<double, double>::operator()(const uchar *, uchar *, int, int) [T = double, ST = double]", "_cameraMatrix.needed()", "N2cv22resizeAreaFast_InvokerItfNS_17ResizeAreaFastVecItNS_26ResizeAreaFastVec_SIMD_16uEEEEE", "#?RGBE", "void cv::hal::opt_SSE4_1::cvtBGRtoTwoPlaneYUV(const uchar *, size_t, uchar *, uchar *, size_t, int, int, int, bool, int)", "imgproc::phaseCorrelate_10()", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14SplitLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "N3Iex7BaseExcE", "Merge", "indexParams", "!fixedSize() || len == len0", "G^LFL[ MGMZ IFNFN[ NQOOPNRMUMWNXOYRY[ WOXRXZ UMVNWQW[ I[Q[ T[\\[ JFLG KFLH LZJ[ LYK[ NYO[ NZP[ WZU[ WYV[ YYZ[ YZ[[", "ShuffleChannel", "I[XPVNTMPMNNNPPRSS PMONOPQRSS SSNTLVLXMZP[S[UZWX SSOTMVMXNZP[", "curShape.size() == outputs[0].size()", "dilationW", "\"abc_action_menu_overflow_description\" : \"Flere muligheder\"", "Required argument \"", "F]GQHOJMMMNNNQLWLYN[ LMMNMQKWKYLZN[P[RZTXVT XMVTUXUZV[Y[[Y\\W YMWTVXVZW[", "MWMRMQNOONQMSMUNVOWQWR PNTN OOUO NPVP NQVQ MRWR", "\"abc_search_hint\" : \"Tafuta\u2026\"", "\"abc_toolbar_collapse_description\" : \"\u0421\u043a\u0443\u043f\u0438\"", "features2d::isMaskSupported_10()", "__itt_counter_create", "minSize <= maxSize", "\"abc_searchview_description_search\" : \"Zoeken\"", "target_precision", "\"abc_action_mode_done\" : \"Terminat\"", "H\\PFOGMM PGMM PFQGMM ZFYGWM ZGWM ZF[GWM", "Setting up field info failed", "No element name has been given", "K.empty() || (K.size() == Size(3,3))", "void cv::cpu_baseline::cvt16s16u(const short *, size_t, uchar *, size_t, ushort *, size_t, cv::Size, void *)", "cv::Mat cv::dnn::dnn4_v20190122::blobFromImages(cv::InputArrayOfArrays, double, cv::Size, const cv::Scalar &, bool, bool, int)", "incorrect count for field \"%s\" (%lu, expecting %u); tag ignored", "int cv::opt_SSE4_1::(anonymous namespace)::MorphVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_float32x4> >::operator()(uchar **, int, uchar *, int) const [VecUpdate = cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_float32x4>]", "__itt_state_get", "void cv::createHanningWindow(cv::OutputArray, cv::Size, int)", "void cv::hal::opt_AVX2::addWeighted8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, const double *)", "feature.size() > 0", "N2cv12cpu_baseline16SymmColumnFilterINS0_4CastIisEENS0_25SymmColumnSmallVec_32s16sEEE", "%H:%M:%S%m/%d/%y%Y-%m-%d%I:%M:%S %p%H:%M%H:%M:%S", " output shape=", "/home/vagrant/build/srclib/opencv/modules/imgcodecs/src/grfmt_pxm.cpp", "SubjectLocation", "void cv::hal::opt_AVX2::max8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int)", "NSt6__ndk120__time_get_c_storageIcEE", "dnn::NMSBoxes_10()", "void cv::opt_AVX2::(anonymous namespace)::medianBlur_SortNet(const cv::Mat &, cv::Mat &, int) [Op = cv::opt_AVX2::(anonymous namespace)::MinMax32f, VecOp = cv::opt_AVX2::(anonymous namespace)::MinMaxVec32f]", "sliceRanges[i].size() <= inpShape.size()", "N2cv8opt_AVX212_GLOBAL__N_19SqrRowSumIhiEE", "bool cv::utils::fs::isDirectory(const cv::String &)", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::XYZ2RGB_i<unsigned short> >::operator()(const cv::Range &) const [Cvt = cv::XYZ2RGB_i<unsigned short>]", "\"abc_searchview_description_submit\" : \"Hambisa umbuzo\"", "NWSKSLTLTKSK SOSZR\\ TOTZR\\P\\O[OZPZP[O[ QOTO", "void cv::resize(cv::InputArray, cv::OutputArray, cv::Size, double, double, int)", "imgproc::floodFill_12()", "features2d::drawMatchesKnn_10()", "Invalid bit depth for RGBA image", "LXVPUNTMRMPNOONQNSOUPVRVTUUT", "The operation is neither 'array op array' (where arrays have the same size and the same type), nor 'array op scalar', nor 'scalar op array'", "imgproc::sepFilter2D_11()", "RGB2HSV_b", "thresh_16s", "basic_ostream", "G]RFR[ ILJLKMLQMSNTQUSUVTWSXQYMZL[L", "Unknown parameter k for layer type ", "H\\K[O[LTKPKLLINGQFSFVGXIYLYPXTU[Y[", "N7cvflann7anyimpl14big_any_policyINSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE", "void cv::hal::add8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "H\\NFO[ OFPY \\FO[ LFRF XF^F", "\"abc_search_hint\" : \"Pretra\u017ei...\"", "image_jacobian_homo_ECC", "LXNPPV RPPV RPTV VPTV", "EXIFIFDOffset", "ConvTranspose", "readComponent16u", "The flow matrix size does not match to the signatures' sizes", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_11RGB5x52GrayEEE", "static void cv::KeyPoint::convert(const std::vector<KeyPoint> &, std::vector<Point2f> &, const std::vector<int> &)", "compute_cost", "virtual void cv::MatOp::subtract(const cv::Scalar &, const cv::MatExpr &, cv::MatExpr &) const", "Unexpected end of the stream", "ExifVersion", "dp/drot must be 2Nx3 floating-point matrix", "N7cvflann11KDTreeIndexINS_2L1IfEEE4NodeE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IsffEENS_15VResizeLanczos4IsffNS_4CastIfsEENS_25VResizeLanczos4Vec_32f16sEEEEE", "input_batch_offset", "cvSVBkSb", "$0message $1", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml11ANN_MLPImplENS_9allocatorIS3_EEEE", "_pointsMask.empty() || _pointsMask.type() == CV_8U", "FindStereoCorrespInvoker", "FileStorage::APPEND and FileStorage::MEMORY are not currently compatible", "_responses.isContinuous() && _responses.checkVector(1, CV_32S) == nsamples", "weights", "imgproc::medianBlur_10()", "checks", "m0_T@", "arithm_ipp_absdiff16u", "double cv::norm(cv::InputArray, cv::InputArray, int, cv::InputArray)", "NULL double pointer", "\"abc_activitychooserview_choose_application\" : \"\u0a07\u0a71\u0a15 \u0a10\u0a2a \u0a1a\u0a41\u0a23\u0a4b\"", "arithm_ipp_cmp32f", "G]KFK[ YFY[ KPYP", "G^LMLVMYNZP[S[UZVYWW MNMWNY IMNMNWOZP[ WMW[\\[ XNXZ TMYMY[ JMLN KMLO YYZ[ YZ[[", "icvCorrectMatches", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_114MorphRowFilterINS3_5MaxOpIfEENS3_11MorphRowVecINS3_4VMaxINS1_12hal_baseline11v_float32x4EEEEEEENS_9allocatorISD_EEEE", "features2d::getMinArea_10()", "layer.input_size() == 2", "dnn::writeTextGraph_10()", "core::cartToPolar_10()", "maxSize >= 0", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_114MorphRowFilterINS3_5MinOpIhEENS3_11MorphRowVecINS3_4VMinINS1_12hal_baseline10v_uint8x16EEEEEEENS_9allocatorISD_EEEE", "OUSMSNTNTMSM QPRPSQSRRVQXPYOYNX", "int cv::LU(float *, size_t, int, float *, size_t, int)", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/color_lab.cpp", "N2cv8opt_AVX212_GLOBAL__N_16RowSumIhdEE", "PNG file corrupted by ASCII conversion", "src.type() == dst.type()", "imgproc::drawContours_13()", "initWideAngleProjMap", "Unknown font type", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/drawing.cpp", "H\\QFK[ RFL[ SFM[ NFVF H[W[YU OFRG PFQH TFRH UFRG LZI[ LYJ[ MYN[ LZO[ R[WZ T[XX V[YU", "one of dimesion sizes is non-positive", "OpenCV TIFF: failed (int)TIFFReadEncodedTile(tif, tileidx, buffer, buffer_size) >= 0", "MWRKQMOPMR RKSMUPWR RMOQ RMUQ ROPQ ROTQ QQSQ MRWR", "I[POOPLROTPU OPMROT MRXR", "void cv::cvtColor(cv::InputArray, cv::OutputArray, int, int)", "N7cvflann17KDTreeSingleIndexINS_2L2IfEEEE", "KernelArg", "src1.size == dst.size", "N7cvflann18KNNUniqueResultSetIiEE", "findNonZero", "void cv::cartToPolar(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, bool)", "cvMakeHistHeaderForArray", "MWUQSPRPPQOSPURVSVUU", "max_value", "L[LVNRLXLZM[O[QZSXUU VRPdOfMgLfLdMaP^S\\U[XY[V", "1.900.1", "H]LRJTIWIZK[L[NZPX MRKTJWJZK[ RRPXPZR[S[UZWXXUXR SRQXQZR[ XRYVZW[W]V", "Number of pixels per row in the image's data window is not a multiple of the x subsampling factor of the \"", "The input array must be CvMatND", "pImpl->lock()", "video::getTermCriteria_10()", "org.opencv.calib3d", "endLearning", "\"abc_action_bar_up_description\" : \"\uc704\ub85c \ud0d0\uc0c9\"", "\"abc_searchview_description_search\" : \"Haku\"", "photo::colorChange_12()", "N2cv14DefaultDeleterI12CvMemStorageEE", "/home/vagrant/build/srclib/opencv/modules/core/src/conjugate_gradient.cpp", "Unknown activation function", "k == UMAT", "dst.data == dst0.data", "Planarconfiguration", "\"abc_capital_on\" : \"\u05e4\u05d5\u05e2\u05dc\"", "inputs.size() >= 3", "\"abc_activitychooserview_choose_application\" : \"Chagua programu\"", "MWOMOV UMUV OQUQ", "32FastNlMeansMultiDenoisingInvokerIhij7DistAbsiE", "No OpenGL support", "MWWHVGTFQFOGNHMJMLNNOOUSVTWVWXVZU[S\\P\\N[MZ", "void cv::transpose(cv::InputArray, cv::OutputArray)", "\"abc_search_hint\" : \"Szukaj\u2026\"", "png_set_background", "prior_height > 0", "Artist", "threshold must be greater than 0", "Unsupported mode of reduce_mean operation.", "img.type() == CV_8UC1 && blockSize*blockSize <= 2048", "N12opencv_caffe20ConvolutionParameterE", "op == MORPH_ERODE || op == MORPH_DILATE", "NSt6__ndk117__widen_from_utf8ILm16EEE", "N2cv8opt_AVX212ColumnFilterINS0_4CastIddEENS0_11ColumnNoVecEEE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIjEE", "void cv::hal::cpu_baseline::split32s(const int *, int **, int, int)", "std::bad_cast", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_16RowSumItiEENS_9allocatorIS5_EEEE", "I\\N+R1T5U:U>TBPJPLQNROWRRUQVPXPZTbUfUjToRsNy P.R2S5T:T>SCRF R^SaTfTjSoRrPv", "123456789", "GetInt64", "N6google8protobuf16RepeatedPtrFieldINS0_11MessageLiteEEE", "Requested object was not found", "Computed tile row size is zero", "Insufficient memory for pCAL units", "void cv::hal::opt_AVX2::min32s(const int *, size_t, const int *, size_t, int *, size_t, int, int)", "termall", "virtual void cv::dnn::FullyConnectedLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "One of the client procedures is NULL pointer.", "core::phase_10()", "opencv_tensorflow.OpDef.ArgDef.type_attr", "void cv::hal::cpu_baseline::add32f(const float *, size_t, const float *, size_t, float *, size_t, int, int)", "N6google8protobuf19UninterpretedOptionE", "IPP:(ipp_moments(mat, m))", "\"abc_shareactionprovider_share_with\" : \"\u0907\u0938\u0915\u0947 \u0926\u094d\u0935\u093e\u0930\u093e \u0938\u093e\u091d\u093e \u0915\u0930\u0947\u0902\"", "operator!=", "N2cv8colormap12UserColorMapE", "void cv::findContours(cv::InputArray, cv::OutputArrayOfArrays, cv::OutputArray, int, int, cv::Point)", "google.protobuf.Empty", "MaxPool", "N2cv8opt_AVX29RowFilterIsdNS0_8RowNoVecEEE", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2YCrCb_i<ushort> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2YCrCb_i<ushort>]", "void cv::cpu_baseline::gemm32f(const float *, size_t, const float *, size_t, float, const float *, size_t, float, float *, size_t, int, int, int, int)", "operator<=", "Cannot find SubIFD tag", "dw_plus", "descriptor", "cannyLowThresh_ > 0 && cannyLowThresh_ < cannyHighThresh_", "/home/vagrant/build/srclib/opencv/modules/videoio/src/videoio_registry.cpp", "MulConstant", "PhotometricInterpretation %d not allowed for JPEG", "void cv::max(const cv::UMat &, const cv::UMat &, cv::UMat &)", "getConvertElem", "THDiskFile_noBuffer", "src.checkVector(2, CV_32F) == 3 && dst.checkVector(2, CV_32F) == 3", "Not implemented.", "CHECK failed: (output->ByteCount()) == (expected_endpoint): ", "video::create_17()", "photo::getGamma_10()", "src1.size == dst.size && dst.type() == CV_8U", "N6google8protobuf13MethodOptionsE", "greater than", "NSt6__ndk120__shared_ptr_pointerIPN2cv17MotionJpegCaptureENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "void cv::hal::sqrt32f(const float *, float *, int)", "it.ptr != NULL", "/home/vagrant/build/srclib/opencv/modules/core/src/matrix_wrap.cpp", "speckleRange", "(size_t)i < vv.size()", "\"abc_searchview_description_voice\" : \"\u8bed\u97f3\u641c\u7d22\"", "params.blobs.size() == 1", "features2d::setVocabulary_10()", "N12opencv_caffe21InnerProductParameterE", "top >= 0 && bottom >= 0 && left >= 0 && right >= 0 && _src.dims() <= 2", "TIFFScanlineSize64", "convertToDirect3DSurface9", "depth == CV_8U || depth == CV_16U || depth == CV_32F", "OVRKRP SKRP", "N2cv12cpu_baseline21SymmColumnSmallFilterINS0_13FixedPtCastExIihEENS0_19SymmColumnVec_32s8uEEE", "SymmColumnVec_32f16s", "\" was not found or had errors.", "_FXE>", "ipoints.depth() == CV_32F || ipoints.depth() == CV_64F", "core::PCAProject_10()", "void cv::hal::opt_AVX::exp32f(const float *, float *, int)", "N6google8protobuf7MessageE", "MXUSTQRPPQOSPURVTUUS VPTVSXRYPYOX", "27TegraRowOp_combine4_InvokerIKllE", "/home/vagrant/build/srclib/opencv/modules/calib3d/src/fisheye.cpp", "convertFromImage", "File recursively imports itself: ", "\"abc_activitychooserview_choose_application\" : \"\u10d0\u10de\u10d8\u10e1 \u10d0\u10e0\u10e9\u10d4\u10d5\u10d0\"", "addUMat", "typeinfo fn for ", "August", "video::getOmega_10()", ".PLACEHOLDER_VALUE", "Centers are not new", "N2cv10HdrDecoderE", "ReshapeLayerImpl", "NSt6__ndk114default_deleteIN2cv3dnn16ElementWiseLayerINS2_11ReLUFunctorEEEEE", "Error in Huffman-encoded data (code table is longer than expected).", "d.cols == 1 || d.rows == 1", "N2cv23CvtColorIPPLoop_InvokerINS_18IPPGray2BGRFunctorItEEEE", "Sunday", "cvResizeWindow", "dnn::blobFromImage_16()", "nn > 0", "quat2rot", "m1type == CV_16SC2 || m1type == CV_32FC1 || m1type == CV_32FC2", "svmsgdType", "Premature end-of-file encountered.", "NSt6__ndk114default_deleteIN2cv3dnn16ElementWiseLayerINS2_12ReLU6FunctorEEEEE", "[lazy = true] can only be specified for submessage fields.", "calib3d::recoverPose_11()", "Specified non-existed directory, creating OpenCV sub-directory for caching purposes: ", "cv::LUT only supports tables CV_8UC1 or CV_8UC3.", "Unknown OpenCL error", "Bad image header", "virtual void cv::cpu_baseline::SymmColumnFilter<cv::cpu_baseline::Cast<float, unsigned char>, cv::cpu_baseline::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::Cast<float, unsigned char>, VecOp = cv::cpu_baseline::ColumnNoVec]", "checkChessboard", "parallel_for", "readBlock", "getMatRef", "depth == CV_8U && (cn == 1 || cn == 3 || cn == 4)", "OpenCV persistence doesn't support very long lines", "N2cv2ml13TrainDataImplE", "I[MOLMLQMONNPMTMWNXPXQWSTT TMVNWPWQVSTT QTTTWUXWXXWZT[P[MZLXLWMVNWMX TTVUWWWXVZT[", "convertFp16", "org.opencv.ml", "virtual void cv::opt_SSE4_1::(anonymous namespace)::SqrRowSum<unsigned char, int>::operator()(const uchar *, uchar *, int, int) [T = unsigned char, ST = int]", "30TegraCvtColor_rgb2bgrx_Invoker", "FAILED_PRECONDITION", "core::divide_12()", "virtual void cv::opt_AVX2::(anonymous namespace)::RowSum<unsigned char, double>::operator()(const uchar *, uchar *, int, int) [T = unsigned char, ST = double]", "features2d::setNLevels_10()", "CHECK failed: fallback_database_ == NULL: ", "core::min_11()", " total(-1)=%lld", "void cv::hal::cpu_baseline::max32s(const int *, size_t, const int *, size_t, int *, size_t, int, int)", "NVQKSMSORPQORNSO", "H\\SMP[ JPLNOMZM", "void cv::dnn::dnn4_v20190122::BlobManager::reset()", "Unrecognized unit type for pHYs chunk", "H\\LMW[ MMX[ XML[ JMPM TMZM J[P[ T[Z[", "Seek error at scanline %lu, strip %lu", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_116SymmColumnFilterINS2_4CastIfsEENS2_20SymmColumnVec_32f16sEEENS_9allocatorIS7_EEEE", "/home/vagrant/build/srclib/opencv/modules/core/src/mathfuncs_core.dispatch.cpp", "j < maxCount - 1 && \"OpenCV persistence doesn't support very long lines\"", "Missing , between the elements", "%lu: Tile out of range, max %lu", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_111MorphFilterINS3_5MinOpIhEENS3_8MorphVecINS3_4VMinINS1_12hal_baseline10v_uint8x16EEEEEEENS_9allocatorISD_EEEE", "u->originalUMatData->data == data", "zCIS_LA", "MWSFRGQIQKRLSKRJ", "0 <= _rowRange.start && _rowRange.start <= _rowRange.end && _rowRange.end <= m.rows", "void cv::opt_AVX2::cvt8s16u(const schar *, size_t, uchar *, size_t, ushort *, size_t, cv::Size, void *)", "ChannelsPReLU", "running_std", "xend == m_width", "u.size() == svd.u.size()", "Should not reach here.", "void cv::cpu_baseline::cvt8s16s(const schar *, size_t, uchar *, size_t, short *, size_t, cv::Size, void *)", "LXTFOL TFUGOL", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::HLS2RGB_f>::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::HLS2RGB_f]", "imgproc::moments_10()", "\"abc_shareactionprovider_share_with_application\" : \"\u041e\u0442\u043a\u0440\u044b\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e %s\"", "inpBlob.dims == 2 || inpBlob.dims == 4", "cvTreeToNodeSeq", "Get_MSURF_Descriptor_64", "operator,", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/utils.cpp", "NVQKTO QKPLTO", "): failed TIFFSetField(tif, TIFFTAG_BITSPERSAMPLE, bitsPerChannel)", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/extension_set_heavy.cc", "void cv::hal::opt_AVX2::addRNGBias64f(double *, const double *, int)", "\"abc_searchview_description_search\" : \"\u05d7\u05e4\u05e9\"", "cvNot", "channel name", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::RGB2HSV_b>::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::RGB2HSV_b]", "\"abc_action_bar_home_description\" : \"Ana ekrana git\"", "V0NetParameter; use ./build/tools/upgrade_net_proto_text for ", "bias_val", "\"abc_shareactionprovider_share_with\" : \"Partilhar com\"", "prototxt and ./build/tools/upgrade_net_proto_binary for model ", "__itt_counter_destroy", "short3", "!numUnconnectedLayers.empty()", "slope", "void cv::opt_SSE4_1::(anonymous namespace)::medianBlur_SortNet(const cv::Mat &, cv::Mat &, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MinMax32f, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MinMaxVec32f]", "%08jx", "Unimplemented type: ", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX28Filter2DIsNS2_4CastIddEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "photo::process_11()", "GetEnumValue", "groupRectangles", "Wrong type of output circles", "\"abc_shareactionprovider_share_with_application\" : \"Trimite\u021bi la %s\"", "nchannels <= CV_CN_MAX", "keycode", "CL_OUT_OF_RESOURCES", "\"abc_action_bar_home_description\" : \"\u04ae\u0439\u0433\u04e9 \u0431\u0430\u0433\u044b\u0442\u0442\u043e\u043e\"", "HDF5Output", "screenWindowCenter", "inp0.size() >= 2 && total(inp0, 1) == _numInp", "features2d::setHarrisDetector_10()", "ucwsifdh", "src.rows == dst.rows && src.cols*6 == dst.cols*dst.channels() && dst.depth() == CV_32F", "blobFromTensor", "void cv::hal::cpu_baseline::add8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "largeHoles != 0 && smallHoles != 0", "!dsize.empty()", "\"abc_searchview_description_search\" : \"\u062a\u0644\u0627\u0634 \u06a9\u0631\u06cc\u06ba\"", "cameraMatrix0.size() == Size(3,3)", "TorchImporter", "for \"StripByteCounts\" array", "NSt6__ndk114default_deleteIN2cv3dnn14BlankLayerImplEEE", "max_categories should be >= 2", "cvGetMinMaxHistValue", "(!desc.rows || desc.cols == descriptorSize())", "featureType", "imgproc::getDerivKernels_10()", "void cv::QRDecode::init(const cv::Mat &, const vector<cv::Point2f> &)", "Attempt to write value larger than 0xFFFFFFFF in Classic TIFF file.", "int cv::opt_AVX2::(anonymous namespace)::MorphVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_int16x16> >::operator()(uchar **, int, uchar *, int) const [VecUpdate = cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_int16x16>]", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_19HLS2RGB_bEEE", "virtual void cv::HOGDescriptor::detectMultiScale(cv::InputArray, std::vector<Rect> &, double, cv::Size, cv::Size, double, double, bool) const", "C.UTF-8", "do_train", "No \"put\" routine setupl; probably can not handle image format", "decltype(", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_19SqrRowSumIhiEENS_9allocatorIS5_EEEE", "(inputs.size() == 2 && blobs.empty()) || blobs.size() == (int)hasWeights + (int)hasBias", "NSt6__ndk118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "dnn::blobFromImage_15()", "N2cv12cpu_baseline12_GLOBAL__N_19ColumnSumIdtEE", "getNormCatValues", "NSt6__ndk17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE", "VIDEOIO: Can't prioritize unknown/unavailable backend: '", "N2cv10opt_SSE4_116SymmColumnFilterINS0_4CastIfhEENS0_11ColumnNoVecEEE", "\" channel of output file \"", "imageDx_.type() == CV_32FC1 && imageDx_.size() == imageEdges_.size()", "invalid unknown chunk location", "\"abc_action_bar_up_description\" : \"\u179a\u1780\u1798\u17be\u179b\u200b\u17a1\u17be\u1784\u179b\u17be\"", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn22DeConvolutionLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "prev0.size() == next0.size() && prev0.channels() == next0.channels() && prev0.channels() == 1 && pyrScale_ < 1", "libc++abi", "\"abc_capital_off\" : \"\u09ac\u09a8\u09cd\u09a7\"", "Unsupported combination of sum format (=%d), and destination format (=%d)", "\"abc_toolbar_collapse_description\" : \"\u03a3\u03cd\u03bc\u03c0\u03c4\u03c5\u03be\u03b7\"", "void cv::hal::sub64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, void *)", "imgproc::matchShapes_10()", "void cv::convexHull(cv::InputArray, cv::OutputArray, bool, bool)", "LXPMNSNUOVRVTUUSWM", "Obtained XMS handle %u", "NSt6__ndk120__shared_ptr_pointerIPN2cv24LMeDSPointSetRegistratorENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "tensor->dtype() == tensorflow::DT_QUINT8", "0Avoid cv::hal::cpu_baseline::cvtBGRtoHSV(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool, bool, bool)", "CL_INVALID_BUFFER_SIZE", "NSt6__ndk114default_deleteIN2cv3dnn16ElementWiseLayerINS2_10ELUFunctorEEEEE", "NSt6__ndk17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv25Affine2DEstimatorCallbackENS_9allocatorIS2_EEEE", "ml::setBackpropMomentumScale_10()", "FALSE", "k < 109", "N2cv8opt_AVX212_GLOBAL__N_19SqrRowSumIhdEE", "virtual void cv::cpu_baseline::RowFilter<unsigned char, int, cv::cpu_baseline::RowVec_8u32s>::operator()(const uchar *, uchar *, int, int) [ST = unsigned char, DT = int, VecOp = cv::cpu_baseline::RowVec_8u32s]", "LYOKNQ OKVK OLSLVK NQOPQOTOVPWRWUVWTXQXOWNVNUOUOV TOUPVRVUUWTX", "OpenCV TIFF: failed TIFFGetField(tif, TIFFTAG_PHOTOMETRIC, &photometric)", "void cv::hal::cpu_baseline::recip32s(const int *, size_t, int *, size_t, int, int, const double *)", "!base64decoder.endOfStream()", "void cv::AKAZEFeatures::Feature_Detection(std::vector<KeyPoint> &)", "throw_no_ogl", "void cv::hal::opt_AVX2::absdiff16s(const short *, size_t, const short *, size_t, short *, size_t, int, int)", "../../../../modules/imgproc/include/opencv2/imgproc/detail/gcgraph.hpp", "\"abc_searchview_description_submit\" : \"\u0410\u0434\u043f\u0440\u0430\u0432\u0456\u0446\u044c \u0437\u0430\u043f\u044b\u0442\"", "ReductionMatrix1", "imgproc::filter2D_11()", "((size_t)_src[i] & (CV_SIMD_WIDTH-1)) == 0", "ml::setWeightTrimRate_10()", "int cv::opt_AVX2::sqsum32s(const int *, const uchar *, double *, double *, int, int)", "N2cv22resizeAreaFast_InvokerIddNS_19ResizeAreaFastNoVecIddEEEE", "(srcimg.cols / 3) * 2 == dstimg.cols", "calib3d::getMinDisparity_10()", "N2cv17DescriptorMatcher20DescriptorCollectionE", "video::getVariationalRefinementIterations_10()", "N2cv20GeneralizedHoughGuilE", "/home/vagrant/build/srclib/opencv/modules/dnn/src/op_inf_engine.cpp", "N6google8protobuf8internal15DynamicMapFieldE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIiEE", "IPP:(ipp_accumulate(_src, _dst, _mask))", "\" has not been loaded.", "void cv::hal::cpu_baseline::absdiff8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "cvSetRealND", "cv::impl::(anonymous namespace)::CvtHelper<cv::impl::(anonymous namespace)::Set<3, 4, -1>, cv::impl::(anonymous namespace)::Set<2, -1, -1>, cv::impl::(anonymous namespace)::Set<0, -1, -1>, cv::impl::(anonymous namespace)::SizePolicy::NONE>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::impl::(anonymous namespace)::Set<3, 4, -1>, VDcn = cv::impl::(anonymous namespace)::Set<2, -1, -1>, VDepth = cv::impl::(anonymous namespace)::Set<0, -1, -1>, sizePolicy = cv::impl::(anonymous namespace)::SizePolicy::NONE]", "PAD_W", "I[XFSWRYQZO[M[KZJXJVKULVKW WFRWQYO[ TF[F", "cvStereoCalibrateImpl", "The input and output images must have the same type", "/home/vagrant/build/srclib/opencv/modules/core/src/sum.simd.hpp", "hrange == 180 || hrange == 256", "CL_INVALID_PIPE_SIZE", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_9CCStatsOpEE22FirstScan4ConnectivityE", "The flags argument must be one of CV_INPAINT_TELEA or CV_INPAINT_NS", "File is too large", "duplicate", "videoio::open_13()", "cvDrawContours", "depth >=0 && depth <= CV_64F", "operator Matx", "video::getPatchSize_10()", "Unknown parameter group for layer type ", "no output buffer right now", "virtual void cv::opt_AVX2::(anonymous namespace)::ColumnSum<int, unsigned char>::operator()(const uchar **, uchar *, int, int, int)", "PF SdF", "IYJSKQLPNPOQOVPX MPNQNUOWPXQXSWTVUTVQVNULTKRKQLQNRPURWS QXSVTTUQUNTK", "N2cv8colormap3HotE", "src1.size() == src2.size() && type == src2.type() && (depth == CV_32F || depth == CV_64F)", "ICC Profile", "NSt6__ndk120__shared_ptr_emplaceIN2cv25VariationalRefinementImplENS_9allocatorIS2_EEEE", "dSin_A11", "modules/core/include/opencv2/core/version.hpp", "\"abc_action_bar_home_subtitle_description_format\" : \"%1$s\u060c %2$s\u060c %3$s\"", "it1->first != *it2", "cvCloneMat", "NSt6__ndk114__codecvt_utf8IDsEE", "AddDouble", "JZNBNW NNQLTLVMWOWQVSSUQVNW NNQMTMVN UMVOVQUSSU", "i < 0", "FusedBatchNorm", "cv::Mat cv::imdecode(cv::InputArray, int)", "double cv::compareHist(const cv::SparseMat &, const cv::SparseMat &, int)", "features2d::defaultNorm_10()", "=void cv::remap(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, int, int, const cv::Scalar &)", "SamplesPerPixel", "#x%02x", "features2d::getEdgeThreshold_10()", "\"abc_searchview_description_voice\" : \"Tales\u00f8k\"", "void cv::hal::opt_AVX2::add16s(const short *, size_t, const short *, size_t, short *, size_t, int, int)", "core::invert_11()", "THDiskFile_nativeEndianEncoding", "N2cv10opt_SSE4_112_GLOBAL__N_16RowSumIhiEE", "\"app_name\" : \"Form-N-Fun\"", "meanStdDev", "NSt6__ndk120__shared_ptr_emplaceIN12_GLOBAL__N_127GeneralizedHoughBallardImplENS_9allocatorIS2_EEEE", "dims > 0 && histSize", "Can't create layer \"", "Unknown", "detection_out", "G]LFL[ MGMZ NFN[ IFUFXGYHZJZMYOXPUQNQ XHYJYMXO UFWGXIXNWPUQ I[Q[ JFLG KFLH OFNH PFNG LZJ[ LYK[ NYO[ NZP[", "\"abc_action_bar_up_description\" : \"Felfel\u00e9 mozgat\u00e1s\"", "N2cv10KNNInvokerE", "pbtxt", "\"abc_action_bar_home_description\" : \"Navigeren naar startpositie\"", "findHomography1D", "PU10__float128", "(globalDescIdx>=0) && (globalDescIdx < size())", "N2cv18DISOpticalFlowImplE", "Concat-name", "F]UGTHSJQOOUNWLZJ[ THSKQSPVOXMZJ[H[GZGXHWIXHY OLNNMOKOJNJLKJMHOGRFVFYGZH[J[MZOYPVQTQRP VFXGYHZJZMYOXPVQ", " not found", "N2cv12cpu_baseline8Filter2DItNS0_4CastIffEENS0_11FilterNoVecEEE", "png_image_finish_read[color-map]: no color-map", "int cv::hal::QR32f(float *, size_t, int, int, int, float *, size_t, float *)", "setVarTypes", "m2.dims", "N2cv10opt_SSE4_112ColumnFilterINS0_4CastIfhEENS0_11ColumnNoVecEEE", "findFile", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::RGB5x52RGB>::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::RGB5x52RGB]", "\"abc_action_menu_overflow_description\" : \"Ve\u010d mo\u017enosti\"", "short16", "normType == NORM_INF || normType == NORM_L1 || normType == NORM_L2", "void cv::hal::gemm64f(const double *, size_t, const double *, size_t, double, const double *, size_t, double, double *, size_t, int, int, int, int)", "Angle.size() == X.size() && Angle.type() == X.type()", "preferableBackend != DNN_BACKEND_HALIDE", "Cannot quantize to fewer than %d colors", "fourcc != 0", "N2cv3dnn16ReshapeLayerImplE", "fitLine3D", "OPENCV_DNN_CHECK_NAN_INF_RAISE_ERROR", "\"status_bar_notification_info_overflow\" : \"+999\"", ".AKAZE", "N2cv8opt_AVX212ColumnFilterINS0_4CastIisEENS0_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_111MorphFilterINS3_5MaxOpIdEENS3_10MorphNoVecEEENS_9allocatorIS8_EEEE", "N2cv8opt_AVX212_GLOBAL__N_117MorphColumnFilterINS1_5MaxOpIsEENS1_14MorphColumnVecINS1_4VMaxINS_8hal_AVX210v_int16x16EEEEEEE", "Not enough data for scanline %ld", "KZPFPWQZS[U[WZXX QFQWRZS[ MMUM", "SetRepeatedUInt64", "/home/vagrant/build/srclib/opencv/modules/core/src/ovx.cpp", "normalizePoints1D", "quatMinimal2rot", "N12opencv_caffe8NetStateE", "cvPtr3D", "\"abc_capital_on\" : \"\u0423\u041a\u041b.\"", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_9RGB2Luv_fEEE", "Null pointer", "N3Iex11EnetdownExcE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_117MorphColumnFilterINS3_5MaxOpIhEENS3_14MorphColumnVecINS3_4VMaxINS1_8hal_AVX210v_uint8x32EEEEEEENS_9allocatorISD_EEEE", "\"abc_shareactionprovider_share_with\" : \"\u0c87\u0cb5\u0cb0\u0cca\u0c82\u0ca6\u0cbf\u0c97\u0cc6 \u0cb9\u0c82\u0c9a\u0cbf\u0c95\u0cca\u0cb3\u0ccd\u0cb3\u0cbf\"", "org/opencv/core/CvException", "channels == 1 || channels == 3", "virtual bool cv::VideoCapture::read(cv::OutputArray)", "cvCreateCameraCapture doesn't support legacy API anymore.", "void cv::max(const cv::Mat &, const cv::Mat &, cv::Mat &)", "\"abc_searchview_description_clear\" : \"Sor\u011funu t\u0259mizl\u0259\"", "N2cv16BOWKMeansTrainerE", "LXRLRX LQMOWOXQ PWTW", "H\\LFL[M[ LFMFM[ MQPNRMUMWNXQX[ MQPORNTNVOWQW[X[", "calib3d::recoverPose_18()", "locate", "features2d::BFMatcher_10()", "std::fabs(vecs[0].ddot(vecs[1])) * a <= FLT_EPSILON * 9 * x * (norm(vecs[0]) * norm(vecs[1]))", "Destination is not CvMemStorage* nor CvMat*", "void cv::hal::min16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, void *)", "void cv::copyTo(cv::InputArray, cv::OutputArray, cv::InputArray)", "count", "setWeights", "MapKey::GetStringValue", "assign", "\"abc_toolbar_collapse_description\" : \"I-collapse\"", "/home/vagrant/build/srclib/opencv/modules/core/src/minmax.cpp", "missing_subst", "OriginalRawFileName", "void cv::getRectSubPix(cv::InputArray, cv::Size, cv::Point2f, cv::OutputArray, int)", "\"abc_activitychooserview_choose_application\" : \"\u0418\u0437\u0431\u043e\u0440 \u0430\u043f\u043b\u0438\u043a\u0430\u0446\u0438\u0458\u0435\"", "/data/data/%s/%s", "p && p->handle && !p->isInProgress", "imgproc::morphologyEx_12()", "\"abc_capital_on\" : \"ACTIVAR\"", "N6google8protobuf8internal8MapFieldIN17opencv_tensorflow35FunctionDef_Node_AttrEntry_DoNotUseENSt6__ndk112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSE_11ELi0EEE", "LXVPTOQOOPOQPRRS QOPPPQRS RSOTNUNWPXSXUW RSPTOUOWPX", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi4EEElm7DistAbsiE", "\"abc_action_mode_done\" : \"Loki\u00f0\"", "void cv::dnn::dnn4_v20190122::Net::Impl::initHalideBackend()", "objdetect::detect_11()", "preferableBackend != DNN_BACKEND_VKCOM || preferableTarget == DNN_TARGET_VULKAN", "J\\JVLSNROSOTNXM[ NXOVQSSRURVSVUUXUZV[W[YZZY\\V", "): failed TIFFSetField(tif, TIFFTAG_COMPRESSION, page_compression)", "imgproc::boundingRect_10()", "9D)5:", "Invalid background palette index", "NSt6__ndk120__shared_ptr_emplaceIN2cv12LMSolverImplENS_9allocatorIS2_EEEE", "J[MMX[ XMM[", "\"abc_searchview_description_voice\" : \"Gesproken zoekopdracht\"", "Mat::nPutS()", "finalize", "?N12_GLOBAL__N_122resize_bitExactInvokerIhNS_13ufixedpoint16ELi2EEE", "Message class \"", "virtual void cv::KMeansDistanceComputer<false>::operator()(const cv::Range &) const [onlyDistance = false]", "com/formfun/graphics/BoundaryPoints", "int cv::getMouseWheelDelta(int)", "BiasAdd", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12ColumnFilterINS2_4CastIdsEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn15RegionLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "void cv::dnn::dnn4_v20190122::Net::forward(cv::OutputArrayOfArrays, const std::vector<String> &)", "dst_i < total", "Parameter #%d: ", "N2cv3hal12cpu_baseline12_GLOBAL__N_120YUV420sp2RGB8InvokerILi2ELi1ELi3EEE", "file can't open. Check file path", "A.getMat().cols == B.getMat().rows", "invalid PNG color type", "%04x:", "N6google8protobuf29DescriptorProto_ReservedRangeE", "objdetect::detectMultiScale_11()", "void cv::log(cv::InputArray, cv::OutputArray)", "bool cv::Cholesky(float *, size_t, int, float *, size_t, int)", "((uint64)m_height * m_width * nch < (CV_BIG_UINT(1) << 30)) && \"BMP reader implementation doesn't support large images >= 1Gb\"", "Portable image format - monochrome (*.pbm)", "\"abc_shareactionprovider_share_with_application\" : \"\u200f\u0645\u0634\u0627\u0631\u0643\u0629 \u0645\u0639 %s\"", "void cv::hal::opt_SSE4_1::cvtTwoPlaneYUVtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "N2cv3ORBE", "BruteForce-Hamming(2)", "void cv::hal::opt_SSE4_1::addWeighted8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, const double *)", "N3Iex9EbadfdExcE", "readFrame", "Operation not permitted on an object without an associated state.", "\"abc_toolbar_collapse_description\" : \"\u00d6sszecsuk\u00e1s\"", "N2cv8opt_AVX212_GLOBAL__N_117MorphColumnFilterINS1_5MinOpIhEENS1_14MorphColumnVecINS1_4VMinINS_8hal_AVX210v_uint8x32EEEEEEE", "scalarParams.has(\"alpha\")", "NSt6__ndk120__shared_ptr_emplaceINS_6vectorIN2cv16FeatureEvaluator9ScaleDataENS_9allocatorIS4_EEEENS5_IS7_EEEE", "\"abc_shareactionprovider_share_with_application\" : \"Jakaminen: %s\"", "CirclesGridFinder", "Division by zero occurred", "/home/vagrant/build/srclib/opencv/modules/photo/src/fast_nlmeans_denoising_invoker.hpp", "BitsPerSample", "LZLVNSPRRRTTTVSXQZN[P\\Q^QaPdOfMgLfLdMaP^S\\WYZV", "NSt6__ndk114default_deleteIN2cv3dnn15ResizeLayerImplEEE", "cvReleaseImage", "inputs[i].dims == 4", "N11opencv_onnx11TensorProtoE", "The minimum y coordinate of the image's data window is not a multiple of the y subsampling factor of the \"", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::RGB5x52RGB>::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::RGB5x52RGB]", "LZLVNSPRRSRUP[ PRQSQUO[ RUTSVRWRVU VRVUWWXWZV", "video::getShadowValue_10()", "N2cv8opt_AVX212ColumnFilterINS0_4CastIfsEENS0_20SymmColumnVec_32f16sEEE", "Mat::nPutF()", "IZNMN[ ONOZ KMPMP[ WOWNVNVPXPXNWMUMSNQPPS K[S[ LMNN MMNO NZL[ NYM[ PYQ[ PZR[", "G]RRTUUVWWYW[V\\U]S]Q\\O[NYMWMUNTOPUOVMWKWIVHUGSGQHOINKMMMONPORR", "Neither accuracy nor maximum iterations number flags are set in criteria type", "LXRMPNOONQNSOUPVRVTUUTVRVPUNTMRM QVPUPTQSRSSTTVUWVW", "\"abc_action_bar_up_description\" : \"Siirry yl\u00f6s\"", "\"abc_searchview_description_submit\" : \"Suchanfrage senden\"", "int cv::cpu_baseline::FilterEngine__proceed(cv::FilterEngine &, const uchar *, int, int, uchar *, int)", "imgproc::getDerivKernels_12()", "32TegraCvtColor_rgbx2ycrcb_Invoker", "output_scale", "Can not convert integer values (%s -> %s), value 0x%jx is out of range", "Transpose the weights (except for convolutional) is not implemented", "N2cv3dnn16ElementWiseLayerINS0_14SigmoidFunctorEE5PBodyE", "/home/vagrant/build/srclib/opencv/modules/core/src/convert.simd.hpp", "blob.type() == CV_32SC1", "func && \"Not supported\"", "THDiskFile_bigEndianEncoding", "G]PML[ UMVSWXX[ IPKNNM[M", "N17opencv_tensorflow18FunctionDefLibraryE", "\"abc_action_bar_home_description\" : \"\u06c1\u0648\u0645 \u067e\u0631 \u0646\u06cc\u0648\u06cc\u06af\u06cc\u0679 \u06a9\u0631\u06cc\u06ba\"", "!inputImage.empty()", "imgproc::Canny_14()", "calib3d::decomposeHomographyMat_10()", "Wh.type() == Wx.type() && Wx.type() == bias.type()", "OpenCV TIFF: ", "N2cv10BOWTrainerE", "SMaxSampleValue", "ofs <= fs_data_blksz[blockIdx]", "LYPPMY UPTSSUQVPVOUOS TSTUUVVVWU", "invalid crop parameters or blob sizes", "JPEGFixupTagsSubsamplingSec", "\"abc_action_mode_done\" : \"\u0414\u0430\u044f\u0440\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv11TonemapImplENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12LBPEvaluatorENS_9allocatorIS2_EEEE", "input.total() == indices.total()", "Mat::n_1mul__JJ()", "photo::setExcludeRange_10()", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphColumnFilter<cv::cpu_baseline::(anonymous namespace)::MaxOp<double>, cv::cpu_baseline::(anonymous namespace)::MorphColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MaxOp<double>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphColumnNoVec]", "MXRMQNQORPSPTOTNSMRM RNROSOSNRN RXQYQZR[S[TZTYSXRX RYRZSZSYRY", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_19RowFilterIhdNS2_8RowNoVecEEENS_9allocatorIS5_EEEE", "CFAPlaneColor", "void cv::hal::opt_AVX2::mul16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, const double *)", "header_size is negative. Pass 0 to make the destination header_size == input header_size", "No associated state", "void cv::dnn::dnn4_v20190122::Net::getMemoryConsumption(const int, const std::vector<MatShape> &, size_t &, size_t &) const", "%lu: Sample out of range, max %lu", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX216SymmColumnFilterINS2_4CastIdsEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "\"abc_toolbar_collapse_description\" : \"Ciutkan\"", "videoio::VideoWriter_11()", "N12opencv_caffe14EmbedParameterE", "void cv::hal::absdiff32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, void *)", "LXRMPTOXOZP[S[UYVW SMQTPXPZQ[", "N2cv12cpu_baseline12ColumnFilterINS0_4CastIffEENS0_22SymmColumnSmallVec_32fEEE", "void cv::hal::opt_SSE4_1::cmp8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, int)", "calib3d::solveP3P_10()", "N2cv26DeterminantHessianResponseINS_3MatEEE", "GSTREAMER", ".opencv_tensorflow.TensorProtoH", "Found invalid proto option data for: ", "Unknown parameter biasterm for layer type ", "\"abc_toolbar_collapse_description\" : \"\u0416\u044b\u0439\u043d\u0430\u043f \u043a\u043e\u044e\u0443\"", "F^RGPJLOIR RGTJXO[R IRLUPZR] [RXUTZR]", "preferableBackend == DNN_BACKEND_INFERENCE_ENGINE", "void cv::hal::opt_AVX2::split8u(const uchar *, uchar **, int, int)", "null pointer to header", "can not allocate buffer", "targetId", "Sorry, arithmetic coding is not implemented", "H.type() == CV_64FC1 && H.rows == 4 && H.cols == 4", "Mat::n_1create__JIII()", "Unrecognized unit type for oFFs chunk", "\"abc_toolbar_collapse_description\" : \"\u0421\u0432\u0435\u0440\u043d\u0443\u0442\u044c\"", "cv2DRotationMatrix", "\"abc_capital_off\" : \"NONAKTIF\"", "void cv::hal::cpu_baseline::xor8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "ReadProtoFromBinaryFile", "imgproc::insert_11()", "knnSearch", "calib3d::checkChessboard_10()", "KYRKMX RNVX RKWX KXPX TXYX", "N2cv3dnn16ElementWiseLayerINS0_12ReLU6FunctorEE5PBodyE", "hierarchy.total() == ncontours && hierarchy.type() == CV_32SC4", "virtual void cv::opt_SSE4_1::(anonymous namespace)::RowSum<float, double>::operator()(const uchar *, uchar *, int, int) [T = float, ST = double]", "__itt_notify_sync_releasing", "dnn::Net_10()", "connectedComponents", "N2cv8opt_AVX212_GLOBAL__N_111MorphFilterINS1_5MaxOpItEENS1_8MorphVecINS1_4VMaxINS_8hal_AVX211v_uint16x16EEEEEEE", "ddepth", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_11YCrCb2RGB_iItEEEE", "sv_count == sv_total", "CaDQEOGMIMJNKPKSIX JNJRIVIZ JPHUHXIZK[M[OZQXRU TMRURXSZU[W[YZ[X]U^Q^M]M]N^P UMSUSZ TMVMTTSX", "void cv::hal::opt_AVX2::max64f(const double *, size_t, const double *, size_t, double *, size_t, int, int)", "Cannot read from file", "read error: read %ld blocks instead of %ld", "void cv::hal::cpu_baseline::add32s(const int *, size_t, const int *, size_t, int *, size_t, int, int)", "N2cv3hal12cpu_baseline12_GLOBAL__N_119YUV422toRGB8InvokerILi2ELi1ELi0ELi3EEE", "split", "reorg_%d", "?N2cv8colormap6PlasmaE", "CV_IS_MAT(matrixM) && CV_IS_MAT(matrixR) && CV_IS_MAT(matrixQ) && matrixM->cols == 3 && matrixM->rows == 3 && CV_ARE_SIZES_EQ(matrixM, matrixR) && CV_ARE_SIZES_EQ(matrixM, matrixQ)", "I[NFN[ OGOZ PFP[ KFSF K[Z[ZU LFNG MFNH QFPH RFPG NZL[ NYM[ PYQ[ PZR[ U[ZZ W[ZY X[ZX Y[ZU", "hdf5_output", "CV_IS_MAT(A) && CV_IS_MAT(B)", "objdetect::detect_10()", "3333UUUU", "binary_op", "void cv::hal::add8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, void *)", "JZLTLRMPOPUSWSXR LRMQOQUTWTXRXP", "/home/vagrant/build/srclib/opencv/modules/calib3d/src/triangulate.cpp", "0 <= vi && vi < getNAllVars()", "features2d::setEdgeThreshold_10()", "ml::trainEM_10()", "global constructors keyed to ", "addEdge", "KXOKOX PKPX MKWKWOVK MXRX", "\"search_menu_title\" : \"Pretra\u017eivanje\"", "\"abc_searchview_description_clear\" : \"Futa hoja\"", "Input parameters must be a matrices!", "/home/vagrant/build/srclib/opencv/modules/features2d/src/evaluation.cpp", "\"abc_shareactionprovider_share_with_application\" : \"Jagamine kasutajaga %s\"", "Reserved numbers must be positive integers.", "checkCorner", "OPENCV_IMGCODECS_WEBP_MAX_FILE_SIZE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX28Filter2DIfNS2_4CastIffEENS2_13FilterVec_32fEEENS_9allocatorIS7_EEEE", "virtual void cv::dnn::ElementWiseLayer<cv::dnn::ReLUFunctor>::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays) [Func = cv::dnn::ReLUFunctor]", "calib3d::findCirclesGrid_10()", "ml::setC_10()", "getByName", "AddAllocatedMessage", "\"abc_shareactionprovider_share_with_application\" : \"%s-\u0442\u0430\u0439 \u0445\u0443\u0432\u0430\u0430\u043b\u0446\u0430\u0445\"", "N6google8protobuf2io19LimitingInputStreamE", "pos >= m_block_pos", "%c%c%c%c", "src7.isMat() || src7.isUMat()", "imdecode_", "virtual void cv::opt_SSE4_1::RowFilter<unsigned char, float, cv::opt_SSE4_1::RowNoVec>::operator()(const uchar *, uchar *, int, int) [ST = unsigned char, DT = float, VecOp = cv::opt_SSE4_1::RowNoVec]", "header_size >= (int)sizeof(CvContour)", "dnn::getRealValue_11()", "cv::Rect cv::boundingRect(cv::InputArray)", "SetRepeatedEnum", "Storage block size is too small to fit the sequence elements", "dnn::getRealValue_10()", "cvGetPerspectiveTransform", "N2cv8opt_AVX212_GLOBAL__N_117MorphColumnFilterINS1_5MaxOpIdEENS1_16MorphColumnNoVecEEE", "\"abc_action_menu_overflow_description\" : \"Boshqa parametrlar\"", "SpaceToBatchND", "coords[0] >= 0 && coords[0] < 3", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2Gray<ushort> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2Gray<ushort>]", "void cv::DescriptorMatcher::knnMatch(cv::InputArray, std::vector<std::vector<DMatch> > &, int, cv::InputArrayOfArrays, bool)", "total > 0 && CV_ELEM_SIZE(seq->flags) == esz", "YCbCrCoefficients", "for Group 3/4 run arrays", "prcheight", "N2cv17WarpAffineInvokerE", "track %d format: %s", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_19RowFilterIffNS2_10RowVec_32fEEENS_9allocatorIS5_EEEE", "LXRLNWXPLPVWRL RRRL RRLP RRNW RRVW RRXP", "void cv::hal::opt_AVX2::absdiff32s(const int *, size_t, const int *, size_t, int *, size_t, int, int)", "JFIF extension marker: JPEG-compressed thumbnail image, length %u", "N17opencv_tensorflow16FunctionDef_NodeE", "I[VKWLXLVKSKQLPMOOLYK[J\\ SKQMPOMYL[J\\H\\H[I\\ ZK[L[KYKWLVNSYR[Q\\ YKXLWNTYS[Q\\O\\O[P\\ LOYO", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::RGB2HSV_f>::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::RGB2HSV_f]", "Bad input sequence", "factorsMat.total()", ", not just within \"", "photo::createAlignMTB_13()", "update_warping_matrix_ECC", "types.proto", "LYOEOFNFNEODQCTCVDWFVHTIQJOKNMNP TCUDVFUHTI NOONPNSOVOWN PNSPVPWNWM MRXR OVOWNWNVOUQTTTVUWWVYTZ TTUUVWUYTZ RZTZV[W]W^V`TaQaO`N_N^O^O_ TZU[V]V^U`Ta", "N3Imf14TypedAttributeIN5Imath4Vec2IiEEEE", "void cv::hal::opt_SSE4_1::cvtThreePlaneYUVtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "cv::Scalar cv::mean(cv::InputArray, cv::InputArray)", "/home/vagrant/build/srclib/opencv/modules/objdetect/src/cascadedetect.hpp", "Input #%d of layer \"%s\" already was connected", "__itt_task_begin_fn", "void cv::hal::cvtGraytoBGR5x5(const uchar *, size_t, uchar *, size_t, int, int, int)", "N2cv10opt_SSE4_112_GLOBAL__N_117MorphColumnFilterINS1_5MaxOpItEENS1_14MorphColumnVecINS1_4VMaxINS_10hal_SSE4_110v_uint16x8EEEEEEE", "\"abc_shareactionprovider_share_with\" : \"Sd\u00edlet pomoc\u00ed\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_16RowSumIiiEENS_9allocatorIS5_EEEE", "Uncompressed data (not supported) at line %u of %s %u (x %u)", "unrecognized or unsupported array type", "dropout", "generateDescriptorSubsample", "int cv::cpu_baseline::(anonymous namespace)::MorphRowVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_uint8x16> >::operator()(const uchar *, uchar *, int, int) const [VecUpdate = cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_uint8x16>]", "N2cv2ml10RTreesImplE", "video::setMinEigThreshold_10()", "N2cv20CalibrateDebevecImplE", "imgproc::detect_12()", "Bad number of channels", "fuseWeights", "PriorBox", "N2cv8opt_AVX212_GLOBAL__N_126BilateralFilter_8u_InvokerE", "getLinearRowFilter", "_samples.type() == CV_32F", "NZNVPSQQQSTUUWUYTZR[ QSSUTWTYR[ NZP[U[XYZV", "\"abc_activitychooserview_choose_application\" : \"Izbira aplikacije\"", "N3Iex7TypeExcE", "opencv_ml_knn_kd", "N3Imf14TypedAttributeINS_6EnvmapEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_19ColumnSumIdsEENS_9allocatorIS5_EEEE", "N2cv12cpu_baseline12_GLOBAL__N_19SqrRowSumIfdEE", "\"abc_toolbar_collapse_description\" : \"\u0938\u0902\u0915\u094d\u0937\u093f\u092a\u094d\u0924 \u0915\u0930\u0947\u0902\"", "#description: OpenCV trace file", "LXRMRV NOOPOSQTSTUSUPVO", "TileWidth", "kernelSize == -1 || kernelSize == 3 || kernelSize == 5 || kernelSize == 7", "(ksize % 2 == 1) && (_src0.dims() <= 2 )", "\"abc_toolbar_collapse_description\" : \"Vou in\"", "/home/vagrant/build/srclib/opencv/modules/core/src/utils/datafile.cpp", "cols > 0 && rows > 0 && anchor.inside(cv::Rect(0,0,cols,rows)) && (shape != CV_SHAPE_CUSTOM || values != 0)", "F^NVLUKUIVHXHYI[K\\L\\N[OYOXNVKRJOJMKJMHPGTGWHYJZMZOYRVVUXUYV[X\\Y\\[[\\Y\\X[VYUXUVV JMKKMIPHTHWIYKZM", "filters", "void cv::hal::opt_AVX2::cvt16f32f(const cv::float16_t *, float *, int)", "virtual void cv::opt_AVX2::SymmColumnFilter<cv::opt_AVX2::Cast<int, short>, cv::opt_AVX2::SymmColumnSmallVec_32s16s>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::Cast<int, short>, VecOp = cv::opt_AVX2::SymmColumnSmallVec_32s16s]", "ml::setMinSampleCount_10()", "virtual void cv::MatOp::subtract(const cv::MatExpr &, const cv::MatExpr &, cv::MatExpr &) const", "\"abc_toolbar_collapse_description\" : \"\u0ab8\u0a82\u0a95\u0ac1\u0a9a\u0abf\u0aa4 \u0a95\u0ab0\u0acb\"", "F^JMN[ KMNX LMOX RMOXN[ RMV[ SMVX RMTMWX ZNWXV[ GMOM WM]M HMKN NMLN XMZN \\MZN", "layerParams.has(\"axis\")", "CL_INVALID_D3D10_DEVICE_KHR", "dnn::get_1blobs_10()", "calib3d::fisheye_1distortPoints_10()", "N2cv2ml2EME", "int cv::opt_SSE4_1::(anonymous namespace)::MorphVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_uint16x8> >::operator()(uchar **, int, uchar *, int) const [VecUpdate = cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_uint16x8>]", "PTRMRQ", "0 <= roi.x && 0 <= roi.width && roi.x + roi.width <= m.cols && 0 <= roi.y && 0 <= roi.height && roi.y + roi.height <= m.rows", "H]VFV[[[ WGWZ SFXFX[ VPUNSMQMNNLPKSKULXNZQ[S[UZVX MPLRLVMX QMONNOMRMVNYOZQ[ TFVG UFVH XYY[ XZZ[", "wrappers.size() == umats.size()", "query.type() == type && indices.type() == CV_32S && dists.type() == dtype", "arithm_ipp_xor8u", "N2cv12cpu_baseline12_GLOBAL__N_114MorphRowFilterINS1_5MaxOpIhEENS1_11MorphRowVecINS1_4VMaxINS_12hal_baseline10v_uint8x16EEEEEEE", "LYPKRQPX QKSQ YKSQQX NKSK VK[K NXSX", "CHECK failed: (message1->GetReflection()) == (this): ", "static void cv::dnn::dnn4_v20190122::LayerFactory::unregisterLayer(const cv::String &)", "photo::setLambda_10()", "../../../../modules/core/include/opencv2/core/mat.inl.hpp", "ArgMax", "__itt_state_set", "\"abc_capital_on\" : \"ZAP.\"", "bool cv::imencode(const cv::String &, cv::InputArray, std::vector<uchar> &, const std::vector<int> &)", "Input3", "deep clone functionality is not implemented, because Flann::Index has not copy constructor or clone method ", "void cv::hal::absdiff32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, void *)", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/samplers.cpp", "LXRMSLRKQLRMRQQRSURV RQSRQURVRZQ[R\\S[RZ POONNOOPPOTOUNVOUPTO PXOWNXOYPXTXUWVXUYTX", "\"abc_search_hint\" : \"\u062a\u0644\u0627\u0634 \u06a9\u0631\u06cc\u06ba\u2026\"", "\"abc_action_bar_home_description\" : \"\u0c39\u0c4b\u0c2e\u0c4d\u200c\u0c15\u0c41 \u0c28\u0c3e\u0c35\u0c3f\u0c17\u0c47\u0c1f\u0c4d \u0c1a\u0c47\u0c2f\u0c02\u0c21\u0c3f\"", "Not recognizing known sRGB profile that has been edited", "this->ksize == 3", "(int)_numAxes == inp0.dims", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16FlattenLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "JZRFQHRJSHRF RFRb RQQTRbSTRQ LMNNPMNLLM LMXM TMVNXMVLTM", "initBackend", "N2cv8opt_AVX212ColumnFilterINS0_4CastIdsEENS0_11ColumnNoVecEEE", "Mat::n_1reshape_11", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_9RGB2Luv_bEEE", "step_h", "CL_INVALID_MIP_LEVEL", "\" is missing required fields: ", ": Tried to copy from a message with a different type. to: ", "importer.tensors.size() == 1", "BatchNorm", "omc.type() == CV_64FC3 || Tc.type() == CV_64FC3", "F^OFI[ PFJ[ LFWFZG[I[KZNYOVPMP WFYGZIZKYNXOVP RPTQURVZW[Y[ZYZX URWYXZYZZY F[M[", "LYPFSCSP RDRP OPVP MRXR OVOWNWNVOUQTTTVUWWVYTZ TTUUVWUYTZ RZTZV[W]W^V`TaQaO`N_N^O^O_ TZU[V]V^U`Ta", "TAIL_M", "\" conflicts with field \"", "imgproc::setVotesThreshold_10()", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::RGB2Luv_b>::operator()(const cv::Range &) const [Cvt = cv::RGB2Luv_b]", "CV_IS_MAT(_distCoeffs) && (_distCoeffs->rows == 1 || _distCoeffs->cols == 1) && (_distCoeffs->rows*_distCoeffs->cols == 4 || _distCoeffs->rows*_distCoeffs->cols == 5 || _distCoeffs->rows*_distCoeffs->cols == 8 || _distCoeffs->rows*_distCoeffs->cols == 12 || _distCoeffs->rows*_distCoeffs->cols == 14)", "Input0", "Specified element size doesn't match to the size of the specified element type (try to use 0 for element type)", "video::getVariationalRefinementGamma_10()", "imgproc::circle_10()", "\"abc_searchview_description_query\" : \"\u0418\u0437\u0434\u04e9\u04e9 \u0442\u0430\u043b\u0430\u043f\u0442\u0430\u0440\u044b\"", "convertPointsFromHomogeneous", "virtual void cv::cpu_baseline::ColumnFilter<cv::cpu_baseline::Cast<float, short>, cv::cpu_baseline::SymmColumnVec_32f16s>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::Cast<float, short>, VecOp = cv::cpu_baseline::SymmColumnVec_32f16s]", "The sequence has NULL storage pointer", "N2cv14DefaultDeleterI14_IplConvKernelEE", "dx.type() == CV_32FC1 && dx.size == edges.size", "ushort16", "LogLuvSetupEncode", "tRNS must be after", "%s: __pos (which is %zu) > this->size() (which is %zu)", "N2cv23CvtColorIPPLoop_InvokerINS_18IPPGray2BGRFunctorIfEEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_117MorphColumnFilterINS3_5MaxOpIfEENS3_14MorphColumnVecINS3_4VMaxINS1_8hal_AVX211v_float32x8EEEEEEENS_9allocatorISD_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline9RowFilterIhdNS2_8RowNoVecEEENS_9allocatorIS5_EEEE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIyEE", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_111RGB2YCrCb_fIfEEEE", "src.rows == dst.cols && src.cols == dst.rows && src.type() == dst.type()", "N2cv3dnn14dnn4_v2019012212PaddingLayerE", "N2cv16PrefilterInvokerE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_114MorphRowFilterINS3_5MaxOpIhEENS3_11MorphRowVecINS3_4VMaxINS1_8hal_AVX210v_uint8x32EEEEEEENS_9allocatorISD_EEEE", "\"abc_capital_off\" : \"JOAKTIV\"", "N2cv8opt_AVX212_GLOBAL__N_111MorphFilterINS1_5MinOpItEENS1_8MorphVecINS1_4VMinINS_8hal_AVX211v_uint16x16EEEEEEE", "at least 3 rows and cols are needed to initialize the board", "STRIDE_W", "params.has(\"zoom_factor_x\") && params.has(\"zoom_factor_y\")", "\"abc_searchview_description_query\" : \"\u0936\u094b\u0927 \u0915\u094d\u0935\u0947\u0930\u0940\"", "LXUKRUQWPX VKSURWPXOXMWLUMTNUMV SKXK", "int cv::hal::normHamming(const uchar *, int)", "LinearizationTable", "Type is already registered: ", "N2cv12cpu_baseline18SymmRowSmallFilterIhiNS0_21SymmRowSmallVec_8u32sEEE", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::RGB2Gray<float> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::RGB2Gray<float>]", "photo::createTonemapMantiuk_11()", "resize", "dnn::setInput_11()", "nelems == m.total()*m.channels()", "SetDouble", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2RGB5x5>::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2RGB5x5]", "object points and image points must be a single-row matrices", "ml::getTestSampleIdx_10()", "getCatCount", "readTorchTable", "varMax", "_mask.empty() || (_src1.sameSize(_mask) && _mask.type() == CV_8U)", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi2EEElm7DistAbsNS1_IiLi2EEEE", "imgproc::getAffineTransform_10()", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/grabcut.cpp", "JZMWMQNOONQMSMUNVOWQWW", "G]QFQ[ RGRZ SFS[ NFVF N[V[ OFQG PFQH TFSH UFSG QZO[ QYP[ SYT[ SZU[ OKLLKMJOJRKTLUOVUVXUYTZRZOYMXLUKOK LMKOKRLT XTYRYOXM OKMLLOLRMUOV UVWUXRXOWLUK", "\"abc_searchview_description_clear\" : \"\u0418\u0437\u0447\u0438\u0441\u0442\u0432\u0430\u043d\u0435 \u043d\u0430 \u0437\u0430\u044f\u0432\u043a\u0430\u0442\u0430\"", "'): can't read data: unknown exception", "keypointIndexes has element < 0. TODO: process this case", "virtual void cv::opt_AVX2::(anonymous namespace)::ColumnSum<int, double>::operator()(const uchar **, uchar *, int, int, int) [ST = int, T = double]", "preferableBackend != DNN_BACKEND_OPENCV || preferableTarget == DNN_TARGET_CPU || preferableTarget == DNN_TARGET_OPENCL || preferableTarget == DNN_TARGET_OPENCL_FP16", "\"abc_searchview_description_voice\" : \"\uc74c\uc131 \uac80\uc0c9\"", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/const_layer.cpp", "FreeOffsets", "SetAllocatedMessage", "LXNQOPPPQQQURVSVTUUSVPVNUMTMSNSPTRUSWT", "\"abc_searchview_description_submit\" : \"Kirim kueri\"", "\"abc_search_hint\" : \"\u0dc3\u0ddc\u0dba\u0db1\u0dca\u0db1...\"", "\"abc_search_hint\" : \"Cari\u2026\"", "ml::getCalculateVarImportance_10()", "0 <= srcRange.start && srcRange.start <= srcRange.end && srcRange.end <= srcShapeSize", "Compression algorithm does not support random access", "p1.depth() == CV_32S || p1.depth() == CV_32F", "SGILogDataFmt", "MWNMRV VMRV", "ncn == img.channels()", "releaseSlot", "LXNNOQOSNV VNUQUSVV NNQOSOVN NVQUSUVV", "31TegraCvtColor_rgb2ycrcb_Invoker", "internal error: array alloc", "N2cv22resizeAreaFast_InvokerIsfNS_17ResizeAreaFastVecIsNS_26ResizeAreaFastVec_SIMD_16sEEEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_117MorphColumnFilterINS3_5MinOpIhEENS3_14MorphColumnVecINS3_4VMinINS1_8hal_AVX210v_uint8x32EEEEEEENS_9allocatorISD_EEEE", "Unknown parameter pool for layer type ", "int cv::buildOpticalFlowPyramid(cv::InputArray, cv::OutputArrayOfArrays, cv::Size, int, bool, int, int, bool)", "virtual void cv::CascadeClassifierImpl::detectMultiScale(cv::InputArray, std::vector<Rect> &, double, int, int, cv::Size, cv::Size)", "imgproc::phaseCorrelate_12()", "NSt6__ndk115__codecvt_utf16IDiLb1EEE", "rotatedRectangleIntersection", "Premature EOL", "Feature2D", "calib3d::getUniquenessRatio_10()", "N2cv3hal10opt_SSE4_112_GLOBAL__N_119YUV420p2RGB8InvokerILi0ELi3EEE", "MapValueRef::GetUInt32Value", "imgproc::applyColorMap_10()", "File appears to be in generated pool but wasn't registered: ", "dynamic_cast<", "virtual void cv::opt_AVX2::(anonymous namespace)::RowSum<int, int>::operator()(const uchar *, uchar *, int, int) [T = int, ST = int]", "\"abc_searchview_description_search\" : \"Tafuta\"", "void cv::Rodrigues(cv::InputArray, cv::OutputArray, cv::OutputArray)", "photo::textureFlattening_10()", "caffemodel", "__cxa_guard_release failed to release mutex", "numDisparities must be positive and divisble by 16", "\"search_menu_title\" : \"\u0dc3\u0ddc\u0dba\u0db1\u0dca\u0db1\"", "getBackgroundImage", "weight", "TIFFWriteDirectoryTagIfdIfd8Array", "backProject", "opencv-sparse-matrix", "cat_map", "!mask_values.empty()", "virtual void cv::HOGDescriptor::detectMultiScale(cv::InputArray, std::vector<Rect> &, std::vector<double> &, double, cv::Size, cv::Size, double, double, bool) const", "YCbCrSubsampling", "N2cv10opt_SSE4_112ColumnFilterINS0_4CastIdtEENS0_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14ReorgLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "?fff?", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::RGB2HLS_b>::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::RGB2HLS_b]", "TIFFTileRowSize64", "void cv::fisheye::distortPoints(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, double)", "calcSparseBackProj_", "gamma value does not match libpng estimate", "LSH is not implemented for that type", "SpatialDilatedConvolution", "Invalid numeric value (inconsistent explicit type specification?)", "ReadDarknetFromWeightsStream", "CL_LINK_PROGRAM_FAILURE", "NWTMSNSOTP UPSPQQQRRSTS SSQTPUPVQWSXSYRZQZ", "The matrices must have 32f or 64f data type", "JZRFR[ KFYF", "void cv::PCABackProject(cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray)", "../../../../modules/ml/include/opencv2/ml/ml.inl.hpp", "0 <= coi && coi < mat.channels()", "The histograms have different numbers of dimensions", "MWNMRQRV VMRQ", "\"abc_action_bar_home_description\" : \"Idi na po\u010detnu\"", "unexpected encoding (internal error)", "must be ", "ZIPSetupEncode", "No support for converting user data format to LogLuv", "H]NFRPO[ OFSPP[ ]FSP LFRF YF_F L[S[", "cvSeqPopMulti", "basic_string::_S_construct null not valid", "\"abc_searchview_description_voice\" : \"\u1021\u101e\u1036\u1016\u103c\u1004\u1037\u103a \u101b\u103e\u102c\u1016\u103d\u1031\u1001\u103c\u1004\u103a\u1038\"", "invCovsEigenValues.empty()", "size mismatch", "ml::setTrainTestSplit_11()", "/home/vagrant/build/srclib/opencv/modules/imgcodecs/src/grfmt_png.cpp", "NSt6__ndk114basic_ifstreamIcNS_11char_traitsIcEEEE", "G^QHRFR[ THSFS[ JHKFKMLPNRQSRS MHLFLNMQ [HZFZMYPWRTSSS XHYFYNXQ NWWW", "Incorrect value for \"%s\"", "void cv::opt_AVX2::cvt8s16s(const schar *, size_t, uchar *, size_t, short *, size_t, cv::Size, void *)", "filterByInertia", "!clusterSamples.empty()", "features2d::drawMatches_11()", "sortedIndices.type() == CV_32SC1", "virtual void cv::opt_SSE4_1::(anonymous namespace)::ColumnSum<double, unsigned short>::operator()(const uchar **, uchar *, int, int, int) [ST = double, T = unsigned short]", "Sum of Photometric type-related color channels and ExtraSamples doesn't match SamplesPerPixel. Defining non-color channels as ExtraSamples.", "../../../../modules/core/include/opencv2/core/utility.hpp", "imgproc::line_13()", "i!\"4i!\"4i!\"4i!\"4", "N2cv10opt_SSE4_112_GLOBAL__N_19ColumnSumIdtEE", "void cv::hal::exp32f(const float *, float *, int)", "\"abc_activity_chooser_view_see_all\" : \"Ikusi guztiak\"", "E_XP[RXT UMZRUW IRZR", "Bogus sampling factors", "features2d::setK_10()", "\"abc_activity_chooser_view_see_all\" : \"Alle ansehen\"", "calcDir", "rgb to gray red coefficient", "ml::getWeights_10()", "videoio::set_10()", "IPP:((ippicviCopy_32s_C1MR)((const Ipp32s *)src, (int)sstep, (Ipp32s *)dst, (int)dstep, ippiSize(size), (const Ipp8u *)mask, (int)mstep)) >= 0", "arithm_ipp_or8u", "N11opencv_onnx10GraphProtoE", "%I:%M:%S %p", "NSt6__ndk111__stdoutbufIcEE", "cvSub", "Bogus DAC value 0x%x", "CL_BUILD_PROGRAM_FAILURE", "virtual void cv::opt_SSE4_1::SymmColumnFilter<cv::opt_SSE4_1::Cast<double, unsigned char>, cv::opt_SSE4_1::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::Cast<double, unsigned char>, VecOp = cv::opt_SSE4_1::ColumnNoVec]", "input.size=", "int cv::cpu_baseline::(anonymous namespace)::MorphVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_uint16x8> >::operator()(uchar **, int, uchar *, int) const [VecUpdate = cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_uint16x8>]", "CHECK failed: !once_: ", " Can't back up over more bytes than were returned by the last call to Next().", "imgproc::dilate_10()", "NSt6__ndk113basic_istreamIcNS_11char_traitsIcEEEE", ".FastFeatureDetector", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_118SymmRowSmallFilterIhiNS2_21SymmRowSmallVec_8u32sEEENS_9allocatorIS5_EEEE", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::RGB5x52Gray>::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::RGB5x52Gray]", "N2cv12MatAllocatorE", "imgproc::initDelaunay_10()", "Write to EMS failed", "__itt_av_save", "opencv_tensorflow.OpDef.summary", "N6google8protobuf8internal29DescriptorPoolExtensionFinderE", ") is not a valid tile.", "double cv::dotProd_16u(const ushort *, const ushort *, int)", "TIFFUnRegisterCODEC", "N2cv10opt_SSE4_112_GLOBAL__N_19SqrRowSumIfdEE", "evaluateFeatureDetector", "E^MFMLLTKXJZI[H[GZGYHXIYHZ XFX[ YFY[ JF\\F U[\\[", "N2cv8opt_AVX212ColumnFilterINS0_4CastIfsEENS0_11ColumnNoVecEEE", "virtual void cv::cpu_baseline::(anonymous namespace)::BilateralFilter_32f_Invoker::operator()(const cv::Range &) const", "Mat::n_1setTo__JJJ()", "\"abc_capital_off\" : \"SL\u00d6KKT\"", "LYQKOLNNOPQQTQVPWNVLTKQK QKPLONPPQQ TQUPVNULTK QQORNTNUOWQXTXVWWUWTVRTQ QQPROTOUPWQX TXUWVUVTURTQ", "photo::createTonemapReinhard_12()", "getCellCenters: Chessboard must be at least consist of 3 rows and cols to calculate the cell centers", "core::subtract_12()", "ntrees == (int)trees_node.size()", "unknown chunk: out of memory", "lambda", "__itt_model_lock_acquire", "src.size == dst.size && src.channels() == dst.channels() && (src.depth() == dst.depth() || dst.depth() == CV_8U)", "checkOptimalVectorWidth", "void cv::cpu_baseline::cvt8u32f(const uchar *, size_t, uchar *, size_t, float *, size_t, cv::Size, void *)", "features2d::setNOctaves_10()", "src.cols >= win.width*2 + 5 && src.rows >= win.height*2 + 5", "\"abc_action_menu_overflow_description\" : \"\u0ec2\u0e95\u0ec0\u0ea5\u0eb7\u0ead\u0e81\u0ead\u0eb7\u0ec8\u0e99\"", "avx512", "NWSKPVPWQXSXTWUU TKQVQWRX POUO", "Ptr<cv::BaseColumnFilter> cv::opt_SSE4_1::getLinearColumnFilter(int, int, const cv::Mat &, int, int, double, int)", "Input matrix must be 1x3, 3x1 or 3x3", "void cv::hal::cpu_baseline::add16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int)", "KYNBPDRGTKUPUTTYR]P`Nb", "core::dft_12()", "ml::getLayout_10()", "calcInverseCovAndDeterm", "void cv::opt_AVX2::medianBlur_8u_O1(const cv::Mat &, cv::Mat &, int)", "Non-positive cols or rows", "workcycleObjectDetectorFunction", "N7cvflann7anyimpl21typed_base_any_policyIjEE", "N2cv23CvtColorIPPLoop_InvokerINS_19IPPGray2BGRAFunctorIfEEEE", "ERROR", "NSt6__ndk114default_deleteIN2cv3dnn14SplitLayerImplEEE", "features2d::getExtended_10()", "%s: Error fetching directory count", "void cv::Mat::copyTo(cv::OutputArray, cv::InputArray) const", "gtable", "NWRFQGQHRISITHTGSFRF RGRHSHSGRG RMRbSb RMSMSb", "cvMoments", "G][BIb", "IZMFM[ MFNFNZ NZYZY[ M[Y[", "LXTSSTTTTSSRQROSNTMVMXNZP[S[VYXV QROTNVNYP[", "!ldBot.backendNodes[preferableBackend].empty()", "TIFFReadEncodedTile", "\"abc_shareactionprovider_share_with_application\" : \"Megoszt\u00e1s a k\u00f6vetkez\u0151vel: %s\"", "G[G[IZLWOSSLVFV[UXSUQSNQLQKRKTLVNXQZT[Y[", "PTRMRV", "MZMVOSPQPSSSTTTVSYSZT[U[WZXYZV", "custom tag binary object", "LXPLPPLPLTPTPXTXTTXTXPTPTLPL", "Cannot handle zero strip size", "N2cv3dnn14dnn4_v2019012211RegionLayerE", "Mat::nGetD()", "virtual void cv::opt_SSE4_1::RowFilter<unsigned char, double, cv::opt_SSE4_1::RowNoVec>::operator()(const uchar *, uchar *, int, int) [ST = unsigned char, DT = double, VecOp = cv::opt_SSE4_1::RowNoVec]", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_110RGB2RGB5x5EEE", "THDiskFile_readDouble", "N7cvflann11KDTreeIndexINS_2L2IfEEEE", "void cv::hal::opt_SSE4_1::min32f(const float *, size_t, const float *, size_t, float *, size_t, int, int)", "\"abc_activity_chooser_view_see_all\" : \"\u0411\u04af\u0433\u0434\u0438\u0439\u0433 \u0445\u0430\u0440\u0430\u0445\"", "int cv::MatExpr::type() const", "G]PIPGQFSFTGTI GZHXJVKTLPLKMJOIUIWJXKXPYTZV\\X]Z GZ]Z QZP[Q\\S\\T[SZ", "outSize.total()", "vsymbolflags[i] == sflag || rowtypes[i] == VAR_MISSED", "imagePoints1 should not contain empty vector of vectors of points", "findCorners", "brow1", "video::getMinEigThreshold_10()", "\"abc_action_mode_done\" : \"Klart\"", "G]IB[b", "stoll", "job->is_completed", "core::exp_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112ColumnFilterINS2_13FixedPtCastExIihEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "samples.cols == weights_.cols && samples.type() == CV_32FC1", "Unknown feature", "ml::getWeightTrimRate_10()", "edgeDst(edge, &t) > 0", "%d-%d", "$int cv::rotatedRectangleIntersection(const cv::RotatedRect &, const cv::RotatedRect &, cv::OutputArray)", "void cv::ellipse(cv::InputOutputArray, const cv::RotatedRect &, const cv::Scalar &, int, int)", "CHECK failed: this == other_mutator: ", "Invalid closing tag for <?xml ...", "J[TFRGPJOLNOMTMXNZO[Q[SZUWVUWRXMXIWGVFTF NPWP", "objdetect::detectMultiScale_15()", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_16RowSumIhdEENS_9allocatorIS5_EEEE", "Some of parameters is a NULL pointer!", "JZRFQHRJSHRF RFRT RPQRSVRXQVSRRP RTRb R^Q`RbS`R^ LMNNPMNLLM LMXM TMVNXMVLTM L[N\\P[NZL[ L[X[ T[V\\X[VZT[", "TIFFRewriteDirectory", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::YCrCb2RGB_i<ushort> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::YCrCb2RGB_i<ushort>]", "ml::setCalculateVarImportance_10()", "predictCategoricalStump", "N2cv10opt_SSE4_116SymmColumnFilterINS0_4CastIdhEENS0_11ColumnNoVecEEE", "int cv::opt_AVX2::(anonymous namespace)::MorphRowVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_uint16x16> >::operator()(const uchar *, uchar *, int, int) const [VecUpdate = cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_uint16x16>]", "/home/vagrant/build/srclib/opencv/modules/core/src/system.cpp", "JZWNTLRIPLMN PLRJTL RJRZ WVTXR[PXMV PXRZTX", "srcImgs[0].channels() == pixelInfo<T>::channels", "1.2.3", "CV_MAT_DEPTH(m_type) == CV_8U", "createHanningWindow", "virtual void cv::MSER_Impl::detect(cv::InputArray, vector<cv::KeyPoint> &, cv::InputArray)", "Messages can't have default values!", "cv::TransformFunc cv::getTransformFunc(int)", "void cv::hal::cpu_baseline::cvtTwoPlaneYUVtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "cvCreateVideoWriter doesn't support legacy API anymore.", "*N12_GLOBAL__N_121future_error_categoryE", "unexpected ICC PCS encoding", "innerproduct", "nclusters <= nsamples", "\"abc_action_bar_home_description_format\" : \"%1$s\u3001%2$s\"", "void cv::hal::cvtBGRtoYUV(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool, bool)", "addConstNodes", "!fn.empty()", "src.depth() == CV_8U && (cn == 1 || cn == 3 || cn == 4)", "Sanity check on size of \"%s\" value failed", "pushBlock", "CL_DEVICE_NOT_FOUND", "MWTKTLULUKTK ORPPQOSOTPTRRYQ[O\\M\\M[N\\ ROSPSRQYP[O\\", "cn <= 4", "strides", "calib3d::findEssentialMat_10()", "UserComment", "start slice index is out of range", "u->refcount == 0", "imgproc::getVertex_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_16RowSumIhtEENS_9allocatorIS5_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml12KNearestImplENS_9allocatorIS3_EEEE", "N2cv20ipp_calcHistParallelE", "img.dims <= 2 && templ.dims <= 2 && corr.dims <= 2", "blobs[0].size[0] == inpCn", " layers is not defined.", "F^RJR[ JJZJ JRZR", "\"search_menu_title\" : \"Telusuri\"", "\"abc_action_bar_home_description\" : \"\u041d\u04af\u04af\u0440 \u0445\u0443\u0443\u0434\u0430\u0441 \u0440\u0443\u0443 \u0448\u0438\u043b\u0436\u0438\u0445\"", "video::setShadowThreshold_10()", "H]RFRb SFSb OFSF RPQNPMNMLNKQKWLZN[P[QZRX NMMNLQLWMZN[ WMXNYQYWXZW[ SPTNUMWMYNZQZWYZW[U[TZSX ObVb", "arithm_ipp_max16u", "convertScaleAbs", "video::KalmanFilter_12()", "\"abc_shareactionprovider_share_with\" : \"\u0a07\u0a38 \u0a28\u0a3e\u0a32 \u0a38\u0a3e\u0a02\u0a1d\u0a3e \u0a15\u0a30\u0a4b\"", "ml::setMaxDepth_10()", "uncaught", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_116SymmColumnFilterINS2_4CastIdhEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "validateToInt", "calib3d::findEssentialMat_15()", "scalarParams.has(\"pad_t\")", "samples", "KZSFQGPIPKQMSNUNWMXKXIWGUFSF SFPIQMUNXKWGSF UFQGPKSNWMXIUF", "N2cv12cpu_baseline12_GLOBAL__N_19ColumnSumIitEE", "Assuming 8-bit colormap", "N2cv12cpu_baseline9RowFilterIhdNS0_8RowNoVecEEE", "Deleted virtual function called!", "Buffer passed to JPEG library is too small", " to layer ", "\"abc_searchview_description_submit\" : \"Trimite\u021bi interogarea\"", "\"abc_searchview_description_submit\" : \"G\u1eedi truy v\u1ea5n\"", "\"abc_shareactionprovider_share_with\" : \"Bununla payla\u015f\u0131n\"", "\" image channel is invalid.", "void cv::AKAZEFeatures::Allocate_Memory_Evolution()", "N2cv2ml9TrainDataE", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphRowFilter<cv::opt_AVX2::(anonymous namespace)::MinOp<short>, cv::opt_AVX2::(anonymous namespace)::MorphRowVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_int16x16> > >::operator()(const uchar *, uchar *, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MinOp<short>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphRowVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_int16x16> >]", "calib3d::stereoCalibrate_10()", "\"abc_searchview_description_clear\" : \"\u0c2a\u0c4d\u0c30\u0c36\u0c4d\u0c28\u0c28\u0c41 \u0c15\u0c4d\u0c32\u0c3f\u0c2f\u0c30\u0c4d \u0c1a\u0c47\u0c2f\u0c3f\"", "dr > FLT_EPSILON", "virtual void cv::HOGDescriptor::compute(cv::InputArray, std::vector<float> &, cv::Size, cv::Size, const std::vector<Point> &) const", "void cv::erode(cv::InputArray, cv::OutputArray, cv::InputArray, cv::Point, int, int, const cv::Scalar &)", "29TegraCvtColor_rgb2bgr_Invoker", "dnn::empty_10()", "The node of type %d cannot be converted to collection", "Zero tiles", "\"abc_shareactionprovider_share_with_application\" : \"Bagikan dengan %s\"", "\"abc_shareactionprovider_share_with_application\" : \"Podijeli sa %s\"", "void cv::Algorithm::write(const Ptr<cv::FileStorage> &, const cv::String &) const", "_tvec.getMat().isContinuous() && _rvec.getMat().isContinuous()", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_114MorphRowFilterINS3_5MaxOpItEENS3_11MorphRowVecINS3_4VMaxINS1_10hal_SSE4_110v_uint16x8EEEEEEENS_9allocatorISD_EEEE", "\"abc_searchview_description_clear\" : \"Limpar consulta\"", "(coeffs.size() == Size(n0, 1) || coeffs.size() == Size(n0+1, 1) || coeffs.size() == Size(1, n0) || coeffs.size() == Size(1, n0+1))", "opencv_ml_nbayes", "ExposureMode", "Subsampling values inside JPEG compressed data have no TIFF equivalent, auto-correction of TIFF subsampling values failed", "void cv::HoughLinesStandard(cv::InputArray, cv::OutputArray, int, float, float, int, int, double, double)", "Jacobian must have 32fC1 or 64fC1 datatype", "/home/vagrant/build/srclib/opencv/modules/core/src/parallel_impl.cpp", "nz > 0", "virtual void cv::CalibrateRobertsonImpl::process(cv::InputArrayOfArrays, cv::OutputArray, cv::InputArray)", "\"abc_action_mode_done\" : \"\uc644\ub8cc\"", "nOutput", "N2cv12cpu_baseline12_GLOBAL__N_16RowSumIfdEE", "\"abc_action_bar_up_description\" : \"P\u0159ej\u00edt nahoru\"", "not_in", "q->corners[i]", "dnn::setInputsNames_10()", "imgproc::sqrBoxFilter_13()", "N3Imf12_GLOBAL__N_114TileBufferTaskE", "MWQMNV QMUMVNVPUQSRPR QRRUSVTVUU", "void cv::opt_AVX2::cvt16s16u(const short *, size_t, uchar *, size_t, ushort *, size_t, cv::Size, void *)", "Unknown parameter local_size for layer type ", "Unknown/unsupported interpolation type", "ml::create_14()", "Cannot get \"Predictor\" tag as plugin is not configured", "N2cv8opt_AVX28Filter2DIhNS0_4CastIftEENS0_11FilterNoVecEEE", "dst.type() == CV_8UC3 || dst.type() == CV_8UC4", "H[RKSLSMTMTLRKOKMLLNLX OKNLMNMX XKYLYMZMZLXKVKTMTX VKUMUX JOWO JXOX RXWX", "features2d::setScoreType_10()", "Encoder error: %s", "N2cv8opt_AVX28Filter2DIhNS0_4CastIfsEENS0_15FilterVec_8u16sEEE", "D.total() == 4 && K.size() == Size(3, 3) && (K.depth() == CV_32F || K.depth() == CV_64F)", "THDiskFile_readByte", "calibrateHandEye", "rootModule == NULL", "N12opencv_caffe13DataParameterE", "for \"StripOffsets\" array", "N2cv10opt_SSE4_116SymmColumnFilterINS0_13FixedPtCastExIihEENS0_19SymmColumnVec_32s8uEEE", "\" failed.  The files have different channel lists.", "NSt6__ndk114default_deleteIN2cv13HaarEvaluatorEEE", "N2cv25Affine3DEstimatorCallbackE", "fitLine2D_wods", "computeGraphConfidence", "fs && \"Can't read file data\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv5flann17KDTreeIndexParamsENS_9allocatorIS3_EEEE", "Expanded map entry type ", "0 <= count && count < nsamples", "numrlvls", "photo::createAlignMTB_10()", "N2cv2ml12KNearestImplE", "photo::fastNlMeansDenoisingMulti_14()", "N7cvflann17KDTreeSingleIndexINS_2L1IfEEEE", "poolingLayer.first != -1", "MWOSPURVTUUSTQRPPQOSNY", "R_gripper2base_.size() >= 3", "WARNING: Inf detected in layer output: id=", "Unknown parameter det_fg_fraction for layer type ", "nelems <= (size_t)size.p[0]", "AveragePool", "void cv::dnn::dnn4_v20190122::imagesFromBlob(const cv::Mat &, cv::OutputArrayOfArrays)", "weights.total()", "\"abc_searchview_description_submit\" : \"Enviar consulta\"", "!I0.empty() && I0.depth() == CV_8U && I0.channels() == 1", " '%s'", "photo::createAlignMTB_11()", "/home/vagrant/build/srclib/opencv/modules/dnn/misc/tensorflow/attr_value.pb.cc", "Unexpected failure while serializing option submessage ", "cvLaplace", "void cv::opt_AVX2::cvt16u8u(const ushort *, size_t, uchar *, size_t, uchar *, size_t, cv::Size, void *)", "\"abc_action_bar_home_description\" : \"\u041e\u0434\u043b\u0430\u0437\u0430\u043a \u043d\u0430 \u041f\u043e\u0447\u0435\u0442\u043d\u0443\"", "void cv::hal::cpu_baseline::sub32s(const int *, size_t, const int *, size_t, int *, size_t, int, int)", "The function can not solve under-determined linear systems", "N2cv22KMeansDistanceComputerILb1EEE", "invalid error action to rgb_to_gray", "_src.type() == CV_8UC1 || _src.type() == CV_16UC1", "JYKRLPMOOOPPPQM\\ NOOPOQL\\ PQROTOVPWRWTVVUWSXQXOVOT TOVQVTUVSX J\\O\\", "src1.size == src2.size", "N2cv12cpu_baseline12_GLOBAL__N_19SqrRowSumIddEE", "\"abc_shareactionprovider_share_with\" : \"\u098f\u09b0 \u09b8\u09be\u09a5\u09c7 \u09b6\u09c7\u09af\u09bc\u09be\u09b0 \u0995\u09b0\u09c1\u09a8\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline16SymmColumnFilterINS2_4CastIdhEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "virtual void cv::dnn::ElementWiseLayer<cv::dnn::AbsValFunctor>::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays) [Func = cv::dnn::AbsValFunctor]", "calib3d::composeRT_13()", "N2cv3dnn14dnn4_v2019012220DetectionOutputLayerE", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::HSV2RGB_b>::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::HSV2RGB_b]", "Array should be CvMat or IplImage", "VIDEOIO(%s): can't create capture", "F^GQHOJMLMMNNPNSL[ MNMSK[ MPLTJ[L[ NSPPRNTMVMXNYPYSWX XNXRWVWZ XPVUVXWZX[Z[\\Y]W", "calib3d::undistortPoints_12()", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::RGB2Gray<ushort> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::RGB2Gray<ushort>]", "preferableBackend == DNN_BACKEND_VKCOM", "L2HysThreshold", "KYMKRX NKRU WKRX KKPK TKYK", "\"abc_search_hint\" : \"\u0936\u094b\u0927\u093e\u2026\"", "\" is not an enum type.", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_116SymmColumnFilterINS2_13FixedPtCastExIihEENS2_19SymmColumnVec_32s8uEEENS_9allocatorIS7_EEEE", "N2cv32HoughCircleEstimateRadiusInvokerINS_10NZPointSetEEE", "video::getHistory_10()", "Row has too many bytes to allocate in memory", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphColumnFilter<cv::opt_SSE4_1::(anonymous namespace)::MinOp<float>, cv::opt_SSE4_1::(anonymous namespace)::MorphColumnVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_float32x4> > >::operator()(const uchar **, uchar *, int, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MinOp<float>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphColumnVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_float32x4> >]", "NSt6__ndk116__narrow_to_utf8ILm32EEE", "N2cv12cpu_baseline12_GLOBAL__N_16RowSumIhdEE", "\"abc_action_bar_home_subtitle_description_format\" : \"\u200f%1$s\u200f, %2$s\u200f, %3$s\"", "void cv::hal::merge64s(const int64 **, int64 *, int, int)", "static void cv::KeyPointsFilter::runByPixelsMask(std::vector<KeyPoint> &, const cv::Mat &)", "setCVFolds", "N2cv16BaseColumnFilterE", "N2cv2ml14BruteForceImplE", "imwrite", "__itt_clock_domain_create", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_10RGBA2mRGBAIhEEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2019012220SoftMaxKerasSubgraphEEE", "\"abc_capital_on\" : \"\u0c86\u0ca8\u0ccd\"", "\"abc_action_menu_overflow_description\" : \"\u0905\u0927\u093f\u0915 \u0935\u093f\u0915\u0932\u094d\u092a\"", "N2cv3hal5DCT2DE", "void cv::cpu_baseline::cvt8u(const uchar *, size_t, uchar *, size_t, uchar *, size_t, cv::Size, void *)", "calib3d::findEssentialMat_13()", "TIFFRawStripSize64", "calib3d::estimateAffine2D_12()", "'): can't read header: ", "double cv::dotProd_32f(const float *, const float *, int)", "void cv::putText(cv::InputOutputArray, const cv::String &, cv::Point, int, double, cv::Scalar, int, int, bool)", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_114MorphRowFilterINS3_5MaxOpIsEENS3_11MorphRowVecINS3_4VMaxINS1_12hal_baseline9v_int16x8EEEEEEENS_9allocatorISD_EEEE", "\"abc_searchview_description_query\" : \"\u0e8a\u0ead\u0e81\u0eab\u0eb2\"", "cvClipLine", "invalid parameter count", "checkSubset", "fitEllipse", "void cv::opt_AVX2::cvt16f8u(const cv::float16_t *, size_t, uchar *, size_t, uchar *, size_t, cv::Size, void *)", "void cv::ocl::setUseOpenCL(bool)", "separator_index < line.size()", "\"abc_searchview_description_voice\" : \"Busca de voz\"", "_sizes[i] > 0", "N3Iex8EbadeExcE", "SymmColumnSmallVec_32f", "\"abc_searchview_description_query\" : \"Search query\"", "cvStereoRectifyUncalibrated", "MWUMUV USTQRPPQOSPURVTUUS", "virtual bool cv::TiffDecoder::readData(cv::Mat &)", "): failed TIFFGetField(tif, TIFFTAG_TILELENGTH, &tile_height0)", "resetprob", "!\"$%'(*+-.0134679:<=?????????????????????", "AVX512-SKX", "SetString", "N2cv8opt_AVX216SymmColumnFilterINS0_4CastIftEENS0_11ColumnNoVecEEE", "getCorner", "luaType == TYPE_TABLE && readedIndexes.count(index) == 0", "(out.width - 1) * stride.width < in.width + pad_r", "getContourPoints", "worldToNDC", "\". This is not ", "adoptedNeutral", "JYPKLX QKMX NKTKVLWNWQVTUVTWQXJX TKULVNVQUTTVSWQX", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2019012220FlattenShapeSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "virtual void cv::opt_AVX2::(anonymous namespace)::ColumnSum<int, float>::operator()(const uchar **, uchar *, int, int, int)", "requested size is negative or too big", "NSt6__ndk113basic_ostreamIwNS_11char_traitsIwEEEE", "ktype == CV_32F || ktype == CV_64F", "F^LLKKKILGOFRFOQMWLYKZI[G[FZFXGWHXGY RFOONRLWKYI[ JTKSMRVOXN[L]J^H^G]F\\FZGXJWLURTVTYV[W[YZ[X \\FZHXLVRUVUYV[", "features2d::match_13()", "HDF5Data", "N2cv3dnn14dnn4_v2019012220SoftMaxKerasSubgraphE", "the output array of standard deviations vectors must be 1-channel 1x(n*6 + NINTRINSIC + m*3) or (n*6 + NINTRINSIC + m*3)x1 array, where n is the number of views, NINTRINSIC = 18, m is the number of object points per view", "N2cv13Jpeg2KDecoderE", "imgproc::ellipse2Poly_10()", "CV_MAT_TYPE(_rvec1->type) == CV_32F || CV_MAT_TYPE(_rvec1->type) == CV_64F", "TIFFComputeStrip", "Fax3Encode", "HoughCirclesGradient", "\"abc_searchview_description_submit\" : \"\u0e2a\u0e48\u0e07\u0e02\u0e49\u0e2d\u0e04\u0e27\u0e32\u0e21\u0e04\u0e49\u0e19\u0e2b\u0e32\"", "N2cv8opt_AVX225FAST_t_patternSize16_AVX2E", "video::getFlags_10()", "int cv::cpu_baseline::SymmRowSmallVec_8u32s::operator()(const uchar *, uchar *, int, int) const", "I[LPXP LTXT", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_114MorphRowFilterINS3_5MaxOpIdEENS3_13MorphRowNoVecEEENS_9allocatorIS8_EEEE", "23EqualizeHistLut_Invoker", "Region location is disabled. Bailout", "H\\PFJ[ QFK[ XNWOXPYOYNXMWMUNQROSMS OSQTSZT[ OSPTRZS[U[WZYW MFQF", "NVSLRMSNTMSL QRKd RRO[M`KdJfHgGfGdHaJ_M]Q[TYVV", "_kernel.type() == CV_8U", "i2 >= 0 && i2 < static_cast<int>(keypoints2.size())", "N2cv13BaseRowFilterE", "RichTIFFIPTC", "Cannot read TIFF header", "N2cv10PxMEncoderE", "dnn::getLayerTypes_10()", "H\\YMXOVQNWLYK[ LQMOOMRMVO MOONRNVOXO LYNYRZUZWY NYR[U[WYXW", "void cv::hal::opt_AVX2::cvtBGRtoHSV(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool, bool, bool)", "/home/vagrant/build/srclib/opencv/modules/dnn/src/tensorflow/tf_io.cpp", "imgproc::warpPerspective_10()", "org/opencv/core/MatOfInt", "setParam", "Removed method: ProgramSource::hash()", "filterOutliersByDensity", "getGaborKernel", "imgproc::watershed_10()", "\"1'i.>", "AcHBHb IBIb [B[b \\B\\b DB`B DbMb Wb`b", "virtual void cv::MatOp::multiply(const cv::MatExpr &, const cv::MatExpr &, cv::MatExpr &, double) const", "parseHdrlList", "Sorry, can not handle image with %s=%d, %s=%d and %s=%d", "\"abc_shareactionprovider_share_with_application\" : \"%s-\u10d7\u10d0\u10dc \u10d2\u10d0\u10d6\u10d8\u10d0\u10e0\u10d4\u10d1\u10d0\"", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2019012220OpenCLBackendWrapperEEE", "OpenCV/4.1.0", "void cv::dnn::dnn4_v20190122::Net::setHalideScheduler(const cv::String &)", "){O)I*E+@-;073370;-@+E*I)O)U*[+_-d0i3m7q;t@wEyIzO{U{[z_ydwitmqqmtiwdy_z[{U{OzIyEw@t;q7m3i0d-_+[*U)O)", "N17opencv_tensorflow5OpDefE", "void cv::Canny(cv::InputArray, cv::InputArray, cv::OutputArray, double, double, bool)", "Input file is empty", "NVQMPNPPQQSQTPTNSMQM", "img.cols", "Translation vector must be 1x3 or 3x1 floating-point vector", "filterSpeckles", "ml::getVotes_10()", "utils::findDataFile('%s', %s)", "\"abc_searchview_description_submit\" : \"D\u00ebrgo pyetjen\"", "LYOMONNNNMOLQKTKVLWNVPTQ TKULVNUPTQ RQTQVRWTWUVWTXQXOWNVNUOUOV TQURVTVUUWTX", "calib3d::rectify3Collinear_10()", "void cv::extractChannel(cv::InputArray, cv::OutputArray, int)", "K[NRLXLZN[O[QZSXUU ORMXMZN[ VRPd WRT[R`PdOfMgLfLdMaO_R]V[YY[V", "photo::createTonemapReinhard_13()", "/home/vagrant/build/srclib/opencv/modules/photo/src/seamless_cloning.cpp", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn17PriorBoxLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "\"abc_action_bar_home_description\" : \"Navigeer tuis\"", "PluginWriter", "sPLT: invalid keyword", "Field name \"$0\" is reserved multiple times.", "\"abc_font_family_headline_material\" : \"sans-serif\"", "inp0.dims >= 2", "iTXt: uncompressed text too long", "virtual void cv::cpu_baseline::SymmColumnFilter<cv::cpu_baseline::Cast<float, float>, cv::cpu_baseline::SymmColumnSmallVec_32f>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::Cast<float, float>, VecOp = cv::cpu_baseline::SymmColumnSmallVec_32f]", "void cv::equalizeHist(cv::InputArray, cv::OutputArray)", "Bilateral filtering is only implemented for 8u and 32f images", "unrecognized ICC profile class", "cvAddS", "F^HFM[ RFM[ RFW[ \\FW[", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_111MorphFilterINS3_5MinOpIhEENS3_8MorphVecINS3_4VMinINS1_10hal_SSE4_110v_uint8x16EEEEEEENS_9allocatorISD_EEEE", "Concat", "/home/vagrant/build/srclib/opencv/modules/imgcodecs/src/grfmt_pfm.cpp", "INVALID_ARGUMENT", "core::log_10()", "virtual void cv::opt_SSE4_1::(anonymous namespace)::RowSum<unsigned char, int>::operator()(const uchar *, uchar *, int, int) [T = unsigned char, ST = int]", "H.cols == 3 && H.rows == 3", "LYSKQLPMOONRNUOWPXRXTWUVVTWQWNVLUKSK SKQMPOOSOVPX RXTVUTVPVMUK OQVQ", "response.rows == LDR_SIZE && response.cols == 1 && response.channels() == channels", "opencv_ml_lr", "params.regression_accuracy should be >= 0", "calib3d::fisheye_1stereoCalibrate_11()", "LZQOPPPQOQOPQOTOVQVWWXXX TOUQUWWX URRSPTOUOWPXSXTWUU RSPUPWQX", "scale_val", "Invalid histogram header", "BlackLevelDeltaV", "N2cv8colormap4CoolE", "TIFFNumberOfDirectories", "N2cv10opt_SSE4_112_GLOBAL__N_111MorphFilterINS1_5MinOpItEENS1_8MorphVecINS1_4VMinINS_10hal_SSE4_110v_uint16x8EEEEEEE", "V1LayerParameter (see above); continuing anyway.", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_114MorphRowFilterINS3_5MaxOpIsEENS3_11MorphRowVecINS3_4VMaxINS1_10hal_SSE4_19v_int16x8EEEEEEENS_9allocatorISD_EEEE", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/pooling_layer.cpp", "N2cv3dnn14ConstLayerImplE", "filterByCircularity", "N2cv17GFTTDetector_ImplE", "N2cv3dnn15ResizeLayerImplE", "int cv::LU(double *, size_t, int, double *, size_t, int)", "missing IHDR", "createLayerInstance", "inpHeight", "CHECK failed: mutex_ == NULL: ", "mtype == type0 || (CV_MAT_CN(mtype) == 1 && ((1 << type0) & fixedDepthMask) != 0)", "calib3d::setSpeckleWindowSize_10()", "dnn::getFLOPS_12()", "Fields of oneofs must themselves have label LABEL_OPTIONAL.", "N10__cxxabiv123__fundamental_type_infoE", "int cv::opt_AVX2::FilterEngine__start(cv::FilterEngine &, const cv::Size &, const cv::Size &, const cv::Point &)", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_114MorphRowFilterINS3_5MinOpIdEENS3_13MorphRowNoVecEEENS_9allocatorIS8_EEEE", "image_data", "photo::createTonemapMantiuk_10()", "video::predict_10()", "void cv::moveWindow(const cv::String &, int, int)", "fs_size", "photo::setSaturation_10()", "void cv::hal::opt_SSE4_1::cvtTwoPlaneYUVtoBGR(const uchar *, const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "__itt_counter_dec", "featureParams", "CV_8UC4", "\"abc_activitychooserview_choose_application\" : \"S\u00e9lectionnez une application\"", "G]JMKNLPL[ KMLNMPMZ HPINJMLMMNNPN[ UMVNWQWb WOXRXa NQOOPNRMUMWNXOYRYb L[N[ WbYb", "virtual void cv::dnn::ElementWiseLayer<cv::dnn::TanHFunctor>::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays) [Func = cv::dnn::TanHFunctor]", "\"search_menu_title\" : \"K\u00ebrko\"", "unable to obtain disk file offset (maybe a long overflow occurred)", "params.has(\"width\")", "E.cols == 3 && E.rows == 3", "npoints == 4", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn15ConcatLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "initializeContextFromGL", "NSt6__ndk15ctypeIcEE", "insert", "ReadTFNetParamsFromTextFileOrDie", "bad_array_new_length", "static Ptr<cv::ml::RTrees> cv::ml::RTrees::create()", "rate=", "\"abc_action_mode_done\" : \"Feito\"", "F]KFKQLSOTRTUSWQ LFLQMSOT WFW[ XFX[ HFOF TF[F T[[[", "u->refcount == 0 || u->tempUMat()", "\"abc_action_mode_done\" : \"Done\"", "\"abc_activitychooserview_choose_application\" : \"Elige una aplicaci\u00f3n.\"", "ImageFullLength", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::RGBA2mRGBA<uchar> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::RGBA2mRGBA<uchar>]", "right", "cv::impl::(anonymous namespace)::CvtHelper<cv::impl::(anonymous namespace)::Set<3, 4, -1>, cv::impl::(anonymous namespace)::Set<3, 4, -1>, cv::impl::(anonymous namespace)::Set<0, 2, 5>, cv::impl::(anonymous namespace)::SizePolicy::NONE>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::impl::(anonymous namespace)::Set<3, 4, -1>, VDcn = cv::impl::(anonymous namespace)::Set<3, 4, -1>, VDepth = cv::impl::(anonymous namespace)::Set<0, 2, 5>, sizePolicy = cv::impl::(anonymous namespace)::SizePolicy::NONE]", "Scan line ", "validateInputImageSize", "\"abc_searchview_description_submit\" : \"\u03a5\u03c0\u03bf\u03b2\u03bf\u03bb\u03ae \u03b5\u03c1\u03c9\u03c4\u03ae\u03bc\u03b1\u03c4\u03bf\u03c2\"", "N6google8protobuf8internal20RepeatedFieldWrapperImEE", "calib3d::setPreFilterCap_10()", "Invalid value for WhitePoint tag.", "NSt6__ndk119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "I0.sameSize(I1)", "%s %s %s", "\"abc_searchview_description_voice\" : \"Recherche\u00a0vocale\"", "width0", "imgproc::bilateralFilter_10()", "/home/vagrant/build/srclib/opencv/modules/dnn/src/caffe/caffe_importer.cpp", "image is empty", "proto2", "cv::MatExpr cv::Mat::inv(int) const", "NSt6__ndk114default_deleteINS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEEEE", "getSample", "degree", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2019012213TorchImporter6ModuleEEE", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_9RGB2Lab_fEEE", "addPoint", "double cv::kmeans(cv::InputArray, int, cv::InputOutputArray, cv::TermCriteria, int, int, cv::OutputArray)", "The parameter p must be positive", "features2d::getMaxFeatures_10()", "NULL row buffer", "void cv::hal::opt_SSE4_1::cvtGraytoBGR5x5(const uchar *, size_t, uchar *, size_t, int, int, int)", "%?N2cv8colormap3JetE", "int cv::opt_AVX2::(anonymous namespace)::MorphVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_uint16x16> >::operator()(uchar **, int, uchar *, int) const [VecUpdate = cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_uint16x16>]", "cvThreshHist", "Distortion coefficients must be 1x4, 4x1, 1x5, 5x1, 1x8, 8x1, 1x12, 12x1, 1x14 or 14x1 floating-point vector", "Unknown region type \"", "intensity", "static cv::MatExpr cv::Mat::zeros(cv::Size, int)", "\"abc_shareactionprovider_share_with_application\" : \"Partilhar com %s\"", "core::insertChannel_10()", "\"abc_action_bar_home_description\" : \"Visa startsidan\"", "Invalid JPEG file structure: two SOI markers", "spatial", "RGBE bad file format: ", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_19ColumnSumIddEENS_9allocatorIS5_EEEE", "void cv::Sobel(cv::InputArray, cv::OutputArray, int, int, int, int, double, double, int)", "N2cv12cpu_baseline16SymmColumnFilterINS0_4CastIdhEENS0_11ColumnNoVecEEE", "core::getTimeMicro_10()", "void cv::opt_SSE4_1::FilterEngine__apply(cv::FilterEngine &, const cv::Mat &, cv::Mat &, const cv::Size &, const cv::Point &)", "suppress", "denoise_TVL1", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_16RowSumIddEENS_9allocatorIS5_EEEE", "G\\KFK[ KFTFWGXHYJYLXNWOTP KPTPWQXRYTYWXYWZT[K[", "Non-repeated Any specified multiple times.", "void cv::hal::cpu_baseline::div64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, const double *)", "features2d::create_111()", "objdetect::detectMultiScale3_15()", "N6google8protobuf2io14ErrorCollectorE", "imgproc::collectGarbage_10()", "N11opencv_onnx16TensorShapeProtoE", "\\U%08x", "int cv::cpu_baseline::(anonymous namespace)::MorphRowVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_int16x8> >::operator()(const uchar *, uchar *, int, int) const [VecUpdate = cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_int16x8>]", "St16nested_exception", "evects0.cols == evects.cols", "): glob is '", "H]ZKYIWGUFQFOGMILKKNKSLVMXOZQ[U[WZYXZV", "src[i].dims <= 2 && src[i].rows == src[0].rows && src[i].type() == src[0].type()", "(float)idata[i] == fdata[i*istep]", "N3Iex11EstrpipeExcE", "N2cv3hal8opt_AVX212_GLOBAL__N_119YUV422toRGB8InvokerILi0ELi0ELi1ELi4EEE", "Cannot invert singular matrix.", "initInfEngineBackend", "dnn::run_10()", "fs.isOpened()", "MVQMNV QMVM PQSQ", "N3Iex10EbadmsgExcE", "cvPtr2D", "void cv::hal::opt_AVX2::sub16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int)", "fromSPIR", "cvRemoveNodeFromTree", "Invalid wire type for CPPTYPE_UINT64: ", "\"abc_shareactionprovider_share_with_application\" : \"Freigeben f\u00fcr %s\"", "N2cv11RBaseStreamE", "void cv::hal::opt_AVX2::cmp16s(const short *, size_t, const short *, size_t, uchar *, size_t, int, int, int)", "IPP:ipp_Canny(src, Mat(), Mat(), dst, (float)low_thresh, (float)high_thresh, L2gradient, aperture_size)", "PolyLine", "GaussianBlurFixedPoint", "Invalid image type (must be single-channel)", "\"abc_action_mode_done\" : \"Hotovo\"", "dnn::readNetFromCaffe_13()", "cvInitMatNDHeader", "scanner->img_step >= 0", "cvGetImage", "\"abc_shareactionprovider_share_with\" : \"Comparteix amb\"", "Mat::n_1Mat__DDIDDDD()", "m1.dims", "MWUSTQRPPQOSPURVTUUSUPTNRMQM", "MWRLRW OTPURXTUUT PURWTU", "@cTGSHTIUHTGRFOFLGJIIKHNGRE[D_Ca OFMGKIJKINGWF[E^D`CaAb?b>a>`?_@`?a ^G]H^I_H_G]F aFZFWGUITKSNRRP[O_Na ZFXGVIUKTNRWQ[P^O`NaLbJbIaI`J_K`Ja `F\\T[X[Z\\[_[aYbW aF]T\\X\\Z][ DM^M", "\"abc_searchview_description_search\" : \"\u0406\u0437\u0434\u0435\u0443\"", "R5rIg,>", "LOCAL_SZ_Z", "Can not read tiles from a stripped image", "LYNCNG VERLPP WCTIQP NEPCRCUE NEPDRDUEVE MRXR QTOUNWOYQZTZVYWWVUTTQT QTPUOWPYQZ TZUYVWUUTT QZO[N]N^O`QaTaV`W^W]V[TZ QZP[O]O^P`Qa TaU`V^V]U[TZ", "H]OJPKOLNKNJOHPGSFVFYGZIZKYMVOSP VFXGYIYKXMVO QPSPVQWRXTXWWYVZS[O[LZKYJWJVKULVKW SPUQVRWTWWVYUZS[", "\"abc_search_hint\" : \"Pretra\u017eite...\"", "NSt6__ndk119__shared_weak_countE", "bad_array_length", "virtual void cv::opt_AVX2::RowFilter<unsigned short, float, cv::opt_AVX2::RowNoVec>::operator()(const uchar *, uchar *, int, int) [ST = unsigned short, DT = float, VecOp = cv::opt_AVX2::RowNoVec]", "__itt_track_create", "Sampling factors too large for interleaved scan", "Failed to initialize ThreadPool (pthreads)", "imgproc::createLineSegmentDetector_13()", "video::createBackgroundSubtractorMOG2_11()", " BackUp() can only be called after Next().", "~N3Iex7MathExcE", "K[UUTSRRPRNSMTLVLXMZO[Q[SZTX PRNTMVMYO[ ZFTXTZV[XZYY[V [FUXUZV[", "application buffer not large enough for all data.", "int cv::opt_AVX2::sqsum8u(const uchar *, const uchar *, int *, int *, int, int)", "\"abc_searchview_description_clear\" : \"Pastro pyetjen\"", "a->size() == n", "LRLFLRRRLF LIPQ LLOR LOMQ", "): failed (int)TIFFReadEncodedTile(tif, tileidx, buffer, buffer_size) >= 0", "org.opencv.video", "string", "depth == CV_32F || depth == CV_64F", "_minSize > 0", "calib3d::getROI2_10()", "calib3d::decomposeProjectionMatrix_12()", "icvFindContoursInInterval", "org_y", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_11RGB5x52GrayEEE", "JYNKNX OKOX LKSKVLWNWOVQSROR SKULVNVOUQSR LXQX", "N6google8protobuf20OneofDescriptorProtoE", "H[LFL[M[ LFMFM[ XMWMMW XMMX PTV[X[ QSX[", "In case of user-defined distance Distance function is undefined", "photo::textureFlattening_11()", "void cv::hal::opt_SSE4_1::max8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int)", "method == DECOMP_LU || method == DECOMP_SVD || method == DECOMP_EIG || method == DECOMP_CHOLESKY || method == DECOMP_QR", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn12RNNLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "_allocateBufferEntry", "tp == STRING || tp == SEQ || tp == MAP", "IPP:ipp_medianFilter(src0, dst, ksize)", "ml::getNormCatResponses_10()", "cmpop == CMP_NE", "v.type() == CV_64FC1 && v.rows == 3 && v.cols == 1", "m.type()", "dnn::getUnconnectedOutLayers_10()", "): failed TIFFSetField(tif, TIFFTAG_PLANARCONFIG, PLANARCONFIG_CONTIG)", "No space for LZW hash table", "(((flags&GEMM_3_T) == 0 && C.rows == d_size.height && C.cols == d_size.width) || ((flags&GEMM_3_T) != 0 && C.rows == d_size.width && C.cols == d_size.height))", "!objectPoints.empty() && !imagePoints1.empty() && !imagePoints2.empty()", "varInit", "arithm_ipp_cmp8u", "png_do_quantize returned rowbytes=0", "VideoBackendRegistry", "int cv::opt_AVX2::sqsum32f(const float *, const uchar *, double *, double *, int, int)", "Invalid color type in IHDR", "Failed to allocate fields array", "setDataSource error: %d", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_9Lab2RGB_bEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_117MorphColumnFilterINS3_5MaxOpIsEENS3_14MorphColumnVecINS3_4VMaxINS1_12hal_baseline9v_int16x8EEEEEEENS_9allocatorISD_EEEE", "evolution_.size() > 0", "!fixedSize() || ((UMat*)obj)->size.operator()() == _sz", "/home/vagrant/build/srclib/opencv/modules/core/src/datastructs.cpp", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/descriptor.cc", "F^MMKLJJJIKGMFNFPGQIQKPONULYJ[H[GZGX ^I^G]F\\FZGXIVLTNROPO ROSQSXTZU[V[XZYY[V", "\"abc_action_bar_up_description\" : \"\u0548\u0582\u0572\u0572\u057e\u0565\u056c \u057e\u0565\u0580\u0587\"", "void cv::bitwise_or(cv::InputArray, cv::InputArray, cv::OutputArray, cv::InputArray)", "N2cv14MergeRobertsonE", "ml::getAnnealInitialT_10()", "core::PSNR_10()", "\"abc_action_bar_up_description\" : \"Naviger op\"", "void cv::hal::cpu_baseline::cvtRGBAtoMultipliedRGBA(const uchar *, size_t, uchar *, size_t, int, int)", "N3Iex9EnfileExcE", "\"abc_shareactionprovider_share_with_application\" : \"Condividi con %s\"", "vals[ofs[k]] <= pivot", "No space for YCbCr->RGB conversion state", "updateAlt", "void cv::hal::cpu_baseline::recip32f(const float *, size_t, float *, size_t, int, int, const double *)", "E`QFNGKIILHOHRIUKXNZQ[T[WZZX\\U]R]O\\LZIWGTFQF ROQPQQRRSRTQTPSORO RPRQSQSPRP", "void cv::dnn::dnn4_v20190122::Net::Impl::setUpNet(const std::vector<LayerPin> &)", "ml::getNames_10()", "\"abc_activitychooserview_choose_application\" : \"V\u00e4lj en app\"", "count >= 1", "cl_khr_image2d_from_buffer", "getScaleAddFunc", "I\\RFOGMILLLMMPORRSSSVRXPYMYLXIVGSFRF RSR[ SSS[ NWWW", "Thursday", "virtual void cv::opt_SSE4_1::SymmColumnFilter<cv::opt_SSE4_1::Cast<double, double>, cv::opt_SSE4_1::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::Cast<double, double>, VecOp = cv::opt_SSE4_1::ColumnNoVec]", "rects", "I[XPVNTMQMONMPLSLUMXOZQ[T[VZXX", "exp_val", "virtual void cv::TonemapMantiukImpl::process(cv::InputArray, cv::OutputArray)", "N2cv8opt_AVX212_GLOBAL__N_19ColumnSumIifEE", "2#.opencv_tensorflow.TensorShapeProtoH", "core::polarToCart_10()", "cvReprojectImageTo3D", "!I1.empty() && I1.channels() == 1", "eigenvalues64f.size() == n", "imgproc::arrowedLine_12()", "Value out of range for int64 option \"", "Out of memory reading of \"%s\"; tag ignored", "N2cv3hal8opt_AVX212_GLOBAL__N_120YUV420sp2RGB8InvokerILi2ELi0ELi4EEE", "\" failed. \"", "params.", "perm.type() == CV_32SC1", "core::bitwise_1or_10()", "objdetect::CascadeClassifier_11()", "N2cv25BOWImgDescriptorExtractorE", "void cv::opt_AVX2::cvt8u(const uchar *, size_t, uchar *, size_t, uchar *, size_t, cv::Size, void *)", "N2cv10PFMDecoderE", "\"abc_shareactionprovider_share_with_application\" : \"Deel met %s\"", "Could not find confidence predictions for label %d", "/home/vagrant/build/srclib/opencv/modules/ml/src/ann_mlp.cpp", "CL_KERNEL_ARG_INFO_NOT_AVAILABLE", "Mat::n_1ones__III()", "MWQMNV QMUMVNVPUQSRPR", "data.cols <= evects.rows", "\"abc_action_bar_up_description\" : \"\u0e19\u0e33\u0e17\u0e32\u0e07\u0e02\u0e36\u0e49\u0e19\"", "ml::getNSamples_10()", "N2cv20BufferPoolControllerE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi4EEEij11DistSquaredNS1_IiLi4EEEE", "operator new[]", "\"abc_action_bar_up_description\" : \"\u041a\u0440\u0435\u0442\u0430\u045a\u0435 \u043d\u0430\u0433\u043e\u0440\u0435\"", "ipoints.isContinuous()", "_layout == ROW_SAMPLE || _layout == COL_SAMPLE", "imgproc::getPerspectiveTransform_11()", "virtual void cv::cpu_baseline::(anonymous namespace)::RowSum<unsigned char, int>::operator()(const uchar *, uchar *, int, int) [T = unsigned char, ST = int]", "_lines1.depth() == CV_32F || _lines1.depth() == CV_32S", "calib3d::stereoCalibrateExtended_12()", "V0LayerParameter", "longitude", "CORNER", "F^JHNJPLQOQRPUNWJY JHMIOJQLRO RRQUOWMXJY ZHWIUJSLRO RRSUUWWXZY ZHVJTLSOSRTUVWZY IP[P IQ[Q", "G]OFI[K[ PFJ[ LFQFK[ MTOPQNSMUMWNXPXSVX WNWRVVVZ WPUUUXVZW[Y[[Y\\W MFPG NFOH", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/matchcontours.cpp", "pytorch", "basisGraphs[0].getVerticesCount() == basisGraphs[1].getVerticesCount()", "__itt_heap_internal_access_begin", "!means || (!means->empty() && means->rows == nclusters && means->cols == dim && means->channels() == 1)", "): failed TIFFSetField(tif, TIFFTAG_IMAGELENGTH, height)", "padMode == \"VALID\"", "Unrecognized method id. Actually only CV_HOUGH_GRADIENT is supported.", "filterByColor", "icvGetNodePtr", "The specified aspect ratio (= cameraMatrix[0][0] / cameraMatrix[1][1]) is incorrect", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::RGB2YCrCb_i<ushort> >::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::RGB2YCrCb_i<ushort>]", "NULL array pointer is passed", "F^SKTLTM ULSKPKNLMMLOIYH[G\\ PKNMMOJYI[G\\E\\E[F\\ ZK[L \\KWKUL TMSOPYO[N\\ WKUMTOQYP[N\\L\\L[M\\ [KXVXWYX[X\\W]U \\KYVYWZX IOZO", "%02x ", "startWriteStruct", "Ptr<cv::BaseColumnFilter> cv::getMorphologyColumnFilter(int, int, int, int)", "/home/vagrant/build/srclib/opencv/modules/calib3d/src/stereobm.cpp", "imgproc::cornerHarris_10()", "N2cv8opt_AVX212_GLOBAL__N_114MorphRowFilterINS1_5MinOpIhEENS1_11MorphRowVecINS1_4VMinINS_8hal_AVX210v_uint8x32EEEEEEE", "void cv::hal::not8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "BackUp() can only be called after a successful Next().", "LZLVNSPO SFMXMZO[P[RZTXUUURVVWWXWZV TFNXNZO[", "NSt6__ndk114__num_get_baseE", "G]PFNGLIKKJNJSKVLXNZP[T[VZXXYVZSZNYKXIVGTFPF SWY]", "__cxa_guard_release failed to broadcast condition variable", "void cv::hal::opt_AVX2::min32f(const float *, size_t, const float *, size_t, float *, size_t, int, int)", "N2cv10opt_SSE4_112_GLOBAL__N_19ColumnSumIidEE", "N6google8protobuf2io19OstreamOutputStream26CopyingOstreamOutputStreamE", "{:opencv-cascade-classifier", "\"abc_toolbar_collapse_description\" : \"Skjul\"", "!anchors_values.empty()", "Non-primitive types can't be packed.", "scn == 1 && dcn == 3", "ml::predict_12()", "estimateAffinePartial2D", "F^JFJ[ JFR[ ZFR[ ZFZ[", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/message_lite.cc", "double cv::dotProd_16s(const short *, const short *, int)", "fs && \"Can't read WEBP_HEADER_SIZE bytes\"", "Illegal value for SubIFD tag", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_16RowSumIhtEENS_9allocatorIS5_EEEE", "ENDHDR", "median", "Byte size calculation and serialization were inconsistent.  This may indicate a bug in protocol buffers or it may be caused by concurrent modification of ", "H]TBL_ YBQ_ ZJYKZL[K[JZHYGVFRFOGMIMKNMONVRXT MKOMVQWRXTXWWYVZS[O[LZKYJWJVKULVKW", "\"abc_shareactionprovider_share_with\" : \"\u0b87\u0ba4\u0ba9\u0bc1\u0b9f\u0ba9\u0bcd \u0baa\u0b95\u0bbf\u0bb0\u0bcd\"", "MWRMQNROSNRM SZR[QZRYSZS\\R^Q_", "Directory %d does not exist", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::RGBA2mRGBA<uchar> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::RGBA2mRGBA<uchar>]", "cvEndFindContours", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/mvn_layer.cpp", "N3Iex15EnametoolongExcE", "dst.data != srcA.data", "getByIndex", "Get_Upright_MLDB_Full_Descriptor", "../../../../3rdparty/protobuf/src/google/protobuf/map.h", "createConvexHull", "cvFilter2D", "k:qB>", "NSt6__ndk18numpunctIcEE", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/batch_norm_layer.cpp", "/home/vagrant/build/srclib/opencv/modules/core/src/command_line_parser.cpp", "__itt_task_end_ex", "__itt_task_begin_overlapped", "imgproc::morphologyEx_11()", "core::SVBackSubst_10()", "\"abc_searchview_description_clear\" : \"\u0caa\u0ccd\u0cb0\u0cb6\u0ccd\u0ca8\u0cc6\u0caf\u0ca8\u0ccd\u0ca8\u0cc1 \u0ca4\u0cc6\u0cb0\u0cb5\u0cc1\u0c97\u0cca\u0cb3\u0cbf\u0cb8\u0cc1\"", "pad_h", "len % elemSize == 0", "video::KalmanFilter_13()", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_114MorphRowFilterINS3_5MinOpIhEENS3_11MorphRowVecINS3_4VMinINS1_10hal_SSE4_110v_uint8x16EEEEEEENS_9allocatorISD_EEEE", "CV_8UC1", "_mask.empty() || (_src.sameSize(_mask) && _mask.type() == CV_8U)", "G_HKKHMKMV JILLLV MKPHRKRU OIQLQU RKUHWKW[ TIVLV[ WKZH[J\\M\\P[SZUXWUYP[ YIZJ[M[PZSYUWWTYP[", "Java_org_opencv_android_Utils_nMatToBitmap2", "divUp(descriptorBits_.rows, 8) == desc_size", "Unknown type \"", "void cv::split(const cv::Mat &, cv::Mat *)", "N6google8protobuf8internal16FunctionClosure1IPKNS0_14FileDescriptorEEE", "insertWinner", "int cv::opt_AVX2::SymmRowSmallVec_8u32s::operator()(const uchar *, uchar *, int, int) const", "I\\XFX[ KFXF PPXP K[X[", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_16RowSumItdEENS_9allocatorIS5_EEEE", "cvSetReal* support only single-channel arrays", "April", "void cv::hal::opt_SSE4_1::cvtYUVtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool, bool)", "32FastNlMeansMultiDenoisingInvokerIhij11DistSquarediE", "compressed data too long", "H]SFQGOIMLLNKRKVLYMZO[Q[TZVXXUYSZOZKYHXGWGUHSJQNPSPV QGOJMNLRLVMYO[", "!img_vec.empty()", "N2cv12cpu_baseline9RowFilterIsdNS0_8RowNoVecEEE", "findConnectedQuads", "OPENCV_IO_MAX_IMAGE_HEIGHT", "Empty input file", "videoio::grab_10()", "OpenCV parent region exceeds children count. Bailout", "internal error checking chromaticities", "Only continuous nD arrays are supported here", "\"abc_action_mode_done\" : \"\u0413\u0430\u0442\u043e\u0432\u0430\"", "npoints > 0", "N3Iex10ElibmaxExcE", "virtual void cv::flann::Index::save(const cv::String &) const", "objdetect::getOriginalWindowSize_10()", "/home/vagrant/build/srclib/opencv/modules/objdetect/src/cascadedetect.cpp", "photo::setColorAdaptation_10()", "\"abc_shareactionprovider_share_with\" : \"\u0ec1\u0e9a\u0ec8\u0e87\u0e9b\u0eb1\u0e99\u0e81\u0eb1\u0e9a\"", "operator!", "N3Iex9EnonetExcE", "out_concat_axis", "    Field type: ", "void cv::details::FastX::detectImpl(const cv::Mat &, std::vector<cv::Mat> &, std::vector<cv::Mat> &, const cv::Mat &) const", "virtual void cv::cpu_baseline::RowFilter<unsigned char, double, cv::cpu_baseline::RowNoVec>::operator()(const uchar *, uchar *, int, int) [ST = unsigned char, DT = double, VecOp = cv::cpu_baseline::RowNoVec]", "Bayer->Gray demosaicing only supports 8u and 16u types", "void cv::cpu_baseline::cvt16f16s(const cv::float16_t *, size_t, uchar *, size_t, short *, size_t, cv::Size, void *)", "typename", "imgproc::getStructuringElement_11()", "void cv::accumulate(cv::InputArray, cv::InputOutputArray, cv::InputArray)", "imgproc::getCannyHighThresh_10()", "N2cv6detail16LKTrackerInvokerE", "Unknown encoding %d for LogLuv compression", "photo::computeBitmaps_10()", "\"abc_activity_chooser_view_see_all\" : \"Xem t\u1ea5t c\u1ea3\"", "Integer multiplication overflow.", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphFilter<cv::opt_SSE4_1::(anonymous namespace)::MinOp<float>, cv::opt_SSE4_1::(anonymous namespace)::MorphVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_float32x4> > >::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MinOp<float>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_float32x4> >]", "Step must be a multiple of esz1", "N2cv10opt_SSE4_116SymmColumnFilterINS0_4CastIddEENS0_11ColumnNoVecEEE", "N3Imf12_GLOBAL__N_114LineBufferTaskE", "virtual void cv::opt_SSE4_1::(anonymous namespace)::SqrRowSum<short, double>::operator()(const uchar *, uchar *, int, int) [T = short, ST = double]", "templFeatures_.size() == static_cast<size_t>(levels_ + 1)", "dst.type() == src.type()", "core::phase_11()", "getMatVector", "depth == CV_8U || depth == CV_16U", "N2cv12cpu_baseline12_GLOBAL__N_19ColumnSumIdsEE", "\"abc_action_bar_up_description\" : \"Joan gora\"", "CbHMH[ IMI[ RMR[ SMS[ \\M\\[ ]M][ EMLM OMVM YM`M E[`[``_[", "G^_BEbFb _B`BFb", "core::rotate_10()", "E_IO[O IU[U", "operator Vec", "\"DeleteMapValue\"", "void cv::opt_AVX2::cvt16s8u(const short *, size_t, uchar *, size_t, uchar *, size_t, cv::Size, void *)", "/home/vagrant/build/srclib/opencv/modules/features2d/src/bagofwords.cpp", "XPosition", "\"abc_action_mode_done\" : \"Fertig\"", "samples.type() == CV_32F", "calib3d::stereoRectify_15()", "I[RFJ[ RFZ[ MTWT", "KYYPXNVLSKQKNLLNKQKSLVNXQYSYVXXVYT YPWNUMSMQNPOOQOSPUQVSWUWWVYT", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/thresh.cpp", "\"abc_searchview_description_clear\" : \"Kosongkan pertanyaan\"", "labelType == DIST_LABEL_PIXEL || labelType == DIST_LABEL_CCOMP", "Invalid combination of specified video colorspace and the input image colorspace", "setTrainTestSplit", "\"abc_activitychooserview_choose_application\" : \"\u9078\u64c7\u61c9\u7528\u7a0b\u5f0f\"", "photo::getRadiance_10()", "H[RLPLNKMINGQFTFXG[G]F XGVNTTRXPZN[L[JZIXIVJULUNV", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ReshapeLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "half16", "Convex hull is larger than the point sequence", "imgproc::pyrDown_11()", "(pattern_size & 1) == 0", "int cv::cpu_baseline::(anonymous namespace)::MorphVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_float32x4> >::operator()(uchar **, int, uchar *, int) const [VecUpdate = cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_float32x4>]", "opencv_tensorflow.TensorShapeProto.Dim.name", "rect.width >= 0 && rect.height >= 0 && rect.x < image->width && rect.y < image->height && rect.x + rect.width >= (int)(rect.width > 0) && rect.y + rect.height >= (int)(rect.height > 0)", "photo::denoise_1TVL1_12()", "\"abc_capital_on\" : \"AKTIF\"", "KZQHQ\\ THT\\ WLVLVMWMWLUKPKNLNNOPVSWT NNOOVRWTWVVWTXQXOWNVNUOUOVNV", "Mag.size() == Angle.size() && Mag.type() == Angle.type()", "OUTKRNQQQSRVTY", "cvConvertScale", "\"abc_toolbar_collapse_description\" : \"Restr\u00e2nge\u021bi\"", "H]RFR[ SFS[ PKMLLMKOKRLTMUPVUVXUYTZRZOYMXLUKPK PKNLMMLOLRMTNUPV UVWUXTYRYOXMWLUK OFVF O[V[", "*N12_GLOBAL__N_122generic_error_categoryE", "AVX512VBMI", "/home/vagrant/build/srclib/opencv/modules/dnn/misc/tensorflow/tensor.pb.cc", "!_image.empty() && _image.type() == CV_8UC1 && (_image.isMat() || _image.isUMat())", "gamma value does not match sRGB", "NSt6__ndk120__shared_ptr_emplaceIN2cv5flann11IndexParamsENS_9allocatorIS3_EEEE", "\"abc_search_hint\" : \"\u641c\u5c0b\u2026\"", " using zstream", "core::getOptimalDFTSize_10()", "var_idx", "\"abc_action_mode_done\" : \"Termin\u00e9\"", "FaxFillFunc", "N2cv3hal12cpu_baseline12_GLOBAL__N_120YUV420sp2RGB8InvokerILi2ELi0ELi4EEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_117MorphColumnFilterINS3_5MaxOpIdEENS3_16MorphColumnNoVecEEENS_9allocatorIS8_EEEE", "imgproc::Sobel_12()", "avgpool", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphFilter<cv::cpu_baseline::(anonymous namespace)::MaxOp<short>, cv::cpu_baseline::(anonymous namespace)::MorphVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_int16x8> > >::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MaxOp<short>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_int16x8> >]", "): failed TIFFSetField(tif, TIFFTAG_SAMPLESPERPIXEL, channels)", "imgproc::connectedComponents_11()", "void cv::hal::opt_AVX2::addWeighted16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, const double *)", "Extra closing '%c'", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphRowFilter<cv::opt_SSE4_1::(anonymous namespace)::MinOp<double>, cv::opt_SSE4_1::(anonymous namespace)::MorphRowNoVec>::operator()(const uchar *, uchar *, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MinOp<double>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphRowNoVec]", "Incorrect value for \"%s\"; tag ignored", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_19ColumnSumIiiEENS_9allocatorIS5_EEEE", "virtual void cv::dnn::CropLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "number of iterations cannot be zero or a negative number", "\"abc_toolbar_collapse_description\" : \"Sa\u017emi\"", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/color_hsv.simd.hpp", "\"abc_searchview_description_clear\" : \"\u691c\u7d22\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u524a\u9664\"", "cHRM Red X", "N3Iex9EnodevExcE", "calib3d::calibrateCamera_12()", "Photometric tag value assumed incorrect, assuming data is YCbCr instead of RGB", "NSt6__ndk110__function6__funcIZNK2cv7details5FastX10detectImplERKNS2_3MatERNS_6vectorIS5_NS_9allocatorIS5_EEEESC_S7_E3$_0NS9_ISD_EEFvRKNS2_5RangeEEEE", "writeBlock", "null VP8Io passed to VP8GetHeaders()", "google.protobuf.MessageOptions", "Wh.rows == Wx.rows", "invalid end points", "F]OFI[ PFJ[ TLRT LF[FZLZF MPSP F[U[WVT[", "\"abc_shareactionprovider_share_with\" : \"Yabelana no-\"", "Unknown or unsupported robust estimation method", "video::findTransformECC_10()", "Image channel name cannot be an empty string.", "void cv::hal::opt_AVX2::cvtBGRtoTwoPlaneYUV(const uchar *, size_t, uchar *, uchar *, size_t, int, int, int, bool, int)", "cblkwidth", "ml::getTrainSamples_10()", "photo::setIntensity_10()", "updateTrackedObjects", "ClearField", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphRowFilter<cv::cpu_baseline::(anonymous namespace)::MaxOp<unsigned short>, cv::cpu_baseline::(anonymous namespace)::MorphRowVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_uint16x8> > >::operator()(const uchar *, uchar *, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MaxOp<unsigned short>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphRowVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_uint16x8> >]", "in_val", "Compression buffer size cannot be changed because it is in use", "void cv::hal::opt_AVX2::cvtGraytoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, int)", "\"abc_search_hint\" : \"\u0422\u044a\u0440\u0441\u0435\u0442\u0435\u2026\"", "cn == 2 || cn == 3 || cn == 4", " is specified but it is not a directory: ", "0 <= startDim && startDim <= endDim", "N2cv3hal8opt_AVX212_GLOBAL__N_120YUV420sp2RGB8InvokerILi2ELi1ELi4EEE", "\"abc_shareactionprovider_share_with\" : \"\uacf5\uc720 \ub300\uc0c1\"", "H\\RFKZ QIW[ RIX[ RFY[ I[O[ T[[[ KZJ[ KZM[ WZU[ WYV[ XYZ[", "dst.channels() == m.rows-1", "calib3d::estimateAffine3D_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv24HomographyRefineCallbackENS_9allocatorIS2_EEEE", "createConcentricSpheresTestSet", "void cv::hal::opt_SSE4_1::max16s(const short *, size_t, const short *, size_t, short *, size_t, int, int)", "N3Iex12EoverflowExcE", "int cv::cpu_baseline::sum32s(const int *, const uchar *, double *, int, int)", "KYUBSDQGOKNPNTOYQ]S`UbVb UBVBTDRGPKOPOTPYR]T`Vb", "pad_l", "!doesVertexExist( id )", "imgproc::getLevels_10()", "PN7cvflann11KDTreeIndexINS_2L1IfEEE4NodeE", "OpenCV TIFF: failed TIFFGetField(tif, TIFFTAG_BITSPERSAMPLE, &bpp)", "dnn::setHalideScheduler_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml10SVMSGDImplENS_9allocatorIS3_EEEE", "KYNBPDRGTKUPUTTYR]P`NbOb NBOBQDSGUKVPVTUYS]Q`Ob", "int cv::floodFill(cv::InputOutputArray, cv::InputOutputArray, cv::Point, cv::Scalar, cv::Rect *, cv::Scalar, cv::Scalar, int)", "CPU part", "features2d::getDescriptorType_10()", "cvRawDataToScalar", "photo::setLightAdaptation_10()", "photo::createMergeMertens_13()", "H\\LBL[ RBR[ XBX[", "the output array of refined object points must be 3-channel 1xn or nx1 array or 1-channel nx3 array, where n is the number of object points per view", "cvAbsDiff", "N2cv10opt_SSE4_112_GLOBAL__N_16RowSumIhtEE", "opencv_tensorflow.FunctionDef.Node.ret", "\"abc_shareactionprovider_share_with_application\" : \"\u12a8%s \u130b\u122d \u12eb\u130b\u1229\"", "\" for field \"", "vecmat.isContinuous() && vecmat.type() == CV_32F && vecmat.total() == (size_t)points.cols", "%s: Can not write TIFF directory entry.", "Invalid iCCP compression method", "value", "/home/vagrant/build/srclib/opencv/modules/core/src/directx.cpp", "CCITT RLE", "Unexpected End-Of-File", "Abort at parse time", "getLayerData", "Unsupported depth of input image", "bufType == srcType", "No space for \"TransferFunction\" tag", "calib3d::fisheye_1stereoRectify_11()", "33TegraCvtColor_rgbx2bgr565_Invoker", "NWRKRX SKSX PKSK PXUX", "the output array of translation vectors must be 3-channel 1xn or nx1 array or 1-channel nx3 array, where n is the number of views", "features2d::cluster_10()", "imgproc::Sobel_13()", "CV_MJPEG", "imgproc::HoughLinesP_12()", "iplImageToMat", "!params.has(\"across_spatial\") || !params.has(\"end_axis\")", "ip[i].type() == FileNode::MAP", "imgproc::getRectSubPix_11()", "warning", "inp0.total(2) == numX", "PageName", "photo::createMergeDebevec_10()", "u->data != 0 && \"Error mapping of UMat to host memory.\"", "January", "'lambda'(", "St8bad_cast", "src2.isMat() || src2.isUMat()", "I\\MOLMLQMONNPMSMVNXPYSYUXXVZS[P[NZLXLWMVNWMX SMUNWPXSXUWXUZS[ RTXT", "?cv::Mat cv::findHomography(cv::InputArray, cv::InputArray, int, double, cv::OutputArray, const int, const double)", "JZVFVVUYTZR[P[NZMYLVLT", "calib3d::getROI1_10()", "N2cv13FormatterBaseE", "\"abc_capital_off\" : \"\u0928\u093f\u0937\u094d\u0915\u094d\u0930\u093f\u092f \u092a\u093e\u0930\u094d\u0928\u0941\u0939\u094b\u0938\u094d\"", "virtual void cv::opt_AVX2::ColumnFilter<cv::opt_AVX2::Cast<double, unsigned char>, cv::opt_AVX2::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::Cast<double, unsigned char>, VecOp = cv::opt_AVX2::ColumnNoVec]", "sSin_HA", "\"/*\" inside block comment.  Block comments cannot be nested.", "N2cv10opt_SSE4_112ColumnFilterINS0_4CastIffEENS0_11ColumnNoVecEEE", "EXPOSURE=%g", "step >= 0", "): failed TIFFGetField(tif, TIFFTAG_IMAGELENGTH, &hght)", "\"abc_searchview_description_clear\" : \"\u0411\u0440\u0438\u0441\u0430\u045a\u0435 \u0443\u043f\u0438\u0442\u0430\"", "F^[BI[[[", "_src.dims() <= 2", "cvIntegral", "CameraCalibration2", "icvDeleteNode", "void cv::glob(cv::String, std::vector<String> &, bool)", "double cv::cpu_baseline::MahalanobisImpl(const cv::Mat &, const cv::Mat &, const cv::Mat &, double *, int) [T = float]", "calib3d::stereoCalibrate_11()", "virtual bool cv::VideoCapture::retrieve(cv::OutputArray, int)", "27TegraRowOp_combine2_InvokerIKllE", "imageDy_.type() == imageDx_.type() && imageDy_.size() == imageEdges_.size()", "internal row width error", "cv::MatExpr cv::Mat::t() const", "Ptr<cv::BaseColumnFilter> cv::opt_AVX2::getMorphologyColumnFilter(int, int, int, int)", "read_params", "features2d::detect_12()", "virtual void cv::MSER_Impl::detectRegions(cv::InputArray, vector<vector<cv::Point> > &, vector<cv::Rect> &)", "void cv::hal::opt_AVX2::mul64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, const double *)", "N2cv10opt_SSE4_18Filter2DIsNS0_4CastIfsEENS0_11FilterNoVecEEE", "MWQFRGSISKRLQKRJ", "\"GetMapData\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv11TiffEncoderENS_9allocatorIS2_EEEE", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphRowFilter<cv::cpu_baseline::(anonymous namespace)::MinOp<short>, cv::cpu_baseline::(anonymous namespace)::MorphRowVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_int16x8> > >::operator()(const uchar *, uchar *, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MinOp<short>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphRowVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_int16x8> >]", "core::max_10()", "\"abc_action_menu_overflow_description\" : \"Altre opzioni\"", "ml::getKernelType_10()", "hstart", "layer_connection.bottom_size()=1", "], dtype='%s')", " |@_model must have CV_64FC1 type, rows == 1 and cols == 13*componentsCount", "m.sameSize(*this) && m.type() == type()", "Compression buffer size cannot be reduced below 6", "static Ptr<cv::ml::TrainData> cv::ml::TrainData::create(cv::InputArray, int, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray)", "ksize", "tRNS chunk has out-of-range samples for bit_depth", "MAXVAL", "int64", "Option must not use reserved name \"uninterpreted_option\".", "\"abc_action_bar_up_description\" : \"Navigasi ke atas\"", "/home/vagrant/build/srclib/opencv/modules/imgcodecs/src/grfmt_hdr.cpp", "\"abc_action_bar_home_description_format\" : \"\u200f%1$s\u200f\u060c %2$s\"", "N2cv8opt_AVX216SymmColumnFilterINS0_4CastIisEENS0_11ColumnNoVecEEE", "One of histograms is sparse and other is not", "GetMessage", "void cv::hal::opt_SSE4_1::max32s(const int *, size_t, const int *, size_t, int *, size_t, int, int)", "The image/matrix format is not supported by the function", "setKSize", "buf.isContinuous()", "setMaxDepth", "NSt6__ndk19__num_putIcEE", "\"abc_action_bar_home_description\" : \"Zur Startseite\"", "%ld%c", "sv_tab[df_index[i]] > 0", "MXPYOZP[QZPY", "NSt6__ndk120__shared_ptr_emplaceIN2cv12StereoBMImplENS_9allocatorIS2_EEEE", "Uninitialized row", "When the number of input samples is >1, the output vector of results must be passed", "\"abc_action_menu_overflow_description\" : \"\u1787\u1798\u17d2\u179a\u17be\u179f\u200b\u1785\u17d2\u179a\u17be\u1793\u200b\u1791\u17c0\u178f\"", "void cv::hal::cpu_baseline::addWeighted8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, const double *)", "layerDesc.isInt() || layerDesc.isString()", "Block sequence elements must be preceded with '-'", "Can not read TIFF directory count", "CV_IS_MAT(_points1) && CV_IS_MAT(_points2) && CV_ARE_SIZES_EQ(_points1, _points2)", "mapPointSpherical", "core::calcCovarMatrix_10()", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_9Luv2RGB_fEEE", "png_set_unknown_chunks now expects a valid location", "descriptor_channels", "CL_INVALID_HOST_PTR", "cn == 3 || cn == 4", "cvSeqPartition", "Bad CvMatND header", "\"abc_action_menu_overflow_description\" : \"\u0a39\u0a4b\u0a30 \u0a1a\u0a4b\u0a23\u0a3e\u0a02\"", "/home/vagrant/build/srclib/opencv/modules/video/src/variational_refinement.cpp", "/home/vagrant/build/srclib/opencv/modules/ml/src/svmsgd.cpp", "void cv::hal::opt_AVX2::cvtBGRtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, int, int, bool)", "\"abc_action_bar_home_subtitle_description_format\" : \"%1$s\u1363 %2$s\u1363 %3$s\"", "void cv::hal::absdiff8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, void *)", "Input image depth is not supported by function", "KZNKVX OKWX WKNX LKQK TKYK LXQX TXYX", "KZSPQX SPRX MQOOXO MQOPXP", "N2cv8colormap5MagmaE", "G]LFL[ MFM[ IFSFVGXIYKZNZSYVXXVZS[I[ SFUGWIXKYNYSXVWXUZS[", "E_JPLONOPPSTTUVVXVZU[S[QZOXNVNTOSPPTNULUJT ZPXOVOTPQTPUNVLVJUISIQJOLNNNPOQPTTVUXUZT KOJQJSKU YUZSZQYO", "'): can't write data: ", "virtual void cv::opt_AVX2::ColumnFilter<cv::opt_AVX2::Cast<float, float>, cv::opt_AVX2::SymmColumnSmallVec_32f>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::Cast<float, float>, VecOp = cv::opt_AVX2::SymmColumnSmallVec_32f]", "Inplace operation is not supported", "encoder && encoder->m_buf", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ElementWiseLayerINS2_10ELUFunctorEEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/accum.cpp", "randShuffle", "void cv::hal::cpu_baseline::fastAtan2(const float *, const float *, float *, int, bool)", "\"abc_search_hint\" : \"\u0c36\u0c4b\u0c27\u0c3f\u0c02\u0c1a\u0c41...\"", "%zux%zux%zu", "\"abc_activity_chooser_view_see_all\" : \"Alles weergeven\"", "N6google8protobuf12_GLOBAL__N_133FastFieldValuePrinterUtf8EscapingE", "int cv::opt_SSE4_1::RowVec_32f::operator()(const uchar *, uchar *, int, int) const", "NU_SVC", "\"abc_action_mode_done\" : \"Listo\"", "Unknown parameter batchsize for layer type ", "CHECK failed: (message2->GetReflection()) == (this): ", "pyrDown_", "/home/vagrant/build/srclib/opencv/modules/core/src/cuda_gpu_mat.cpp", "\"abc_action_bar_up_description\" : \"Yuxar\u0131 get\"", "dnn::setInput_12()", "opencv_ml_rtrees", "N2cv12cpu_baseline18SymmRowSmallFilterIffNS0_19SymmRowSmallVec_32fEEE", "): failed TIFFWriteEncodedStrip(tif, i, (tdata_t)img.ptr<float>(i), strip_size * sizeof(float)) != (tsize_t)-1", "OriginalRawFileData", "core::getThreadNum_10()", "\"abc_action_bar_up_description\" : \"\u0935\u0930 \u0928\u0947\u0935\u094d\u200d\u0939\u093f\u0917\u0947\u091f \u0915\u0930\u093e\"", "pool_size", "cvCornerHarris", "nOutputPlane", "\"abc_shareactionprovider_share_with\" : \"Jagamine:\"", "Bayer->RGB Edge-Aware demosaicing only currently supports 8u and 16u types", "scalarParams.has(\"eps\")", "\"abc_search_hint\" : \"\u041f\u043e\u0448\u0443\u043a\u2026\"", "KYPKP[ TKT[ MQWQ MUWU", "CFAPattern", "virtual void cv::cpu_baseline::SymmColumnFilter<cv::cpu_baseline::Cast<double, unsigned char>, cv::cpu_baseline::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::Cast<double, unsigned char>, VecOp = cv::cpu_baseline::ColumnNoVec]", "The array must have equal types", "N2cv8opt_AVX212_GLOBAL__N_118fixedSmoothInvokerIhNS1_13ufixedpoint16EEE", "cv::TransformFunc cv::getDiagTransformFunc(int)", "void cv::fisheye::stereoRectify(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, const cv::Size &, cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, int, const cv::Size &, double, double)", "Unknown interlace method in IHDR", "ml::getBoostType_10()", "CCIR601 sampling not implemented yet", " dims(-1)=%d", "UNKNOWN", "void cv::hal::opt_SSE4_1::not8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "\"abc_activity_chooser_view_see_all\" : \"See all\"", "SGILogEncode", "\"abc_searchview_description_query\" : \"\u0916\u094b\u091c \u0915\u094d\u0935\u0947\u0930\u0940\"", "virtual void cv::cpu_baseline::(anonymous namespace)::ColumnSum<unsigned short, unsigned char>::operator()(const uchar **, uchar *, int, int, int)", "bad data option (internal error)", "NSt6__ndk120__shared_ptr_emplaceIN2cv10PFMDecoderENS_9allocatorIS2_EEEE", "Portable image format - color (*.ppm)", "sortSamplesByClasses", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::RGB2HSV_b>::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::RGB2HSV_b]", "void cv::hal::cpu_baseline::log32f(const float *, float *, int)", "input.type() == weights.type()", "nsamples", "pbBlob.has_raw_data()", "N2cv8colormap7ViridisE", "\"abc_capital_off\" : \"\u0412\u042b\u041a\u041b.\"", "MWMMOKQKTMVMWK", "imgproc::cornerHarris_11()", "features2d::getHarrisDetector_10()", "H\\QKNLLNKQKSLVNXQYSYVXXVYSYQXNVLSKQK RQQRRSSRRQ", "utils::findDataFile(): <source>", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_111MorphFilterINS3_5MaxOpIfEENS3_8MorphVecINS3_4VMaxINS1_10hal_SSE4_111v_float32x4EEEEEEENS_9allocatorISD_EEEE", "dnn::NMSBoxes_12()", "order", "epsMat.type()", "type == CV_8UC1 || type == CV_16SC1", "features2d::descriptorType_10()", "\"abc_toolbar_collapse_description\" : \"Samenvouwen\"", "H\\LFL[ MGMZ LFTFWGXHYJYMXOWPTQ MGTGWHXJXMWOTP MPTPWQXRYTYWXYWZT[L[ MQTQWRXTXWWYTZMZ", "int cv::createTrackbar(const cv::String &, const cv::String &, int *, int, cv::TrackbarCallback, void *)", "Unknown index type", "I[IVKSMROSOUM[ MRNSNUL[ OUQSSRTRVSVUUXUZV[ TRUSUUTXTZV[XZYY[V", "imgproc::rectangle_16()", "\"abc_action_bar_up_description\" : \"\u03a0\u03bb\u03bf\u03ae\u03b3\u03b7\u03c3\u03b7 \u03c0\u03c1\u03bf\u03c2 \u03c4\u03b1 \u03b5\u03c0\u03ac\u03bd\u03c9\"", "NSt6__ndk120__shared_ptr_emplaceIN12_GLOBAL__N_124CLAHE_Interpolation_BodyIhLi0EEENS_9allocatorIS3_EEEE", "[ERROR:", "N2cv3dnn14SliceLayerImplE", "connect", "N2cv23CvtColorIPPLoop_InvokerINS_19IPPGray2BGRAFunctorIhEEEE", "Closing \" is expected", "imgproc::goodFeaturesToTrack_14()", "NaN encountered.", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi3EEEij7DistAbsNS1_IiLi3EEEE", "int cv::cpu_baseline::SymmColumnVec_32f::operator()(const uchar **, uchar *, int) const", "JZNKNX OKOX LKSKVLWMXPXSWVVWSXLX SKULVMWPWSVVUWSX", "Invalid destination sequence header", "    Actual    : ", "aperture", "(opoints.rows == 1 && opoints.channels() == 3) || opoints.cols*opoints.channels() == 3", "KYQVOUNSNQOOQNSNUOVQVSUUSVQV SVVS QVVQ OUUO NSSN NQQN", "imgproc::erode_10()", "N2cv3hal12cpu_baseline12_GLOBAL__N_119YUV420p2RGB8InvokerILi0ELi3EEE", "void cv::cpu_baseline::cvt16f32f(const cv::float16_t *, size_t, uchar *, size_t, float *, size_t, cv::Size, void *)", "\"abc_action_menu_overflow_description\" : \"\u1270\u1328\u121b\u122a \u12a0\u121b\u122b\u132e\u127d\"", "virtual cv::VideoWriter &cv::VideoWriter::operator<<(const cv::Mat &)", "H1.size(i) == H2.size(i)", "HasField", "dSinCos_A11", "number_of_streams < 0xFF", "N2cv8opt_AVX221SymmColumnSmallFilterINS0_4CastIisEENS0_25SymmColumnSmallVec_32s16sEEE", "KYRKPLOMNOMRMUNWPXRXTWUVVTWQWNVLTKRK RKPMOONRNVPX RXTVUTVQVMTK", "__itt_heap_reallocate_begin", "double cv::opt_AVX2::MahalanobisImpl(const cv::Mat &, const cv::Mat &, const cv::Mat &, double *, int) [T = float]", "G]JFQQQ[ KFRQRZ LFSQS[ YGSQ HFOF VF\\F N[V[ IFKG NFLG WFYG [FYG QZO[ QYP[ SYT[ SZU[", "opencv_tensorflow.OpDef.AttrDef.description", "(layer_param.type() == \"conv\") || (layer_param.type() == \"pool\")", "\"abc_searchview_description_voice\" : \"\u0414\u0430\u0443\u044b\u0441 \u0430\u0440\u049b\u044b\u043b\u044b \u0456\u0437\u0434\u0435\u0443\"", "N3Imf14TypedAttributeIN5Imath8Matrix44IfEEEE", "~UMatData", "void cv::hal::opt_AVX2::recip8u(const uchar *, size_t, uchar *, size_t, int, int, const double *)", "cameraMatrix.rows == 3 && cameraMatrix.cols == 3 && cameraMatrix.channels() == 1", "\"abc_searchview_description_clear\" : \"Izbris poizvedbe\"", "OUT_W", "N2cv10opt_SSE4_116SymmColumnFilterINS0_4CastIdtEENS0_11ColumnNoVecEEE", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi3EEElm7DistAbsiE", "phase", "int cv::opt_AVX2::(anonymous namespace)::MorphRowVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_int16x16> >::operator()(const uchar *, uchar *, int, int) const [VecUpdate = cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_int16x16>]", "K.cols == 3 && K.rows == 3", "calib3d::estimateAffinePartial2D_11()", "transaction clone for ", "Sorry, can not handle image with %s=%d", "imgproc::setClipLimit_10()", "void cv::hal::addWeighted8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, void *)", "N2cv12RMByteStreamE", "\"abc_action_bar_home_description\" : \"Krmarjenje domov\"", "\"abc_activitychooserview_choose_application\" : \"\u0c05\u0c28\u0c41\u0c35\u0c30\u0c4d\u0c24\u0c28\u0c3e\u0c28\u0c4d\u0c28\u0c3f \u0c0e\u0c02\u0c1a\u0c41\u0c15\u0c4b\u0c02\u0c21\u0c3f\"", "H]OMIb NQMVMYO[Q[SZUXWT YMWTVXVZW[Y[[Y\\W", "N3Iex8EfbigExcE", "type == _src2.type()", "H[WPVQWRXQXPVNTMQMNNLPKSKULXNZQ[S[VZXX QMONMPLSLUMXOZQ[", "pts && npts && ncontours >= 0 && 0 <= thickness && thickness <= MAX_THICKNESS && 0 <= shift && shift <= XY_SHIFT", "N12opencv_caffe5DatumE", "virtual void cv::ml::DTreesImplForRTrees::write(cv::FileStorage &) const", "E^^F\\GXHUHQGOFMFKGJIJKLMNMPLQJQHOF ^FE[ ^FF[ ^FG[ XTVTTUSWSYU[W[YZZXZVXT PGMFJIKLNMQJPG OFKGJK LMPLQH YUVTSWTZW[ZXYU XTTUSY U[YZZV E[G[", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIsffEENS_12VResizeCubicIsffNS_4CastIfsEENS_22VResizeCubicVec_32f16sEEEEE", "operator>>=", "N11opencv_onnx9TypeProtoE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_16RowSumIiiEENS_9allocatorIS5_EEEE", "CL_D3D10_RESOURCE_ALREADY_ACQUIRED_KHR", "N2cv8opt_AVX28Filter2DItNS0_4CastIftEENS0_11FilterNoVecEEE", "OTODQGSKTPTTSYQ]O`", "int cv::opt_SSE4_1::SymmColumnSmallVec_32f::operator()(const uchar **, uchar *, int) const", "virtual void cv::CascadeClassifierInvoker::operator()(const cv::Range &) const", "\"abc_capital_off\" : \"DESACTIVADO\"", "core::idct_11()", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml7SVMImplENS_9allocatorIS3_EEEE", "preFilterCap must be within 1..63", "H\\VJVKWLYLZKZIYGVFRFOGNINLONPOSPPPMQLRKTKWLYMZP[S[VZXXYV", "cvAndS", "maxFlow", "toNCHW", "NativeCodec", "void cv::cornerHarris(cv::InputArray, cv::OutputArray, int, int, double, int)", "Get_MLDB_Descriptor_Subset", "objdetect::decode_11()", "ny > 0 && nx > 0", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_111RGB2YCrCb_iIhEEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline16SymmColumnFilterINS2_4CastIfhEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "MXRFQGQIRQ RFRTST RFSFST SFTGTISQ RXQYQZR[S[TZTYSXRX RYRZSZSYRY", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline8Filter2DIsNS2_4CastIddEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "void cv::hal::cpu_baseline::addWeighted32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, const double *)", "buildOpticalFlowPyramid", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_19ColumnSumIifEENS_9allocatorIS5_EEEE", "\"abc_action_bar_home_description\" : \"Odlazak na Po\u010detnu\"", "\"abc_shareactionprovider_share_with\" : \"Compartir con\"", "\"abc_searchview_description_voice\" : \"\u0b95\u0bc1\u0bb0\u0bb2\u0bcd \u0ba4\u0bc7\u0b9f\u0bb2\u0bcd\"", "__itt_notify_sync_prepare", "File is too large. Increase OPENCV_IMGCODECS_WEBP_MAX_FILE_SIZE parameter if you want to process large files", "NSt6__ndk114codecvt_bynameIDsc9mbstate_tEE", "dstType", "Too small number of histograms", "N3Iex10EnolinkExcE", "KXTFTHVHVFTF UFUH TGVG LQMOOMQMRNSPSSQX RNRRQVQZ RPPUPXQZR[T[VYWW", "fabs(rr) > 0", "\"abc_search_hint\" : \"Telusuri...\"", "N3Iex9EnosysExcE", "N6google8protobuf8internal12MapEntryImplIN17opencv_tensorflow31NameAttrList_AttrEntry_DoNotUseENS0_7MessageENSt6__ndk112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSF_11ELi0EEE", "org.opencv.objdetect", "<?xml", "void cv::opt_AVX2::cvt64f32f(const double *, size_t, uchar *, size_t, float *, size_t, cv::Size, void *)", "int cv::opt_AVX2::(anonymous namespace)::MorphColumnVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_uint8x32> >::operator()(const uchar **, uchar *, int, int, int) const [VecUpdate = cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_uint8x32>]", "cv::RotatedRect cv::CamShift(cv::InputArray, cv::Rect &, cv::TermCriteria)", "N2cv8colormap7CividisE", "dst.cols == dst.rows", "operator>=", "N6google8protobuf13RepeatedFieldIdEE", "core::getHardwareFeatureName_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv10JSONParserENS_9allocatorIS2_EEEE", "cvGraphRemoveVtxByPtr", "N2cv23KAZE_Descriptor_InvokerE", "WARNING: IPP was disabled by OPENCV_IPP environment variable", "Jacobian must be 3x9 or 9x3", "meansFlt.type() == CV_32FC1", "N2cv8opt_AVX216SymmColumnFilterINS0_4CastIffEENS0_17SymmColumnVec_32fEEE", "\"abc_capital_off\" : \"\u04e8\u0428\u0406\u0420\u0423\u041b\u0406\"", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::RGB2RGB<unsigned short> >::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::RGB2RGB<unsigned short>]", "0 <= d && d <= CV_MAX_DIM && _sizes", "basic_string::append", "addText", "CNSt6__ndk120__shared_ptr_emplaceIN2cv9MSER_ImplENS_9allocatorIS2_EEEE", "\"abc_capital_on\" : \"\u012eJUNGTI\"", "\"abc_shareactionprovider_share_with_application\" : \"\u1785\u17c2\u1780\u179a\u17c6\u179b\u17c2\u1780\u200b\u1787\u17b6\u1798\u17bd\u1799 %s\"", "N12opencv_caffe9BlobShapeE", "N2cv18CalcHorizontalSumsE", "H\\QFNGLJKOKRLWNZQ[S[VZXWYRYOXJVGSFQF OGMJLOLRMWOZ NYQZSZVY UZWWXRXOWJUG VHSGQGNH", "Unknown parameter kernelsize for layer type ", "_mask.type()", "Cannot get here", "E_JFJZ JFQ[ KFQX LFRX XFQ[ XFX[ YGYZ ZFZ[ GFLF XF]F G[M[ U[][ HFJG [FZH \\FZG JZH[ JZL[ XZV[ XYW[ ZY[[ ZZ\\[", "dnn::NMSBoxesRotated_10()", "St9bad_alloc", "z_.type()", "void cv::ml::Cholesky(const cv::Mat &, cv::Mat &)", "Unknown layer name: ", "\"abc_action_bar_home_description\" : \"\u0917\u0943\u0939 \u0916\u094b\u091c\u094d\u0928\u0941\u0939\u094b\u0938\u094d\"", "GetRepeatedDouble", "value[0] == value[1] && value[0] == value[2] && value[0] == value[3]", "MWPHTRP\\", "The total width is not divisible by the new number of channels", "image must be continuous", "ml::getNTrainSamples_10()", "Size of calibration and rotation matrices must be 3x3!", "outSize.type()", "Error fetching directory count", "observations.size()>0 && niters>0 && lambda>0", "indexMat.total() == 1", "N2cv3dnn12LRNLayerImpl10ChannelLRNE", "\"abc_action_menu_overflow_description\" : \"\u66f4\u591a\u9009\u9879\"", "The total matrix width is not divisible by the new number of columns", "!imagePoints.empty() && imagePoints.type() == CV_64FC2", "ofs <= sz", "bool cv::ocl::haveOpenCL()", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4ItffEENS_15VResizeLanczos4ItffNS_4CastIftEENS_25VResizeLanczos4Vec_32f16uEEEEE", "SGILog compression cannot handle non-contiguous data", "pyrDown", "\"abc_capital_off\" : \"DESACTIVAT\"", "nactive_vars", "virtual void cv::cpu_baseline::RowFilter<unsigned short, double, cv::cpu_baseline::RowNoVec>::operator()(const uchar *, uchar *, int, int) [ST = unsigned short, DT = double, VecOp = cv::cpu_baseline::RowNoVec]", "scale", "layerOutputs.size() == 1", "cvSetOpenGlDrawCallback", "dnn::DictValue_10()", "F^FK^Y", "core::solve_11()", "imgproc::edgeOrg_10()", "features2d::create_16()", "stride_w", "virtual void cv::cpu_baseline::SymmRowSmallFilter<float, float, cv::cpu_baseline::SymmRowSmallVec_32f>::operator()(const uchar *, uchar *, int, int) [ST = float, DT = float, VecOp = cv::cpu_baseline::SymmRowSmallVec_32f]", "strip", "connectivity == 8", ".json", "double16", "calib3d::getDefaultNewCameraMatrix_10()", "Solver", "data && width > 0 && height > 0", "cv::dnn::dnn4_v20190122::(anonymous namespace)::CaffeImporter::CaffeImporter(const char *, const char *)", "operator^", "\"abc_capital_on\" : \"AKT\u0130V\"", "throw", "\"abc_action_bar_home_description\" : \"\u10db\u10d7\u10d0\u10d5\u10d0\u10e0\u10d6\u10d4 \u10dc\u10d0\u10d5\u10d8\u10d2\u10d0\u10ea\u10d8\u10d0\"", "E^EVGSIRJSJTIXH[ IXJVLSNRPRQSQTPXO[ PXQVSSURWRXSXUWXWZX[Y[[Z\\Y^V", "!fixedSize() || ((cuda::GpuMat*)obj)->size() == _sz", "H\\MWMXNXNWMW WOVQURSSQSNRLPKMKLLINGQFSFVGXIYLYRXVWXUZR[O[MZLXLWMVNVOWOXNYMY MPLNLKMI VHWIXLXRWVVX QSORNQMNMKNHOGQF SFUGVIWLWSVWUYTZR[", "virtual thunk to ", "CV_ARE_TYPES_EQ(_imagePoints1, _imagePoints2) && CV_ARE_DEPTHS_EQ(_imagePoints1, _objectPoints)", "\"abc_action_menu_overflow_description\" : \"Lis\u00e4\u00e4\"", "(int64)imgCount*IMGIDX_ONE < INT_MAX", "getPoints", "void cv::randShuffle(cv::InputOutputArray, double, cv::RNG *)", "\"abc_activitychooserview_choose_application\" : \"\u0410\u043f\u043f \u0441\u043e\u043d\u0433\u043e\u0445\"", "Algorithm doesn't converge (complex eigen values?)", "sum_buffer", "optional", "damaged LZ stream", "Palette is NULL in indexed image", "void cv::hal::opt_SSE4_1::recip32f(const float *, size_t, float *, size_t, int, int, const double *)", "calib3d::filterHomographyDecompByVisibleRefpoints_10()", "argsort", "\"abc_capital_off\" : \"KAPAT\"", "Wrong wta_k. It can be only 2, 3 or 4.", "N2cv12CSVFormatterE", "double cv::Mat::dot(cv::InputArray) const", "The matrix converted to point sequence must be 1-dimensional and continuous", "\"search_menu_title\" : \"\u0548\u0580\u0578\u0576\u0565\u056c\"", "N2cv3dnn24BaseConvolutionLayerImplE", "ml::setMarginType_10()", "N2cv23LineSegmentDetectorImplE", "void cv::calcBackProject(cv::InputArrayOfArrays, const std::vector<int> &, cv::InputArray, cv::OutputArray, const std::vector<float> &, double)", "H\\XFWGQINKLNKQKULXNZQ[S[VZXXYUYSXPVNSMQMNNLPKS XFWHUIQJNLLN QMONMPLSLUMXOZQ[ S[UZWXXUXSWPUNSM", "BackgroundSubtractor.KNN", "dnn::getStringValue_10()", "buildFeatureList", "N2cv10opt_SSE4_112_GLOBAL__N_16RowSumItdEE", "areVerticesAdjacent", "bad compression method", "convertToD3D11Texture2D", "Field numbers cannot be greater than $0.", "_corners && _corner_count", "\"abc_action_mode_done\" : \"Gatavs\"", "CPPTYPE_DOUBLE", "\"abc_searchview_description_query\" : \"\u0c2a\u0c4d\u0c30\u0c36\u0c4d\u0c28 \u0c36\u0c4b\u0c27\u0c3f\u0c02\u0c1a\u0c02\u0c21\u0c3f\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX29RowFilterIhdNS2_8RowNoVecEEENS_9allocatorIS5_EEEE", "void cv::hal::cpu_baseline::fastAtan32f(const float *, const float *, float *, int, bool)", "objdetect::detectMultiScale3_14()", "_HINT=", "N2cv8opt_AVX212_GLOBAL__N_114MorphRowFilterINS1_5MaxOpIdEENS1_13MorphRowNoVecEEE", "\"abc_search_hint\" : \"Vyh\u013eada\u0165\u2026\"", "ColorMap", "NSt6__ndk114basic_iostreamIcNS_11char_traitsIcEEEE", "N3Iex8EnosrExcE", "void cv::hal::div8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, void *)", "IntGetProcAddress", "\", found \"", "N2cv10opt_SSE4_112_GLOBAL__N_114MorphRowFilterINS1_5MinOpIsEENS1_11MorphRowVecINS1_4VMinINS_10hal_SSE4_19v_int16x8EEEEEEE", "DP > 0 && MP > 0", "K > 0 && (normType == NORM_L2 || normType == NORM_L1)", "\"search_menu_title\" : \"\u0985\u09a8\u09c1\u09b8\u09a8\u09cd\u09a7\u09be\u09a8 \u0995\u09b0\u09c1\u09a8\"", "H\\LJLKMKMJLJ LIMINJNKMLLLKKKJLHMGPFTFWGXIXLWNTO VGWIWLVN SFUGVIVLUNSO QOTOVPXRYTYWXYWZT[P[MZLYKWKVLUMUNVNWMXLX WRXTXWWY SOUPVQWTWWVZT[ LVLWMWMVLV", "N2cv10YAMLParserE", "ml::getMissing_10()", "IPP:ipp_resize(src_data, src_step, src_width, src_height, dst_data, dst_step, dsize.width, dsize.height, inv_scale_x, inv_scale_y, depth, cn, interpolation)", "MapValueRef::GetUInt64Value", "len > 0", "!fixedSize() || ((cuda::GpuMat*)obj)->size() == Size(_cols, _rows)", "sampsonDistance", "INTEL_ITTNOTIFY_GROUPS", "videoio::VideoWriter_14()", "void cv::colorChange(cv::InputArray, cv::InputArray, cv::OutputArray, float, float, float)", "padLeft", "cvReleaseSparseMat", "_src.dims() <= 2 && esz <= 32", "N2cv3dnn14dnn4_v2019012216ConvolutionLayerE", "G\\XIYFYLXIVGTFQFNGLIKKJNJSKVLXNZQ[T[VZXXYV MILKKNKSLVMX QFOGMJLNLSMWOZQ[", "NSt6__ndk114default_deleteIN2cv24LMeDSPointSetRegistratorEEE", "\"MapEnd\"", "N2cv19TonemapReinhardImplE", "void cv::hal::opt_AVX::magnitude64f(const double *, const double *, double *, int)", "KZQKOLNMMPMSNVOWQXTXVWWVXSXPWMVLTKQK QKOMNPNSOVQX TXVVWSWPVMTK PWPUQTSTTUUZV[W[XZ TUUXVZW[", "NWUQTPQPPQPRQSTSUTUUTVQVPU", "\"abc_action_mode_done\" : \"\u0e40\u0e2a\u0e23\u0e47\u0e08\u0e2a\u0e34\u0e49\u0e19\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212ColumnFilterINS2_4CastIffEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10CFormatterENS_9allocatorIS2_EEEE", "\"abc_action_mode_done\" : \"Xong\"", "data[i].type() == type", "[Start]FindContours supports only CV_8UC1 images when mode != CV_RETR_FLOODFILL otherwise supports CV_32SC1 images only", "N2cv12cpu_baseline12_GLOBAL__N_16RowSumIddEE", "Ignoring request to write a PLTE chunk in grayscale PNG", "N7cvflann11KDTreeIndexINS_2L1IfEEEE", "ThunderSetupDecode", "operator-=", "N2cv18FileStorageEmitterE", "N12opencv_caffe14PReLUParameterE", "N3Iex11ErestartExcE", "virtual void cv::opt_SSE4_1::SymmColumnFilter<cv::opt_SSE4_1::Cast<double, short>, cv::opt_SSE4_1::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::Cast<double, short>, VecOp = cv::opt_SSE4_1::ColumnNoVec]", "INTERNAL ", "The width of the data window exceeds the maximum width of ", "batch", "N2cv10opt_SSE4_112_GLOBAL__N_117MorphColumnFilterINS1_5MaxOpIsEENS1_14MorphColumnVecINS1_4VMaxINS_10hal_SSE4_19v_int16x8EEEEEEE", "(_m1.cols == 1 || _m1.rows == 1) && _m1.size() == _m2.size()", "N6google8protobuf2io15FileInputStreamE", "\"abc_action_menu_overflow_description\" : \"M\u00e1is opci\u00f3ns\"", "CV_IS_MAT(new_points2)", "video::computeECC_11()", "F^KFK[ LFL[ HFOF LPSPUOVMWIXGYFZF[G[HZIYHZG SPUQVSWXXZY[ SPTQUSVXWZX[Z[[Z\\X H[O[", "cv::MatExpr cv::min(const cv::Mat &, double)", "utils::findDataFile(): trying install path (from binary path): ", "KYVBTDRGPKOPOTPYR]T`Vb TDRHQKPPPTQYR\\T`", "calib3d::stereoRectify_13()", "\"abc_searchview_description_search\" : \"\u041f\u0440\u0435\u0431\u0430\u0440\u0430\u0458\"", "dst.type()", "unlock_shared", "HoughCircles", "\"abc_searchview_description_query\" : \"Leitarfyrirspurn\"", "F_[NZO[P\\O\\N[MZMYNXPVUTXRZP[M[JZIXIUJSPORMSKSIRGPFNGMIMKNNPQUXWZZ[[[\\Z\\Y M[KZJXJUKSMQ MKNMVXXZZ[", "uint64", "cvCalcPCA", "__itt_memory_read", "!!%s %c", "IjNQOOQNSNUOVQVSUUSVQVOUNTMQMNNKPISHWH[I^K`NaRaW`[_]]`ZcVfQiMk WHZI]K_N`R`W_[^]\\`YcTgQi POTO OPUP NQVQ NRVR NSVS OTUT PUTU eLeNgNgLeL fLfN eMgM eVeXgXgVeV fVfX eWgW", "A.channels() == 1 && B.channels() == 1", "void cv::hal::mul32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, void *)", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_114MorphRowFilterINS3_5MinOpIfEENS3_11MorphRowVecINS3_4VMinINS1_8hal_AVX211v_float32x8EEEEEEENS_9allocatorISD_EEEE", "covariant return thunk to ", " a protocol ", "I[VML[ WMM[ XMN[ XMLMLQ L[X[XW MMLQ NMLP OMLO QMLN S[XZ U[XY V[XX W[XW", "ZLib error: %s", "ml::getTrainMethod_10()", "SetBool", "N7cvflann11KMeansIndexINS_2L2IfEEEE", "StereoMatcher.BM", "%sC%d", "imgproc::HoughLines_14()", "inputs[i].size[2] == input.size[2] && inputs[i].size[3] == input.size[3]", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120RGB8toYUV420pInvokerE", "png_image_begin_read_from_memory: incorrect PNG_IMAGE_VERSION", "bool cv::QRDecode::versionDefinition()", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_114MorphRowFilterINS3_5MaxOpIsEENS3_11MorphRowVecINS3_4VMaxINS1_8hal_AVX210v_int16x16EEEEEEENS_9allocatorISD_EEEE", "chunk.m_size <= 67108864", "InteroperabilityIFDOffset", "stages", "len >=0 && len < 32", "The matrix should be 1-dimensional and continuous array of int's", "Unsupported kernel input", "NSt6__ndk117moneypunct_bynameIwLb1EEE", "\"abc_searchview_description_search\" : \"\u0391\u03bd\u03b1\u03b6\u03ae\u03c4\u03b7\u03c3\u03b7\"", "pImpl->unlock_shared()", "void cv::cpu_baseline::cvt64f32f(const double *, size_t, uchar *, size_t, float *, size_t, cv::Size, void *)", "I\\OKKX OMPX PKQV YKPX YKUX ZKVX MKPK YK\\K IXMX SXXX", "Cannot write tag %d (%s)", "void cv::adaptiveThreshold(cv::InputArray, cv::OutputArray, double, int, int, int, double)", "/home/vagrant/build/srclib/opencv/modules/ml/src/rtrees.cpp", "old_stride", "b < 16", "/tmp/", "\", another member of oneof \"", "void cv::hal::opt_SSE4_1::and8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "CHECK failed: (last_returned_size_) > (0): ", "dnn::readNetFromDarknet_10()", "N2cv3dnn16ElementWiseLayerINS0_12PowerFunctorEE5PBodyE", "): failed TIFFReadRGBATile(tif, x, y, (uint32*)buffer)", "\"abc_searchview_description_submit\" : \"Sorguyu g\u00f6nder\"", "stageType", "operator+=", "BruteForce", "video::KalmanFilter_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_117MorphColumnFilterINS3_5MaxOpIhEENS3_14MorphColumnVecINS3_4VMaxINS1_12hal_baseline10v_uint8x16EEEEEEENS_9allocatorISD_EEEE", "\"abc_capital_on\" : \"TIL\"", "\"abc_activity_chooser_view_see_all\" : \"\u0938\u092d\u0940 \u0926\u0947\u0916\u0947\u0902\"", "\"abc_activity_chooser_view_see_all\" : \"Visa alla\"", "data0.dims <= 2 && type == CV_32F && K > 0", "N2cv18ResizeArea_InvokerIsfEE", "N2cv9Feature2DE", "read beyond end of data", "virtual void cv::MatOp_Bin::divide(double, const cv::MatExpr &, cv::MatExpr &) const", "int cv::opt_AVX2::SymmColumnVec_32f::operator()(const uchar **, uchar *, int) const", "torchMaxUnpooling", "MXRFR[ SFS[ OFSF O[V[", "MWRFQHRTSHRF RHRN RYQZR[SZRY", "G]HQIOKMMMNNOPOSMX NNNRMVMZ NPLULXMZO[Q[SZUXWT YMU[T^RaPb ZMV[T_ YM[MW[U_SaPbMbKaJ`J^L^L`K`K_", "static cv::MatExpr cv::Mat::zeros(int, const int *, int)", "void cv::hal::cpu_baseline::sub8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "LXQFQ[ RGRZ NFSFS[ N[V[ OFQG PFQH QZO[ QYP[ SYT[ SZU[", "N12opencv_caffe21PSROIPoolingParameterE", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/emd.cpp", "cvScaleAdd", "__itt_model_task_beginAL", "pixelAspectRatio", "b.isContinuous() && b.type() == CV_32F && b.total() == (size_t)n", "calib3d::calibrateCameraRO_12()", "\"abc_searchview_description_query\" : \"\u0627\u0633\u062a\u0641\u0633\u0627\u0631 \u062a\u0644\u0627\u0634 \u06a9\u0631\u06cc\u06ba\"", "u.cols >= nm && vt.rows >= nm && (w.size() == Size(nm, 1) || w.size() == Size(1, nm) || w.size() == Size(vt.rows, u.cols))", "Not enough data at scanline %lu (short %llu bytes)", "Inappropriate photometric interpretation %d for SGILog compression; %s", "  Ss=%d, Se=%d, Ah=%d, Al=%d", "dnn::readTorchBlob_10()", "libpng does not support gamma+background+rgb_to_gray", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_111MorphFilterINS3_5MinOpIsEENS3_8MorphVecINS3_4VMinINS1_8hal_AVX210v_int16x16EEEEEEENS_9allocatorISD_EEEE", "H\\IPKNMMOMQNROSRSVRZOb JOLNPNRO ZMYPXRSYP^Nb YMXPWRSY", "codeStr_.empty()", "this_.roi.x >= 0 && this_.roi.y >= 0 && this_.roi.width >= 0 && this_.roi.height >= 0 && this_.roi.x + this_.roi.width <= this_.wholeSize.width && this_.roi.y + this_.roi.height <= this_.wholeSize.height", "rgb[gray] color-map: too few entries", "void cv::opt_AVX2::(anonymous namespace)::medianBlur_SortNet(const cv::Mat &, cv::Mat &, int) [Op = cv::opt_AVX2::(anonymous namespace)::MinMax16s, VecOp = cv::opt_AVX2::(anonymous namespace)::MinMaxVec16s]", "MWRFRT RYQZR[SZRY", "outputsCount >= 0", "unexpected end of LZ stream", "MWOPUPOVUV", "int cv::cpu_baseline::(anonymous namespace)::MorphColumnVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_uint8x16> >::operator()(const uchar **, uchar *, int, int, int) const [VecUpdate = cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_uint8x16>]", "Unknown compression type in image header.", "video::get_1processNoiseCov_10()", "\"abc_searchview_description_clear\" : \"\u0645\u062d\u0648 \u0637\u0644\u0628 \u0627\u0644\u0628\u062d\u062b\"", "N12opencv_caffe16DropoutParameterE", "solvePoly", "N2cv10BmpEncoderE", "H\\NJPISFS[ RGR[ N[W[", "ml::getStepDecreasingPower_10()", "subMatrix", "__itt_metadata_str_add", "findPosInHist", "AsShotNeutral", "N3Iex8EsrchExcE", "\"abc_activity_chooser_view_see_all\" : \"Ham\u0131s\u0131na bax\u0131n\"", "mask.depth() == CV_8U && (mcn == 1 || mcn == cn)", "int cv::opt_SSE4_1::(anonymous namespace)::MorphColumnVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_int16x8> >::operator()(const uchar **, uchar *, int, int, int) const [VecUpdate = cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_int16x8>]", "center_x", "ConcatTable", "W.total() > 2 && Vt.total() > 7", "File output failed.", "static cv::MatExpr cv::Mat::ones(int, int, int)", "G]QFNGLIKKJOJRKVLXNZQ[S[VZXXYVZRZOYKXIVGSFQF MILKKNKSLVMX WXXVYSYNXKWI QFOGMJLNLSMWOZQ[ S[UZWWXSXNWJUGSF OMOT UMUT OPUP OQUQ ONPP OOQP UNTP UOSP PQOS QQOR SQUR TQUS", ".opencv_tensorflow.NameAttrListH", "\"abc_capital_off\" : \"\u95dc\u9589\"", "calib3d::fisheye_1calibrate_11()", "\"abc_searchview_description_query\" : \"Pertanyaan carian\"", "type.googleprod.com/", "Unknown blob_share_mode: ", "JZZHZGYGYI[I[GZFXFVGTISKRNQRO[N^M`Kb TJSMRRP[O^ XFVHUJTMSRQZP]O_MaKbIbHaH_J_JaIaI` NMYM", "map.cols == 3", "DefaultCropSize", "\"abc_activity_chooser_view_see_all\" : \"Skat\u012bt visu\"", "!fixedType() && !fixedSize()", "N2cv3dnn14dnn4_v2019012219ShuffleChannelLayerE", "checkChessboardBinary", "PTQPPQPSQTSTTSTQSPQP RQQRRSSRRQ", " parameter.", "dtype == CV_16SC3 || dtype == CV_32SC3 || dtype == CV_32FC3", "Bad flag (parameter or structure field)", "KZVOTVTWUXWXXWYU WOUVUWVX USUQSOQOOPNQMSMUNWPXRXTV QOOQNSNVPX", "cvSubstituteContour", " name=", "void cv::fillConvexPoly(cv::InputOutputArray, cv::InputArray, const cv::Scalar &, int, int)", "photo::createMergeMertens_10()", "virtual void cv::KMeansPPDistanceComputer::operator()(const cv::Range &) const", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi3EEExy7DistAbsNS1_IiLi3EEEE", "drawSegments", "H]NFLL [FZIXLSRQUPWO[ XLRRPUOWN[ MIPFRFWI NHPGRGWIYIZH[F", "ml::setStepDecreasingPower_10()", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/convhull.cpp", "global destructors keyed to ", "Invalid sRGB rendering intent specified", "[abi:", "convertFromD3D10Texture2D", "Incorrect indentation", "cv::Mat cv::getPerspectiveTransform(const cv::Point2f *, const cv::Point2f *, int)", "fixed64", "For multidimensional array only CV_AUTOSTEP is allowed here", "N2cv3dnn14dnn4_v201901229DataLayerE", "Invalid index file, wrong signature", "void cv::DescriptorMatcher::radiusMatch(cv::InputArray, std::vector<std::vector<DMatch> > &, float, cv::InputArrayOfArrays, bool)", "CHECK failed: is_prototype(): ", "N2cv10opt_SSE4_19RowFilterItfNS0_8RowNoVecEEE", "Tag should start with '<'", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/generalized_hough.cpp", "basic_shader_batch_idx", "_boxWidths.size() == _boxHeights.size()", "DaWNVLTKQKOLNMMOMRNTOUQVTVVUWS WKWSXUYV[V\\U]S]O\\L[JYHWGTFQFNGLHJJILHOHRIUJWLYNZQ[T[WZYY", "I[NFN[ OFO[ KFRF K[Z[ZUY[", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v201901223Net4ImplENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "\"abc_searchview_description_clear\" : \"\u0915\u094d\u200d\u0935\u0947\u0930\u0940 \u0938\u093e\u092b\u093c \u0915\u0930\u0947\u0902\"", "\"abc_shareactionprovider_share_with\" : \"\u0421\u043f\u043e\u0434\u0435\u043b\u0438 \u0441\u043e\"", "cvSetAdd", "create_nonlinear_scale_space", "Nonstandard tile width %d, convert file", "ksize <= MAX_ESIZE", "(*buf1 != NULL || *buf2 != NULL) && *buf3 != NULL", "opencv_tensorflow.GradientDef.gradient_func", "@`|-A", "int cv::meanShift(cv::InputArray, cv::Rect &, cv::TermCriteria)", "num_samples parameter must be positive", "void cv::scalarToRawData(const cv::Scalar &, void *, int, int)", "virtual void cv::cpu_baseline::ColumnFilter<cv::cpu_baseline::Cast<float, short>, cv::cpu_baseline::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::Cast<float, short>, VecOp = cv::cpu_baseline::ColumnNoVec]", ")\", which is not defined. The innermost scope is searched first in name resolution. Consider using a leading '.'(i.e., \"(.", "TIFFClientOpen", "\"abc_capital_on\" : \"\u0412\u041a\u041b.\"", " imaginary", "nstripes", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::HLS2RGB_b>::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::HLS2RGB_b]", "imageEdges_.type() == CV_8UC1", "\"abc_capital_off\" : \"ISKLJU\u010cENO\"", "calib3d::getSmallerBlockSize_10()", "void cv::reprojectImageTo3D(cv::InputArray, cv::OutputArray, cv::InputArray, bool, int)", "Shape", "N2cv3hal10opt_SSE4_112_GLOBAL__N_119YUV422toRGB8InvokerILi0ELi0ELi0ELi4EEE", "\"abc_searchview_description_search\" : \"\u101b\u103e\u102c\u1016\u103d\u1031\u101b\u1014\u103a\"", "^void cv::hal::cpu_baseline::split8u(const uchar *, uchar **, int, int)", "\"status_bar_notification_info_overflow\" : \"999+\"", "templDy_.type() == templDx_.type() && templDy_.size() == templEdges_.size()", "Extension conflicts with extension already in database: extend ", "mask.empty() || mask.type() == CV_8U", "One of indices is out of range", "!vocabulary.empty()", "N2cv21DetectionBasedTracker21SeparateDetectionWorkE", "cvMerge", "Error in header for Huffman-encoded data (invalid number of bits).", "__itt_metadata_str_add_with_scope", "basic_string::_S_create", ".json.gz", "org.opencv.core.Mat", "void cv::arrowedLine(cv::InputOutputArray, cv::Point, cv::Point, const cv::Scalar &, int, int, int, double)", "\"search_menu_title\" : \"Cari\"", "b%c%c%c%c", "\"abc_action_mode_done\" : \"Eginda\"", "N2cv10opt_SSE4_112_GLOBAL__N_16RowSumIiiEE", "N2cv10opt_SSE4_112_GLOBAL__N_19SqrRowSumIhdEE", "Cannot extract binary group from time code user data.  Group number is out of range.", "bias_term", "u->mapcount++ == 0", "\"abc_action_bar_home_description\" : \"Joan orri nagusira\"", "basic_string::insert", "H\\YFK[ KFYF K[Y[", "Pixel order should be used with coi == 0", "__itt_heap_function_create", "LXQFQHSHSFQF RFRH QGSG QMQ[ RNRZ NMSMS[ N[V[ OMQN PMQO QZO[ QYP[ SYT[ SZU[", "F]OFI[ PFJ[ QFK[ LFXF[G\\I\\K[NYPUQMQ ZG[I[KZNXP XFYGZIZKYNWPUQ F[N[ MFPG NFOH RFPH SFPG JZG[ JYH[ KYL[ JZM[", "features2d::drawMatchesKnn_13()", "video::setGamma_10()", "H]XNWPVQTRQROQNPMNMKNIPGSFVFXGYHZKZNYRXUVXTZQ[N[LZKXKVMVMXLXLW OPNNNKOI XHYJYNXRWUUX QRPQOOOKPHQGSF VFWGXIXNWRVUUWSZQ[", "void cv::hal::opt_AVX2::merge32s(const int **, int *, int, int)", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::RGB2HSV_f>::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::RGB2HSV_f]", "void cv::drawContours(cv::InputOutputArray, cv::InputArrayOfArrays, int, const cv::Scalar &, int, int, cv::InputArray, int, cv::Point)", "ga-alpha color-map: too few entries", "Missing PLTE before IDAT", "Unexpected tile x coordinate.", "adaptiveThreshold", "No field named \"uninterpreted_option\" in the Options proto.", "void cv::SVDecomp(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, int)", "getDefaultObjectName", "MXQHRISKSMRORPTRRTRUSWSYR[Q\\ RISM SKRO RUSY SWR[", "void cv::hal::opt_AVX2::exp64f(const double *, double *, int)", "N2cv29ParallelLoopBodyLambdaWrapperE", "27TegraRowOp_combine4_InvokerIKxxE", "void cv::hal::recip16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, void *)", "fitEllipseDirect", "double cv::cpu_baseline::MahalanobisImpl(const cv::Mat &, const cv::Mat &, const cv::Mat &, double *, int) [T = double]", "\"abc_searchview_description_query\" : \"Query sa paghahanap\"", "bad keyword", "OPENCV_OPENCL_DEVICE_MAX_WORK_GROUP_SIZE", "calib3d::estimateAffine2D_15()", " -D %s=%s", "getGpuMatVecRef", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_19ColumnSumIitEENS_9allocatorIS5_EEEE", "getParam", "\"abc_action_bar_up_description\" : \"\u0c2a\u0c48\u0c15\u0c3f \u0c28\u0c3e\u0c35\u0c3f\u0c17\u0c47\u0c1f\u0c4d \u0c1a\u0c47\u0c2f\u0c02\u0c21\u0c3f\"", "virtual void cv::cpu_baseline::(anonymous namespace)::RowSum<unsigned short, double>::operator()(const uchar *, uchar *, int, int) [T = unsigned short, ST = double]", "o\"eBo\"eBo\"eBo\"eBo\"eBo\"eBo\"eBo\"eB", "Only one of cost matrix or distance function should be non-NULL in case of user-defined distance", "Value 'null' is not supported by this parser", "FileNode::isCollection(struct_flags)", "__itt_model_disable_push", "NWQPTPUQUV URQSPTPUQVSVUU", "N2cv12cpu_baseline12_GLOBAL__N_117MorphColumnFilterINS1_5MaxOpIsEENS1_14MorphColumnVecINS1_4VMaxINS_12hal_baseline9v_int16x8EEEEEEE", "NSt6__ndk120__shared_ptr_pointerIP15AMediaExtractorPFvS2_ENS_9allocatorIS1_EEEE", "vector<cv::Point2f> cv::QRDetect::getQuadrilateral(vector<cv::Point2f>)", "registerLayer", "void cv::hconcat(cv::InputArray, cv::OutputArray)", "N12opencv_caffe9BlobProtoE", "Explicit default values are not allowed in proto3.", "N2cv8opt_AVX212_GLOBAL__N_117MorphColumnFilterINS1_5MinOpIdEENS1_16MorphColumnNoVecEEE", "region->pImpl", "meanShift", "\"abc_action_bar_up_description\" : \"Desplazarse hacia arriba\"", "basic_string::compare", "PerSample", "reader.ptr != NULL", "ml::getSubVector_10()", "! image.empty()", "N2cv8opt_AVX212_GLOBAL__N_16RowSumIhtEE", "Shift", "(CV_MAT_DEPTH(rvec->type) == CV_64F || CV_MAT_DEPTH(rvec->type) == CV_32F) && (rvec->rows == 1 || rvec->cols == 1) && rvec->rows*rvec->cols*CV_MAT_CN(rvec->type) == 3", "photo::createTonemapDrago_12()", "void cv::dnn::dnn4_v20190122::blobFromImages(cv::InputArrayOfArrays, cv::OutputArray, double, cv::Size, const cv::Scalar &, bool, bool, int)", "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0 && this->ksize <= 5", "DataType<_Tp>::channels == m.channels() || m.empty()", "I\\VNTMRMONMQLTLWMYNZP[R[UZWWXTXQWOSJRHRFSEUEWFYH RMPNNQMTMXNZ R[TZVWWTWPVNTKSISGTFVFYH", "calib3d::getNumDisparities_10()", "%s: Seek error accessing TIFF directory", "cn == 1", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_16RowSumIsiEENS_9allocatorIS5_EEEE", "wrapMat", "void cv::convertPointsFromHomogeneous(cv::InputArray, cv::OutputArray)", "scalarParams.has(\"padW\") && scalarParams.has(\"padH\")&& scalarParams.has(\"dW\")&& scalarParams.has(\"dH\")&& scalarParams.has(\"dilationW\")&& scalarParams.has(\"dilationH\")&& scalarParams.has(\"kW\")&& scalarParams.has(\"kH\")&& scalarParams.has(\"nOutputPlane\")", "cv::BinaryFunc cv::getConvertScaleFunc(int, int)", "cv::impl::(anonymous namespace)::CvtHelper<cv::impl::(anonymous namespace)::Set<1, -1, -1>, cv::impl::(anonymous namespace)::Set<3, 4, -1>, cv::impl::(anonymous namespace)::Set<0, 2, 5>, cv::impl::(anonymous namespace)::SizePolicy::NONE>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::impl::(anonymous namespace)::Set<1, -1, -1>, VDcn = cv::impl::(anonymous namespace)::Set<3, 4, -1>, VDepth = cv::impl::(anonymous namespace)::Set<0, 2, 5>, sizePolicy = cv::impl::(anonymous namespace)::SizePolicy::NONE]", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/io/coded_stream.cc", "brow5", "\"abc_toolbar_collapse_description\" : \"R\u00e9duire\"", "setVertexArray", "calib3d::RQDecomp3x3_11()", "unknown compression type", "H[LSXSXQWOVNTMQMNNLPKSKULXNZQ[S[VZXX WSWPVN QMONMPLSLUMXOZQ[", "bad processing option (internal error)", "d == 2 && (sizes[0] == 1 || sizes[1] == 1 || sizes[0]*sizes[1] == 0)", "\"abc_searchview_description_voice\" : \"\u0541\u0561\u0575\u0576\u0561\u0575\u056b\u0576 \u0578\u0580\u0578\u0576\u0578\u0582\u0574\"", "I][MQMONMPLSLVMYNZP[R[TZVXWUWRVOUNSM", "N3Iex10EnotdirExcE", "Matteing", "(size_t)2", "CL_INVALID_ARG_VALUE", "H]KHRQJ\\ JHQQ JHYHZMXH K[X[ J\\Y\\ZWX\\", "Mat::n_1mul__JJD()", "objdetect::detectMultiScale_13()", "N2cv3dnn14SplitLayerImplE", "channels >= 1 && channels <= 4", "photo::detailEnhance_10()", "imaginary ", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2019012220ReshapeKerasSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "The hull matrix size might be not enough to fit the hull", "attachContext", "\"abc_shareactionprovider_share_with\" : \"Bendrinti naudojant\"", "kernelFromTensor", "ridx1 > ridx0", "core::PCACompute2_12()", "N6google8protobuf14MessageFactoryE", "dvec[j].channels() == 1", "virtual void cv::cpu_baseline::(anonymous namespace)::RowSum<short, int>::operator()(const uchar *, uchar *, int, int) [T = short, ST = int]", "MapValueRef::GetMessageValue", "mask is empty", "\"abc_shareactionprovider_share_with\" : \"Deila me\u00f0\"", "virtual void cv::VideoCapture::release()", "The library is compiled without OpenGL support", "N2cv18BlendLinearInvokerIhEE", "H\\UIU[V[ VFV[ VFKVZV UILV LUZUZV", "virtual void cv::dnn::SliceLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "N3Iex9El2hltExcE", "N2cv18Bayer2Gray_InvokerIhNS_24SIMDBayerInterpolator_8uEEE", "/home/vagrant/build/srclib/opencv/modules/features2d/src/blobdetector.cpp", "error in user chunk", "NSt6__ndk114default_deleteIN2cv3dnn16ElementWiseLayerINS2_20ChannelsPReLUFunctorEEEEE", "color_adapt", "\" already contains pixel data.", "G]QFNGLIKKJOJRKVLXNZQ[S[VZXXYVZRZOYKXIVGSFQF QFOGMILKKOKRLVMXOZQ[ S[UZWXXVYRYOXKWIUGSF OMOT UMUT OPUP OQUQ", "H]YMXOVQTRQROQNPMNMKNIPGSFVFXGYHZJZNYRXUVXTZQ[N[LZKXKWLVMWLX OQNONKOIQGSF XGYIYNXRWUUXSZQ[", "The patch width and height must be positive", "features2d::setDescriptorType_10()", "void cv::hal::div16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, void *)", "png_read_image: invalid transformations", "map_entry should not be set explicitly. Use map<KeyType, ValueType> instead.", "bad compression info", "=(icvCreatePOSITObject( points, numPoints, &pObject )) >= 0", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX216SymmColumnFilterINS2_13FixedPtCastExIihEENS2_19SymmColumnVec_32s8uEEENS_9allocatorIS7_EEEE", "ReadDarknetFromCfgStream", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline9RowFilterIffNS2_10RowVec_32fEEENS_9allocatorIS5_EEEE", "Unsupported strides", "SubjectDistanceRange", "void cv::detailEnhance(cv::InputArray, cv::OutputArray, float, float)", "checkParamGrid", "\"abc_action_mode_done\" : \"Conclu\u00eddo\"", "\"abc_action_menu_overflow_description\" : \"\u0408\u043e\u0448 \u043e\u043f\u0446\u0438\u0458\u0430\"", "N2cv10ExrEncoderE", "Images must have 8uC1 or 32fC1 type", "void cv::dct(cv::InputArray, cv::OutputArray, int)", "encoder->isFormatSupported(CV_8U)", "JZRMRS RSQ\\ RSS\\ Q\\S\\ RMQJPHNG QJNG RMSJTHVG SJVG RMNKLKJM PLLLJM RMVKXKZM TLXLZM RMPNOOOR RMPOOR RMTNUOUR RMTOUR", "photo::setGamma_10()", "N6google8protobuf21DynamicMessageFactoryE", "N2cv8opt_AVX212_GLOBAL__N_19ColumnSumIitEE", "data_t.cols == thetas.cols", "type == CV_32FC1 || type == CV_32FC2 || type == CV_64FC1 || type == CV_64FC2", "N2cv12cpu_baseline12ColumnFilterINS0_4CastIddEENS0_11ColumnNoVecEEE", "KZRKRX SKSX QNNOMQMRNTQUTUWTXRXQWOTNQN QNOONQNROTQU TUVTWRWQVOTN PKUK PXUX", "MWRJRP OKUO UKOO", "I[V.S1Q4O8N=NCOIPMSXT\\UbUgTlSoQs S1Q5P8O=OBPHQLTWU[VaVgUlSpQsNv", "H\\WQVOUNSMQMNNLPKSKULXNZQ[S[VZWYXWYSYNXJWHVGSFQFNGMHNHOGQF MPLRLVMX VYWWXSXNWJVH QMONNOMRMVNYOZQ[ S[UZVXWTWMVIUGSF", "NVRKQLRSSLRK RLRO RVQWRXSWRV", "cv::Mat cv::details::findHomography1D(cv::InputArray, cv::InputArray)", "Key must start with '\"'", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX28Filter2DIhNS2_4CastIddEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "\"abc_action_bar_up_description\" : \"\u0110i\u1ec1u h\u01b0\u1edbng l\u00ean tr\u00ean\"", "virtual void cv::FlannBasedMatcher::read(const cv::FileNode &)", "objdetect::detectMultiScale3_13()", "void cv::opt_AVX2::gemm64f(const double *, size_t, const double *, size_t, double, const double *, size_t, double, double *, size_t, int, int, int, int)", "void cv::opt_AVX2::cvt32s16f(const int *, size_t, uchar *, size_t, cv::float16_t *, size_t, cv::Size, void *)", "\"abc_capital_on\" : \"AAN\"", "core::useIPP_10()", "\"abc_capital_on\" : \"UKLJU\u010cENO\"", "NWPMPV UPPT RSUV", "NSt6__ndk114default_deleteIN2cv3dnn16PaddingLayerImplEEE", "D`DR`R JYZY P`T`", "short2", "Unsupported data type (=%d)", "core::convertScaleAbs_10()", "rational", "Threshholding", "MakerNote", "m != 0 && _idx", "writeComment", "data transformation parameters.", "surrogate splits are not implemented yet", "\" unknown.", "dtype", "refIt != refCounter.end()", "N2cv10opt_SSE4_112_GLOBAL__N_16RowSumIsdEE", "inarr.depth() == CV_8U", "I\\XMX[ XPVNTMQMONMPLSLUMXOZQ[T[VZXX", "The position of the vertex C on side B could not be determined, because the considered lines do not intersect.", "\"abc_search_hint\" : \"\u05d7\u05e4\u05e9\u2026\"", "IPP:(ipp_norm(_src1, _src2, normType, _mask, _result))", "__itt_memory_write", "m.dims > 2", "void cv::calcHist(const cv::Mat *, int, const int *, cv::InputArray, cv::OutputArray, int, const int *, const float **, bool, bool)", "video::get_1controlMatrix_10()", "\"InsertOrLookupMapValue\"", "): failed TIFFGetField(tif, TIFFTAG_BITSPERSAMPLE, &bpp)", ".BRISK", "Reached impossible case in HasBit().", "objcproto", "virtual void cv::opt_AVX2::(anonymous namespace)::SqrRowSum<unsigned char, int>::operator()(const uchar *, uchar *, int, int) [T = unsigned char, ST = int]", "\"abc_capital_off\" : \"\u0c06\u0c2b\u0c4d \u0c1a\u0c47\u0c2f\u0c3f\"", "core::batchDistance_11()", "Unexpected attribute type", "ml::setActivationFunction_11()", "imgproc::locate_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_114MorphRowFilterINS3_5MaxOpIfEENS3_11MorphRowVecINS3_4VMaxINS1_10hal_SSE4_111v_float32x4EEEEEEENS_9allocatorISD_EEEE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi2EEElm7DistAbsNS1_IiLi2EEEE", "(param0.cols == 1 || param0.rows == 1) && (ptype == CV_32F || ptype == CV_64F)", "N2cv10opt_SSE4_112_GLOBAL__N_19ColumnSumIifEE", "Unrecognized component IDs %d %d %d, assuming YCbCr", "\\LWG>", "This program was compiled against version ", "'): can't read data: ", "MessageSets cannot have fields, only extensions.", "Reorg", "operator*", "imgproc::preCornerDetect_10()", "IPP:((ippicviCopy_16u_C3MR)((const Ipp16u *)src, (int)sstep, (Ipp16u *)dst, (int)dstep, ippiSize(size), (const Ipp8u *)mask, (int)mstep)) >= 0", "N2cv10opt_SSE4_116SymmColumnFilterINS0_4CastIffEENS0_22SymmColumnSmallVec_32fEEE", "Invalid matrix type", "half4", "N2cv35MSURF_Upright_Descriptor_64_InvokerE", "N2cv12FilterEngineE", "objdetect::HOGDescriptor_14()", "MXOMOSPURVSVUUVSVM", "imgproc::boxFilter_13()", "SVMDetector", "imgproc::apply_10()", "cvtColorTwoPlane", "cunn.", "N2cv16BaseImageDecoderE", "coeffs0.rows == 1 || coeffs0.cols == 1", "params.has(\"offset_w\")", "virtual void cv::dnn::ElementWiseLayer<cv::dnn::ReLU6Functor>::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays) [Func = cv::dnn::ReLU6Functor]", "NSt6__ndk120__shared_ptr_emplaceIN2cv10BmpEncoderENS_9allocatorIS2_EEEE", "Only compression method 8 is supported by PNG", "MWRMNV RMVV PSTS", "spatial_scale", "\"abc_action_mode_done\" : \"\u0938\u092e\u094d\u092a\u0928\u094d\u0928 \u092d\u092f\u094b\"", "u->refcount == 1", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::RGB2RGB<unsigned short> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::RGB2RGB<unsigned short>]", "IPP:(ipp_pyrdown( _src, _dst, _dsz, borderType))", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120YUV420sp2RGB8InvokerILi0ELi1ELi3EEE", "TIFFWriteDirectoryTagSubifd", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/filter.simd.hpp", "\"abc_action_menu_overflow_description\" : \"\u305d\u306e\u4ed6\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\"", "\"abc_searchview_description_clear\" : \"So\u2018rovni tozalash\"", "\"abc_capital_off\" : \"T\u1eaeT\"", "data.type()", "N2cv3dnn16ElementWiseLayerINS0_14SigmoidFunctorEEE", "Error calling levelWidth() on image file \"", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphFilter<cv::opt_AVX2::(anonymous namespace)::MaxOp<double>, cv::opt_AVX2::(anonymous namespace)::MorphNoVec>::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MaxOp<double>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphNoVec]", "F_NFKQJUJXKZN[R[UZWXXU\\G OFLQKUKYLZ PFMQLULYN[ KFSF YF_F LFOG MFNH QFOH RFOG ZF\\G ^F\\G", "\"abc_searchview_description_voice\" : \"Sesli arama\"", "(int)_sleft.size() < n && (int)_sright.size() < n", "\"abc_action_bar_home_subtitle_description_format\" : \"\u201e%1$s\u201c, \u201e%2$s\u201c \u2013 %3$s\"", "features2d::detect_13()", " !#$&')*,-/0235689;<>????????????????????", "void cv::hal::opt_SSE4_1::add64f(const double *, size_t, const double *, size_t, double *, size_t, int, int)", "N3Imf15OpaqueAttributeE", "void cv::hal::opt_SSE4_1::div8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, const double *)", "CHECK failed: i >= 0: ", "iCCP: invalid keyword", "void cv::opt_AVX2::cvt8u16f(const uchar *, size_t, uchar *, size_t, cv::float16_t *, size_t, cv::Size, void *)", "virtual void cv::dnn::EltwiseLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "virtual void cv::opt_SSE4_1::(anonymous namespace)::RowSum<unsigned short, int>::operator()(const uchar *, uchar *, int, int) [T = unsigned short, ST = int]", "invalid compression buffer size", "N2cv10opt_SSE4_18Filter2DIhNS0_4CastIffEENS0_11FilterNoVecEEE", ". The scan line has not yet been stored in file \"", "_src.total() > 0", "Invalid bit depth for RGB image", "outCn % blobs[0].size[1] == 0", "float2", "Unexpected type for image attribute \"", "dnn::readNetFromModelOptimizer_10()", "\"abc_searchview_description_search\" : \"\u0548\u0580\u0578\u0576\u0565\u056c\"", "imgproc::HoughLines_12()", "chunk data is too large", "imgproc::matchTemplate_11()", "_lines.depth() == CV_32F || _lines.depth() == CV_32S", "\"abc_searchview_description_clear\" : \"\u101b\u103e\u102c\u1005\u101b\u102c \u1021\u1001\u103b\u1000\u103a\u1021\u101c\u1000\u103a\u1019\u103b\u102c\u1038 \u1016\u101a\u103a\u101b\u103e\u102c\u1038\u101b\u1014\u103a\"", "31TegraCvtColor_bgrx2gray_Invoker", "cvMatchTemplate", "virtual bool cv::VideoCapture::open(int, int)", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_10RGB2RGB5x5EEE", "Null pointer to image", "\"abc_action_bar_up_description\" : \"\u12c8\u12f0 \u120b\u12ed \u12ed\u12f3\u1235\u1231\"", "\"abc_action_bar_home_description_format\" : \"%1$s\u104a %2$s\"", "centers_init", "edgeDst(o_next) == edgeOrg(d_prev)", "weights.empty()", "core::norm_13()", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_117MorphColumnFilterINS3_5MinOpIhEENS3_14MorphColumnVecINS3_4VMinINS1_12hal_baseline10v_uint8x16EEEEEEENS_9allocatorISD_EEEE", "N2cv3dnn14dnn4_v2019012217BatchNormSubgraphE", "(cc%(4*stride))!=0", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/io/zero_copy_stream_impl.cc", "bool cv::imreadmulti(const cv::String &, std::vector<Mat> &, int)", "reserve", ". Correct values are: disabled, sse42, avx2, avx512 (Intel64 only)", "\" for option \"", "void cv::hal::cvtXYZtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool)", "\"abc_shareactionprovider_share_with\" : \"Deli sa\"", "N2cv3dnn12RNNLayerImplE", "No \"get\" routine setup", "weights.rows == output.size[1]", "E`NFH[ NFO[ OFPY \\FO[ \\FV[ ]FW[ KFOF \\F`F E[K[ S[Z[", "Extension range $0 to $1 includes field \"$2\" ($3).", "Too much", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_19SqrRowSumIhdEENS_9allocatorIS5_EEEE", "JZLMR[ XMR[", "double cv::calibrateCameraRO(cv::InputArrayOfArrays, cv::InputArrayOfArrays, cv::Size, int, cv::InputOutputArray, cv::InputOutputArray, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArray, int, cv::TermCriteria)", "G\\LFL[ MGMZ NFN[ IFYFYL NPTP TLTT I[Y[YU JFLG KFLH OFNH PFNG TFYG VFYH WFYI XFYL TLSPTT TNRPTR TOPPTQ LZJ[ LYK[ NYO[ NZP[ T[YZ V[YY W[YX X[YU", "ntrees", "imgproc::findNearest_10()", "CPPTYPE_BOOL", "params.has(\"height\")", "/home/vagrant/build/srclib/opencv/modules/core/src/sum.dispatch.cpp", "handle", "cvLinearPolar", "N7cvflann18KNNSimpleResultSetIfEE", "\"abc_searchview_description_search\" : \"\u041f\u0440\u0435\u0442\u0440\u0430\u0433\u0430\"", "money_get error", "\"abc_toolbar_collapse_description\" : \"\u0b9a\u0bc1\u0bb0\u0bc1\u0b95\u0bcd\u0b95\u0bc1\"", "void cv::hal::div16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, void *)", "N2cv12cpu_baseline12_GLOBAL__N_126BilateralFilter_8u_InvokerE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11JpegEncoderENS_9allocatorIS2_EEEE", "cvtTwoPlaneYUVtoBGR", "int cv::opt_SSE4_1::RowVec_16s32f::operator()(const uchar *, uchar *, int, int) const", "N2cv11TiffEncoderE", "getObjectScores", "getRectSubPix", "N3Iex13EconnresetExcE", "CHECK failed: prototype != NULL: ", "N2cv10opt_SSE4_112_GLOBAL__N_111MorphFilterINS1_5MinOpIfEENS1_8MorphVecINS1_4VMinINS_10hal_SSE4_111v_float32x4EEEEEEE", "short8", "cannot create thread specific key for __cxa_get_globals()", "__itt_thr_ignore", "G]QFNGLIKKJOJRKVLXNZQ[S[VZXXYVZRZOYKXIVGSFQF QFOGMILKKOKRLVMXOZQ[ S[UZWXXVYRYOXKWIUGSF", "arithm_ipp_min16u", "displayStatusBar", "cv::impl::(anonymous namespace)::CvtHelper<cv::impl::(anonymous namespace)::Set<1, -1, -1>, cv::impl::(anonymous namespace)::Set<3, 4, -1>, cv::impl::(anonymous namespace)::Set<0, -1, -1>, cv::impl::(anonymous namespace)::SizePolicy::FROM_YUV>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::impl::(anonymous namespace)::Set<1, -1, -1>, VDcn = cv::impl::(anonymous namespace)::Set<3, 4, -1>, VDepth = cv::impl::(anonymous namespace)::Set<0, -1, -1>, sizePolicy = cv::impl::(anonymous namespace)::SizePolicy::FROM_YUV]", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn15ResizeLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "Size of cameraMatrix must be 3x3!", "NSt6__ndk114default_deleteIN2cv3dnn16ElementWiseLayerINS2_11BNLLFunctorEEEEE", "N2cv19connectedcomponents21LabelingGranaParallelIihNS0_4NoOpEE9FirstScanE", "f_param1", "F]IMJNKPKTLWMYNZQ[S[VZWYXWYRYOXJVGTFRFPGOIOKPMSOVP[Q JMKNLPLTMWNY VYWWXRXOWJVHTG GPHNIMKMLNMPMTNXOZQ[ S[UZVXWSWNVJUHSGQGOI", "void cv::sqrt(cv::InputArray, cv::OutputArray)", "Detected module path: '", "N7cvflann7anyimpl16small_any_policyIPKcEE", "Merging CCITT Fax 4 codec-specific tags failed", "void cv::hal::opt_SSE4_1::add32s(const int *, size_t, const int *, size_t, int *, size_t, int, int)", "features2d::getDiffusivity_10()", "imgproc::createLineSegmentDetector_11()", "utils::findDataFile(): <build>/", "Cannot create new thread (%T).", "MissingRequired", "__cxa_guard_acquire failed to release mutex", "setMaxCategories", "imgproc::connectedComponentsWithStats_11()", "void cv::hal::opt_AVX2::div16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, const double *)", "calib3d::calibrateCameraExtended_11()", "void cv::hal::opt_AVX2::invSqrt64f(const double *, double *, int)", "void cv::hal::cpu_baseline::recip64f(const double *, size_t, double *, size_t, int, int, const double *)", "\"abc_activitychooserview_choose_application\" : \"\u0412\u0438\u0431\u0440\u0430\u0442\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u0443\"", "img->dataOrder == IPL_DATA_ORDER_PIXEL || img->roi->coi != 0", "\"search_menu_title\" : \"\u0422\u044a\u0440\u0441\u0435\u043d\u0435\"", "\"abc_capital_off\" : \"\u0c86\u0cab\u0ccd\"", "video::setAlpha_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml22LogisticRegressionImplENS_9allocatorIS3_EEEE", "N12opencv_caffe14InputParameterE", "void cv::hal::opt_SSE4_1::min64f(const double *, size_t, const double *, size_t, double *, size_t, int, int)", "unlock", "LRNLayerImpl", "virtual void cv::ml::DTreesImplForRTrees::writeTrainingParams(cv::FileStorage &) const", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120YUV420sp2RGB8InvokerILi2ELi1ELi4EEE", "\"abc_shareactionprovider_share_with_application\" : \"\u041d\u0430\u0434\u0456\u0441\u043b\u0430\u0442\u0438 \u0447\u0435\u0440\u0435\u0437 %s\"", "video::getSorIterations_10()", "Cannot find image attribute \"", "i>=0 && i<(int)vtcs.size()", "\"abc_searchview_description_search\" : \"K\u00ebrko\"", "\"abc_searchview_description_query\" : \"\u0dc3\u0dd9\u0dc0\u0dd4\u0db8\u0dca \u0dc0\u0dd2\u0db8\u0dc3\u0dd4\u0db8\"", "Unsupported combination of source format (=%d), and destination format (=%d)", "data = ", "BuildMapUaToAa", "AddString", "\"abc_search_hint\" : \"\u0d24\u0d3f\u0d30\u0d2f\u0d41\u0d15\u2026\"", "Unknown exception in JNI code {core::getTextSize()}", "\"abc_action_bar_home_description\" : \"Prejs\u0165 na plochu\"", "cvSetOpenGlContext", "Value must be number for double option \"", "Can not write tiles to a stripped image", "\"abc_searchview_description_voice\" : \"R\u00f6sts\u00f6kning\"", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_8Gray2RGBIfEEEE", "imgproc::cornerMinEigenVal_11()", "N12opencv_caffe12NetParameterE", "cvFindNextContour", "G]KMKb LNLa MMMb VMVXWZX[Z[[Z\\X WNWXXZY[ XMXXYZZ[ MXNZP[R[TZUYVW KMMM VMXM KbMb", "void cv::opt_AVX2::cvt32f8s(const float *, size_t, uchar *, size_t, schar *, size_t, cv::Size, void *)", "FieldOfViewCotangent", "UpgradeV1Net", "F^OFI[ PFJ[ LFWFZG[I[KZNYOVP WFYGZIZKYNXOVP MPVPXQYSYUXXVZR[F[ VPWQXSXUWXUZR[", "objdetect::detectMultiScale2_15()", "!layers[0].outputBlobs.empty()", "NSt6__ndk120__shared_ptr_emplaceIN2cv18DISOpticalFlowImplENS_9allocatorIS2_EEEE", "  Fax Data:", "bool cv::QRDecode::updatePerspective()", "N17opencv_tensorflow20TensorShapeProto_DimE", "gray[8] color-map: too few entries", "icvTraceContour", "N2cv2ml11ANN_MLPImplE", "MXQLQY TLTY OQVQ OTVT", "lines.rows == lines0.cols && lines.cols == lines0.rows", "imgproc::drawContours_10()", "pthreads", "H]XMVTUXUZV[Y[[Y\\W YMWTVXVZW[ VTVQUNSMQMNNLQKTKWLYMZO[Q[SZUWVT QMONMQLTLXMZ", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX28Filter2DIsNS2_4CastIfsEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "Bogus input colorspace", "Switch", "video::getNumIters_10()", "photo::createTonemap_11()", "videoio::VideoCapture_14()", "reorg_stride", "NSt6__ndk110__time_getE", "void cv::hal::opt_SSE4_1::cvtBGR5x5toGray(const uchar *, size_t, uchar *, size_t, int, int, int)", "future", "dst.u != NULL", "OPENCV_DNN_CHECK_NAN_INF_DUMP", "MWOPOY OSPURVTUUSTQRPPQOS", "imgproc::compareHist_10()", "numBlobs == binLayer->blobs().ClearedCount()", "cvShowImage", "write", "min_val", "LXNMNV NMRV VMRV VMVV", "virtual void cv::cpu_baseline::SymmColumnFilter<cv::cpu_baseline::FixedPtCastEx<int, unsigned char>, cv::cpu_baseline::SymmColumnVec_32s8u>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::FixedPtCastEx<int, unsigned char>, VecOp = cv::cpu_baseline::SymmColumnVec_32s8u]", "UpgradeNetAsNeeded", "virtual void cv::opt_AVX2::ColumnFilter<cv::opt_AVX2::Cast<int, short>, cv::opt_AVX2::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::Cast<int, short>, VecOp = cv::opt_AVX2::ColumnNoVec]", "video::getDetectShadows_10()", "void cv::magnitude(cv::InputArray, cv::InputArray, cv::OutputArray)", "LYVPVQWQVPTOQOOPORQSTTVU OQQRTSVTVWTXQXOWNVOVOW", "failed to stat file: %s (%s)", "\"abc_search_hint\" : \"S\u00f6k \u2026\"", "N2cv12cpu_baseline12_GLOBAL__N_111MorphFilterINS1_5MaxOpIfEENS1_8MorphVecINS1_4VMaxINS_12hal_baseline11v_float32x4EEEEEEE", "ml::getTruncatePrunedTree_10()", "initialT", "The function/feature is not implemented", "NSt6__ndk120__shared_ptr_emplaceIN2cv4impl20PluginBackendFactoryENS_9allocatorIS3_EEEE", "N2cv3dnn14dnn4_v2019012210SliceLayerE", "The width of the tiles exceeds the maximum width of ", "Basis size is not 2", "void cv::FAST(cv::InputArray, std::vector<KeyPoint> &, int, bool)", "N6google8protobuf12FieldOptionsE", "\"abc_capital_off\" : \"D\u00c9SACTIV\u00c9\"", "KYTKKX SMTX TKUX NTTT IXNX RXWX", "NSt6__ndk120__shared_ptr_emplaceIN12_GLOBAL__N_124GeneralizedHoughGuilImplENS_9allocatorIS2_EEEE", "int cv::opt_AVX2::(anonymous namespace)::MorphColumnVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_uint16x16> >::operator()(const uchar **, uchar *, int, int, int) const [VecUpdate = cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_uint16x16>]", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_11RGB2YCrCb_iIhEEEE", "N7cvflann11KDTreeIndexINS_2L2IfEEE4NodeE", "void cv::opt_AVX2::cvt16f16s(const cv::float16_t *, size_t, uchar *, size_t, short *, size_t, cv::Size, void *)", "Convolution-name", "features2d::setUpright_10()", "N2cv2ml18LogisticRegressionE", "~OpenCLBufferPoolBaseImpl", "calculateShift", "!imagePoints.empty() && (imagePoints.type() == CV_32FC2 || imagePoints.type() == CV_64FC2)", "JZNFNM VFVM", "missing image size specifier", "typeidx == TYPE_TORCH || (typeidx == TYPE_NIL && ndims == 0)", "src.size() == dst.size() && (src.cols == 1 || src.rows == 1)", "N6google8protobuf10ReflectionE", "NSt6__ndk119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_9CCStatsOpEE22FirstScan8ConnectivityE", "ksize == 3", "cvSeqPushFront", "void cv::dnn::dnn4_v20190122::Net::Impl::fuseLayers(const std::vector<LayerPin> &)", "dnn::readNet_11()", "IPP:((ippicvsLn_32f_A21)(src, dst, n)) >= 0", "imgWidth == frameWidth && imgHeight == frameHeight*3", "exclude_range", "\"abc_action_mode_done\" : \"\u1270\u12a8\u1293\u12cd\u1297\u120d\"", "  Expected : ", "N6google8protobuf24SimpleDescriptorDatabaseE", "Failed to determine AVI bufer position: value is out of range", "Only continuous arrays are supported", "N12opencv_caffe19MemoryDataParameterE", "KYVLWLXKWNVLTKRKPLOMNOMRMUNWPXRXTWUVVS RKPMOONRNVPX RXTVUS SSXS", "NSt6__ndk115__codecvt_utf16IDsLb0EEE", "throw_no_cuda", "labels.isContinuous() && labels.type() == CV_32S && (labels.cols == 1 || labels.rows == 1) && labels.cols + labels.rows - 1 == data.rows", "icvGrowSeq", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphColumnFilter<cv::opt_AVX2::(anonymous namespace)::MaxOp<float>, cv::opt_AVX2::(anonymous namespace)::MorphColumnVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_float32x8> > >::operator()(const uchar **, uchar *, int, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MaxOp<float>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphColumnVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_float32x8> >]", "N6google8protobuf18DescriptorDatabaseE", ".opencv_tensorflow.DataTypeH", "Unknown/unsupported kernel type", "!cvIsNaN(res) && !cvIsInf(res)", "\"abc_action_menu_overflow_description\" : \"\u041d\u044d\u043c\u044d\u043b\u0442 \u0441\u043e\u043d\u0433\u043e\u043b\u0442\u0443\u0443\u0434\"", "data_format", "setClustersNumber", "28EqualizeHistCalcHist_Invoker", "Can't get here: failed to get default value as string", "check training parameters (learning rate) for the classifier", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_111MorphFilterINS3_5MinOpIdEENS3_10MorphNoVecEEENS_9allocatorIS8_EEEE", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/flatten_layer.cpp", "void cv::cpu_baseline::cvt16u32s(const ushort *, size_t, uchar *, size_t, int *, size_t, cv::Size, void *)", "leaf_size", "[],[]", "Failed to read directory at offset %lu", "\"abc_action_bar_home_description\" : \"Vai alla home page\"", "\"abc_shareactionprovider_share_with_application\" : \"Share with %s\"", "\"abc_shareactionprovider_share_with_application\" : \"%s \u0430\u0440\u043a\u044b\u043b\u0443\u0443 \u0431\u04e9\u043b\u04af\u0448\u04af\u04af\"", "imgproc::arrowedLine_13()", "void cv::hal::opt_SSE4_1::sub16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int)", "operator|=", "numLocClasses == 1", "NSt6__ndk120__codecvt_utf8_utf16IDiEE", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/color_hsv.dispatch.cpp", "CL_INVALID_BUILD_OPTIONS", "\"abc_searchview_description_search\" : \"Paie\u0161ka\"", "rvec.total() > 2 && tvec.total() > 2", "ml::getDecisionFunction_10()", "N3Iex10EnavailExcE", "N12_GLOBAL__N_122resize_bitExactInvokerItNS_13ufixedpoint32ELi2EEE", "F]OUMTLTJUIWIXJZL[M[OZPXPWOUJPINIKJILHOGSGWHYJZLZOYRVUUWUYV[X[YZZX MSKPJNJKKILH SGVHXJYLYOXRVU", "Old-style LZW codes, convert file", "void cv::fillPoly(cv::InputOutputArray, cv::InputArrayOfArrays, const cv::Scalar &, int, int, cv::Point)", "/home/vagrant/build/srclib/opencv/modules/core/src/norm.cpp", "ERROR: Improper value of OPENCV_IPP: ", "photo::colorChange_10()", "condition_variable::wait: mutex not locked", "sSin_A11", "InnerProduct", "min_idx >= 0", "\"abc_action_bar_home_description\" : \"\u03a0\u03bb\u03bf\u03ae\u03b3\u03b7\u03c3\u03b7 \u03c3\u03c4\u03b7\u03bd \u03b1\u03c1\u03c7\u03b9\u03ba\u03ae \u03c3\u03b5\u03bb\u03af\u03b4\u03b1\"", "\"abc_action_bar_home_description\" : \"\ud648 \ud0d0\uc0c9\"", "core::mulSpectrums_10()", "Cannot call BuildFile on a DescriptorPool that uses a DescriptorDatabase.  You must instead find a way to get your file into the underlying database.", "NSt6__ndk120__shared_ptr_emplaceIN2cv9MSER_ImplENS_9allocatorIS2_EEEE", "kernel_size > 0 && filters > 0", "float32", "The lower boundary can not be calculated if the cost matrix is used", "getMulTransposedFunc", "cvFlip", "int cv::opt_SSE4_1::SymmColumnVec_32f16s::operator()(const uchar **, uchar *, int) const", "createEncodeHuffmanTable", "This can't happen; base64 decoder state = ", "\"search_menu_title\" : \"\u0627\u0644\u0628\u062d\u062b\"", "conv_%d", "Merging common CCITT Fax codec-specific tags failed", "CHECK failed: builder_: ", "void cv::hal::cvtBGR5x5toGray(const uchar *, size_t, uchar *, size_t, int, int, int)", "void cv::opt_SSE4_1::(anonymous namespace)::medianBlur_SortNet(const cv::Mat &, cv::Mat &, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MinMax16u, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MinMaxVec16u]", "Key must start with a letter or _", ">fRAPCMDJDGCEA>H@JAMAZB]D_G`M`PaRc RATCWDZD]C_AfHdJcMcZb]`_]`W`TaRc", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_121SymmColumnSmallFilterINS2_13FixedPtCastExIihEENS2_19SymmColumnVec_32s8uEEENS_9allocatorIS7_EEEE", "cvPtr1D", "shrinkCaffeModel", "features2d::getUpright_10()", "N2cv10opt_SSE4_116SymmColumnFilterINS0_4CastIisEENS0_25SymmColumnSmallVec_32s16sEEE", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/bilateral_filter.dispatch.cpp", "fs && \"File stream error\"", "void cv::HoughLinesSDiv(cv::InputArray, cv::OutputArray, int, float, float, int, int, int, int, double, double)", "\"abc_capital_off\" : \"\u0a2c\u0a70\u0a26\"", "core::normalize_10()", "virtual void cv::dnn::dnn4_v20190122::BatchNormSubgraph::finalize(tensorflow::GraphDef &, tensorflow::NodeDef *, std::vector<tensorflow::NodeDef *> &)", "m.dims >= 2", "N6google8protobuf10TextFormat17BaseTextGeneratorE", "void cv::hal::cpu_baseline::sub16s(const short *, size_t, const short *, size_t, short *, size_t, int, int)", "Field is not a map field.", "\"abc_search_hint\" : \"Search\u2026\"", "number of offset values specified must be equal to the number of dimensions following axis.", "Not a JPEG file: starts with 0x%02x 0x%02x", "src6.isMat() || src6.isUMat()", "OPENCV_TRACE_DEPTH_OPENCV", "\"abc_action_bar_up_description\" : \"Prejs\u0165 hore\"", "int cv::predictOrdered(cv::CascadeClassifierImpl &, Ptr<cv::FeatureEvaluator> &, double &) [FEval = cv::HaarEvaluator]", "int cv::cpu_baseline::RowVec_32f::operator()(const uchar *, uchar *, int, int) const", "KZPKTX QKUX YKLX NKSK VK[K JXOX RXWX", "/home/vagrant/build/srclib/opencv/modules/features2d/src/draw.cpp", "TextureFormat", "void cv::hal::opt_SSE4_1::div32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, const double *)", "virtual void cv::MergeRobertsonImpl::process(cv::InputArrayOfArrays, cv::OutputArray, cv::InputArray)", "objdetect::HOGDescriptor_18()", "dnn::imagesFromBlob_10()", "\"abc_action_mode_done\" : \"OK\"", "N6google8protobuf14FatalExceptionE", "/home/vagrant/build/srclib/opencv/modules/calib3d/src/undistort.cpp", "imgproc::erode_11()", "double3", "KZOPNQMSMUNWPXRXUWWUXRXPWOUOTPSRRUO\\ MUNVPWRWUVWTXR XQWPUPSR RUQXP\\", "DummyData", "core::bitwise_1not_10()", "I[QHRGRFQFPGPIQJTKXKYKYJXJUKSLPNNPMRLULWMYNZP[S\\U]V_VaUbSbRaR`S`Sa POOPNRMUMWNYOZ UKRMQNOQNTNWOYQ[S\\", "int cv::opt_SSE4_1::(anonymous namespace)::MorphVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_float32x4> >::operator()(uchar **, int, uchar *, int) const [VecUpdate = cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_float32x4>]", "\"abc_capital_on\" : \"\u0a24\u0a47\"", "CPU implementer", "out_y", "TIFFWriteEncodedStrip", "\"abc_searchview_description_query\" : \"Soeknavraag\"", "\"search_menu_title\" : \"\u0406\u0437\u0434\u0435\u0443\"", "Invalid header", "IPP:(ipp_polarToCart(Mag, Angle, X, Y))", "int cv::opt_AVX2::(anonymous namespace)::MorphColumnVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_uint16x16> >::operator()(const uchar **, uchar *, int, int, int) const [VecUpdate = cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_uint16x16>]", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_8Gray2RGBIhEEEE", "void cv::hal::opt_AVX2::addWeighted64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, const double *)", "N2cv10opt_SSE4_112_GLOBAL__N_19ColumnSumIddEE", "calib3d::drawFrameAxes_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_19RowFilterIsfNS2_13RowVec_16s32fEEENS_9allocatorIS5_EEEE", "core::getVersionMinor_10()", "N2cv12cpu_baseline12_GLOBAL__N_117MorphColumnFilterINS1_5MaxOpItEENS1_14MorphColumnVecINS1_4VMaxINS_12hal_baseline10v_uint16x8EEEEEEE", "blobs.size() >= 3", "?N2cv8colormap7CividisE", "Invalid data window in image header.", "scale_factor", "Integer arithmetic overflow", "VIDEOIO(%s): backend is not available (plugin is missing, or can't be loaded due dependencies or it is not compatible)", "sSinCos_HA", "NSt6__ndk120__shared_ptr_emplaceIN2cv29AffinePartial2DRefineCallbackENS_9allocatorIS2_EEEE", "(cc%(2*stride))!=0", "N2cv14MergeExposuresE", "virtual void cv::opt_SSE4_1::SymmColumnFilter<cv::opt_SSE4_1::FixedPtCastEx<int, unsigned char>, cv::opt_SSE4_1::SymmColumnVec_32s8u>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::FixedPtCastEx<int, unsigned char>, VecOp = cv::opt_SSE4_1::SymmColumnVec_32s8u]", "Unknown/unsupported SVM type", "/home/vagrant/build/srclib/opencv/modules/core/src/matrix_expressions.cpp", "!fs_impl->write_stack.empty()", "imgproc::detect_11()", "\"0x\" must be followed by hex digits.", "photo::fastNlMeansDenoisingMulti_17()", "inSourceSegment", "calib3d::findFundamentalMat_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_18Filter2DIsNS2_4CastIddEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "/home/vagrant/build/srclib/opencv/modules/core/src/dxt.cpp", "N3Imf14TypedAttributeIdEE", "int cv::opt_SSE4_1::(anonymous namespace)::MorphColumnVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_float32x4> >::operator()(const uchar **, uchar *, int, int, int) const [VecUpdate = cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_float32x4>]", "cvDet", "video::setComplexityReductionThreshold_10()", "org.opencv.imgcodecs", "void cv::cpu_baseline::cvt8u16s(const uchar *, size_t, uchar *, size_t, short *, size_t, cv::Size, void *)", "moment_scale", "imgproc::equalizeHist_10()", "calib3d::getOptimalNewCameraMatrix_11()", "!fixedSize() || ((Mat*)obj)->size.operator()() == Size(_cols, _rows)", "N12opencv_caffe13TanHParameterE", "OpenEXR Image files (*.exr)", "void cv::hal::opt_AVX2::cvtBGRtoYUV(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool, bool)", "IPP:((ippicvsInvSqrt_32f_A21)(src, dst, len)) >= 0", "\"abc_searchview_description_submit\" : \"\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\"", "void cv::hal::opt_AVX2::cvtBGRtoBGR5x5(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "imgproc::ellipse_15()", "input.size[0] == output.size[0]", "E_RIQJRKSJRI IR[R RYQZR[SZRY", "icvBinarizationHistogramBased", "opencv_ml_dtree", "core::PCABackProject_10()", "dst.rows == dst0.cols && dst.cols == dst0.rows", "safeCastToSizeT", "Select a ROI and then press SPACE or ENTER button!", "padMode == \"SAME\"", "\"abc_action_menu_overflow_description\" : \"\u0bae\u0bc7\u0bb2\u0bc1\u0bae\u0bcd \u0bb5\u0bbf\u0bb0\u0bc1\u0baa\u0bcd\u0baa\u0b99\u0bcd\u0b95\u0bb3\u0bcd\"", "Failed to create temporary file %s", "Incorrect count for \"%s\"", "operator|", "void cv::cpu_baseline::cvt16u8s(const ushort *, size_t, uchar *, size_t, schar *, size_t, cv::Size, void *)", "video::setVariationalRefinementGamma_10()", "Fax3SetupState", "std::ostream", "ccltype == CCL_GRANA || ccltype == CCL_WU || ccltype == CCL_DEFAULT", "/home/vagrant/build/srclib/opencv/modules/imgcodecs/src/grfmt_sunras.cpp", "\"abc_action_menu_overflow_description\" : \"Nog opsies\"", "N6google8protobuf8internal24GeneratedExtensionFinderE", "No symbol '", "_mask.empty() || _mask.type() == CV_8UC1", "void cv::patchNaNs(cv::InputOutputArray, double)", "H\\NML[ OMNSMXL[ YMXQVU ZMYPXRVUTWQYOZL[ KMOM", "!codeStr_.empty()", "arithm_ipp_sub8u", "cvGetElemType", "void cv::vconcat(cv::InputArray, cv::InputArray, cv::OutputArray)", "cvReleaseData", "void cv::hal::opt_SSE4_1::addWeighted32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, const double *)", "Key in map fields cannot be enum types.", "ml::setDegree_10()", "N3Iex9EnomsgExcE", "findCandidateHoles", "[DEBUG:", "initVkComBackend", "char2", "coeffs.size() == 0 || coeffs.size() == inputs.size()", "Input curves have unknown type", "cvArcLength", "failed to open file: %s %d (%s)", "ctx.stack.empty()", "I0.isContinuous()", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_18Gray2RGBIhEEEE", "Invalid strings::Substitute() format string: \"", "N2cv3hal8opt_AVX212_GLOBAL__N_119YUV422toRGB8InvokerILi2ELi0ELi1ELi4EEE", "CcheckChessboard", "CellWidth", "Unknown parameter det_bg_threshold for layer type ", "mapIt != reuseMap.end()", "N2cv3hal12cpu_baseline12_GLOBAL__N_120YUV420sp2RGB8InvokerILi0ELi1ELi4EEE", "objdetect::save_10()", "Failed to allocate memory for JPEG tables", "scalarParams.has(\"pad\") && scalarParams.has(\"dim\")", "dnn::readNetFromDarknet_12()", "\"abc_capital_on\" : \"\u0ec0\u0e9b\u0eb5\u0e94\"", " characters long.", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", "chlist", "The type parameter T in RepeatedFieldRef<T> API doesn't match ", "N3Iex9EaccesExcE", "N2cv3dnn16SoftMaxLayerImplE", "type spec is not correct; it should have format \"cat\", \"ord\" or \"ord[n1,n2-n3,n4-n5,...]cat[m1-m2,m3,m4-m5,...]\", where n's and m's are 0-based variable indices", "m1 != NULL", "\"abc_action_menu_overflow_description\" : \"\u0925\u092a \u0935\u093f\u0915\u0932\u094d\u092a\u0939\u0930\u0942\"", "N2cv3hal12cpu_baseline12_GLOBAL__N_119YUV422toRGB8InvokerILi2ELi0ELi0ELi4EEE", "H\\LFL[ MGM[L[ LFUFWGXHYJYMXOWPUQMQ MGUGWHXJXMWOUPMP", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_19ColumnSumIihEENS_9allocatorIS5_EEEE", "cannot parse picture header", "c >= 0 && ival == cmap[c]", "Unknown parameter stride for layer type ", "\"abc_shareactionprovider_share_with\" : \"Kongsi dengan\"", "const_cast", "double8", "ml::getBackpropWeightScale_10()", "Unknown exception in JNI code {nMatToBitmap}", "LIBTIFF_ALLOW_LARGE_LIBJPEG_MEM_ALLOC", "%s: No space for LogLuv state block", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::RGB2YCrCb_i<uchar> >::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::RGB2YCrCb_i<uchar>]", "N2cv12cpu_baseline16SymmColumnFilterINS0_4CastIfhEENS0_11ColumnNoVecEEE", "void cv::imshow(const cv::String &, const ogl::Texture2D &)", "cvPow", "\"abc_searchview_description_voice\" : \"\u0413\u043e\u043b\u043e\u0441\u043e\u0432\u043e\u0439 \u043f\u043e\u0438\u0441\u043a\"", "Invalid index", "internal error handling cHRM coefficients", "v1_layer_param_ != NULL", "cv::impl::(anonymous namespace)::CvtHelper<cv::impl::(anonymous namespace)::Set<3, 4, -1>, cv::impl::(anonymous namespace)::Set<3, -1, -1>, cv::impl::(anonymous namespace)::Set<0, 2, 5>, cv::impl::(anonymous namespace)::SizePolicy::NONE>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::impl::(anonymous namespace)::Set<3, 4, -1>, VDcn = cv::impl::(anonymous namespace)::Set<3, -1, -1>, VDepth = cv::impl::(anonymous namespace)::Set<0, 2, 5>, sizePolicy = cv::impl::(anonymous namespace)::SizePolicy::NONE]", "maxsz % esz == 0", "video::setGradientDescentIterations_10()", "I[NII[ VI[[ MM[[ WMI[ NIVI MMWM", "NSt6__ndk114default_deleteIN2cv12FilterEngineEEE", "OPENCV_DNN_CHECK_NAN_INF", "NSt6__ndk120__shared_ptr_emplaceIN2cv16VideoInputStreamENS_9allocatorIS2_EEEE", "virtual void cv::AKAZE_Impl::detectAndCompute(cv::InputArray, cv::InputArray, std::vector<KeyPoint> &, cv::OutputArray, bool)", "%s caught %s", "void cv::AKAZEFeatures::Find_Scale_Space_Extrema(std::vector<Mat> &)", "Pushed vector length is not equal to matrix row length", "NSt6__ndk113basic_fstreamIcNS_11char_traitsIcEEEE", "unexpected", "calib3d::findEssentialMat_17()", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::Gray2RGB<unsigned short> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::Gray2RGB<unsigned short>]", "Enum value \"$0\" uses reserved number $1.", "MWUQSPRPPQOSPURVTV", "!allocated", "N6google8protobuf37EnumDescriptorProto_EnumReservedRangeE", "file && THFile_isOpened(file)", "cvSetReal3D", "warpPolar", "numParam < (int)layerBlobs.size()", "N2cv18DownhillSolverImplE", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IhisEENS_15VResizeLanczos4IhisNS_11FixedPtCastIihLi22EEENS_12VResizeNoVecEEEEE", ": Tried to merge from a message with a different type.  to: ", "virtual void cv::MatOp_AddEx::divide(double, const cv::MatExpr &, cv::MatExpr &) const", "offset", "getMemoryShapes", "void cv::hal::min8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, void *)", "F^JZJSKOLMNKQJSJVKXMYOZSZZ", "MXVIUITHTGUFVFWGWIVKULSM UGUHVHVGUG VIVJUL", "double cv::determinant(cv::InputArray)", "LensInfo", "\"abc_shareactionprovider_share_with_application\" : \"\u039a\u03bf\u03b9\u03bd\u03ae \u03c7\u03c1\u03ae\u03c3\u03b7 \u03bc\u03b5 %s\"", "Ground truth is not computed for as many neighbors as requested", "virtual void cv::VideoWriter::write(cv::InputArray)", "$0  reserved ", "core::divide_13()", "imagePoints1.type() == CV_32FC2 || imagePoints1.type() == CV_64FC2", "imgproc::floodFill_13()", "31TegraCvtColor_rgbx2hsvf_Invoker", "\"abc_shareactionprovider_share_with\" : \"Partager avec\"", "Extra compressed data", "minRepeatability", "PCS illuminant is not D50", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_19RGB2HSV_bEEE", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::Gray2RGB<unsigned char> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::Gray2RGB<unsigned char>]", "************************************************************************************", "jstype is only allowed on int64, uint64, sint64, fixed64 or sfixed64 fields.", "KXUPUQVQUPSOQOOPNQMSMUNWPXRXTWUV QOOQNSNVPX", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12ColumnFilterINS2_13FixedPtCastExIihEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "calib3d::findChessboardCorners_11()", "UUUUUUUU", "input has %d tracks", "\"abc_toolbar_collapse_description\" : \"Tolestu\"", "../../../../modules/flann/include/opencv2/flann/general.h", "((map1.type() == CV_32FC2 || map1.type() == CV_16SC2) && map2.empty()) || (map1.type() == CV_32FC1 && map2.type() == CV_32FC1)", "void cv::hal::cpu_baseline::min16s(const short *, size_t, const short *, size_t, short *, size_t, int, int)", "dnn::blobFromImage_14()", "MXRMPNOPOSPURVSVUUVSVPUNSMRM STVW", "/home/vagrant/build/srclib/opencv/modules/imgcodecs/src/grfmt_tiff.cpp", "numInputs <= ids.size()", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX29RowFilterIffNS2_10RowVec_32fEEENS_9allocatorIS5_EEEE", "Define Arithmetic Table 0x%02x: 0x%02x", "SpatialCrossMapLRN", "i < sz.height", "stepDecreasingPower", "params.termCrit.type & TermCriteria::COUNT || params.termCrit.type & TermCriteria::EPS", "void cv::hal::opt_AVX2::recip16s(const short *, size_t, short *, size_t, int, int, const double *)", "PackBitsDecode", "homogeneousInverse", "getOriginalWindowSize", "train_method", "void cv::min(cv::InputArray, cv::InputArray, cv::OutputArray)", "void cv::hal::max8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, void *)", "CHECK failed: !file_: ", "icvNewSolution", "SubfileType", "images[i].cols == width && images[i].rows == height", "virtual void cv::opt_SSE4_1::SymmColumnFilter<cv::opt_SSE4_1::Cast<double, unsigned short>, cv::opt_SSE4_1::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::Cast<double, unsigned short>, VecOp = cv::opt_SSE4_1::ColumnNoVec]", "fastNlMeansDenoisingColored", "ml::getTrainSamples_11()", "checkMasks", "imgcodecs::imreadmulti_11()", "rectList.size() == weights.size()", "statusMat.isContinuous()", "MemoryData", "photo::pencilSketch_12()", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/filter.dispatch.cpp", "Ptr<cv::BaseColumnFilter> cv::getLinearColumnFilter(int, int, cv::InputArray, int, int, double, int)", "X.size() == Angle.size() && X.type() == Angle.type()", "video::setPatchSize_10()", "video::setShadowValue_10()", "MXRMR[ SMS[ OMSM O[V[", "step_w", "image_h", "%s %s decoding is not implemented", "N2cv10opt_SSE4_112ColumnFilterINS0_4CastIddEENS0_11ColumnNoVecEEE", "OPENCV_VIDEOIO_PLUGIN_PATH", "InputArray: noArray()", "N2cv10opt_SSE4_112_GLOBAL__N_19SqrRowSumIsdEE", "G]PMMNKPJSJUKXMZP[R[UZWXXUXSWPUNRM LPKRKVLX VXWVWRVP PMNNMOLRLVMYNZP[ R[TZUYVVVRUOTNRM RMZO[N[MPM RMZN", "channels == 1 || channels == 3 || channels == 4", "operator>>", "N6google8protobuf21ExtensionRangeOptionsE", "%s: Bad value %u for \"%s\" tag", "getAsymmetricHoles", "calib3d::calibrateCameraExtended_12()", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/proposal_layer.cpp", "!\"$%'(*+-.0134679:<=????????????????????", "pts && npts && ncontours >= 0 && 0 <= shift && shift <= XY_SHIFT", "Wh.rows == (int)bias.total()", "__itt_obj_mode_set", "Storage", "concat_size", "OpenCV TIFF: failed TIFFSetField(tif, TIFFTAG_IMAGEWIDTH, width)", "(descriptors.empty() || (descriptors.type() == descriptorType()))", "N2cv12cpu_baseline12ColumnFilterINS0_4CastIffEENS0_17SymmColumnVec_32fEEE", "void cv::opt_AVX2::(anonymous namespace)::medianBlur_SortNet(const cv::Mat &, cv::Mat &, int) [Op = cv::opt_AVX2::(anonymous namespace)::MinMax8u, VecOp = cv::opt_AVX2::(anonymous namespace)::MinMaxVec8u]", "KYMNWX WNMX OLLOKQ ULXOYQ", "HalftoneHints", "imgproc::getVoronoiFacetList_10()", "void cv::opt_SSE4_1::medianBlur_8u_O1(const cv::Mat &, cv::Mat &, int)", "No space for photometric conversion table", "/home/vagrant/build/srclib/opencv/modules/imgcodecs/src/grfmt_jpeg2000.cpp", "void cv::hal::cpu_baseline::div32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, const double *)", "Ptr<cv::BaseRowFilter> cv::getLinearRowFilter(int, int, cv::InputArray, int, int)", "<none>", "\"abc_searchview_description_submit\" : \"\u0915\u094d\u0935\u0947\u0930\u0940 \u0938\u092c\u092e\u093f\u091f \u0915\u0930\u093e\"", "equal to", "activation_function", "zTXt: invalid keyword", "build_weight", "class_labels", "0 <= level", "objdetect::detectMultiScale2_11()", "\"abc_search_hint\" : \"\u041f\u043e\u0448\u0443\u043a...\"", "OUPKRNSQSSRVPY", "E^P[MZJXHUGRGOHLJIMGPFTFWGYI[L\\O\\R[UYXVZS[P[ NJNW OJOW LJSJVKWMWNVPSQOQ SJUKVMVNUPSQ LWQW SQTRUVVWWWXV SQURVVWW", "CV_ARE_TYPES_EQ(A, dABdA) && dABdA->rows == A->rows*B->cols && dABdA->cols == A->rows*A->cols", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_19RGB2HSV_fEEE", "rawSize", "writeComponent8u", "value ", "H\\IQJOLMOMPNPPNVNYP[ NMONOPMVMYNZP[Q[TZVXXUYRYOXMWNXOYR XUYO", "normalizeAnchor", "Maximum supported image dimension is %u pixels", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_16RowSumIsiEENS_9allocatorIS5_EEEE", ">N2cv3hal12cpu_baseline12_GLOBAL__N_120RGB8toYUV420pInvokerE", "Suspension not allowed here", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120YUV420sp2RGB8InvokerILi0ELi0ELi4EEE", "confidence > 0 && confidence < 1", "ml::getRpropDWMax_10()", "arithm_ipp_min32f", "UpgradeV1LayerType", "empty()", "shift", "setMaxIters", "LXSOVRSU NRVR", "MWRMPNOPOSPURVTUUSUPTNRM", "virtual void cv::FilterEngine::apply(const cv::Mat &, cv::Mat &, const cv::Size &, const cv::Point &)", "cv::RotatedRect cv::minAreaRect(cv::InputArray)", "normType == NORM_INF || normType == NORM_L1 || normType == NORM_L2 || normType == NORM_L2SQR || ((normType == NORM_HAMMING || normType == NORM_HAMMING2) && _src.type() == CV_8U)", "calib3d::getDefaultNewCameraMatrix_12()", "getMaskGenerator", "N2cv3dnn14dnn4_v2019012212ReshapeLayerE", "OUTKQKQYTY", "?25TegraRowOp_split2_InvokerIKxxE", "LZWFUFSGRJR[S[ WFWGUGSH TGSJS[ OMVMVN OMONVN", "type of some variables is not specified", "Invalid JPEG file structure: missing SOS marker", "\"abc_activity_chooser_view_see_all\" : \"\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0441\u0435\"", "Images with planar data layout should be used with COI selected", "Source and destination sequence element sizes are different.", "/home/vagrant/build/srclib/opencv/modules/core/src/count_non_zero.dispatch.cpp", "Assertion failed", "framesPerSecond", "\"abc_searchview_description_query\" : \"\u0421\u04b1\u0440\u0430\u049b\u0442\u044b \u0456\u0437\u0434\u0435\u0443\"", "void cv::buildPyramid(cv::InputArray, cv::OutputArrayOfArrays, int, int)", "WEBP_HEADER_SIZE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2019012219SoftMaxSlimSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "MWR[QZRYSZS\\R^Q_", "Mag.empty() || Angle.size == Mag.size", "Size(3, 3)", "dp, min_dist, canny_threshold and acc_threshold must be all positive numbers", "N7cvflann27HierarchicalClusteringIndexINS_2L1IfEEEE", "void cv::hal::opt_AVX2::cmp32f(const float *, size_t, const float *, size_t, uchar *, size_t, int, int, int)", "void cv::hal::mul64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, void *)", "(size_t)sz < _src.size()", "extractChannel", "OPENCV_THREAD_POOL_ACTIVE_WAIT_PAUSE_LIMIT", "N12_GLOBAL__N_122resize_bitExactInvokerIsNS_12fixedpoint32ELi2EEE", "N6google8protobuf13RepeatedFieldIyEE", "F^ISJQLPNPPQTTVUXUZT[Q ISJPLONOPPTSVTXTZS[Q IYJWLVNVPWTZV[X[ZZ[W IYJVLUNUPVTYVZXZZY[W", "\"abc_activitychooserview_choose_application\" : \"\u1021\u1000\u103a\u1015\u103a\u1010\u1005\u103a\u1001\u102f\u1001\u102f\u1000\u102d\u102f \u101b\u103d\u1031\u1038\u1001\u103b\u101a\u103a\u1015\u102b\"", "void cv::destroyAllWindows()", "I[KMMMONPPU_VaWb MMNNOPT_UaWbYb ZMYOWRM]K`Jb", "type == _src2.type() && _weights1.type() == CV_32FC1 && _weights2.type() == CV_32FC1", "core::merge_10()", "27TegraRowOp_combine3_InvokerIKxxE", "core::getVersionMajor_10()", "KYKVKNYVYN", "N2cv8opt_AVX212_GLOBAL__N_111MorphFilterINS1_5MinOpIsEENS1_8MorphVecINS1_4VMinINS_8hal_AVX210v_int16x16EEEEEEE", "0123456789abcdef", "features2d::add_10()", "vconcat", "N12_GLOBAL__N_122resize_bitExactInvokerIaNS_12fixedpoint32ELi2EEE", "\" stored in google.protobuf.Any.", "Unexpected tile x level number coordinate.", "\"abc_shareactionprovider_share_with_application\" : \"Sd\u00edlet pomoc\u00ed %s\"", "MWRMRX OPPORLTOUP PORMTO", "/home/vagrant/build/srclib/opencv/modules/dnn/misc/tensorflow/graph.pb.cc", "bool cv::QRDetect::computeTransformationPoints()", "video::getBackgroundRatio_10()", "prcwidth", "&-4;<5.'/6=>7?????????????????", "): failed TIFFReadRGBAStrip(tif, y, (uint32*)buffer)", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphRowFilter<cv::opt_AVX2::(anonymous namespace)::MaxOp<short>, cv::opt_AVX2::(anonymous namespace)::MorphRowVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_int16x16> > >::operator()(const uchar *, uchar *, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MaxOp<short>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphRowVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_int16x16> >]", "N2cv3dnn16ElementWiseLayerINS0_11ReLUFunctorEE5PBodyE", "SetEnumValue accepts only valid integer values: value ", "N2cv12cpu_baseline12_GLOBAL__N_117MorphColumnFilterINS1_5MaxOpIdEENS1_16MorphColumnNoVecEEE", "LXNMPV RMPV RMTV VMTV", "reduced_buffer_off", "renderingTransform", "RowsPerStrip", "ml::getActiveVarCount_10()", "N11opencv_onnx10ModelProtoE", "Failed to allocate %llu bytes", "N2cv23CvtColorIPPLoop_InvokerINS_20IPPColor2GrayFunctorEEE", "cvGetCols", "31TegraCvtColor_rgbx2gray_Invoker", "\"abc_font_family_display_3_material\" : \"sans-serif\"", "F]HNINJPJUKXMZP[T[VZXXYVZRZNYMXMYPYSXWVZ JNKPKULX XMYNYO GPHNIMJMKNLPLVMYNZP[ QFSb RGRa SFQb QFSF QbSb", "regression_accuracy", "ZNK2cv7details10Chessboard10detectImplERKNS_3MatERNSt6__ndk16vectorIS2_NS5_9allocatorIS2_EEEES4_E3$_1", "N2cv21VariationalRefinementE", "\"abc_search_hint\" : \"Otsige \u2026\"", "vals[ofs[k]] >= pivot", "ld.inputBlobs[0]->total() == total(shapes[index])", "google.protobuf.StreamOptions", "N3Iex9EinvalExcE", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::Gray2RGB<unsigned char> >::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::Gray2RGB<unsigned char>]", "I[WLMX LPXP LTXT", "array([", "\"abc_action_bar_up_description\" : \"\u0989\u09aa\u09b0\u09c7\u09b0 \u09a6\u09bf\u0995\u09c7 \u09a8\u09c7\u09ad\u09bf\u0997\u09c7\u099f \u0995\u09b0\u09c1\u09a8\"", "!computeMaxIdx || outputs.size() == 2", "NSt6__ndk115messages_bynameIcEE", "\"abc_searchview_description_clear\" : \"Tyhjenn\u00e4 kysely\"", "imgproc::approxPolyDP_10()", "\"abc_shareactionprovider_share_with\" : \"Kop\u012bgot ar:\"", "\"abc_activity_chooser_view_see_all\" : \"\u0412\u0438\u0434\u0438 \u0433\u0438 \u0441\u0438\u0442\u0435\"", "negative_slope", "core::mean_10()", "videoio::VideoWriter_10()", "virtual void cv::cpu_baseline::(anonymous namespace)::SqrRowSum<double, double>::operator()(const uchar *, uchar *, int, int) [T = double, ST = double]", "IPP:ipp_Mat_setTo_Mat(*this, value, mask)", "partition", "keyword truncated", "Input2", "J[NKNX OKOX ORPPROTOVPWRWX TOUPVRVX LKOK LXQX TXYX", " of the Protocol Buffer runtime library, but the installed version is ", "J[SMPNNPMRMTNVPWRWUVWTXRXPWNUMSM OPUM NRVN MTWO NUXP OVWR PWVT", "calc_activ_func", "decolor", "JPEGSetupDecode", "N6google8protobuf22DescriptorPoolDatabaseE", "blockSize", "pthread_mutexattr_settype", "\"abc_shareactionprovider_share_with\" : \"Ibahagi sa/kay\"", "invalid chromaticities", "non-transaction clone for ", "virtual void cv::ORB_Impl::detectAndCompute(cv::InputArray, cv::InputArray, std::vector<KeyPoint> &, cv::OutputArray, bool)", "TIFFWriteDirectoryTagCheckedRationalArray", "The operation is neither 'array op array' (where arrays have the same size and the same number of channels), nor 'array op scalar', nor 'scalar op array'", "%s: Unknown %stag %u", "FAILED", "Value must be integer for int32 option \"", "stageParams", "leave_x != NULL", "N2cv12RemapInvokerE", "Duplicate blobs produced by multiple sources", "findVertexCOnSideB", "classifier", "gamma table being rebuilt", "\"abc_activity_chooser_view_see_all\" : \"\u0dc3\u0dd2\u0dba\u0dbd\u0dca\u0dbd \u0db6\u0dbd\u0db1\u0dca\u0db1\"", "void cv::sepFilter2D(cv::InputArray, cv::OutputArray, int, cv::InputArray, cv::InputArray, cv::Point, double, int)", "): failed TIFFSetField(tif, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_LOGLUV)", "int cv::cpu_baseline::sum8s(const schar *, const uchar *, int *, int, int)", "std::vector<Mat> cv::dnn::dnn4_v20190122::Layer::finalize(const std::vector<Mat> &)", "StoNits", "KZWKTVTWUXWXXWYU XKUVUWVX USUQSOQOOPNQMSMUNWPXRXTV QOOQNSNVPX UKXK", "core::getVersionRevision_10()", "Mat::n_1convertTo__JJID()", "calib3d::create_15()", "tvecs.empty() || (tvecs.channels() == 3)", "recursive_mutex constructor failed", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::HSV2RGB_b>::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::HSV2RGB_b]", "Ptr<cv::BaseRowFilter> cv::getSqrRowSumFilter(int, int, int, int)", "cvMax", "\"abc_activitychooserview_choose_application\" : \"\u0dba\u0dd9\u0daf\u0dd4\u0db8\u0d9a\u0dca \u0dad\u0ddd\u0dbb\u0db1\u0dca\u0db1\"", "JXPKLX QKMX SORS NKXKWNWK OQRQ JXOX", "ml::getMaxDepth_10()", "void cv::hal::opt_AVX2::recip64f(const double *, size_t, double *, size_t, int, int, const double *)", "JPEG 2000 LOADER ERROR: cannot convert colorspace", "u->urefcount == 0", "!buf.empty() && buf.isContinuous()", "imgproc::accumulateWeighted_10()", "LYQKPLPMQN TKULUMTN RNPOOQORPTRUSUUTVRVQUOSNRN RURY SUSY OWVW", "ml::getCatMap_10()", "N2cv8opt_AVX212_GLOBAL__N_16RowSumIiiEE", "icvInpaint", "H\\JFJL QFQ[ RGRZ SFS[ ZFZL JFZF N[V[ KFJL LFJI MFJH OFJG UFZG WFZH XFZI YFZL QZO[ QYP[ SYT[ SZU[", "Caution: quantization tables are too coarse for baseline JPEG", "MatrixWorldToScreen", "removePhaseSwitches", "\"search_menu_title\" : \"\u062a\u0644\u0627\u0634\"", "Application jmp_buf size changed", "\"abc_shareactionprovider_share_with_application\" : \"\u8207\u300c%s\u300d\u5206\u4eab\"", "Null double pointer to graph scanner", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/fully_connected_layer.cpp", "%s: Could not find tag %d.", "virtual void cv::opt_AVX2::(anonymous namespace)::RowSum<unsigned char, int>::operator()(const uchar *, uchar *, int, int) [T = unsigned char, ST = int]", "MaskedAreas", "(K.depth() == CV_32F || K.depth() == CV_64F) && (D.depth() == CV_32F || D.depth() == CV_64F)", "ml::getRegressionAccuracy_10()", "Mat::n_1ones__DDI()", "coords == 4", "readMore", "\"abc_search_hint\" : \"Maghanap\u2026\"", "SymmColumnVec_32s8u", "/home/vagrant/build/srclib/opencv/modules/core/src/matrix_iterator.cpp", "\"abc_font_family_display_2_material\" : \"sans-serif\"", "void cv::hal::cvtBGRtoHSV(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool, bool, bool)", "F_JQ[Q[R JQJR[R", "dst.type() == CV_64F && dst.isContinuous() && (dst.cols == 1 || dst.rows == 1) && dcn >= cn", "imgproc::drawSegments_10()", "initialize", "IPP:(ipp_calchist(images[0], hist, histSize[0], ranges, uniform, accumulate))", ".KAZE", "anchor.inside(Rect(0, 0, ksize.width, ksize.height))", "Unknown enumeration value of \"", "Can't use TIFFReadRGBAStrip() with tiled file.", "Compression scheme does not support access to raw uncompressed data", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_9RGB2HSV_bEEE", "Wrong shape of input matrix! Expected a matrix with one row or column.", "J[PKMUMWOXSXUWVUYK QKNUNWOX NKSK WK[K", "N2cv17MotionJpegCaptureE", "unsupported arm register", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_19SqrRowSumIddEENS_9allocatorIS5_EEEE", "imgproc::convertMaps_10()", " location(s)", "org.opencv.imgproc", "e,%d,%lld,%lld,%lld,%lld", "plugin_api->Writer_release", "CHECK failed: !file->finished_building_: ", "priors", "N2cv3hal12cpu_baseline12_GLOBAL__N_120YUV420sp2RGB8InvokerILi2ELi1ELi4EEE", "ssize.width > 0 && ssize.height > 0 && std::abs(dsize.width*2 - ssize.width) <= 2 && std::abs(dsize.height*2 - ssize.height) <= 2", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphColumnFilter<cv::opt_AVX2::(anonymous namespace)::MaxOp<short>, cv::opt_AVX2::(anonymous namespace)::MorphColumnVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_int16x16> > >::operator()(const uchar **, uchar *, int, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MaxOp<short>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphColumnVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_int16x16> >]", "cv::MatExpr cv::Mat::mul(cv::InputArray, double) const", "LogitBoost", "Invalid sCAL height", "COI is not supported", "ConvolutionDepthwise", "KYNOUX OOVX VONX LOQO TOXO LXPX SXXX", "Invalid key code number of perforations per count (must be between 20 and 120).", "support_vectors", "imagePoints2.type() == CV_32FC2 || imagePoints2.type() == CV_64FC2", "convertFromVASurface", "alignof ", "N12opencv_caffe30NonMaximumSuppressionParameterE", "thread_num", "\"abc_searchview_description_submit\" : \"\u0a95\u0acd\u0ab5\u0ac7\u0ab0\u0ac0 \u0ab8\u0aac\u0aae\u0abf\u0a9f \u0a95\u0ab0\u0acb\"", "C>.@@>GQ=>", "int cv::cpu_baseline::sqsum8u(const uchar *, const uchar *, int *, int *, int, int)", "N2cv3hal12cpu_baseline12_GLOBAL__N_119YUV422toRGB8InvokerILi2ELi1ELi0ELi4EEE", "evects0.rows == ecount0", "w_nidx >= 0", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_11YCrCb2RGB_iItEEEE", "calib3d::setUniquenessRatio_10()", "void cv::hal::opt_AVX2::max8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "N2cv8opt_AVX212_GLOBAL__N_19SqrRowSumIfdEE", "virtual void cv::MatOp_GEMM::add(const cv::MatExpr &, const cv::MatExpr &, cv::MatExpr &) const", "N2cv3dnn14dnn4_v201901228LRNLayerE", "NSt6__ndk112__do_messageE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline8Filter2DIdNS2_4CastIddEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "findLongestPath", "NSt6__ndk120__shared_ptr_pointerIPN2cv10opt_SSE4_129WarpPerspectiveLine_SSE4_ImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "ptr >= bufferstart && ptr <= bufferEnd()", "ZIPPreDecode", "virtual void cv::opt_AVX2::(anonymous namespace)::SqrRowSum<unsigned char, double>::operator()(const uchar *, uchar *, int, int) [T = unsigned char, ST = double]", "uint8", "I[J[Z[", "(delta.rows == src.rows || delta.rows == 1)", "in the case of classification problem the responses must be categorical; either specify varType when creating TrainData, or pass integer responses", "images[0].depth() == CV_8U", "N12opencv_caffe12MVNParameterE", "imgproc::detect_10()", "srcA.size == dst.size && srcA.type() == dst.type()", "virtual void cv::dnn::PaddingLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "Convex hull is neither sequence nor matrix", "Blob detector only supports 8-bit images!", "innerDownhillSimplex", "__itt_thread_ignore", "N2cv10opt_SSE4_18Filter2DIsNS0_4CastIddEENS0_11FilterNoVecEEE", "NSt6__ndk111__money_putIwEE", "N7cvflann7anyimpl14big_any_policyIdEE", "void cv::hal::opt_SSE4_1::absdiff16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int)", "KZWLXLYKXNWLUKRKPLOMOOPPUSVT ONPOURVSVVUWSXPXNWMULXMWNW", "F^KFK[ LGLZ MFM[ WFW[ XGXZ YFY[ HFPF TF\\F MPWP H[P[ T[\\[ IFKG JFKH NFMH OFMG UFWG VFWH ZFYH [FYG KZI[ KYJ[ MYN[ MZO[ WZU[ WYV[ YYZ[ YZ[[", "N6google8protobuf8internal20RepeatedFieldWrapperIbEE", "I\\RFR[ SFS[ LFKLKFZFZLYF O[V[", "N6google8protobuf2io15FileInputStream22CopyingFileInputStreamE", "getProfilingQueue", "\"abc_searchview_description_voice\" : \"Ovozli qidiruv\"", "CHECK failed: type == WireFormatLite::TYPE_MESSAGE || type == WireFormatLite::TYPE_GROUP: ", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_111MorphFilterINS3_5MinOpIfEENS3_8MorphVecINS3_4VMinINS1_12hal_baseline11v_float32x4EEEEEEENS_9allocatorISD_EEEE", "\"abc_searchview_description_search\" : \"\u641c\u7d22\"", "F]UFOb VFNb GQHOJMMMNNNPMUMXOZRZTYWVYS LMMNMPLULXMZO[R[TZVXXUYS[M", "videoio::write_10()", "__itt_relation_add", "imgproc::integral2_10()", "computeECC", "F_SHTITLSPRSQUOXMZK[J[IZIWJRKOLMNJPHRGUFZF\\G]H^J^M]O\\PZQWQUPTO", "CHECK failed: field->is_repeated(): ", "SceneType", "OpenCV TIFF: failed TIFFSetField(tif, TIFFTAG_XRESOLUTION, (float)dpiX)", "Error in Huffman-encoded data (invalid code).", "thread constructor failed", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::HLS2RGB_f>::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::HLS2RGB_f]", "level >= 0", "getInputNode", "activ_func >= 0", "calib3d::findHomography_12()", "N2cv16CalibrateDebevecE", "CvtHelper", "Unknown filter method in IHDR", "wrong data format", "during phase1 personality function said it would stop here, but now in phase2 it did not stop here", "(descriptors.empty() || descriptors.cols() == descriptorSize())", "core::trace_10()", "\"abc_shareactionprovider_share_with_application\" : \"\u901a\u8fc7%s\u5206\u4eab\"", "N2cv11FileStorageE", "win.width > 0 && win.height > 0", "ml::getTrainSamples_12()", "\"abc_capital_on\" : \"KVEIKT\"", "reserveBuffer", "void cv::imshow(const cv::String &, cv::InputArray)", "N2cv3ocl16OpenCLBufferPoolIP7_cl_memEE", "int cv::hal::QR64f(double *, size_t, int, int, int, double *, size_t, double *)", "\"abc_activitychooserview_choose_application\" : \"V\u00e1lasszon ki egy alkalmaz\u00e1st\"", "The wrong closing bracket", "calib3d::undistortPoints_11()", "Bad argument", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v201901229DataLayerEEE", "MWOTQVSVTUTSSRPQRQTPUOUNTMRMQNPPOTNY", "features2d::knnMatch_11()", "No space for B&W mapping table", "FlannBasedMatcher", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphFilter<cv::cpu_baseline::(anonymous namespace)::MaxOp<float>, cv::cpu_baseline::(anonymous namespace)::MorphVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_float32x4> > >::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MaxOp<float>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_float32x4> >]", "pthread_setspecific(tlsKey, pData) == 0", "void cv::compute_derivative_kernels(cv::OutputArray, cv::OutputArray, int, int, int)", "coef0", "\"abc_shareactionprovider_share_with_application\" : \"\u0421\u043f\u043e\u0434\u0435\u043b\u044f\u043d\u0435 \u0441\u044a\u0441: %s\"", "WARNING: NaN detected in layer output: id=", "JZNKNX OMVX OKVV VKVX LKOK TKXK LXPX", "ClipByValue", "N2cv23RBS_THROW_EOS_ExceptionE", "D`MFGZ MGNYN[ NFOY OFPX [FPXN[ [FU[ \\FV[ ]FW[ JFOF [F`F D[J[ R[Z[ KFMG LFMH ^F\\H _F\\G GZE[ GZI[ VZS[ VYT[ WYX[ VZY[", "it.node() != 0", "N3Iex12EtimedoutExcE", "blobs.size() >= 1 && blobs.size() <= 2", "findCorner", "readTorchObject", "Unknown row filter for method 0", "N3Iex9EnottyExcE", "N6google8protobuf10TextFormat7Printer13TextGeneratorE", "Fax4Encode", "\"abc_searchview_description_search\" : \"\u0936\u094b\u0927\"", "HoughLinesProbabilistic", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_111MorphFilterINS3_5MinOpItEENS3_8MorphVecINS3_4VMinINS1_8hal_AVX211v_uint16x16EEEEEEENS_9allocatorISD_EEEE", "\"abc_capital_off\" : \"AV\"", "virtual void cv::cpu_baseline::SymmColumnSmallFilter<cv::cpu_baseline::Cast<float, float>, cv::cpu_baseline::SymmColumnSmallVec_32f>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::Cast<float, float>, VecOp = cv::cpu_baseline::SymmColumnSmallVec_32f]", "Literal \" is not allowed within a string. Use &quot;", "void cv::cpu_baseline::cvt8s16f(const schar *, size_t, uchar *, size_t, cv::float16_t *, size_t, cv::Size, void *)", "imgproc::Laplacian_10()", "cov.rows == dim && cov.cols == dim", "NULL structure pointer", "photo::edgePreservingFilter_12()", "void cv::dnn::dnn4_v20190122::(anonymous namespace)::TFImporter::populateNet(cv::dnn::dnn4_v20190122::Net)", "N3Iex18EprotonosupportExcE", "cvDilate", "fixed point overflow ignored", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::RGB2YCrCb_f<float> >::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::RGB2YCrCb_f<float>]", "iTXt: invalid keyword", "p != 0", "N6google8protobuf8internal21RepeatedFieldAccessorE", "N2cv10opt_SSE4_112ColumnFilterINS0_4CastIffEENS0_22SymmColumnSmallVec_32fEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_16RowSumItdEENS_9allocatorIS5_EEEE", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphRowFilter<cv::opt_SSE4_1::(anonymous namespace)::MaxOp<short>, cv::opt_SSE4_1::(anonymous namespace)::MorphRowVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_int16x8> > >::operator()(const uchar *, uchar *, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MaxOp<short>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphRowVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_int16x8> >]", "void cv::Scharr(cv::InputArray, cv::OutputArray, int, int, int, double, double, int)", "N5Imath13SingMatrixExcE", "features2d::getPatchSize_10()", "\", field number ", "InputOutputArrayOfArrays:", "INTEL_LIBITTNOTIFY64", "pt.x % cacheStride.width == 0 && pt.y % cacheStride.height == 0", " Tokenizer::ParseStringAppend() passed text that could not have been tokenized as a string: ", "\"abc_font_family_button_material\" : \"sans-serif-medium\"", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphFilter<cv::opt_AVX2::(anonymous namespace)::MaxOp<unsigned short>, cv::opt_AVX2::(anonymous namespace)::MorphVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_uint16x16> > >::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MaxOp<unsigned short>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_uint16x16> >]", "/home/vagrant/build/srclib/opencv/modules/ml/src/tree.cpp", "Improper JPEG sampling factors", "cv::dnn::dnn4_v20190122::(anonymous namespace)::CaffeImporter::CaffeImporter(const char *, size_t, const char *, size_t)", "dualQuaternion2homogeneous", "ReLU6Functor", "Tried to read a tile outside the image file's data window.", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_9HSV2RGB_bEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_111MorphFilterINS3_5MaxOpItEENS3_8MorphVecINS3_4VMaxINS1_8hal_AVX211v_uint16x16EEEEEEENS_9allocatorISD_EEEE", "No space for output buffer", "KXQKMX RKNX OKTK KXUXVUTX", "estimateRigidTransform", "imgproc::getFontScaleFromHeight_10()", "intent outside defined range", "numberOfDisparities > 0 && disp.type() == CV_16S && (costType == CV_16S || costType == CV_32S) && disp.size() == cost.size()", "N2cv10opt_SSE4_112ColumnFilterINS0_13FixedPtCastExIihEENS0_19SymmColumnVec_32s8uEEE", "virtual void cv::GFTTDetector_Impl::detect(cv::InputArray, std::vector<KeyPoint> &, cv::InputArray)", "__itt_model_induction_uses", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphRowFilter<cv::opt_SSE4_1::(anonymous namespace)::MinOp<short>, cv::opt_SSE4_1::(anonymous namespace)::MorphRowVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_int16x8> > >::operator()(const uchar *, uchar *, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MinOp<short>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphRowVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_int16x8> >]", "Sample_Derivative_Response_Radius6", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::Gray2RGB<float> >::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::Gray2RGB<float>]", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::Lab2RGB_b>::operator()(const cv::Range &) const [Cvt = cv::Lab2RGB_b]", "sizeof...(", "dims > 0 && dims < CV_MAX_DIM", "IPP:ipp_extractChannel(src, dst, coi)", "\"abc_searchview_description_search\" : \"\u0422\u044a\u0440\u0441\u0435\u043d\u0435\"", "SpectralSensitivity", "H\\PFMGLILKMMNNPOTPVQWRXTXWWYTZPZMYLWLTMRNQPPTOVNWMXKXIWGTFPF NGMIMKNMPNTOVPXRYTYWXYWZT[P[MZLYKWKTLRNPPOTNVMWKWIVG WHTGPGMH LXOZ UZXX", "tif->tif_dir.td_stripoffset is already allocated. Likely duplicated StripOffsets/TileOffsets tag", "asRowMatrix", "28TegraRowOp_magnitude_InvokerIKffE", "OPENCV_TRACE_LOCATION", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/message.cc", "<invalid type>", "I[LMR[ MMRY XMR[ JMPM TMZM", "KXOKOX PKPX MKRK MXWXWTVX", "features2d::getScoreType_10()", "<unknown>", "@updateAlt", "Incorrect count for \"%s\"; tag ignored", "cvUpdateWindow", "\"abc_shareactionprovider_share_with\" : \"\u05e9\u05ea\u05e3 \u05e2\u05dd\"", "type == CV_8UC1 || type == CV_32FC1", "\"abc_activitychooserview_choose_application\" : \"\u0395\u03c0\u03b9\u03bb\u03ad\u03be\u03c4\u03b5 \u03ba\u03ac\u03c0\u03bf\u03b9\u03b1 \u03b5\u03c6\u03b1\u03c1\u03bc\u03bf\u03b3\u03ae\"", "\"abc_shareactionprovider_share_with\" : \"Ruxsat berish\"", "\"abc_searchview_description_query\" : \"Upit za pretra\u017eivanje\"", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/rotcalipers.cpp", "CHECK", "u.type() == type", "Insufficient memory for hIST chunk data", "Input and output arrays must have the same number of channels", "L[LVNRLXLZM[O[QZSXUU VRTXTZU[V[XZYY[V", "V0LayerParameter: ", "typeStorage >= 0 && typeTensor == typeStorage", "void cv::hal::opt_AVX2::sqrt32f(const float *, float *, int)", "void cv::triangulatePoints(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray)", "N2cv8opt_AVX218SymmRowSmallFilterIffNS0_19SymmRowSmallVec_32fEEE", "Ptr<cv::BaseRowFilter> cv::opt_SSE4_1::getRowSumFilter(int, int, int, int)", "N2cv10CFormatterE", "__itt_frame_begin", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/morph.dispatch.cpp", "Bad histogram pointer", "cvAdaptiveThreshold", "table_number", "distanceTransform_L1_8U", "imgproc::fillPoly_10()", "CL_INVALID_KERNEL_ARGS", "GlobalParametersIFD", "channels >= 1 && channels <= 3", "pixels <= CV_IO_MAX_IMAGE_PIXELS", "blob->data_size() != 0", "use_timestamp_dim", "Inconsistent progression sequence for component %d coefficient %d", "H\\UFKTZT UFU[", "runProfiling", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2RGB<unsigned char> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2RGB<unsigned char>]", "bad adaptive filter value", "\"abc_toolbar_collapse_description\" : \"\u1230\u1265\u1235\u1265\"", "imgproc::Scharr_12()", "ConcatV2", " f(%d,%d)=%ld", "outImg has size less than need to draw img1 and img2 together", "): failed TIFFGetField(tif, TIFFTAG_PHOTOMETRIC, &photometric)", "\"abc_capital_on\" : \"AKTIV\"", "N6google8protobuf8internal16FunctionClosure1IPNS1_14LazyDescriptorEEE", "start_axis", "TIFFOpen", "node.input_size() > 0", " conflicts with an existing enum type.", "N2cv24CascadeClassifierInvokerE", "getSubset", "images", "p9void cv::cornerSubPix(cv::InputArray, cv::InputOutputArray, cv::Size, cv::Size, cv::TermCriteria)", "set != NULL", "TonemapDrago", "firstLevel_ >= 0", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_18Filter2DIfNS2_4CastIffEENS2_13FilterVec_32fEEENS_9allocatorIS7_EEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn12LRNLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NVRQQRRSSRRQ", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi4EEEij7DistAbsNS1_IiLi4EEEE", "bad width format", "N2cv14StereoSGBMImplE", "Attribute value should be put into single or double quotes", "virtual void cv::HOGDescriptor::detectMultiScaleROI(cv::InputArray, std::vector<cv::Rect> &, std::vector<DetectionROI> &, double, int) const", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2019012215FlattenSubgraphEEE", "\"search_menu_title\" : \"\u0916\u094b\u091c\"", "N2cv3hal8opt_AVX212_GLOBAL__N_119YUV422toRGB8InvokerILi0ELi1ELi0ELi4EEE", "vecmerge_", "BATCH", "KYUOU\\ VOV\\ URTPROPONPMRMUNWPXRXTWUU POOPNRNUOWPX S\\X\\", "N2cv30MLDB_Descriptor_Subset_InvokerE", "G]KFK[ KFLFL[K[ YFXFX[Y[ YFY[ LPXP LQXQ", "void cv::dnn::dnn4_v20190122::Net::setInput(cv::InputArray, const cv::String &, double, const cv::Scalar &)", "void cv::hal::cpu_baseline::addWeighted16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, const double *)", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml13SVMKernelImplENS_9allocatorIS3_EEEE", "virtual cv::Algorithm::~Algorithm()", "fractional scanline discarded", "prior_bboxes.size() == bboxes.size()", "dnn::blobFromImages_14()", "calib3d::fisheye_1estimateNewCameraMatrixForUndistortRectify_11()", "\"abc_action_bar_home_description\" : \"\u0d39\u0d4b\u0d2e\u0d3f\u0d32\u0d47\u0d15\u0d4d\u0d15\u0d4d \u0d28\u0d3e\u0d35\u0d3f\u0d17\u0d47\u0d31\u0d4d\u0d31\u0d41\u0d1a\u0d46\u0d2f\u0d4d\u0d2f\u0d41\u0d15\"", "GetRepeatedBool", "HostComputer", "virtual void cv::cpu_baseline::(anonymous namespace)::ColumnSum<double, unsigned short>::operator()(const uchar **, uchar *, int, int, int) [ST = double, T = unsigned short]", "PPN7cvflann11KDTreeIndexINS_2L1IfEEE4NodeE", "I[NFN[ OFO[ KFZFZLYF K[R[", "reuseMap.find(host) != reuseMap.end()", "ReadNetParamsFromBinaryFileOrDie", "0 <= hcurr && hcurr < npoints", "VTT for ", "N2cv16DefaultFormatterE", "features2d::descriptorsCount_10()", "inRange", "Value must be quoted string for string option \"", "Unknown boosting type", "core::subtract_11()", "ml::getMaxCategories_10()", "JZRYQ\\ RYS\\ Q\\S\\ RYUZXZZXZUYTWTYRZOYMWLUMVJUHSGQGOHNJOMMLKMJOKRMTKTJUJXLZOZRY", "N2cv18MergeRobertsonImplE", "virtual bool cv::VideoCapture::open(const cv::String &, int)", " [clone ", "void cv::hal::opt_AVX2::div8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, const double *)", "Too large strip byte count %llu, strip %lu. Limiting to %llu", "attribute_proto.ints_size() % 2 == 0", "void cv::PCACompute(cv::InputArray, cv::InputOutputArray, cv::OutputArray, cv::OutputArray, int)", "/home/vagrant/build/srclib/opencv/modules/video/src/bgfg_gaussmix2.cpp", "params.size() <= CV_IO_MAX_IMAGE_PARAMS*2", "dst.channels() == m.rows", "N7cvflann8LshIndexINS_7HammingIhEEEE", "icvGoNextMemBlock", "accumulateProduct", "void cv::opt_AVX2::cvt16f32s(const cv::float16_t *, size_t, uchar *, size_t, int *, size_t, cv::Size, void *)", "DNGVersion", "LXRONU ROVU", "internal error: attempted to use a function with unsupported parameters", "Invalid number of dimensions", "?N2cv8colormap6SpringE", "Unknown/unsupported color conversion code", "imgcodecs::haveImageWriter_10()", "N2cv8HOGCacheE", "MXRXQYQZR[S[TZTYSXRX RYRZSZSYRY", "F^[GZH[I\\H[GXFUFRGPIOKNNMRK[J_Ia UFSGQIPKONMWL[K^J`IaGbEbDaD`E_F`Ea YMWTVXVZW[Z[\\Y]W ZMXTWXWZX[ JMZM", "core::findFile_10()", "\"abc_searchview_description_submit\" : \"\u0bb5\u0bbf\u0ba9\u0bb5\u0bb2\u0bc8\u0b9a\u0bcd \u0b9a\u0bae\u0bb0\u0bcd\u0baa\u0bcd\u0baa\u0bbf\"", "core::idct_10()", "wrong scanline width", "\" channel of input file \"", "N2cv3hal8opt_AVX212_GLOBAL__N_119YUV422toRGB8InvokerILi0ELi0ELi0ELi3EEE", "N6google8protobuf20FieldDescriptorProtoE", "The x subsampling factor for the \"", "bottom", "cvNormalizeHist", "remap_labels", "pnorm > 0", "dst.cols < SHRT_MAX && dst.rows < SHRT_MAX && src.cols < SHRT_MAX && src.rows < SHRT_MAX", "iDepth == CV_8U || iDepth == CV_8S", "ml::setMaxCategories_10()", "/sys/devices/system/cpu/possible", "_r.data == _r0.data", "Duplicate of inferred dim (which is denoted by -1)", "features2d::compute_11()", "map_matrix.type() == CV_32FC1", "MutableMessage", "tEXt: invalid keyword", "H]ZKYIWGUFQFOGMILKKNKSLVMXOZQ[U[WZYXZVZS USZS", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_19ColumnSumIihEENS_9allocatorIS5_EEEE", "v[j].empty()", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX221SymmColumnSmallFilterINS2_4CastIffEENS2_22SymmColumnSmallVec_32fEEENS_9allocatorIS7_EEEE", "dnn::readNetFromTorch_10()", "\"abc_searchview_description_search\" : \"\u062c\u0633\u062a\u062c\u0648\"", "propId", "Required attributes 'kernel_h' and 'kernel_w' are not present.", "Invalid values for ReferenceBlackWhite tag", "H\\LIKFKLLINGPFTFWGXIXLWNTOQO TFVGWIWLVNTO TOVPXRYTYWXYWZT[O[MZLYKWKVLUMVLW WQXTXWWYVZT[", "\"abc_activity_chooser_view_see_all\" : \"Ver tudo\"", "February", "ml::calcError_10()", "void cv::opt_AVX2::cvt64s(const int64 *, size_t, uchar *, size_t, int64 *, size_t, cv::Size, void *)", "N12opencv_caffe16PermuteParameterE", "(int)type", "cv::Mat cv::ml::LogisticRegressionImpl::batch_gradient_descent(const cv::Mat &, const cv::Mat &, const cv::Mat &)", "forwardLayer", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi3EEEij11DistSquaredNS1_IiLi3EEEE", "imgcodecs::imencode_11()", "NULL pointer to indices", "Reading Intel's Model Optimizer models from buffers", "[libprotobuf ", "\"abc_activity_chooser_view_see_all\" : \"Tingnan lahat\"", "The output header should be CvMat or CvMatND", "global_pooling", "/home/vagrant/build/srclib/opencv/modules/calib3d/src/calibinit.cpp", "Number of world points coordinates must be == 4", "N3Iex6EioExcE", "HARD_MARGIN", "void cv::hal::opt_SSE4_1::cvtBGR5x5toBGR(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "map_matrix.rows == 3 && update.rows == 8", "Option \"", "PluginCapture", "pop_back", "\"abc_search_hint\" : \"Iskanje \u2026\"", "imgproc::getPerspectiveTransform_10()", "!fixedType() || ((cuda::GpuMat*)obj)->type() == mtype", "checkMask", "ICC profile length invalid (not a multiple of 4)", "SetUInt32", "core::convertScaleAbs_11()", "photo::setMaxIter_10()", "__itt_id_destroy_ex", "simulatedAnnealingSolver", "dnn::get_1type_10()", "imgproc::Canny_12()", "H\\PMMNLOKQKSLUMVPWTWWVXUYSYQXOWNTMPM MNLPLSMUNVPW WVXTXQWOVNTM", "cvFlushSeqWriter", "void cv::phase(cv::InputArray, cv::InputArray, cv::OutputArray, bool)", "core::getTimeMilli_10()", "No CUDA support", "N3Imf7IStreamE", "CAP_ANY", "LYOVOUNUNVOWQXSXUWVVWSWNVLTKQKOLNNNPORQSTSWQ SXUVVSVNULTK QKPLONOPPRQS", "ml::predict2_10()", "Too long string or a last string w/o newline", "\"abc_action_menu_overflow_description\" : \"\u0406\u043d\u0448\u0456 \u043e\u043f\u0446\u0456\u0457\"", "HoughLinesStandard", "ulong", "JXOKMR PKNRNVPX NROPQOSOUPVRVTUVTWRXPXNWMUMR SOUQUTTVRX MKPK", "KYKFY^", "%llu: Invalid tile byte count, tile %lu", "input_off", "N2cv10StereoSGBME", "lineEquationDeterminedByPoints", "permute_%d", "new_pos", "N6google8protobuf8internal20RepeatedFieldWrapperIfEE", "\"abc_action_bar_up_description\" : \"Yukar\u0131 git\"", "pad_w", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/stubs/stringprintf.cc", "opencv_tensorflow.FunctionDef.Node.arg", "dilationH > 0 && dilationW > 0", "cur_x", "\"abc_search_hint\" : \"Keres\u00e9s\u2026\"", "varThreshold", "core::bitwise_1and_11()", "para.min_scale", "remap", "doesVertexExist( id1 )", "features2d::create_19()", "/home/vagrant/build/srclib/opencv/modules/photo/src/denoise_tvl1.cpp", "bool cv::QRDetect::testBypassRoute(vector<cv::Point2f>, int, int)", "imgproc::createLineSegmentDetector_18()", "src8.isMat() || src8.isUMat()", "N2cv10opt_SSE4_112_GLOBAL__N_19SqrRowSumItdEE", "K[UUTSRRPRNSMTLVLXMZO[Q[SZTX PRNTMVMYO[ VRPd WRT[R`PdOfMgLfLdMaO_R]V[YY[V", "JPEGMEM", "i > 0 && i < sz.height", "N7cvflann18KNNUniqueResultSetIfEE", "OPENCV_VIDEOIO_PRIORITY_LIST", "CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR", "l_cinfo", "imgproc::HoughLines_10()", "getTensorContent", "Ptr<cv::dnn::dnn4_v20190122::Layer> cv::dnn::dnn4_v20190122::LayerData::getLayerInstance()", "int cv::opt_AVX2::FilterVec_8u::operator()(const uchar **, uchar *, int) const", "N12opencv_caffe19WindowDataParameterE", "\"abc_activity_chooser_view_see_all\" : \"\u0c8e\u0cb2\u0ccd\u0cb2\u0cb5\u0ca8\u0ccd\u0ca8\u0cc2 \u0ca8\u0ccb\u0ca1\u0cbf\"", "dnn::readNetFromONNX_10()", "q.type() == CV_64FC1 && q.rows == 3 && q.cols == 1", "src.channels() == pixelInfo<T>::channels", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2019012231DeconvolutionValidKerasSubgraphEEE", "!cascade.data.stumps.empty()", "model", "void cv::dnn::dnn4_v20190122::BlobManager::allocateBlobsForLayer(cv::dnn::dnn4_v20190122::LayerData &, const cv::dnn::dnn4_v20190122::(anonymous namespace)::LayerShapes &, std::vector<LayerPin> &, bool)", "Frame setup failed", "altitude", "N2cv8opt_AVX212ColumnFilterINS0_4CastIffEENS0_22SymmColumnSmallVec_32fEEE", "void cv::hal::recip32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, void *)", "void cv::hal::cmp32f(const float *, size_t, const float *, size_t, uchar *, size_t, int, int, void *)", "N2cv5mjpeg16MotionJpegWriterE", "TIFFReadEncodedStrip", "features2d::create_12()", "nms_threshold", "K == 1 && update == 0 && mask.empty()", "\"abc_shareactionprovider_share_with\" : \"\u0425\u0443\u0432\u0430\u0430\u043b\u0446\u0430\u0445\"", "short4", "The total matrix size does not fit to \"size_t\" type", "\"abc_action_menu_overflow_description\" : \"\u0c87\u0ca8\u0ccd\u0ca8\u0cb7\u0ccd\u0c9f\u0cc1 \u0c86\u0caf\u0ccd\u0c95\u0cc6\u0c97\u0cb3\u0cc1\"", "void cv::cpu_baseline::(anonymous namespace)::medianBlur_SortNet(const cv::Mat &, cv::Mat &, int) [Op = cv::cpu_baseline::(anonymous namespace)::MinMax8u, VecOp = cv::cpu_baseline::(anonymous namespace)::MinMaxVec8u]", "(mask.empty() || (mask.type() == src.type() && mask.size == dst.size))", "Storage has insufficient number of elements for requested Tensor", "imgproc::ellipse_10()", "json_name = \"", "Nonstandard tile length %d, convert file", "incorrect count for field \"%s\" (%llu, expecting %u); tag ignored", "\"abc_search_hint\" : \"Haku\u2026\"", "imgproc::ellipse_14()", "cvSeqPop", "readTorchBlob", "Windows bitmap (*.bmp;*.dib)", "cv::Algorithm::Algorithm()", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2019012222ResizeBilinearSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "N2cv23GeneralizedHoughBallardE", "calib3d::fisheye_1undistortPoints_11()", "LRN layer supports only positive odd values for local_size", "N2cv10opt_SSE4_112_GLOBAL__N_117MorphColumnFilterINS1_5MaxOpIdEENS1_16MorphColumnNoVecEEE", "virtual bool cv::ml::StatModel::train(const Ptr<cv::ml::TrainData> &, int)", "Can not change \"ImageLength\" when using separate planes", "!)@thresholdStep", "\". If this is intended, set 'option allow_alias = true;' to the enum definition.", "{custom check}", "post_nms_topn", "cvSetIPLAllocators", "pointSetBoundingRect", "imgproc::pyrDown_12()", "/home/vagrant/build/srclib/opencv/modules/imgcodecs/src/grfmt_webp.cpp", "All the input and output images must have the same size", "dnn::shrinkCaffeModel_10()", "N7cvflann7anyimpl16small_any_policyIjEE", "\"search_menu_title\" : \"\u0425\u0430\u0439\u043b\u0442\"", "opencv_tensorflow.OpDef.description", "N3Imf14TypedAttributeIN5Imath8Matrix33IfEEEE", "F^NFNLMTLXKZJ[ XFX[ YFY[ KF\\F G[\\[ G[Gb H[Gb [[\\b \\[\\b", "DNGPrivateData", "G]UFOb VFNb QMMNKPJSJVKXMZP[S[WZYXZUZRYPWNTMQM QMNNLPKSKVLXNZP[ S[VZXXYUYRXPVNTM", "U10__float128", "RTrees have not been trained", "Ptr<cv::BaseColumnFilter> cv::cpu_baseline::getLinearColumnFilter(int, int, const cv::Mat &, int, int, double, int)", "KYSOQOOPNQMSMUNWPXRXTWUVVTVRUPRNQLQKRJTJUKVM QOOQNSNVPX RXTVUTUQSO QLRKTKVM", "Tuesday", "N6google8protobuf2io18IstreamInputStreamE", "bool p3p::solve(cv::Mat &, cv::Mat &, const cv::Mat &, const cv::Mat &)", "The first output matrix must have the same dimensions as the input matrices", "N7cvflann7NNIndexINS_2L2IfEEEE", "Read palette index exceeding num_palette", "H7void cv::groupRectangles(std::vector<Rect> &, int, double, std::vector<int> *, std::vector<double> *)", "outBlob.type()", "JZZBXCUERHPKNOMSMXN\\O_Qb SHQKOONTN\\ ZBWDTGRJQLPOOSN\\ NTO]P`Qb", "stype == CV_8UC1 || stype == CV_16SC1 || stype == CV_32SC1 || stype == CV_32FC1", "imgproc::edgeDst_10()", "N7cvflann14FLANNExceptionE", "NSt6__ndk114error_categoryE", "A.step[d-1] == A.elemSize()", "Input [", "arithm_ipp_add16u", "C_SVC", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/color_rgb.dispatch.cpp", "validateDisparity", "NSt6__ndk17codecvtIcc9mbstate_tEE", "imgproc::blur_11()", "u->handle != 0", "OpenCV TIFF: failed TIFFSetField(tif, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_LOGLUV)", "cv::impl::(anonymous namespace)::CvtHelper<cv::impl::(anonymous namespace)::Set<1, -1, -1>, cv::impl::(anonymous namespace)::Set<1, -1, -1>, cv::impl::(anonymous namespace)::Set<0, -1, -1>, cv::impl::(anonymous namespace)::SizePolicy::FROM_YUV>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::impl::(anonymous namespace)::Set<1, -1, -1>, VDcn = cv::impl::(anonymous namespace)::Set<1, -1, -1>, VDepth = cv::impl::(anonymous namespace)::Set<0, -1, -1>, sizePolicy = cv::impl::(anonymous namespace)::SizePolicy::FROM_YUV]", "cannot allocate memory for self", "void cv::merge(cv::InputArrayOfArrays, cv::OutputArray)", "Unknown %s code %d", "cvSaveWindowParameters", "void cv::hal::opt_AVX2::not8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "N2cv8opt_AVX28Filter2DIhNS0_4CastIfhEENS0_12FilterVec_8uEEE", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphRowFilter<cv::cpu_baseline::(anonymous namespace)::MaxOp<float>, cv::cpu_baseline::(anonymous namespace)::MorphRowVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_float32x4> > >::operator()(const uchar *, uchar *, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MaxOp<float>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphRowVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_float32x4> >]", "): failed TIFFSetField(tif, TIFFTAG_RESOLUTIONUNIT, resUnit)", "Cannot handle more than 65535 TIFF directories", "The intrinsic matrix must have [fx 0 cx; 0 fy cy; 0 0 1] shape", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml10DTreesImplENS_9allocatorIS3_EEEE", "30TegraCvtColor_rgb2hsvf_Invoker", "/home/vagrant/build/srclib/opencv/modules/ml/src/knearest.cpp", "N6google8protobuf3MapINSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN17opencv_tensorflow9AttrValueEE8InnerMapE", "getContour", "JZWOVNTMQMONOPPRSS SSOTMVMXNZP[S[UZWX", "i < src.channels()", "(sampleIdx.checkVector(1, CV_32S, true) > 0 && checkRange(sampleIdx, true, 0, 0, nsamples)) || sampleIdx.checkVector(1, CV_8U, true) == nsamples", "The file format version number's flag field contains unrecognized flags.", "length > 0", "virtual int cv::MatOp::type(const cv::MatExpr &) const", "F_GLJIMLMX IJLMLX MLPISLSX OJRMRX SLVIYLYW[Y UJXMXXZZ]W", "Premature EOF at line %u of %s %u (x %u)", "OPENCV_DUMP_CONFIG", "Sanity check on directory count failed", "dnn::NMSBoxes_13()", "cvGetTextSize", "void cv::filterSpeckles(cv::InputOutputArray, double, int, double, cv::InputOutputArray)", "CL_D3D10_RESOURCE_NOT_ACQUIRED_KHR", "\"search_menu_title\" : \"Pesquisar\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline9RowFilterItfNS2_8RowNoVecEEENS_9allocatorIS5_EEEE", "convolutional", "classes >= 1", "Unexpected file type (expected `f` or `F`)", "LZWDecodeCompat", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2019012222ReshapeAsShapeSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "Parsing error", "JZPGSFRFPGOHOIPJSKVLWKVJSKPLNMMOMQNRPSSTVUWTVSSTOUMVLXLZM[O\\S]U^V_VaTbRbOaPaRb OMNONQOR NVMXMZN[ VKSKQLPMOOOQQSST VTSTPUOVNXNZP\\S]", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphColumnFilter<cv::opt_AVX2::(anonymous namespace)::MaxOp<unsigned char>, cv::opt_AVX2::(anonymous namespace)::MorphColumnVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_uint8x32> > >::operator()(const uchar **, uchar *, int, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MaxOp<unsigned char>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphColumnVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_uint8x32> >]", "Cannot handle zero tile size", "void cv::hal::opt_SSE4_1::or8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "PriorBoxLayerImpl", "CL_INVALID_LINKER_OPTIONS", "!objectPoints.empty() && objectPoints.type() == CV_64FC3", "NSt6__ndk120__shared_ptr_emplaceIN2cv10PAMEncoderENS_9allocatorIS2_EEEE", "findDataFile", "Value must be identifier for boolean option \"", "IZVKWLXLXKSKQLPMOOLYK[J\\ SKQMPOMYL[J\\H\\H[I\\ VOTVTWUXWXXWYU WOUVUWVX LOWO", "virtual void cv::MatOp::divide(double, const cv::MatExpr &, cv::MatExpr &) const", "Function supports only floating point types", "__itt_thread_set_name", "virtual float cv::ml::RTreesImpl::predict(cv::InputArray, cv::OutputArray, int) const", "Y.size() == Angle.size() && Y.type() == Angle.type()", "long double", "_queryDescriptors.type() == trainDescType", "THDiskFile_longSize", "Mat::nGetI()", "Ignoring attempt to write bKGD chunk out-of-range for bit_depth", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn24DetectionOutputLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "valueInfoProto.has_type()", "objdetect::convert_10()", "NSt6__ndk112ctype_bynameIcEE", "A protocol message was rejected because it was too big (more than ", "DetectionOutput", "~TlsAbstraction", "getUMatRef", "N6google8protobuf8internal12MapEntryImplIN17opencv_tensorflow26NodeDef_AttrEntry_DoNotUseENS0_7MessageENSt6__ndk112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSF_11ELi0EEE", "N2cv10opt_SSE4_112_GLOBAL__N_114MorphRowFilterINS1_5MaxOpIsEENS1_11MorphRowVecINS1_4VMaxINS_10hal_SSE4_19v_int16x8EEEEEEE", "cvSetRemove", "dfself->handle != __null", "void cv::hal::cvtBGRtoGray(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool)", "getStructuringElement", "\"abc_capital_off\" : \"\u0418\u0421\u041a\u041b\u0423\u0427\u0415\u041d\u041e\"", "dims > 0 && dims == H2.dims() && H1.type() == H2.type() && H1.type() == CV_32F", "FNumber", "prepareDistCoeffs", "imgproc::blur_12()", "N3Iex11OverflowExcE", "THDiskFile_close", "core::divide_16()", "void cv::opt_SSE4_1::(anonymous namespace)::medianBlur_SortNet(const cv::Mat &, cv::Mat &, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MinMax8u, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MinMaxVec8u]", "is_classifier", "ml::setRpropDWMax_10()", "cvSetImageCOI", "0 <= hnext && hnext < npoints", "imgproc::integral_10()", "layer.input_size() == 3", "output_shape", "m.isContinuous() && m.type() == CV_32F && (int)m.total() == outCn", "mat.rows == mat.cols && (type == CV_32F || type == CV_64F)", "imgproc::setTemplate_10()", "cvSetHistBinRanges", "cvSeqInsert", "void cv::hal::opt_SSE4_1::add32f(const float *, size_t, const float *, size_t, float *, size_t, int, int)", "screenWindowWidth", "operator ", "LXRMRV PONPNSPTTTVSVPTOPO", "N2cv13StaticBackendE", "Field numbers $0 through $1 are reserved for the protocol buffer library implementation.", "ml::setOptimalParameters_12()", "checkParams", "invalid alpha mode", "dst.cols == (src1.cols*3)", "The matrix can not be converted to point sequence because of inappropriate element type", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX28Filter2DIhNS2_4CastIffEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "H]UJULTNSOQPOPNNNLOIQGTFWFYGZIZMYPWSSWPYNZK[I[HZHXIWKWMXPZS[V[XZZX WFXGYIYMXPVSSVOYK[", "SceneCaptureType", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/median_blur.dispatch.cpp", "N2cv3dnn22DeConvolutionLayerImplE", "png_image_write_to_file: incorrect PNG_IMAGE_VERSION", "Mat::n_1row()", "Invalid symbol name: ", "Protocol message serialized itself in invalid fashion.", "RowFilter", "readRawData can only be used to read plain sequences of numbers", "tensor_shape.proto", "ZIPEncode", "OpenCLBackendWrapper", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_116SymmColumnFilterINS2_4CastIffEENS2_17SymmColumnVec_32fEEENS_9allocatorIS7_EEEE", "NSt6__ndk120__shared_ptr_emplaceINS_6vectorIN2cv13HaarEvaluator10OptFeatureENS_9allocatorIS4_EEEENS5_IS7_EEEE", "JZMSRPWS MSRQWS", "virtual void cv::opt_SSE4_1::RowFilter<float, float, cv::opt_SSE4_1::RowVec_32f>::operator()(const uchar *, uchar *, int, int) [ST = float, DT = float, VecOp = cv::opt_SSE4_1::RowVec_32f]", "Zero strips per image", "\"abc_capital_off\" : \"DEZACTIVA\u021aI\"", "\"abc_action_menu_overflow_description\" : \"Tov\u00e1bbi lehet\u0151s\u00e9gek\"", "right_node", "cvStartFindContours_Impl", "imgareatlx", "minAngle_ >= 0.0 && minAngle_ < maxAngle_ && maxAngle_ <= 360.0", "Softmax-name", "params.has(\"offset_h\")", "\"abc_action_bar_home_description\" : \"Navega a la p\u00e0gina d'inici\"", "N2cv8opt_AVX218SymmRowSmallFilterIhiNS0_21SymmRowSmallVec_8u32sEEE", "imgproc::demosaicing_10()", "imgproc::getGaussianKernel_10()", "negative_beta", "ml::findNearest_12()", "Thin prism model must have 12 parameters in the distortion matrix", "\"abc_action_bar_up_description\" : \"Desprazarse cara arriba\"", "addTree", "cvSolveCubic", "pool_stride_w", "objdetect::HOGDescriptor_15()", "void cv::ellipse2Poly(cv::Point2d, cv::Size2d, int, int, int, int, std::vector<Point2d> &)", "size.width > 0", "int cv::opt_AVX2::(anonymous namespace)::MorphVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_uint8x32> >::operator()(uchar **, int, uchar *, int) const [VecUpdate = cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_uint8x32>]", "\"abc_toolbar_collapse_description\" : \"Yig\u2018ish\"", "MWRMRV NMVM", "Warning: thumbnail image size does not match data length %u", "H\\PFMGLILKMMONSOVPXRYTYWXYWZT[P[MZLYKWKTLRNPQOUNWMXKXIWGTFPF", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12ColumnFilterINS2_4CastIfsEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "scale.isContinuous() && scale.type() == CV_32F", "calib3d::fisheye_1projectPoints_12()", "void cv::hal::cpu_baseline::cmp16u(const ushort *, size_t, const ushort *, size_t, uchar *, size_t, int, int, int)", "\"abc_action_bar_home_description\" : \"Fara heim\"", "L\\UUTSRRPRNSMTLVLXMZO[Q[SZTXZF VRUWUZV[W[YZZY\\V", "\"abc_activity_chooser_view_see_all\" : \"Per\u017ei\u016br\u0117ti visk\u0105\"", "features2d::getTrainDescriptors_10()", "\"abc_searchview_description_query\" : \"\u041f\u043e\u0448\u0443\u043a\u043e\u0432\u0438\u0439 \u0437\u0430\u043f\u0438\u0442\"", "\"abc_action_bar_home_description\" : \"\u0cae\u0cc1\u0c96\u0caa\u0cc1\u0c9f\u0cb5\u0ca8\u0ccd\u0ca8\u0cc1 \u0ca8\u0ccd\u0caf\u0cbe\u0cb5\u0cbf\u0c97\u0cc7\u0c9f\u0ccd \u0cae\u0cbe\u0ca1\u0cbf\"", "IPP:ipp_split(src, mv, cn)", "\" because it is missing required fields: ", "TIFFRasterScanlineSize", "Couldn't parse default value \"", "cvReleaseGraphScanner", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphRowFilter<cv::opt_SSE4_1::(anonymous namespace)::MaxOp<unsigned char>, cv::opt_SSE4_1::(anonymous namespace)::MorphRowVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_uint8x16> > >::operator()(const uchar *, uchar *, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MaxOp<unsigned char>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphRowVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_uint8x16> >]", "invalid user transform pixel depth", "dnn::getFLOPS_11()", "features2d::getFastThreshold_10()", "len == icovar.rows && len == icovar.cols", "\"abc_searchview_description_search\" : \"\u641c\u5c0b\"", "decltype(nullptr)", "void cv::hal::cvtHSVtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool, bool, bool)", "JZXKLX OKPLPNOOMOLNLLMKOKSLVLXK UTTUTWUXWXXWXUWTUT", "A file with this name is already in the pool.", "H]TFQGOIMLLNKRKVLYMZO[Q[TZVXXUYSZOZKYHXGVFTFRHRKSNUQWSZU\\V", "Insufficient memory to process iCCP profile", "\"abc_activity_chooser_view_see_all\" : \"\u10e7\u10d5\u10d4\u10da\u10d0\u10e1 \u10dc\u10d0\u10ee\u10d5\u10d0\"", "isOldFormatCascade", "calib3d::setNumDisparities_10()", "Invalid image width in IHDR", "opencv_ml_svmsgd", ".foo = value\".", "inp.total()", "prepareCameraMatrix", "void cv::dnn::dnn4_v20190122::Net::setInputsNames(const std::vector<String> &)", "Mat::n_1Mat__J_3Lorg_opencv_core_Range_2()", "H\\ZRYTWUVUTTSSQPPONNMNKOJQJRKTMUNUPTQSSPTOVNWNYOZQZR", "int cv::cpu_baseline::(anonymous namespace)::MorphColumnVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_uint16x8> >::operator()(const uchar **, uchar *, int, int, int) const [VecUpdate = cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_uint16x8>]", "Failed to parse NetParameter buffer", "columnBorderType != BORDER_WRAP", "map_matrix.rows == 2 && update.rows == 3", "NSt6__ndk115__codecvt_utf16IDiLb0EEE", "imgproc::Canny_11()", "VIDEOIO(%s): created, isOpened=%d", "void cv::drawChessboardCorners(cv::InputOutputArray, cv::Size, cv::InputArray, bool)", "unexpected bit depth", "Unexpected end of line", "cv::MatExpr cv::abs(const cv::MatExpr &)", "N3Imf14TypedAttributeINS_7KeyCodeEEE", "cvMoveWindow", "dnn::readTensorFromONNX_10()", "pad_r", "close() failed: ", "info.format == ANDROID_BITMAP_FORMAT_RGBA_8888 || info.format == ANDROID_BITMAP_FORMAT_RGB_565", "opencv_videoio_plugin_init_v0", "void cv::opt_AVX2::cvt8s16f(const schar *, size_t, uchar *, size_t, cv::float16_t *, size_t, cv::Size, void *)", "Cannot find frame buffer slice \"", "/home/vagrant/build/srclib/opencv/modules/videoio/src/backend_plugin.cpp", "widths", "N17opencv_tensorflow13OpDef_AttrDefE", "type == src2.type() && src1.cols == src2.cols && (type == CV_32F || type == CV_8U)", "NU_SVR", "!fixedType() || ((UMat*)obj)->type() == mtype", "H\\XIWGTFRFOGMJLOLTMXOZR[S[VZXXYUYTXQVOSNRNOOMQLT", "isOpened() && pos >= 0", "CHECK failed: original_uninterpreted_options_field != NULL: ", "cn > 0 && cn <= 4", "virtual void cv::opt_SSE4_1::(anonymous namespace)::RowSum<short, double>::operator()(const uchar *, uchar *, int, int) [T = short, ST = double]", "!covs[clusterIndex].empty()", "allocateLayer", "N2cv8opt_AVX212_GLOBAL__N_114MorphRowFilterINS1_5MaxOpIfEENS1_11MorphRowVecINS1_4VMaxINS_8hal_AVX211v_float32x8EEEEEEE", "\"abc_searchview_description_query\" : \"Arama sorgusu\"", "N3Iex9El3hltExcE", "void cv::hal::opt_SSE4_1::max64f(const double *, size_t, const double *, size_t, double *, size_t, int, int)", "MWOMOV OSPQRPTQUSUV", "JZRFRR MIWO WIMO", "void cv::cpu_baseline::(anonymous namespace)::medianBlur_SortNet(const cv::Mat &, cv::Mat &, int) [Op = cv::cpu_baseline::(anonymous namespace)::MinMax16s, VecOp = cv::cpu_baseline::(anonymous namespace)::MinMaxVec16s]", "NSt6__ndk120__shared_ptr_emplaceIN2cv11FileStorage4ImplENS_9allocatorIS3_EEEE", "N6google8protobuf25EncodedDescriptorDatabaseE", "getDataLayout", "OPENCV_SAMPLES_DATA_PATH", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi4EEEij11DistSquarediE", "void cv::hal::opt_AVX2::cmp64f(const double *, size_t, const double *, size_t, uchar *, size_t, int, int, int)", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline21SymmColumnSmallFilterINS2_4CastIisEENS2_25SymmColumnSmallVec_32s16sEEENS_9allocatorIS7_EEEE", "CHECK failed: (option_field->type()) == (FieldDescriptor::TYPE_GROUP): ", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::YCrCb2RGB_i<ushort> >::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::YCrCb2RGB_i<ushort>]", "!Lx_.empty()", "PFvPN2TH8THFile__EE", "\"abc_capital_off\" : \"\u062e\u0627\u0645\u0648\u0634\"", "N2cv9MatOp_BinE", "padding", "mapGLBuffer", "tilegrdtlx", "Extension numbers must be positive integers.", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_18RGB2GrayIhEEEE", "input.dims == 4 && output.dims == 4", "blobs.size() == 6", "doesVertexExist( id2 )", "All objectPoints[i] should be identical when object-releasing method is requested.", "N7cvflann7anyimpl21typed_base_any_policyINSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE", "count >= modelPoints && count == count2", "virtual void cv::opt_AVX2::(anonymous namespace)::SqrRowSum<short, double>::operator()(const uchar *, uchar *, int, int) [T = short, ST = double]", "__itt_api_version", "int cv::solveLP(cv::InputArray, cv::InputArray, cv::OutputArray)", "void cv::seamlessClone(cv::InputArray, cv::InputArray, cv::InputArray, cv::Point, cv::OutputArray, int)", "MWRHSGRFQGQIRKSL", "virtual void cv::HaarEvaluator::computeOptFeatures()", "Mixed input data types.", "Error decompressing data (input data are longer than expected).", "\"abc_action_bar_home_description\" : \"Boshiga o\u2018tish\"", "u->refcount == 0 && \"UMat deallocation error: some derived Mat is still alive\"", "delta < m_current - m_start", "maxpool", "checkSubdiv", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphColumnFilter<cv::opt_SSE4_1::(anonymous namespace)::MaxOp<unsigned char>, cv::opt_SSE4_1::(anonymous namespace)::MorphColumnVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_uint8x16> > >::operator()(const uchar **, uchar *, int, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MaxOp<unsigned char>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphColumnVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_uint8x16> >]", "Enum value \"$0\" is reserved.", "OpenCV TIFF: failed TIFFWriteScanline(tif, buffer, y, 0) == 1", "Key may not start with '-'", "trainDescCollection.size() == 0", "\"abc_activity_chooser_view_see_all\" : \"Se alle\"", "ofs.x >= winSize.width && ofs.y >= winSize.height && ofs.x + nextPyr[lvlStep2].cols + winSize.width <= fullSize.width && ofs.y + nextPyr[lvlStep2].rows + winSize.height <= fullSize.height", "depth == CV_8S || depth == CV_16S || depth == CV_32S || depth == CV_32F || depth == CV_64F", "[FATAL:", "!u->deviceCopyObsolete() || u->copyOnMap()", "NSt6__ndk114default_deleteIN2cv10OcvDctImplEEE", "H\\JQKOLNNMZM LONNYN JQKPMOZO ROQZR[SZRO ZMZO RORZ", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_111MorphFilterINS3_5MinOpIdEENS3_10MorphNoVecEEENS_9allocatorIS8_EEEE", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphColumnFilter<cv::cpu_baseline::(anonymous namespace)::MaxOp<unsigned short>, cv::cpu_baseline::(anonymous namespace)::MorphColumnVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_uint16x8> > >::operator()(const uchar **, uchar *, int, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MaxOp<unsigned short>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphColumnVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_uint16x8> >]", "ippiOperator", "\"abc_searchview_description_query\" : \"K\u00ebrko pyetjen\"", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphColumnFilter<cv::opt_SSE4_1::(anonymous namespace)::MaxOp<float>, cv::opt_SSE4_1::(anonymous namespace)::MorphColumnVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_float32x4> > >::operator()(const uchar **, uchar *, int, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MaxOp<float>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphColumnVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_float32x4> >]", "video::get_1errorCovPre_10()", "keyword \"@1\": bad character '0x@2'", "virtual void cv::MatOp::transpose(const cv::MatExpr &, cv::MatExpr &) const", "\"search_menu_title\" : \"\u179f\u17d2\u179c\u17c2\u1784\u179a\u1780\"", "For fast convolution/correlation use 2-column matrix or single-row matrix instead", "ushort3", "@cTGSHTIUHTGRFOFLGJIIKHNGRE[D_Ca OFMGKIJKINGWF[E^D`CaAb?b>a>`?_@`?a `G_H`IaH`G]FZFWGUITKSNRRP[O_Na ZFXGVIUKTNRWQ[P^O`NaLbJbIaI`J_K`Ja ^M\\T[X[Z\\[_[aYbW _M]T\\X\\Z][ DM_M", "type == _src2.type() && (type == CV_32F || type == CV_64F)", "N2cv3dnn14BlankLayerImplE", "N2cv10opt_SSE4_112ColumnFilterINS0_4CastIdhEENS0_11ColumnNoVecEEE", "_src.dims() == 2 && _src.type() == CV_32FC3", "int cv::cpu_baseline::sqsum16s(const short *, const uchar *, int *, double *, int, int)", "opencv-onnx.proto", "void cv::hal::min8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "cv::Mat &cv::Mat::operator=(const cv::Scalar &)", "G]LFL[ MGMZ IFNFN[ WNNW RSY[ RTX[ QTW[ TM[M I[Q[ T[[[ JFLG KFLH UMWN ZMWN LZJ[ LYK[ NYO[ NZP[ WYU[ VYZ[", "src.type() == CV_8UC3 && dst.type() == CV_32SC1", "total(outTailShape_) == _numOut", "photo::fastNlMeansDenoisingColored_14()", "features2d::drawMatches_12()", "imgproc::getGaborKernel_10()", "H]TFQGOIMLLOKSKVLYMZO[Q[TZVXXUYRZNZKYHXGVFTF TFRGPINLMOLSLVMYO[ Q[SZUXWUXRYNYKXHVF", "virtual cv::VideoCapture::~VideoCapture()", "void cv::opt_AVX2::cvt8u32f(const uchar *, size_t, uchar *, size_t, float *, size_t, cv::Size, void *)", "N2cv8opt_AVX212ColumnFilterINS0_4CastIfhEENS0_11ColumnNoVecEEE", "N2cv8opt_AVX212_GLOBAL__N_114MorphRowFilterINS1_5MaxOpIsEENS1_11MorphRowVecINS1_4VMaxINS_8hal_AVX210v_int16x16EEEEEEE", "step_y", "Ptr<cv::BaseFilter> cv::opt_SSE4_1::getLinearFilter(int, int, const cv::Mat &, cv::Point, double, int)", "N10__cxxabiv121__vmi_class_type_infoE", "I\\QMONMPLSLUMXOZQ[T[VZXXYUYSXPVNTMQM QNOONPMSMUNXOYQZTZVYWXXUXSWPVOTNQN", "(int)tile_width0 > 0 && (int)tile_width0 < std::numeric_limits<int>::max()", "DepthConcat", "__itt_sync_cancel", "core::idft_12()", "/home/vagrant/build/srclib/opencv/modules/objdetect/src/detection_based_tracker.cpp", "Unrecognized value", "ushort4", "N2cv8opt_AVX212_GLOBAL__N_19ColumnSumIdhEE", "J[WKQKOLNNNX QKPLONOX UKVLVX WKWX LOVO LXQX TXYX", "void cv::undistort(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, cv::InputArray)", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_11YCrCb2RGB_fIfEEEE", "Index must be in range of repeated field values. ", "\"abc_action_menu_overflow_description\" : \"Di\u011fer se\u00e7enekler\"", "JZLMR[ LMMMRY XMWMRY XMR[", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_111MorphFilterINS3_5MaxOpIhEENS3_8MorphVecINS3_4VMaxINS1_12hal_baseline10v_uint8x16EEEEEEENS_9allocatorISD_EEEE", "OWOVSQUNVLWIWGVFTGSIQQNZKaJdJfKgMfNcOZP[R[TZUYWV", "TIFF directory is missing required \"%s\" field", "8-bit, 16-bit unsigned or 32-bit float 1-channel and 8-bit 3-channel input/output images are supported", "features2d::radiusMatch_12()", "virtual void cv::detail::LKTrackerInvoker::operator()(const cv::Range &) const", "CHECK failed: options->AppendPartialToString(&buf): ", "MWQMONOPQQSQUPUNSMQM QQOROUQVSVUUURSQ", "ml::setCoef0_10()", "BlackLevelDeltaH", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112ColumnFilterINS2_4CastIddEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "' in the parameters given", "N2cv2ml10DTreesImplE", "video::createBackgroundSubtractorMOG2_13()", "N2cv12cpu_baseline9RowFilterIfdNS0_8RowNoVecEEE", "\"abc_searchview_description_voice\" : \"\u0413\u043b\u0430\u0441\u043e\u0432\u043e \u0442\u044a\u0440\u0441\u0435\u043d\u0435\"", "blob_.dims == 4", "UNIMPLEMENTED", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX216SymmColumnFilterINS2_4CastIisEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "features2d::drawMatches_14()", "\"abc_action_mode_done\" : \"\u0cae\u0cc1\u0c97\u0cbf\u0ca6\u0cbf\u0ca6\u0cc6\"", "invalid scale", "\"abc_searchview_description_voice\" : \"\u0627\u0644\u0628\u062d\u062b \u0627\u0644\u0635\u0648\u062a\u064a\"", "EYETHVKWPWSVVTXQYNYLXKVKSLPNNQMTMYN\\P_", "N2cv23BackgroundSubtractorKNNE", "prior_width > 0", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi3EEExy7DistAbsiE", "N2cv18BlendLinearInvokerIfEE", "opencv_storage", "Enums must contain at least one value.", "/home/vagrant/build/srclib/opencv/modules/dnn/src/init.cpp", "void cv::hal::cpu_baseline::max16s(const short *, size_t, const short *, size_t, short *, size_t, int, int)", "LXUONX VOOX OONQNOVO NXVXVVUX", "void cv::opt_AVX2::cvt16s32s(const short *, size_t, uchar *, size_t, int *, size_t, cv::Size, void *)", "N3Iex16EaddrnotavailExcE", "N7cvflann11LinearIndexINS_10HammingLUTEEE", "N2cv8opt_AVX216SymmColumnFilterINS0_4CastIffEENS0_22SymmColumnSmallVec_32fEEE", "F^KFK[ LFL[ XFX[ YFY[ HFOF UF\\F LPXP H[O[ U[\\[", "__itt_stack_callee_leave", "NVNVPSRO UFOXOZQ[SZTYVV VFPXPZQ[", "isReadable && !isWritable", "\"abc_shareactionprovider_share_with\" : \"\u041e\u0442\u043a\u0440\u044b\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f\"", "terminate called after throwing an instance of '", "\"abc_searchview_description_query\" : \"\u0ab6\u0acb\u0aa7 \u0a95\u0acd\u0ab5\u0ac7\u0ab0\u0ac0\"", "NULL output boolean given.", "JZJVLSNRPRQSQZR[U[XYZV WSVRTRSSOZN[L[KZ", "(cn == 1 && (_mask.empty() || _mask.type() == CV_8U)) || (cn > 1 && _mask.empty() && !minIdx && !maxIdx)", "0 <= axis && axis < inpShape.size()", "ml::getDefaultGridPtr_10()", "interpolation == \"nearest\" || interpolation == \"bilinear\"", "calib3d::getPreFilterSize_10()", "pthread_key_delete(tlsKey) == 0", "Missing name.", "Invalid control characters encountered in text.", "CHECK failed: has_default_value(): ", "arithm_ipp_max8u", "end < 0 || end > start", "K[VLWKWOVLTKQKOLNMMPMSNVOWQXTXVW QKOMNPNSOVQX TXUWVU VSVX WSWX TSYS", "\"abc_capital_off\" : \"\u1320\u134d\u1277\u120d\"", "\"abc_activitychooserview_choose_application\" : \"Odabir aplikacije\"", "dnn::readNetFromTensorflow_10()", "N2cv10OcvDftImplE", "NSt6__ndk110__function6__funcIZNK2cv7details10Chessboard10detectImplERKNS2_3MatERNS_6vectorIS5_NS_9allocatorIS5_EEEES7_E3$_1NS9_ISD_EEFvRKNS2_5RangeEEEE", "core::determinant_10()", "cvAdd", "\"abc_action_bar_up_description\" : \"Navigiraj prema gore\"", "arithm_ipp_not8u", "cvInitSparseMatIterator", "concatenated.size() == 1", "NSt6__ndk120__shared_ptr_emplaceIN2cv10YAMLParserENS_9allocatorIS2_EEEE", "NVQNOONQNSOUQVSVUUVSVQUOSNQN", "/home/vagrant/build/srclib/opencv/modules/videoio/src/cap.cpp", "Convolution", "type_id", "err.isContinuous() && err.type() == CV_32F && mask.isContinuous() && mask.type() == CV_8U", "mixChannels", "virtual void cv::LineSegmentDetectorImpl::drawSegments(cv::InputOutputArray, cv::InputArray)", "initHalide", "cvCreateMatHeader", "inputs[1].dims", "ZIPPreEncode", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_9RGB2XYZ_fIfEEEE", "cvCornerEigenValsAndVecs", "OPENCV_TRACE_ITT_PARENT", "LYWKTKQLONNQNSOVQXTYWY WKTLRNQQQSRVTXWY", "scalarParams.has(\"beta\")", "\"abc_search_hint\" : \"\u0548\u0580\u0578\u0576\u0578\u0582\u0574...\"", "\"abc_searchview_description_clear\" : \"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\"", "/home/vagrant/build/srclib/opencv/modules/photo/src/align.cpp", "accumulateWeighted", "FilterEngine__start", "virtual void cv::opt_AVX2::(anonymous namespace)::BilateralFilter_32f_Invoker::operator()(const cv::Range &) const", "NVNNNVVVVNNN OOOU POPU QOQU RORU SOSU TOTU UOUU", "m3.dims", "bad dimension index", "img.type() == CV_8UC1", "ml::getNTestSamples_10()", "N2cv3dnn23FullyConnectedLayerImplE", "H\\QFNGLJKOKRLWNZQ[S[VZXWYRYOXJVGSFQF", "stageThreshold", "result.size() == cv::Size(std::abs(img.cols - templ.cols) + 1, std::abs(img.rows - templ.rows) + 1) && result.type() == CV_32F", "N3Iex14EnoprotooptExcE", "JPEG parameter struct mismatch: library thinks size is %u, caller expects %u", "layer.input_size() == 2 || layer.input_size() == 3", "cvRepeat", "ImageLayer", "prior_bboxes.size() == prior_variances.size()", "sortIdx", "initializeContextFromVA", "No definition found for tag %d", "double cv::threshold(cv::InputArray, cv::OutputArray, double, double, int)", "int cv::opt_AVX2::(anonymous namespace)::MorphRowVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_uint8x32> >::operator()(const uchar *, uchar *, int, int) const [VecUpdate = cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_uint8x32>]", "len == len0", "features2d::write_10()", "N2cv10opt_SSE4_119resizeNNInvokerSSE2E", "/home/vagrant/build/srclib/opencv/modules/core/src/matrix.cpp", "The data is expected as InputArray::STD_VECTOR_MAT (a std::vector<Mat>) or _InputArray::STD_VECTOR_VECTOR (a std::vector< std::vector<...> >).", "!_imagePoints.empty() && _imagePoints.type() == CV_64FC2", "upright", "NSt6__ndk121__basic_string_commonILb1EEE", "\"abc_activitychooserview_choose_application\" : \"Veldu forrit\"", "Failed to parse onnx model", "\"search_menu_title\" : \"T\u00ecm ki\u1ebfm\"", "globalIdx < (int)size()", "objdetect::getDescriptorSize_10()", "imgproc::drawMarker_14()", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi2EEEij7DistAbsNS1_IiLi2EEEE", "Invalid wire type for CPPTYPE_MESSAGE: ", "NSt6__ndk110moneypunctIcLb0EEE", "cv::String cv::utils::fs::getcwd()", "Cannot set frame field in time code. New value is out of range.", "buildPyramid", "\"abc_action_menu_overflow_description\" : \"V\u00edce mo\u017enost\u00ed\"", "\"abc_action_bar_home_description\" : \"Navigasi ke beranda\"", "\"abc_capital_off\" : \"\u10d2\u10d0\u10db\u10dd\u10e0\u10d7\u10e3\u10da\u10d8\u10d0\"", "FlashpixVersion", "the type of labels must be 16u or 32s", "N2cv12cpu_baseline12_GLOBAL__N_117MorphColumnFilterINS1_5MinOpIsEENS1_14MorphColumnVecINS1_4VMinINS_12hal_baseline9v_int16x8EEEEEEE", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::RGB2XYZ_i<unsigned short> >::operator()(const cv::Range &) const [Cvt = cv::RGB2XYZ_i<unsigned short>]", "N2cv12StereoBMImplE", "/home/vagrant/build/srclib/opencv/modules/calib3d/src/stereosgbm.cpp", "/home/vagrant/build/srclib/opencv/modules/calib3d/src/p3p.cpp", "Seek error at scanline %lu", "int cv::opt_AVX2::FilterVec_8u16s::operator()(const uchar **, uchar *, int) const", "N2cv3dnn14dnn4_v2019012210PowerLayerE", "MWOPPPQQSXTYUY UPTRPWOY", "PNG unsigned integer out of range", "void cv::hal::opt_AVX2::invSqrt32f(const float *, float *, int)", "NSt6__ndk16locale5facetE", "\"abc_search_hint\" : \"Qidirish\u2026\"", "CbRFR[ SFS[ OFVF GGHHGIFHFGGFHFIGJIKMLONPWPYOZM[I\\G]F^F_G_H^I]H^G NPLQKSJXIZH[ NPMQLSKXJZI[G[FZEX WPYQZS[X\\Z][ WPXQYSZX[Z\\[^[_Z`X O[V[", "Unknown interpolation: ", "void cv::calcCovarMatrix(const cv::Mat *, int, cv::Mat &, cv::Mat &, int, int)", "N2cv10opt_SSE4_119resizeNNInvokerSSE4E", "operator>", "b?N2cv8colormap15TwilightShiftedE", "JPEG tile width must be multiple of %d", "inputs[0].data != outputs[0].data", "Invalid number of histogram entries specified", "getBlob", "N3Imf9AttributeE", "$base64$", "\"abc_activity_chooser_view_see_all\" : \"\u0e14\u0e39\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\"", "(unsigned)k < (unsigned)points.rows", "objdetect::compute_13()", "`APtr<cv::BaseRowFilter> cv::cpu_baseline::getRowSumFilter(int, int, int, int)", "Pooling", "core::mulSpectrums_11()", "icvApproximateChainTC89", "@getGaborKernel", "src.type() == CV_32FC1", "Message extensions cannot have required fields.", "Unsupported JPEG data precision %d", "video::setFlags_10()", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16EltwiseLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "cvGetWindowHandle", "I0.sameSize(flow_u)", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_19HSV2RGB_bEEE", "N2cv8colormap7RainbowE", "virtual void cv::opt_SSE4_1::ColumnFilter<cv::opt_SSE4_1::Cast<double, unsigned char>, cv::opt_SSE4_1::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::Cast<double, unsigned char>, VecOp = cv::opt_SSE4_1::ColumnNoVec]", "MWSHS\\ THT\\ OHTH O\\T\\", "Ptr<cv::BaseFilter> cv::getMorphologyFilter(int, int, cv::InputArray, cv::Point)", "Invalid sparse array header", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_9RGB2HSV_fEEE", "calib3d::findEssentialMat_19()", "Null histogram header pointer", "N3Imf11StdIFStreamE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ElementWiseLayerINS2_20ChannelsPReLUFunctorEEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "N6google8protobuf8internal20RepeatedFieldWrapperIdEE", "Call to NULL read function", "Mat::n_1checkVector__JIIZ()", "void cv::addWeighted(cv::InputArray, double, cv::InputArray, double, double, cv::OutputArray, int)", "dnn::readNetFromCaffe_11()", "convertFromDirect3DSurface9", "\"abc_search_hint\" : \"Suchen\u2026\"", "classes > 0 && num_of_anchors > 0 && (num_of_anchors * 2) == anchors_vec.size()", "N2cv15FileStorage_APIE", "N2cv3hal8opt_AVX212_GLOBAL__N_119YUV422toRGB8InvokerILi2ELi1ELi0ELi3EEE", "PrimaryChromaticities", " not found in const blobs", "photo::getContrastWeight_10()", "ml::setAnnealCoolingRatio_10()", "calib3d::calibrateCameraROExtended_12()", "\"abc_action_bar_home_description\" : \"\u1019\u1030\u101c\u1014\u1031\u101b\u102c\u1000\u102d\u102f \u101e\u103d\u102c\u1038\u101b\u1014\u103a\"", "\"abc_toolbar_collapse_description\" : \"Zwi\u0144\"", "src.rows == src.cols", "h >= 2 && w >= 2", "len >= 0 && \"Check format string for errors\"", "lines_max must be greater than 0", "blobs[i].type() == bias.type()", "setTemplateImpl", "AuthenticAMD", "Not-a-number value is illegal", "void cv::hal::cvtBGRtoTwoPlaneYUV(const uchar *, size_t, uchar *, uchar *, size_t, int, int, int, bool, int)", "LWTSSQQPOQNSOUQVSUTS VMTSTUUVVV", "I[XOWNTMQMNNMOLQLSMUOWSZT\\T^S_Q_", "!fixedSize() || ((ogl::Buffer*)obj)->size() == Size(_cols, _rows)", "SVMSGD model data is invalid, it hasn't been trained", "\"abc_action_bar_up_description\" : \"Przejd\u017a wy\u017cej\"", " conflicts with an existing oneof type.", "St14overflow_error", "CHECK failed: (message_type) == (field->message_type()): ", "start >= 0", "IPP:ipp_copyMakeBorder(src, dst, top, bottom, left, right, borderType, value)", "horAcc32", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX221SymmColumnSmallFilterINS2_4CastIisEENS2_25SymmColumnSmallVec_32s16sEEENS_9allocatorIS7_EEEE", "The destination matrix data type is inappropriate, see the manual", "\" are not compatible with the frame buffer's subsampling factors.", "H\\UFIZ SJT[ THUZ UFUHVYV[ LUTU F[L[ Q[X[ IZG[ IZK[ TZR[ TYS[ VYW[", "core::min_10()", "initCIELabConversion", "Can't get here.", "\". The files have different data windows.", "complexityReductionThreshold", "OPENCV_DNN_DISABLE_MEMORY_OPTIMIZATIONS", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/reshape_layer.cpp", "void cv::hal::opt_SSE4_1::absdiff8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "\"search_menu_title\" : \"Ara\"", "\"abc_searchview_description_voice\" : \"Glasovna pretraga\"", "\"abc_searchview_description_search\" : \"Soek\"", "src.type() == dst.type() && dst.size() == mapx.size()", "objdetect::detect_14()", "F]KMILHJHIIGKFLFNGOIOKNOMRLVLYM[O[QZTWVTXPYMZIZGYFXFWGVIVKWNYP[Q", "N6google8protobuf17DescriptorBuilder17OptionInterpreter21AggregateOptionFinderE", "core::completeSymm_10()", "cvCreateData", "Error updating TIFF header", "extra compressed data", "Tile length is zero", "N2cv8opt_AVX219resizeNNInvokerAVX4E", "google.protobuf.MethodOptions", "src.channels() == 1", "Null pointer to corners", "\"abc_searchview_description_voice\" : \"\u062c\u0633\u062a\u062c\u0648\u06cc \u0634\u0641\u0627\u0647\u06cc\"", "sqsum.data != NULL", "G]HQIOKMNMONOPNTL[ MMNNNPMTK[ NTPPRNTMVMXNYOYRXWUb VMXOXRWWTb", "dnn::getIntValue_11()", "NSt6__ndk120__shared_ptr_pointerIPN2cv14QRCodeDetector4ImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "Wh.dims == 2 && Wx.dims == 2", "ml::isTrained_10()", "\"abc_action_bar_home_description\" : \"G\u00e5 til startsiden\"", "m == n", "ml::getNu_10()", "void cv::hal::fastAtan2(const float *, const float *, float *, int, bool)", "calib3d::estimateAffine2D_11()", "\"abc_capital_off\" : \"\u0531\u0546\u054b\u0531\u054f\u054e\u0531\u053e\"", "ni == ni1", "cvAnd", "N7cvflann14CompositeIndexINS_2L2IfEEEE", "num_scales", "/home/vagrant/build/srclib/opencv/modules/calib3d/src/quadsubpix.cpp", "\"abc_action_bar_up_description\" : \"Revenir en haut de la page\"", "No space for CIE L*a*b*->RGB conversion state.", "G^G[IZMVPQQNRJRGQFPFOGNINLONQOUOXNYMZKZQYVXXVZS[O[LZJXIVIT", "Missing needed %s tag", "N2cv12cpu_baseline12_GLOBAL__N_111MorphFilterINS1_5MaxOpIsEENS1_8MorphVecINS1_4VMaxINS_12hal_baseline9v_int16x8EEEEEEE", "missing feature maps", "G]LMKNJPJRKUOYP[ JRKTOXP[P]O`MbLbKaJ_J\\KXMTOQRNTMVMYNZPZTYXWZU[T[SZSXTWUXTY VMXNYPYTXXWZ", "void cv::generateCentersPP(const cv::Mat &, cv::Mat &, int, cv::RNG &, int)", "Seek failed on temporary file", "imgproc::polylines_13()", "build", "N6google8protobuf2io16FileOutputStreamE", "\"abc_action_mode_done\" : \"K\u00e9sz\"", "Successfully upgraded batch norm layers using deprecated ", "N3Iex9EexistExcE", "N2cv3dnn14dnn4_v2019012231DeconvolutionValidKerasSubgraphE", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_7RGB2RGBIhEEEE", "caffe", "running_mean", "type == CV_64FC2", "G]JMKNLPMTN[ KMLNMPNTOZ HPINJMLMMNNPOTPZ VVWTXQXMYMZNYQXSVVTXQZN[ XRYOYM", "Translation buffer too short", "H\\YMXOVQNWLYK[ XOOOMPLR VORNONNO VORMOMMOLR LYUYWXXV NYRZUZVY NYR[U[WYXV", "cv::Scalar cv::trace(cv::InputArray)", "NSt6__ndk120__shared_ptr_emplaceIN2cv10XMLEmitterENS_9allocatorIS2_EEEE", "/home/vagrant/build/srclib/opencv/modules/video/src/ecc.cpp", "N2cv14AlignExposuresE", "N2cv3dnn16FlattenLayerImplE", "cvCalcArrHist", "void cv::hal::opt_SSE4_1::recip8u(const uchar *, size_t, uchar *, size_t, int, int, const double *)", "cvInvert", "sizend", "classes", "borderType == BORDER_DEFAULT || borderType == BORDER_REPLICATE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_19SqrRowSumItdEENS_9allocatorIS5_EEEE", "[packed = true] can only be specified for repeated primitive fields.", "JPEG 2000 LOADER ERROR: unable to create colorspace", "clEnqueueNDRangeKernel('%s', dims=%d, globalsize=%zux%zux%zu, localsize=%s) sync=%s", "\"abc_action_menu_overflow_description\" : \"Lagi pilihan\"", "Unrecognized syntax: ", "MWRLRX MOWU WOMU", "basic_string::replace", "CHECK failed: (count) >= (0): ", ": failed to parse contents", "I[KKKILGMFOFPGQIRMR[ YKYIXGWFUFTGSIRM", "void cv::namedWindow(const cv::String &, int)", "calib3d::calibrateCameraRO_10()", "reuse", "F_RFR[ SFS[ OFVF PILJJLIOIRJULWPXUXYW[U\\R\\O[LYJUIPI PIMJKLJOJRKUMWPX UXXWZU[R[OZLXJUI O[V[", "_cn >= 0 && _newndims > 0 && _newndims <= CV_MAX_DIM && _newsz", "Fax3Decode2D", "the number of model points should be positive", "Number of channels in input image must be 1 or 3", "PUSMSNTNTMSM QPRPSQSRRTRUSVTV", "video::getVarMax_10()", "Build OpenCV with Inference Engine to enable loading models from Model Optimizer.", "You should explicitly call mapHost/unmapHost methods for ogl::Buffer object", "getDegree", "core::fastAtan2_10()", "MapKey::GetBoolValue", "setFusedNode", "int cv::opt_SSE4_1::(anonymous namespace)::MorphColumnVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_uint8x16> >::operator()(const uchar **, uchar *, int, int, int) const [VecUpdate = cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_uint8x16>]", "void cv::cpu_baseline::gemm64f(const double *, size_t, const double *, size_t, double, const double *, size_t, double, double *, size_t, int, int, int, int)", "Unknown exception in JNI code {nBitmapToMat}", "\"abc_activity_chooser_view_see_all\" : \"\u3059\u3079\u3066\u8868\u793a\"", "m.size[j]", "NVUPOV PQQPSPTQ PUQVSVTU", "startAxis >= 0", "N3Iex8EloopExcE", "\"abc_capital_on\" : \"\u0c06\u0c28\u0c4d \u0c1a\u0c47\u0c2f\u0c3f\"", "m.depth() == CV_64F && m.getMat().rows == 1", "ml::getType_10()", "imgproc::fillConvexPoly_12()", "N2cv3dnn14dnn4_v2019012213ProposalLayerE", "internal row size calculation error", "\"abc_capital_off\" : \"DEAKT\u0130V\"", "ml::setInitialStepSize_10()", "ReadNumber", "\"abc_shareactionprovider_share_with\" : \"\u0421\u043f\u043e\u0434\u0435\u043b\u044f\u043d\u0435 \u0441\u044a\u0441:\"", "tensorParams.count(\"indices\")", "NSt6__ndk114default_deleteIN2cv3dnn22NormalizeBBoxLayerImplEEE", "dim > 0", "Bad input origin", "_indexParams", "vsExp", "void cv::rectangle(cv::InputOutputArray, cv::Rect, const cv::Scalar &, int, int, int)", "int(numPriors * _numClasses) == total(inputs[1], 1)", "N2cv19LineSegmentDetectorE", "virtual void cv::dnn::dnn4_v20190122::DataLayer::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "dnn::blobFromImages_11()", "SetRepeatedString", "inShapes.size() == ids.size()", "permIds.size() == net.node_size()", "cluster", "Only 32f and 64f are supported", "bool cv::QRDecode::samplingForVersion()", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn17ProposalLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", " image files.  Current file format version is ", "void cv::details::FastX::findKeyPoints(const std::vector<cv::Mat> &, std::vector<KeyPoint> &, const cv::Mat &) const", "processTempl", "G]ONMOKQJTJWKYLZN[Q[TZWXYUZRZOXMVMTORSPXMb JWLYNZQZTYWWYU ZOXNVNTPRSPYNb", "checkImageDimensions", "N12opencv_caffe16FlattenParameterE", "endWriteStruct", "inpId < node.input_size()", "u->origdata != 0", "imgproc::pyrMeanShiftFiltering_10()", "\"search_menu_title\" : \"\u041f\u043e\u0438\u0441\u043a\"", "\"abc_activitychooserview_choose_application\" : \"\u0a8f\u0a95 \u0a8d\u0aaa\u0acd\u0ab2\u0abf\u0a95\u0ac7\u0ab6\u0aa8 \u0aaa\u0ab8\u0a82\u0aa6 \u0a95\u0ab0\u0acb\"", "readData", "H\\TMVNXPYPYOWNTMPMMNLOKQKSLUNWPXRYSZT\\T^S_Q_O^P^Q_ MOLQLSMUOW PMNNMPMSNURY YPXO", "N3Imf14TypedAttributeINSt6__ndk16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEEEE", "All windows sizes should be odd!", "\"abc_searchview_description_search\" : \"Search\"", "mask.size() == mask1.size()", "calib3d::findEssentialMat_14()", "E_NFH[ OFI[ PFJ[ ZFT[ [FU[ \\FV[ KFSF WF_F LPXP E[M[ Q[Y[ LFOG MFNH QFOH RFOG XF[G YFZH ]F[H ^F[G IZF[ IYG[ JYK[ IZL[ UZR[ UYS[ VYW[ UZX[", "Group3Options", "N2cv3dnn14dnn4_v2019012210ReorgLayerE", "Permute-name", "SpatialConvolutionMM", "int cv::cpu_baseline::FilterVec_8u::operator()(const uchar **, uchar *, int) const", "maxCircularity", "CL_DEVICE_PARTITION_FAILED", "NSt6__ndk120__shared_ptr_emplaceIN2cv10PngDecoderENS_9allocatorIS2_EEEE", "features2d::getDefaultName_10()", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/stubs/substitute.cc", "\"abc_searchview_description_search\" : \"Telusuri\"", "qMax.total() == 1", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/stubs/common.cc", "I[KMMMOOU`WbYb ZMYOWRM]K`Jb", "NSt6__ndk120__shared_ptr_emplaceIN2cv18MergeRobertsonImplENS_9allocatorIS2_EEEE", "virtual void cv::opt_SSE4_1::(anonymous namespace)::RowSum<unsigned short, double>::operator()(const uchar *, uchar *, int, int) [T = unsigned short, ST = double]", "Mat::n_1ones__I_3II()", "St17bad_function_call", "N3Iex9EisnamExcE", "cvStartLoop", "Ptr<cv::BaseFilter> cv::getLinearFilter(int, int, cv::InputArray, cv::Point, double, int)", "setOptimalParameters", "(out.height - 1) * stride.height < in.height + pad_b", "inputs[i] == inputs[0]", "\"abc_searchview_description_voice\" : \"Voice search\"", "calib3d::findFundamentalMat_13()", "calcFeatureMap", "GetRepeatedFloat", "predictTrees", "N7cvflann7anyimpl14big_any_policyINS0_9empty_anyEEE", "/home/vagrant/build/srclib/opencv/modules/core/src/convert_c.cpp", "UpgradeV0PaddingLayers", "Ca].\\.[/[0\\1]1^0^.],[+Y+W,U.T0S3R:QJQjPsOv \\/\\0]0]/\\/ R:Rj U.T1S:SZRjQqPtOvMxKyIyGxFvFtGsHsItIuHvGv GtGuHuHtGt", "int cv::opt_AVX2::(anonymous namespace)::MorphColumnVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_int16x16> >::operator()(const uchar **, uchar *, int, int, int) const [VecUpdate = cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_int16x16>]", "CL_INVALID_MEM_OBJECT", "BruteForce-SL2", "\"search_menu_title\" : \"Keres\u00e9s\"", "No frame buffer specified as pixel data destination.", "Read failed on temporary file", "OpenCV TIFF: failed TIFFSetField(tif, TIFFTAG_PREDICTOR, predictor)", "G[GJGLHOIQLTNUQVUVXUZT[S[QZPXOUNQNNOLPISHUGXGZ", "layers", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphColumnFilter<cv::cpu_baseline::(anonymous namespace)::MinOp<unsigned short>, cv::cpu_baseline::(anonymous namespace)::MorphColumnVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_uint16x8> > >::operator()(const uchar **, uchar *, int, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MinOp<unsigned short>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphColumnVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_uint16x8> >]", "N2cv3dnn14dnn4_v2019012210SplitLayerE", "dpos == 486", "SetEnum", "N2cv18ipp_resizeParallelE", "photo::createTonemapMantiuk_12()", "\\x%02x", "virtual bool cv::TiffEncoder::write(const cv::Mat &, const std::vector<int> &)", "nimages > 0", "cvMulSpectrums", "\"abc_searchview_description_query\" : \"\u10eb\u10d8\u10d4\u10d1\u10d8\u10e1 \u10db\u10dd\u10d7\u10ee\u10dd\u10d5\u10dc\u10d0\"", "CV_IS_SEQ_CHAIN_CONTOUR( chain )", "SetFloat", "min_value", "No space to expand strip arrays", "img0.size() == img1.size()", "The index saved belongs to a different dataset", "usage_count == 0", "batchMode", "-+xX0123456789abcdef0123456789ABCDEF", "!m_tif.empty()", "Unsupported format or combination of formats", "levels2 >= 0", "N2cv12cpu_baseline12_GLOBAL__N_19SqrRowSumIhdEE", "void cv::hal::opt_SSE4_1::min16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int)", "std::exception", "__cxa_guard_release failed to acquire mutex", "cvGetMatND", "\"abc_searchview_description_submit\" : \"L\u00e4het\u00e4 kysely\"", "CaGO]OXI L[GU]U", "void cv::groupRectangles(std::vector<Rect> &, int, double)", "Linear", "png_set_filler is invalid for low bit depth gray output", "/home/vagrant/build/srclib/opencv/modules/core/src/types.cpp", "E_YGXHYIZHYGWFTFQGOINKMNLRJ[I_Ha TFRGPIOKNNLWK[J^I`HaFbDbCaC`D_E`Da _G^H_I`H`G_F]F[GZHYJXMU[T_Sa ]F[HZJYNWWV[U^T`SaQbObNaN`O_P`Oa IM^M", "I[LKLJMHNGPFTFVGWHXJXLWNVORQRT RYQZR[SZRY", "F_JM[M[N JMJN[N JU[U[V JUJV[V", "features2d::setExtended_10()", "core::subtract_10()", "void cv::hal::cpu_baseline::mul32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, const double *)", "N2cv24ipp_resizeAffineParallelE", "icvFindBasicVariables", "virtual void cv::flann::Index::release()", "The input arrays should be 2D or 3D point sets", "step must be greater than 0", "cv::impl::(anonymous namespace)::CvtHelper<cv::impl::(anonymous namespace)::Set<2, -1, -1>, cv::impl::(anonymous namespace)::Set<3, 4, -1>, cv::impl::(anonymous namespace)::Set<0, -1, -1>, cv::impl::(anonymous namespace)::SizePolicy::NONE>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::impl::(anonymous namespace)::Set<2, -1, -1>, VDcn = cv::impl::(anonymous namespace)::Set<3, 4, -1>, VDepth = cv::impl::(anonymous namespace)::Set<0, -1, -1>, sizePolicy = cv::impl::(anonymous namespace)::SizePolicy::NONE]", "Cannot lock mutex (%T).", "Only spatial reflection padding is supported.", "cv::impl::(anonymous namespace)::CvtHelper<cv::impl::(anonymous namespace)::Set<3, 4, -1>, cv::impl::(anonymous namespace)::Set<3, -1, -1>, cv::impl::(anonymous namespace)::Set<0, 5, -1>, cv::impl::(anonymous namespace)::SizePolicy::NONE>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::impl::(anonymous namespace)::Set<3, 4, -1>, VDcn = cv::impl::(anonymous namespace)::Set<3, -1, -1>, VDepth = cv::impl::(anonymous namespace)::Set<0, 5, -1>, sizePolicy = cv::impl::(anonymous namespace)::SizePolicy::NONE]", "LXOYQXRWSUSSRRQROSNTMVMXNZP[S[VYXV QROTNVNYP[", "imgproc::createLineSegmentDetector_12()", "(unsigned)ptidx < (unsigned)points.rows", "\"abc_capital_off\" : \"\u0412\u0418\u041c\u041a.\"", "G]RQQNPMNMLNKOJRJUKXMZP[T[WZYXZUZRYOXNVMTMSNRQ LOKRKULX XXYUYRXO NMMNLQLVMYNZP[ T[VZWYXVXQWNVM RQQb RQRa RQSb QbSb", "\"abc_activitychooserview_choose_application\" : \"Aukeratu aplikazio bat\"", "maskShape[i] >= -1", "dnn::readNetFromTensorflow_13()", "MWUMQV OMUM", "photo::setRandom_10()", "void cv::cpu_baseline::cvt16f8s(const cv::float16_t *, size_t, uchar *, size_t, schar *, size_t, cv::Size, void *)", "dnn::forward_14()", "InputOutputArray:", "\"abc_action_bar_home_description\" : \"Mag-navigate patungo sa home\"", "features2d::setDelta_10()", "findOrthoRange", "OPENCV_TRACE_MAX_CHILDREN_OPENCV", "ml::setLayerSizes_10()", "%s:%d %s", "photo::illuminationChange_10()", "\"abc_searchview_description_clear\" : \"\u0218terge\u021bi interogarea\"", "I[KFYF OPUP K[Y[", "calib3d::undistort_11()", "N2cv10ParseErrorE", "u->origdata == NULL", "\"abc_capital_off\" : \"UIT\"", "NSt6__ndk120__shared_ptr_pointerIPN2cv12LBPEvaluatorENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "void cv::hal::cvtGraytoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, int)", "virtual cv::Point cv::AlignMTBImpl::calculateShift(cv::InputArray, cv::InputArray)", "\" uses the same enum value as \"", "NSt6__ndk112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE", "L?fff?", "bilateralFilter_32f", "getInferenceEngineVPUType", "NSt6__ndk120__shared_ptr_emplaceIN2cv19EMEstimatorCallbackENS_9allocatorIS2_EEEE", "Ptr<cv::BaseRowFilter> cv::opt_AVX2::getRowSumFilter(int, int, int, int)", "MWMWWM", "estimateNewCameraMatrixForUndistortRectify", "_kernel.channels() == 1", "getProg", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::RGBA2mRGBA<uchar> >::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::RGBA2mRGBA<uchar>]", "void cv::hal::cpu_baseline::sub16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int)", "MWMRMSNUOVQWSWUVVUWSWR", "Required fields are not allowed in proto3.", "accumulateSquare", "Out of memory reading of \"%s\"", "type == CV_32F || type == CV_64F", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_16RowSumIddEENS_9allocatorIS5_EEEE", "calib3d::estimateAffinePartial2D_12()", "N2cv3dnn15ConcatLayerImpl20ChannelConcatInvokerE", "ippIP AVX2 (l9)", "I[TKQ\\ UKP\\ JRKPLONOOPOVPWSWUVWT MONPNTOWPXSXUWWTXRYO", " dims(0)=%d", "scn + 1 == m.cols", "channels == 3 || channels == 1", "/home/vagrant/build/srclib/opencv/modules/core/src/cuda_host_mem.cpp", "virtual void cv::MatOp::add(const cv::MatExpr &, const cv::MatExpr &, cv::MatExpr &) const", "\"abc_searchview_description_submit\" : \"\u0421\u043b\u0430\u045a\u0435 \u0443\u043f\u0438\u0442\u0430\"", "imgproc::calcBackProject_10()", "cv::dnn::dnn4_v20190122::LayerData::LayerData(int, const cv::String &, const cv::String &, cv::dnn::dnn4_v20190122::LayerParams &)", "core::batchDistance_14()", "N2cv12cpu_baseline12ColumnFilterINS0_4CastIdtEENS0_11ColumnNoVecEEE", "\"search_menu_title\" : \"Paie\u0161ka\"", "\"abc_search_hint\" : \"\u041f\u043e\u0438\u0441\u043a\"", "N9IlmThread12_GLOBAL__N_112WorkerThreadE", "__opencv_temp.XXXXXX", "int cv::opt_SSE4_1::(anonymous namespace)::MorphColumnVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_float32x4> >::operator()(const uchar **, uchar *, int, int, int) const [VecUpdate = cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_float32x4>]", "predict", "!_seq || _seq->elem_size == sizeof(_Tp)", "photo::createAlignMTB_12()", "calib3d::solvePnPRansac_15()", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::Gray2RGB<unsigned char> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::Gray2RGB<unsigned char>]", "void cv::setWindowProperty(const cv::String &, int, double)", "Too many bytes for PNG signature", "marginRegularization", "Error in Huffman-encoded data (invalid code table size).", "\"abc_capital_on\" : \"\uc0ac\uc6a9\"", "Cannot set minutes field in time code. New value is out of range.", "NSt6__ndk120__shared_ptr_emplaceINS_6vectorIhNS_9allocatorIhEEEENS2_IS4_EEEE", "static void EllipticKeyPoint::convert(const std::vector<KeyPoint> &, std::vector<EllipticKeyPoint> &)", "POSIX", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/median_blur.simd.hpp", "BlockLSTM", "D`RFNOKUIXGZE[C[BZBXCWDXCY RFPMOQNVNZP[ RFQJPOOVOZP[ [FWORXP[ [FYMXQWVWZY[Z[\\Z^X [FZJYOXVXZY[", "base64 data is not supported", "imgWidth == frameWidth && imgHeight == frameHeight && channels == 3", "\"search_menu_title\" : \"Leita\"", "total(inputs[0]) == total(inputs[1])", "N2cv3dnn16ElementWiseLayerINS0_11BNLLFunctorEE5PBodyE", "psRoiOutChannels * pooledSize.width * pooledSize.height == inputs[0][1]", "virtual void cv::cpu_baseline::(anonymous namespace)::ColumnSum<int, int>::operator()(const uchar **, uchar *, int, int, int)", "cvGetSeqReaderPos", "convertToGLTexture2D", "virtual void cv::opt_SSE4_1::RowFilter<double, double, cv::opt_SSE4_1::RowNoVec>::operator()(const uchar *, uchar *, int, int) [ST = double, DT = double, VecOp = cv::opt_SSE4_1::RowNoVec]", "NMSFast_", "G^VGUHVIWHWGUFRFOGMILLL[ RFPGNIMLM[ \\G[H\\I]H]G\\FZFXGWIW[ ZFYGXIX[ IM[M I[P[ T[[[", "calib3d::fisheye_1stereoRectify_12()", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/colormap.cpp", "fs->eof()", "Unsupported format of the input image", "dnn::getLayer_10()", "DCT coefficient out of range", "\"search_menu_title\" : \"\uac80\uc0c9\"", "\"abc_action_bar_home_description\" : \"\u0414\u0432\u0438\u0436\u0438 \u0441\u0435 \u043a\u043e\u043d \u0434\u043e\u043c\u0430\"", "svec[j].size == dst.size && svec[j].depth() == dst.depth() && svec[j].channels() == 1 && i < dst.channels()", "calib3d::solvePnPRansac_14()", "AVX512IFMA", "virtual void cv::dnn::CropAndResizeLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "\"search_menu_title\" : \"Axtar\u0131\u015f\"", "cvSetReal2D", "load ", "CL_PLATFORM_NOT_FOUND_KHR", "core::multiply_15()", "N2cv12cpu_baseline9RowFilterIffNS0_10RowVec_32fEEE", "histogramNormType", "size == -1 || size > 0", "N2cv3ocl15OpenCLAllocatorE", "\"abc_capital_off\" : \"IMEZIMWA\"", "void cv::perspectiveTransform(cv::InputArray, cv::OutputArray, cv::InputArray)", "dst.u", "void cv::hal::cpu_baseline::cvtBGRtoGray(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool)", "photo::detailEnhance_12()", "/home/vagrant/build/srclib/opencv/modules/core/src/out.cpp", "photo::fastNlMeansDenoising_14()", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::Luv2RGB_b>::operator()(const cv::Range &) const [Cvt = cv::Luv2RGB_b]", "Invalid IHDR data", "Output matrix must be 3x3, single-channel floating point matrix", "GainControl", "Invalid YCbCr subsampling (%dx%d)", "s.rows == 4 && s.cols == 1", "cvStartReadSeq", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml10KDTreeImplENS_9allocatorIS3_EEEE", "Tile %lu out of range, max %lu", "\"abc_searchview_description_voice\" : \"\u0a35\u0a4c\u0a07\u0a38 \u0a16\u0a4b\u0a1c\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_19ColumnSumIthEENS_9allocatorIS5_EEEE", "H\\LFL[M[ LFMFM[ MPONQMTMVNXPYSYUXXVZT[Q[OZMX MPQNTNVOWPXSXUWXVYTZQZMX", "objdetect::get_1svmDetector_10()", "core::normalize_12()", "video::get_1statePost_10()", "\"abc_searchview_description_clear\" : \"Vee navraag uit\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml14BruteForceImplENS_9allocatorIS3_EEEE", "N2cv10opt_SSE4_19RowFilterItdNS0_8RowNoVecEEE", "Create_Nonlinear_Scale_Space", "void cv::dnn::dnn4_v20190122::Net::setPreferableTarget(int)", "Tried to read scan line outside the image file's data window.", "numpos > 0", "N2cv24HomographyRefineCallbackE", "inputDimension", "IPP:(ipp_pyrup( _src, _dst, _dsz, borderType))", "AddInt64", " Parameter to BackUp() can't be negative.", "cn == CV_MAT_CN(dstType) && ddepth >= sdepth", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline8Filter2DIhNS2_4CastIfsEENS2_15FilterVec_8u16sEEENS_9allocatorIS7_EEEE", "Could not find location predictions for label %d", "[WARNING] The cvflann::set_distance_type function is deperecated, use cv::flann::GenericIndex<Distance> instead.", "bias_data", "\"abc_action_menu_overflow_description\" : \"Vair\u0101k opciju\"", "Memory mapped files not currently supported for this operation.", "(int)CAP_PROP_BACKEND", "Invalid tile size in image header.", "blobs.size() == 3", "mat.type() == type()", "\"abc_activity_chooser_view_see_all\" : \"\u67e5\u770b\u5168\u90e8\"", "Only NHWC <-> NCHW permutations are allowed.", "features2d::radiusMatch_15()", "\"abc_searchview_description_clear\" : \"\u092a\u094d\u0930\u0936\u094d\u200d\u0928 \u0939\u091f\u093e\u0909\u0928\u0941\u0939\u094b\u0938\u094d\"", "N2cv22FindKeypointsSameScaleE", "parallelForSetRootRegion", "N2cv3hal10opt_SSE4_112_GLOBAL__N_119YUV422toRGB8InvokerILi2ELi0ELi1ELi3EEE", "IPP:ipp_getThreshVal_Otsu_8u(_src.ptr(), step, size, thresh)", "H]SFPGOHNJNMOOQPTPXOYNZLZIYGVFSF SFQGPHOJOMPOQP TPWOXNYLYIXGVF QPMQKSJUJXKZN[R[VZWYXWXTWRVQTP QPNQLSKUKXLZN[ R[UZVYWWWSVQ", "OPENCV_VIDEOIO_DEBUG", "NSt6__ndk120__shared_ptr_emplaceIN2cv15MatlabFormatterENS_9allocatorIS2_EEEE", "CL_INVALID_KERNEL_NAME", "/home/vagrant/build/srclib/opencv/modules/core/src/stat_c.cpp", "dst.data != srcB.data", "PFvPvE", "LeakyRelu", "Samples per pixel is zero", "Valid XML should start with '<?xml ...?>'", "V1LayerParameter", "NSt6__ndk120__shared_ptr_emplaceIN2cv16AVIReadContainerENS_9allocatorIS2_EEEE", "input_dims", "\"abc_shareactionprovider_share_with_application\" : \"%s \u0915\u0947 \u0938\u093e\u0925 \u0938\u093e\u091d\u093e \u0915\u0930\u0947\u0902\"", "cv::Mat cv::ml::getSubMatrixImpl(const cv::Mat &, const cv::Mat &, int) [T = double]", "\"abc_toolbar_collapse_description\" : \"Ahendamine\"", "virtual void cv::opt_AVX2::SymmColumnFilter<cv::opt_AVX2::Cast<float, unsigned char>, cv::opt_AVX2::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::Cast<float, unsigned char>, VecOp = cv::opt_AVX2::ColumnNoVec]", "virtual void cv::dnn::LSTMLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "N2cv8colormap6SpringE", "cvGetDims", "concat_%d", "imgproc::ellipse_11()", "__itt_event_create", "F]OFI[ PFJ[ ]FLS SOW[ ROV[ LFSF YF_F F[M[ S[Y[", "decomposeCovs", "N2cv10XMLEmitterE", "CHECK failed: result != NULL: ", "lowerBound.size == upperBound.size && lowerBound.isContinuous() && upperBound.isContinuous() && lowerBound.type() == upperBound.type() && lowerBound.type() == CV_32F && lowerBound.total() == (size_t)ptdims", "virtual void cv::opt_AVX2::ColumnFilter<cv::opt_AVX2::Cast<float, unsigned char>, cv::opt_AVX2::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::Cast<float, unsigned char>, VecOp = cv::opt_AVX2::ColumnNoVec]", "\" not previously defined in symbols_by_name_, but was defined in symbols_by_parent_; this shouldn't be possible.", "ml::trainEM_13()", "N12opencv_caffe14ScaleParameterE", "CL_DEVICE_NOT_AVAILABLE", "\"abc_capital_on\" : \"\u0b87\u0baf\u0b95\u0bcd\u0b95\u0bc1\"", " %02x", "ulong4", "void cv::distanceTransform(cv::InputArray, cv::OutputArray, int, int, int)", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/filterengine.hpp", "output training data should be a floating-point matrix with the number of rows equal to the number of training samples and the number of columns equal to the size of last (output) layer", "The state of the promise has already been set.", "N2cv3dnn14dnn4_v2019012230DeconvolutionSameKerasSubgraphE", "delete ", "video::getVarThreshold_10()", "writeScalar", "): failed TIFFSetField(tif, TIFFTAG_SAMPLESPERPIXEL, 3)", "line.size() == seeds.size()", "int cv::opt_SSE4_1::(anonymous namespace)::MorphRowVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_int16x8> >::operator()(const uchar *, uchar *, int, int) const [VecUpdate = cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_int16x8>]", "Expected string, got: ", "JZMMMSNUOVQWSWUVVUWSWM", "calib3d::findChessboardCorners_10()", "__itt_heap_allocate_end", "DaIMI[ JMJ[ FMMM F[M[ VMSNQPPSPUQXSZV[X[[Z]X^U^S]P[NXMVM VMTNRPQSQURXTZV[ X[ZZ\\X]U]S\\PZNXM JTPT", "N2cv12cpu_baseline9RowFilterIhiNS0_12RowVec_8u32sEEE", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_19HLS2RGB_fEEE", "H]TJO[Q[ WFUJP[ WFQ[ WFTIQKOL TJRKOL", "N2cv12cpu_baseline12_GLOBAL__N_111MorphFilterINS1_5MaxOpIdEENS1_10MorphNoVecEEE", "void cv::mulSpectrums(cv::InputArray, cv::InputArray, cv::OutputArray, int, bool)", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX216SymmColumnFilterINS2_4CastIdhEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "gammaCorrection", "  => result: ", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphRowFilter<cv::opt_AVX2::(anonymous namespace)::MaxOp<unsigned short>, cv::opt_AVX2::(anonymous namespace)::MorphRowVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_uint16x16> > >::operator()(const uchar *, uchar *, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MaxOp<unsigned short>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphRowVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_uint16x16> >]", "/home/vagrant/build/srclib/opencv/modules/core/src/merge.dispatch.cpp", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_9RGB2HLS_fEEE", "Copyright (C) 1991-2019 The libjpeg-turbo Project and many others", "void cv::cpu_baseline::GaussianBlurFixedPoint(const cv::Mat &, cv::Mat &, const uint16_t *, int, const uint16_t *, int, int)", "Video I/O: plugin is incompatible: ", "input.dims == 4 && (input.type() == CV_32F || input.type() == CV_64F || input.type() == CV_16S)", "AVX512VL", "sCAL width", "virtual void cv::cpu_baseline::(anonymous namespace)::ColumnSum<double, float>::operator()(const uchar **, uchar *, int, int, int) [ST = double, T = float]", "void cv::hal::sub8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, void *)", "a_size.height == len", "getInitialPoints", "terminate_handler unexpectedly threw an exception", "getPerspectiveTransform", "m0_4@", "invalid rendering intent", "src1.size()==src4.size()", "upsample_%d", "\"abc_capital_off\" : \"V\u00c4LJAS\"", "PlanarConfiguration", "/home/vagrant/build/srclib/opencv/modules/core/src/matrix_decomp.cpp", "Wrote palette index exceeding num_palette", "cv::dnn::dnn4_v20190122::Net cv::dnn::dnn4_v20190122::readNetFromTorch(const cv::String &, bool, bool)", "void cv::hal::opt_AVX2::merge64s(const int64 **, int64 *, int, int)", "virtual void cv::AlignMTBImpl::computeBitmaps(cv::InputArray, cv::OutputArray, cv::OutputArray)", "num * numPlanes != 0", "%s: Error fetching directory link", "imgproc::fillConvexPoly_10()", "No IDATs written into file", "out-of-date sRGB profile with no signature", "22AndroidMediaNdkCapture", "PageNumber", "void cv::hal::opt_SSE4_1::cvtHSVtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool, bool, bool)", "vdExp", "\"abc_search_hint\" : \"Pretra\u017eite\u2026\"", "buffer. Use the 'bytes' type if you intend to send raw ", "N6google8protobuf8internal12MapEntryImplIN17opencv_tensorflow35FunctionDef_Node_AttrEntry_DoNotUseENS0_7MessageENSt6__ndk112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSF_11ELi0EEE", "dcount1 <= desc_size*8", "SpatialFullConvolution", "The network has not been trained or loaded", "check training parameters. Invalid training classifier", "aveval", "video::calc_11()", "processSpecialDouble", "PUSVRVRUSUSWRY", "calib3d::fisheye_1stereoRectify_13()", "IPP:(ipp_cornerHarris( src, dst, blockSize, ksize, k, borderType ))", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/bilateral_filter.simd.hpp", "CL_INVALID_PROGRAM_EXECUTABLE", "virtual void cv::ml::ParallelCalcError::operator()(const cv::Range &) const", "sCos_LA", "cvSeqSearch", "findSplitCatClass", "\"abc_action_menu_overflow_description\" : \"\u0c2e\u0c30\u0c3f\u0c28\u0c4d\u0c28\u0c3f \u0c0e\u0c02\u0c2a\u0c3f\u0c15\u0c32\u0c41\"", "F_KFK[ LFRX KFR[ YFR[ YFY[ ZFZ[ HFLF YF]F H[N[ V[][", "edgeDst(e) == edgeDst(d_next)", "Sorry, can not handle image", "compareHist", "void cv::flip(cv::InputArray, cv::OutputArray, int)", "N7cvflann14AutotunedIndexINS_2L1IfEEEE", "\"abc_capital_off\" : \"VALIWE\"", "core::cubeRoot_10()", "__itt_counter_dec_v3", "cv::Exception", "Not enough data at row %lu (short %llu pixels)", "virtual void cv::BackgroundSubtractorKNNImpl::apply(cv::InputArray, cv::OutputArray, double)", "InputOutputArray: noArray()", "N2cv12cpu_baseline8Filter2DIhNS0_4CastIfsEENS0_15FilterVec_8u16sEEE", "maxidx", "Groups are not supported in proto3 syntax.", "int cv::opt_SSE4_1::(anonymous namespace)::MorphRowVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_uint8x16> >::operator()(const uchar *, uchar *, int, int) const [VecUpdate = cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_uint8x16>]", "RVRRUPVNVLUKTK", "Unsupported YAML version (it must be 1.x)", "scaling2 != 0", "\"abc_activitychooserview_choose_application\" : \"Velg en app\"", "Unknown pool method ", "int cv::cpu_baseline::(anonymous namespace)::MorphRowVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_uint16x8> >::operator()(const uchar *, uchar *, int, int) const [VecUpdate = cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_uint16x8>]", "too many unknown chunks", "Mat::n_1inv__J()", "The key is too long", "vecarr != 0", "ptr is NULL", "In global_pooling mode, pads must be = 0, and stride_h and stride_w must be = 1", "void cv::cpu_baseline::cvt16u32f(const ushort *, size_t, uchar *, size_t, float *, size_t, cv::Size, void *)", "operator&", "?   ?$$$?(((?,,,?000?444?888?<<<?@@@?DDD?HHH?LLL?PPP?TTT?XXX?\\\\\\?```?ddd?hhh?lll?ppp?ttt?xxx?|||?", "RGBE read error", "opoints.depth() == CV_32F || opoints.depth() == CV_64F", "scale > 0", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphColumnFilter<cv::cpu_baseline::(anonymous namespace)::MinOp<unsigned char>, cv::cpu_baseline::(anonymous namespace)::MorphColumnVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_uint8x16> > >::operator()(const uchar **, uchar *, int, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MinOp<unsigned char>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphColumnVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_uint8x16> >]", "dst.total() == dst.size[0] * p.channels * p.planeSize", "cvLUT", "The upper boundary is neither an array of the same size and same type as src, nor a scalar", "I\\WFRWQYO[ XFTSSVRX YFUSSXQZO[M[KZJXJVKULUMVMWLXKX KVKWLWLVKV TF\\F UFXG VFWH ZFXH [FXG", "inputs[0].total() == outputs[i].total()", "stold", "_globalsize != NULL", "video::create_13()", "inbuf", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphFilter<cv::cpu_baseline::(anonymous namespace)::MinOp<double>, cv::cpu_baseline::(anonymous namespace)::MorphNoVec>::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MinOp<double>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphNoVec]", "virtual void cv::dnn::dnn4_v20190122::UpsamplingKerasSubgraph::finalize(tensorflow::GraphDef &, tensorflow::NodeDef *, std::vector<tensorflow::NodeDef *> &)", "Invalid component ID %d in SOS", "N2cv3dnn14dnn4_v2019012220ReshapeKerasSubgraphE", "Shortcut-name", "Point sequence can not be empty if the output is matrix", "cv::argsort only sorts 1D matrices.", "void cv::hal::opt_AVX2::sub8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int)", "main_element should be 0, 1, 2 or 3", "dnn::blobFromImage_13()", "void cv::hal::split32s(const int *, int **, int, int)", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/descriptor.pb.cc", "void cv::HOGDescriptor::groupRectangles(std::vector<cv::Rect> &, std::vector<double> &, int, double) const", "Invalid histogram header[s]", "void cv::hal::opt_SSE4_1::sub8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "virtual void cv::opt_SSE4_1::(anonymous namespace)::RowSum<short, int>::operator()(const uchar *, uchar *, int, int) [T = short, ST = int]", "attribute type name", "ProfileType", "N11opencv_onnx26TensorShapeProto_DimensionE", "\"abc_searchview_description_query\" : \"Otsingup\u00e4ring\"", "NSt6__ndk114__codecvt_utf8IwEE", "ONNXImporter", "feature", "the input arrays are too big", "calib3d::findHomography_13()", "H]TBL_ YBQ_ ZKZJYJYL[L[JZHYGVFRFOGMIMLNNPPVSWUWXVZ NLONVRWT OGNINKOMUPWRXTXWWYVZS[O[LZKYJWJULULWKWKV", "_point.type() == CV_32FC2 || _point.type() == CV_32SC2", "profile '", "calib3d::solvePnPRansac_16()", "_ipoints.needed()", "video::setHistory_10()", "KYLPMPNQNRMTMUNVPVQURSSP RSRUSVUVVUWRWP", "int cv::cpu_baseline::sqsum64f(const double *, const uchar *, double *, double *, int, int)", "virtual void cv::opt_AVX2::SymmColumnFilter<cv::opt_AVX2::Cast<double, unsigned char>, cv::opt_AVX2::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::Cast<double, unsigned char>, VecOp = cv::opt_AVX2::ColumnNoVec]", "dnn::outputNameToIndex_10()", "std::__libcpp_tls_set failure in __cxa_get_globals()", "G[LFL[ MFM[ SLST IFYFYLXF MPSP I[P[", "ReadProtoFromTextFile(param_file, param)", "rotnorm[i].total() == 3", "imgproc::minAreaRect_10()", "Java_org_opencv_android_Utils_nBitmapToMat2", "TIFFReadCustomDirectory", "cvHoughCircles", "points.size() == seeds.size()", "codecvt_byname<wchar_t, char, mbstate_t>::codecvt_byname failed to construct for ", "useLogistic || useSoftmax", "inputs_[i] < (int)nodes.size()", "void cv::hal::opt_AVX2::max32s(const int *, size_t, const int *, size_t, int *, size_t, int, int)", "src1.type() == src2.type()", "/home/vagrant/build/srclib/opencv/modules/features2d/src/keypoint.cpp", "\"search_menu_title\" : \"\u0e8a\u0ead\u0e81\u0eab\u0eb2\"", "knnMatches[i].size() <= 1", "\"abc_action_bar_up_description\" : \"\u0bae\u0bc7\u0bb2\u0bc7 \u0bb5\u0bb4\u0bbf\u0b9a\u0bc6\u0bb2\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1\"", "pt1 && pt2", "N2cv3dnn20ConvolutionLayerImplE", "Invalid key code perforation offset (must be between 0 and 119).", "createLinearFilter", "__NetInputLayer__", "VIDEOIO: Enabled backends(", "IZWVUTSQROQLQIRGSFUFVGWIWLVQTVSXQZO[M[KZJXJVKUMUOV", "dst.rows == data.rows", "getDistanceTransformMask", "video::writeOpticalFlow_10()", "read error: read 0 blocks instead of 1", "/home/vagrant/build/srclib/opencv/modules/features2d/src/orb.cpp", "\"abc_action_bar_home_subtitle_description_format\" : \"%1$s, %2$s, %3$s\"", "F^LLKKKIMGPFRFOQMWLYKZI[G[FZFXGWHXGY RFOONRLWKYI[ ZGWKUMSNPO ]G\\H]I^H^G]F\\FZGWLVMTNPO POSPTRUYV[ PORPSRTYV[W[YZ[X", "retainedVariance > 0 && retainedVariance <= 1", "N2cv7TLSDataINS_5utils5trace7details23TraceManagerThreadLocalEEE", "cvCopy", "void cv::hal::opt_AVX2::merge8u(const uchar **, uchar *, int, int)", "\"abc_action_bar_up_description\" : \"\u8f6c\u5230\u4e0a\u4e00\u5c42\u7ea7\"", "void cv::calcHist(const cv::Mat *, int, const int *, cv::InputArray, cv::SparseMat &, int, const int *, const float **, bool, bool)", "LWRMPTOXOZP[R[TYUW", "MXTHSIRIQHQGRFSFTGTJSLQM RGRHSHSGRG SITJ THSL", "nearest", "type == icovar.type()", "void cv::hal::cpu_baseline::and8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "25TegraRowOp_split4_InvokerIKxxE", "NSt6__ndk116__narrow_to_utf8ILj16EEE", "void cv::hal::cpu_baseline::cmp64f(const double *, size_t, const double *, size_t, uchar *, size_t, int, int, int)", "CL_INVALID_SAMPLER", "NWRORX SOSX POSO PXUX", "sumCount == ksize-1", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2RGB<float> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2RGB<float>]", "N6google8protobuf12_GLOBAL__N_123GeneratedMessageFactoryE", "N2cv15IBackendFactoryE", "I[MFM[ NGN[M[ MFYF NGYGYF NPTPTQ NQTQ", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_117MorphColumnFilterINS3_5MaxOpIhEENS3_14MorphColumnVecINS3_4VMaxINS1_10hal_SSE4_110v_uint8x16EEEEEEENS_9allocatorISD_EEEE", "iTXt: invalid compression", "int cv::opt_AVX2::sqsum16s(const short *, const uchar *, int *, double *, int, int)", "\"abc_capital_on\" : \"\u099a\u09be\u09b2\u09c1\"", "calib3d::getPreFilterType_10()", "virtual void cv::TonemapReinhardImpl::process(cv::InputArray, cv::OutputArray)", "getHostMemRef", "addColumnRight", "No space for SGILog translation buffer", "void cv::opt_AVX2::cvt16u(const ushort *, size_t, uchar *, size_t, ushort *, size_t, cv::Size, void *)", "\"abc_shareactionprovider_share_with_application\" : \"Partager avec %s\"", "core::patchNaNs_11()", "need_mask", "G]IL[b", "calib3d::estimateAffine2D_16()", "\"abc_activity_chooser_view_see_all\" : \"\u03a0\u03c1\u03bf\u03b2\u03bf\u03bb\u03ae \u03cc\u03bb\u03c9\u03bd\"", "int cv::rotatedRectangleIntersection(const cv::RotatedRect &, const cv::RotatedRect &, cv::OutputArray)", "GentleAdaboost", "Iterations do not converge", "!lp.blobs[0].empty()", "int cv::opt_SSE4_1::RowVec_8u32s::operator()(const uchar *, uchar *, int, int) const", "CropAndResizeLayerImpl", "E_LPIRLT OMJROW JR[R", "\"abc_shareactionprovider_share_with\" : \"\u039a\u03bf\u03b9\u03bd\u03ae \u03c7\u03c1\u03ae\u03c3\u03b7 \u03bc\u03b5\"", "addHost", "epsilon", "FileOptions", "string literal", "St11range_error", "N12_GLOBAL__N_123ParallelLoopBodyWrapperE", "npoints2 >= 0 || npoints3 >= 0", "initCompVarIdx", "Wrong bitspersample value (%d), Thunder decoder only supports 4bits per sample.", "drawMatches", "void cv::accumulateWeighted(cv::InputArray, cv::InputOutputArray, double, cv::InputArray)", "The histograms have different sizes", "int cv::cpu_baseline::FilterEngine__start(cv::FilterEngine &, const cv::Size &, const cv::Size &, const cv::Point &)", "\"abc_activity_chooser_view_see_all\" : \"\u0633\u0628\u06be\u06cc \u062f\u06cc\u06a9\u06be\u06cc\u06ba\"", "ml::getP_10()", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::YCrCb2RGB_i<ushort> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::YCrCb2RGB_i<ushort>]", "virtual void cv::ml::DTreesImplForRTrees::readParams(const cv::FileNode &)", "void cv::hal::opt_SSE4_1::addWeighted32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, const double *)", "reference temporary for ", "End Of Image", "File can't be opened for reading!", "outer_size", "\"abc_searchview_description_query\" : \"Zoekopdracht\"", "stoull", "Warning: had one or more problems upgrading ", "cvCloneSparseMat", "\"search_menu_title\" : \"\u0e04\u0e49\u0e19\u0e2b\u0e32\"", "\"abc_shareactionprovider_share_with_application\" : \"Delen met %s\"", "operator+", "\"abc_toolbar_collapse_description\" : \"\u10d0\u10d9\u10d4\u10ea\u10d5\u10d0\"", "N2cv11WBaseStreamE", "void cv::hal::opt_AVX::invSqrt64f(const double *, double *, int)", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_11RGB2YCrCb_iItEEEE", "unspecified iostream_category error", "fuseLayers", "virtual void cv::opt_SSE4_1::ColumnFilter<cv::opt_SSE4_1::Cast<double, short>, cv::opt_SSE4_1::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::Cast<double, short>, VecOp = cv::opt_SSE4_1::ColumnNoVec]", "radius", "void cv::hal::log32f(const float *, float *, int)", "TIFFMergeFieldInfo", "\"abc_searchview_description_search\" : \"\u0e8a\u0ead\u0e81\u0eab\u0eb2\"", "\"abc_searchview_description_clear\" : \"\u0418\u0441\u0447\u0438\u0441\u0442\u0438 \u0431\u0430\u0440\u0430\u045a\u0435\"", "\"abc_searchview_description_voice\" : \"Raddleit\"", "No default value", "virtual bool cv::WebPDecoder::readHeader()", "photo::colorChange_11()", "connectedComponentsWithStats", "png_image_begin_read_from_stdio: invalid argument", "NSt6__ndk114default_deleteIN2cv14StereoSGBMImplEEE", "virtual void cv::opt_AVX2::SymmColumnFilter<cv::opt_AVX2::Cast<float, unsigned short>, cv::opt_AVX2::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::Cast<float, unsigned short>, VecOp = cv::opt_AVX2::ColumnNoVec]", "CL_INVALID_ARG_SIZE", "C`DQEOGMJMKNKQIWIYK[ IMJNJQHWHYIZK[M[OZQXRV TMRVRYSZU[W[YZ[X\\V]R]M\\M]O UMSVSYU[", "video::create_16()", "Video I/O: Can't release capture by plugin '", "K[UUTSRRPRNSMTLVLXMZO[Q[SZ PRNTMVMYO[ VRPdPfQgSfTcT[V[YY[V WRT[R`Pd", "attribute_proto.ints_size() == 2", "libpng error: %s", "H\\YFO[ KFYF", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_10mRGBA2RGBAIhEEEE", "N7cvflann7anyimpl21typed_base_any_policyIdEE", "void cv::opt_AVX2::cvt64f16u(const double *, size_t, uchar *, size_t, ushort *, size_t, cv::Size, void *)", "src.type() == CV_8UC3 || src.type() == CV_8UC4", "function.proto", "!((flags & DFT_COMPLEX_INPUT) && src.channels() != 2)", "DeviceSettingDescription", "!params.has(\"begin\") && !params.has(\"size\") && !params.has(\"end\")", "Invalid crop request", "core::norm_12()", "    Expected  : ", "input training data should be a floating-point matrix with the number of rows equal to the number of training samples and the number of columns equal to the size of 0-th (input) layer", "objdetect::getDaimlerPeopleDetector_10()", "ecount0 <= ecount", "calib3d::findEssentialMat_111()", "N2cv12LMSolverImplE", "NSt6__ndk19__num_getIcEE", "hasBackend", "getMat", "I[LNXN LRXR LVXV", "pyrUp", "void cv::opt_AVX2::GaussianBlurFixedPoint(const cv::Mat &, cv::Mat &, const uint16_t *, int, const uint16_t *, int, int)", "Sorry, can not handle LogLuv images with %s=%d", "inpWidth", "N2cv8colormap6SummerE", "  Method      : google::protobuf::Reflection::", "__itt_task_begin_overlapped_ex", "tag count too large", "MXVFUFTGRT VGUGRT VGVHRT VFWGWHRT PXOYOZP[Q[RZRYQXPX PYPZQZQYPY", "\"abc_capital_on\" : \"\u0418\u0414\u042d\u0412\u0425\u0422\u042d\u0419\"", "W_hh.dims == 2 && W_xh.dims == 2", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIdEE", "\"abc_shareactionprovider_share_with\" : \"Partekatu hauekin\"", "imgproc::putText_12()", "sSinCos_A11", "calib3d::create_10()", "virtual void cv::opt_AVX2::(anonymous namespace)::ColumnSum<int, int>::operator()(const uchar **, uchar *, int, int, int)", "OpenCL runtime not found!", "\"abc_searchview_description_submit\" : \"\u091c\u093f\u091c\u094d\u091e\u093e\u0938\u093e \u092a\u0947\u0938 \u0917\u0930\u094d\u0928\u0941\u0939\u094b\u0938\u094d\"", "\"abc_capital_off\" : \"\u041e\u0422\u041a\u041b.\"", "cvProjectPoints2Internal", "?N2cv8colormap6ParulaE", "core::vconcat_10()", "KXRFRHTHTFRF SFSH RGTG RMR^QaPb SNS]R` OMTMT]S`RaPbMbLaL_N_NaMaM` PMRN QMRO", "void cv::hal::mul16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, void *)", "CHECK failed: (field->options().ctype()) == (ctype): ", "NSt6__ndk18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE", "G]LFL[ MFM[ IFUFXGYHZJZMYOXPUQMQ UFWGXHYJYMXOWPUQ I[Y[YVX[", "N2cv8opt_AVX29RowFilterItdNS0_8RowNoVecEEE", "j.current_task >= j.range.size()", "setMaskGenerator", "N2cv8opt_AVX212_GLOBAL__N_114MorphRowFilterINS1_5MaxOpItEENS1_11MorphRowVecINS1_4VMaxINS_8hal_AVX211v_uint16x16EEEEEEE", "G]PFNGLIKKJNJSKVLXNZP[T[VZXXYVZSZNYKXIVGTFPF", "int cv::opt_AVX2::sum8u(const uchar *, const uchar *, int *, int, int)", "void cv::BackgroundSubtractorMOG2Impl::getBackgroundImage_intern(cv::OutputArray) const [T = float, CN = 3]", "N2cv10HOGInvokerE", "N7cvflann8LshIndexINS_10HammingLUTEEE", "CHECK failed: (type) == (WireFormatLite::TYPE_ENUM): ", "\"abc_searchview_description_voice\" : \"C\u0103utare vocal\u0103\"", ") : (", "void cv::details::FastX::calcFeatureMap(const cv::Mat &, cv::Mat &) const", "unknown morphological operation", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX28Filter2DIhNS2_4CastIfsEENS2_15FilterVec_8u16sEEENS_9allocatorIS7_EEEE", "from_str", "Identity-name", "imgproc::accumulate_10()", "Error decompressing data (input data are shorter than expected).", "virtual void cv::MatOp::abs(const cv::MatExpr &, cv::MatExpr &) const", "30TegraCvtColor_rgb2gray_Invoker", "The total number of matrix elements is not divisible by the new number of rows", "k == CUDA_HOST_MEM", "concat", "video::setPolySigma_10()", "J[XPWNTMQMNNMPNRPSUTWUXWXXWZT[Q[NZMX", "KYPMTW TMPW MPWT WPMT", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/elementwise_layers.cpp", "CL_INVALID_IMAGE_FORMAT_DESCRIPTOR", "ml::setAnnealInitialT_10()", "OpenCV version 2.0.2 (build opencv-4.1.0-libjpeg-turbo)", "!mat.empty()", "Mat::n_1inv__JI()", "G]WFW[ XFX[ [FOFLGKHJJJLKNLOOPWP OFMGLHKJKLLNMOOP RPPQORLYKZJZIY PQOSMZL[J[IYIX T[[[", "calib3d::estimateAffinePartial2D_15()", "Invalid pCAL equation type", "((CvSparseMat*)arr)->dims == 2", "void cv::hal::opt_SSE4_1::max8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "ml::setLearningRate_10()", "N2cv8opt_AVX212_GLOBAL__N_16RowSumItiEE", "virtual void cv::dnn::SoftMaxLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "virtual void cv::opt_AVX2::SymmColumnFilter<cv::opt_AVX2::FixedPtCastEx<int, unsigned char>, cv::opt_AVX2::SymmColumnVec_32s8u>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::FixedPtCastEx<int, unsigned char>, VecOp = cv::opt_AVX2::SymmColumnVec_32s8u]", "NSt6__ndk114default_deleteIN2cv3dnn13CropLayerImplEEE", "SetUInt64", "internal error handling cHRM->XYZ", "{parm#", "\"abc_activity_chooser_view_see_all\" : \"\u0411\u0430\u0440\u0434\u044b\u0433\u044b\u043d \u043a\u04e9\u0440\u04af\u04af\"", "void cv::hal::opt_AVX::fastAtan2(const float *, const float *, float *, int, bool)", "imgproc::connectedComponentsWithAlgorithm_10()", "cvWaitKey", "Unknown layer type: ", "virtual void cv::cpu_baseline::RowFilter<unsigned char, float, cv::cpu_baseline::RowNoVec>::operator()(const uchar *, uchar *, int, int) [ST = unsigned char, DT = float, VecOp = cv::cpu_baseline::RowNoVec]", "N2cv12cpu_baseline12_GLOBAL__N_117MorphColumnFilterINS1_5MinOpIdEENS1_16MorphColumnNoVecEEE", "N2cv25VariationalRefinementImplE", "height (frame): %d", "\"abc_font_family_display_1_material\" : \"sans-serif\"", "void cv::hal::div32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, void *)", "core::setIdentity_10()", "calcSparseHist_", "\" is already defined in \"", "N12_GLOBAL__N_124CLAHE_Interpolation_BodyIhLi0EEE", "adjustPad.width < stride.width && adjustPad.height < stride.height", "----------------________________", "void cv::_OutputArray::create(int, const int *, int, int, bool, _OutputArray::DepthMask) const", "I\\XFX[ XPVNTMQMONMPLSLUMXOZQ[T[VZXX", "N2cv8opt_AVX28Filter2DIdNS0_4CastIddEENS0_11FilterNoVecEEE", "boosting_type", "zstream unclaimed", "Failed to parse NetParameter file: ", "cvCreateSet", "void cv::hal::cpu_baseline::absdiff16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int)", "filter_w", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_19SqrRowSumIfdEENS_9allocatorIS5_EEEE", "calib3d::recoverPose_10()", "__itt_model_iteration_taskAL", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/map_field.cc", "rowFilter && columnFilter", "NUSMQSQURVSV PPTP", "I[JQKOMMOMPNQPQTO[ PNPTN[ PPOTM[O[ YOYNXNXPZPZNYMWMUNSPQT", "void cv::hal::cpu_baseline::min64f(const double *, size_t, const double *, size_t, double *, size_t, int, int)", "JFIF APP0 marker: version %d.%02d, density %dx%d  %d", "imInfo.total() >= 2", "No frame buffer specified as pixel data source.", "ExposureTime", "cv::ml::DTreesImplForRTrees::DTreesImplForRTrees()", "MapValueRef::GetFloatValue", "imgproc::filter2D_13()", "compression", "opencv_ml_knn", "compVarIdx[best_split.varIdx] >= 0 && best_vi >= 0", "sortedIndices.cols == 1", "PN7cvflann11KDTreeIndexINS_2L2IfEEE4NodeE", "MinSampleValue", "The second output matrix must have the same dimensions as the input matrices", "') => '", "params: ", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_111MorphFilterINS3_5MinOpIfEENS3_8MorphVecINS3_4VMinINS1_8hal_AVX211v_float32x8EEEEEEENS_9allocatorISD_EEEE", "Invalid character in the symbol entity name", "N2cv12cpu_baseline12_GLOBAL__N_19SqrRowSumIsdEE", "H\\MFKP KPMNPMSMVNXPYSYUXXVZS[P[MZLYKWKVLUMVLW SMUNWPXSXUWXUZS[ MFWF MGRGWF", "_prepareImgAndDrawKeypoints", "/home/vagrant/build/srclib/opencv/modules/calib3d/src/dls.cpp", "\"abc_capital_on\" : \"\u1016\u103d\u1004\u1037\u103a\"", "covMatType >= 0", "!images.empty()", "ml::findNearest_11()", "N3Imf13RleCompressorE", "NSt6__ndk17collateIwEE", "stereoCalibrate", "dnn::getLayerId_10()", "video::setVarThresholdGen_10()", "N2cv16CalcVerticalSumsE", "\"abc_activity_chooser_view_see_all\" : \"\u0d0e\u0d32\u0d4d\u0d32\u0d3e\u0d02 \u0d15\u0d3e\u0d23\u0d41\u0d15\"", "cvDet(&tmpMatrixM) != 0.0", "D`H@Hd M@Md W@Wd \\@\\d MMWK MNWL MOWM MWWU MXWV MYWW", "drawChessboardCorners", "PPN7cvflann11KDTreeIndexINS_2L2IfEEE4NodeE", "void cv::hal::cpu_baseline::cvtBGRtoThreePlaneYUV(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "In global_pooling mode, kernel_size (or kernel_h and kernel_w) cannot be specified", "Unexpected attribute type.", "val <= INT_MAX && \"PXM: ReadNumber(): result is too large\"", "srcimg.cols / 2 == dstimg.cols", "Float", "/home/vagrant/build/srclib/opencv/modules/core/src/lapack.cpp", "bad encoding (internal error)", "JPEG-2000 JP2 File Format Syntax (ISO/IEC 15444-1)", "void cv::decomposeEssentialMat(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray)", "int cv::opt_AVX2::SymmRowSmallVec_32f::operator()(const uchar *, uchar *, int, int) const", "p->sourceAddr_ == NULL", "void cv::hal::opt_AVX2::cvtTwoPlaneYUVtoBGR(const uchar *, const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "cvMemStorageAlloc", "void cv::cpu_baseline::cvt64f8u(const double *, size_t, uchar *, size_t, uchar *, size_t, cv::Size, void *)", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::RGB2XYZ_i<uchar> >::operator()(const cv::Range &) const [Cvt = cv::RGB2XYZ_i<uchar>]", "CaGMG[ GQJNLMOMQNRQR[ RQUNWMZM\\N]Q][", "The tilted sensor model must have 14 parameters in the distortion matrix", "writer_", "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/approx.cpp", "ml::setAnnealFinalT_10()", "image.channels() == 1 || image.channels() == 3 || image.channels() == 4", "cv::utils::findDataFile('%s', %s, %s)", "NSt6__ndk120__shared_ptr_emplaceIN2cv16SunRasterEncoderENS_9allocatorIS2_EEEE", "findEssentialMat", "H\\QIK[ SIY[ RIX[ MUVU I[O[ U[[[ QBOCNENGOIQJSJUIVGVEUCSBQB", "src5.isMat() || src5.isUMat()", "ml::getLayerSizes_10()", "There should be space between attributes", "Reading Torch models from buffers", "ml::getNAllVars_10()", "Placeholder", "layer.top_size() == 1", "\"abc_searchview_description_query\" : \"\u0423\u043f\u0438\u0442 \u0437\u0430 \u043f\u0440\u0435\u0442\u0440\u0430\u0433\u0443\"", "ml::trainM_13()", "\"abc_action_bar_home_description\" : \"P\u0159ej\u00edt na plochu\"", "virtual void cv::dnn::PriorBoxLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "core::getCPUTickCount_10()", "I[MILKLMMOOPRPUOWNZK[H[GZFYFWGVHTKPUOWMZK[ VHTLRSQVPXNZK[I[HZHXIWKWMXPZR[U[WZYX", "Already saw decimal point or exponent; can't have another one.", "calib3d::undistortPointsIter_10()", "usage_count == 1", "\"abc_searchview_description_query\" : \"Consulta de pesquisa\"", "I[TFRGQHQIRJUKZKZJWKSMPOMRLULWMYP[S]T_TaSbQbPa ULQONRMUMWNYP[", "YPosition", "void cv::opt_AVX2::FilterEngine__apply(cv::FilterEngine &, const cv::Mat &, cv::Mat &, const cv::Size &, const cv::Point &)", "void cv::dnn::dnn4_v20190122::Net::forward(std::vector<std::vector<Mat> > &, const std::vector<String> &)", "calib3d::estimateAffine2D_13()", "SamplesPerPixel tag value is changing, but SMinSampleValue tag was read with a different value. Cancelling it", "\"abc_search_hint\" : \"C\u0103uta\u021bi\u2026\"", "JYTBQEPHPJQMSOSPORSTSUQWPZP\\Q_Tb RDQGQKRN RVQYQ]R`", "normalizeChannelsNumber", "NSt6__ndk120__shared_ptr_pointerIPN2cv10OcvDftImplENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "\"abc_action_bar_home_description\" : \"Navegar para a p\u00e1gina inicial\"", "cvReduce", "virtual void cv::opt_AVX2::(anonymous namespace)::RowSum<short, double>::operator()(const uchar *, uchar *, int, int) [T = short, ST = double]", "NSt6__ndk114basic_ofstreamIcNS_11char_traitsIcEEEE", "Unknown/unsupported adaptive threshold method", "__itt_task_end", "edgeDst(o_prev) == edgeOrg(d_next)", "imgproc::compareSegments_10()", "zlib IO error", "Only 8-bit, 3-channel images are supported", "sliceRanges[i].size() <= inpShape.dims()", "weight_trimming_rate", "xstart == 0 && \"not supported\"", "CHECK failed: (to->GetDescriptor()) == (descriptor): ", "Ignoring attempt to write tRNS chunk out-of-range for bit_depth", "LYPFSCSP RDRP OPVP MRXR OVOWNWNVOUQTTTVUWWVYTZQ[O\\N^Na TTUUVWUYTZ N`O_P_S`V`W_ P_SaVaW_W^", "KYRKRY KRYR", "N2cv18ResizeArea_InvokerIhfEE", "Invalid value for boolean field \"", "I[NKMX OKNV TKMX TKSX UKTV ZKSX LKQK XK\\K", "\"abc_activity_chooser_view_see_all\" : \"N\u00e4yt\u00e4 kaikki\"", "void cv::cpu_baseline::cvt32f16u(const float *, size_t, uchar *, size_t, ushort *, size_t, cv::Size, void *)", "out.dims == numAxes && out.size == outputs[0].size", "ml::trainE_15()", "\"abc_action_bar_home_description\" : \"Naviger hjem\"", "float", "LineIterator", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212ColumnFilterINS2_4CastIdtEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "removeEdge", "\"abc_searchview_description_search\" : \"Ara\"", "out_buffer", "cv::MatExpr cv::max(const cv::Mat &, double)", "core::reduce_10()", "(params.termCrit.type & TermCriteria::COUNT || params.termCrit.type & TermCriteria::EPS)", "N10__cxxabiv119__pointer_type_infoE", "core::mulTransposed_12()", "imgproc::insert_10()", "runByKeypointSize", "pre_nms_topn", "_points.type() == CV_32F && !_points.empty()", "H^ULTNSOQPOPNNNLOIQGTFWFYGZIZMYPWSSWPYNZK[I[HZHXIWKWMXPZS[V[YZ[X", "debug", "\"$0\", ", "NSt6__ndk120__time_get_c_storageIwEE", "void cv::cpu_baseline::medianBlur_8u_O1(const cv::Mat &, cv::Mat &, int)", "N6google8protobuf13RepeatedFieldIjEE", "features2d::create_10()", "WEBPVP8L", "void cv::polarToCart(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, bool)", "data == datastart", "): failed TIFFSetField(tif, TIFFTAG_PHOTOMETRIC, colorspace)", "PhotometricInterpretation", "OpenCV TIFF: failed TIFFSetField(tif, TIFFTAG_ROWSPERSTRIP, rowsPerStrip)", "All the images must have the same size", "\" which is.", "outputs.size() == 1", "MXSMRNSOTNSM PYOZP[QZ", " unexpected for field ", "N2cv3dnn16ElementWiseLayerINS0_10ELUFunctorEE5PBodyE", "G]JJLGNFOFQGQIOOORPT OFPGPINONRPTRTUSWQYNZL \\FZLWTUX ]F[LYQWUUXSZP[L[JZIXIWJVKWJX", "\"abc_searchview_description_search\" : \"\u0c36\u0c4b\u0c27\u0c3f\u0c02\u0c1a\u0c41\"", "NSt6__ndk19time_baseE", "[ WARN:", "N2cv2ml25NormalBayesClassifierImplE", "F^RNQKPINHMHKIJKJOKRLTNWR\\ RNSKTIVHWHYIZKZOYRXTVWR\\", "MLDB_Fill_Values", "inpCn % ngroups == 0 && outCn % ngroups == 0", "ml::getTermCriteria_10()", "imgproc::getGaborKernel_12()", "ISO JBIG", "MatrixWorldToCamera", "\"abc_action_bar_up_description\" : \"Navigeerimine \u00fcles\"", "dnn::setPreferableBackend_10()", "0123456789abcdefABCDEFxX+-pPiInN", "N2cv12cpu_baseline12_GLOBAL__N_127BilateralFilter_32f_InvokerE", "N2cv3dnn18BatchNormLayerImplE", "UpgradeV1LayerParameter", "shapeIt != outShapes.end()", "channels_first", "Error fetching directory link", "TIFFWriteDirectoryTagCheckedLong8Array", "\"abc_search_hint\" : \"\u179f\u17d2\u179c\u17c2\u1784\u179a\u1780\u2026\"", "parseTorchType", "static void cv::SVD::compute(cv::InputArray, cv::OutputArray, int)", "N2cv3dnn16ElementWiseLayerINS0_11TanHFunctorEEE", "\"abc_toolbar_collapse_description\" : \"Minimieren\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml10DTreesImpl8WorkDataENS_9allocatorIS4_EEEE", "_TIFFReadEncodedTileAndAllocBuffer", "void cv::integral(cv::InputArray, cv::OutputArray, int)", "common_matchTemplate", "XYZ, Luv", "CL_INVALID_KERNEL_DEFINITION", "void cv::scaleAdd(cv::InputArray, double, cv::InputArray, cv::OutputArray)", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::Luv2RGB_f>::operator()(const cv::Range &) const [Cvt = cv::Luv2RGB_f]", "video::calcOpticalFlowPyrLK_10()", "getGpuMat is available only for cuda::GpuMat and cuda::HostMem", "N2cv3hal8opt_AVX212_GLOBAL__N_119YUV422toRGB8InvokerILi2ELi0ELi1ELi3EEE", "Unknown type.", "N3Iex9EnopkgExcE", "\"abc_activity_chooser_view_see_all\" : \"\u0ec0\u0e9a\u0eb4\u0ec8\u0e87\u0e97\u0eb1\u0e87\u0eab\u0ea1\u0ebb\u0e94\"", "Invalid type of parameter (use one of SVM::C, SVM::GAMMA et al.)", "\"t1?\"t1?\"t1?\"t1?\"t1?\"t1?\"t1?\"t1?", "N9IlmThread9SemaphoreE", "<opencv_storage> tag is missing", "backSubst", "depth == 8", "photo::fastNlMeansDenoisingColoredMulti_14()", "float cv::compute_kcontrast(cv::InputArray, cv::InputArray, float, int)", "N2cv10opt_SSE4_18Filter2DItNS0_4CastIffEENS0_11FilterNoVecEEE", "getMat_", "F^GRHPIOKOLPLQJX JOKPKQIX LQMPOOQOSPSQQX QORPRQPX SQTPVOXOZPZRYUYWZX XOYPYRXUXWYX[X\\W]U", "core::idft_10()", "Gray color space not permitted on RGB PNG", "rgb+alpha color-map: too few entries", "void cv::hal::gemm64fc(const double *, size_t, const double *, size_t, double, const double *, size_t, double, double *, size_t, int, int, int, int)", "objdetect::HOGDescriptor_19()", "\"abc_activitychooserview_choose_application\" : \"Pilih apl\"", "video::calcOpticalFlowFarneback_10()", "replace", "const_layers.find(layer.input(i)) != const_layers.end()", "I[TMQMONMPLSLVMYNZP[R[TZVXWUWRVOTMRKQIQGRFTFVGXI", "estimateAffine2D", "N6google8protobuf8internal8MapEntryIN17opencv_tensorflow35FunctionDef_Node_AttrEntry_DoNotUseENSt6__ndk112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSE_11ELi0EEE", "cannot open <%s> in mode %c%c", "int cv::opt_AVX2::SymmColumnSmallVec_32f::operator()(const uchar **, uchar *, int) const", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_111MorphFilterINS3_5MaxOpIsEENS3_8MorphVecINS3_4VMaxINS1_8hal_AVX210v_int16x16EEEEEEENS_9allocatorISD_EEEE", "N6google8protobuf13RepeatedFieldIlEE", "rgb to gray green coefficient", "The first set of points must contain two channels; one for x and one for y", "void cv::hal::opt_AVX2::cvtGraytoBGR5x5(const uchar *, size_t, uchar *, size_t, int, int, int)", "CHECK failed: (value.size()) <= (kint32max): ", "J[KRLPMOOOPPPQNX NOOPOQMX PQQPSOUOWPWRVUVWWX UOVPVRUUUWVXXXYWZU", "Unknown type of term criteria", "coeffs[i*3] >= 0 && coeffs[i*3+1] >= 0 && coeffs[i*3+2] >= 0 && coeffs[i*3] + coeffs[i*3+1] + coeffs[i*3+2] < 2*(1 << lab_shift)", "KYVLWKWOVLTKQKOLNMMPMSNVOWQXTXVWWU QKOMNPNSOVQX", "(unsigned)hidx < (unsigned)nbins", "ml::getResponses_10()", "computeLogWeightDivDet", "imgproc::warpAffine_12()", "w.empty() || outCn == w.total()", "\"abc_searchview_description_search\" : \"Qidirish\"", "void cv::sortIdx(cv::InputArray, cv::OutputArray, int)", "float cv::cubeRoot(float)", "objectPoints.type() == CV_32FC3 || objectPoints.type() == CV_64FC3", "core::divide_15()", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX28Filter2DItNS2_4CastIftEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn15InterpLayerImplEEE", "ml::trainE_11()", "imgproc::accumulateWeighted_11()", "videoio::VideoCapture_10()", "CHECK failed: enum_type_->value_count(): ", "bool cv::Cholesky(double *, size_t, int, double *, size_t, int)", "\" stored in google.protobuf.Any has missing required fields", "objectPoints.total() == imagePoints1.total() || imagePoints1.total() == imagePoints2.total()", "virtual cv::String cv::Algorithm::getDefaultName() const", "): failed TIFFSetField(tif, TIFFTAG_SUBFILETYPE, FILETYPE_PAGE)", "MapValueRef::GetInt64Value", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::RGB2RGB<unsigned char> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::RGB2RGB<unsigned char>]", "makeAgastOffsets", "cvTranspose", "unsupported label/image type", "NSt6__ndk120__shared_ptr_emplaceIN2cv3dnn14dnn4_v2019012213TorchImporter6ModuleENS_9allocatorIS5_EEEE", "(*each).type() == type", "N2cv4KAZEE", "LinearResponseLimit", "Extension ranges are not allowed in proto3.", "pthread_mutexattr_destroy", "F^[CZD[E\\D\\C[BYBWCUETGSJRNPZO^N` VDUFTJRVQZP]O_MaKbIbHaH`I_J`Ia QKNLLNKQKSLVNXQYSYVXXVYSYQXNVLSKQK", "CalibrationIlluminant2", "it != vertices.end()", "N2cv29Bayer2RGB_EdgeAware_T_InvokerItNS_26SIMDBayerStubInterpolator_ItEEEE", "video::getkNNSamples_10()", "getConvolutionKernelParams", "minMaxLoc", "M[MVOSRNSLTITGSFQGPIOMNTNZO[P[RZTXUUURVVWWYW[V", "THDiskFile_readInt", "F]MMGb NMHb MPLVLYN[P[RZTXVU XMUXUZV[Y[[Y\\W YMVXVZW[", "__itt_enable_attach", "virtual void cv::cpu_baseline::(anonymous namespace)::RowSum<unsigned short, int>::operator()(const uchar *, uchar *, int, int) [T = unsigned short, ST = int]", "calib3d::getPreFilterCap_10()", "virtual void cv::dnn::RegionLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "N3Iex9EchrngExcE", "PIEHPIEH", "Inception", "less than or equal to", "\"abc_toolbar_collapse_description\" : \"Comprimi\"", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/wire_format_lite.cc", "pt == NULL", "N17opencv_tensorflow13OpDeprecationE", "First argument to Swap() (of type \"", "void cv::polylines(cv::InputOutputArray, cv::InputArrayOfArrays, bool, const cv::Scalar &, int, int, int)", "F]NMLNJQITIWJZK[M[OZQW RSQWRZS[U[WZYWZTZQYNXM", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/crop_and_resize_layer.cpp", "TileLength", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112ColumnFilterINS2_4CastIdsEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIxEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212ColumnFilterINS2_4CastIdsEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi4EEExy7DistAbsNS1_IiLi4EEEE", "truncated", "getKernelType", "arrays", "writeTag", "Value must be identifier for enum-valued option \"", "Line length mismatch", "core::mixChannels_10()", "Invalid compression type specified", "N2cv3dnn14dnn4_v201901225LayerE", "BitsPerSample %d not allowed for JPEG", "IPP:(ipp_buildpyramid( _src, _dst, maxlevel, borderType))", "virtual void cv::opt_SSE4_1::ColumnFilter<cv::opt_SSE4_1::Cast<float, float>, cv::opt_SSE4_1::SymmColumnSmallVec_32f>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::Cast<float, float>, VecOp = cv::opt_SSE4_1::SymmColumnSmallVec_32f]", "sCos_HA", "features2d::getDescriptorSize_10()", "\" has no field named \"", "isStorageOrMat", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::RGB2YCrCb_i<uchar> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::RGB2YCrCb_i<uchar>]", "Mat::n_1checkVector__JII()", "H[LMR[ MMRY XMR[P_NaLbKbJaK`La JMPM TMZM", "ml::getClassLabels_10()", "N2cv13HaarEvaluatorE", "Unsupported squeeze configuration", "paddings.type() == CV_32SC1", " size(0)=%dx%d", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v201901223Net4ImplEEE", "StereoMatcher.SGBM", "Out of memory", "LogLuvDecode32", "MNG features are not allowed in a PNG datastream", "N2cv30HoughCirclesFindCentersInvokerE", "\"abc_capital_on\" : \"BE\"", "!fixedSize() || ((cuda::HostMem*)obj)->size() == Size(_cols, _rows)", "number of removed elements is negative", "NWUQSPQPPQPRQS SSQSPTPUQVSVUU", "connectivity == 8 || connectivity == 4", "blockIdx < fs_data_ptrs.size()", "F.size() == Size(3,3)", "N2cv12cpu_baseline12ColumnFilterINS0_4CastIisEENS0_11ColumnNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv25Affine3DEstimatorCallbackENS_9allocatorIS2_EEEE", "SpatialReflectionPadding", "thread::detach failed", "img.type() == CV_8U || img.type() == CV_8UC3", "N3Iex10EremoteExcE", "Unsupported activation: ", "imgproc::HoughCircles_14()", "void cv::meanStdDev(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::InputArray)", "Key names may only contain alphanumeric characters [a-zA-Z0-9], '-', '_' and ' '", "png_set_keep_unknown_chunks: no chunk list", "void cv::dnn::dnn4_v20190122::Layer::run(const std::vector<Mat> &, std::vector<Mat> &, std::vector<Mat> &)", "\"abc_action_bar_up_description\" : \"\u4e0a\u3078\u79fb\u52d5\"", "src.type() == CV_8UC1 && dst.type() == CV_32FC1", "\"abc_shareactionprovider_share_with_application\" : \"Del med %s\"", "!hasBias || numWeights == bias.total()", "(size_t)1", "RealDiv", "status != NULL", "LOCAL_SZ_X", "cv::Mat &cv::Mat::setTo(cv::InputArray, cv::InputArray)", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline18SymmRowSmallFilterIhiNS2_21SymmRowSmallVec_8u32sEEENS_9allocatorIS5_EEEE", "%s: Cannot open", "!keypointDescriptors.empty()", "MIN(x_mat.rows,x_mat.cols)==1", "calib3d::create_12()", "__itt_id_destroy", "A->cols == B->rows", "void cv::hal::opt_AVX2::add8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "KYTBQEPHPJQMSOSPORSTSUQWPZP\\Q_Tb", "imgproc::minEnclosingCircle_10()", "objdetect::checkDetectorSize_10()", "RGB2Luvfloat", "0 <= i && i < (int)v.size()", "addInput", "Ignoring %s because BitsPerSample=%d>24", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_11YCrCb2RGB_iIhEEEE", "H]KFRPJ[ JFQP JFYFZLXF KZXZ J[Y[ZUX[", "cv::impl::(anonymous namespace)::CvtHelper<cv::impl::(anonymous namespace)::Set<3, 4, -1>, cv::impl::(anonymous namespace)::Set<1, -1, -1>, cv::impl::(anonymous namespace)::Set<0, 2, 5>, cv::impl::(anonymous namespace)::SizePolicy::NONE>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::impl::(anonymous namespace)::Set<3, 4, -1>, VDcn = cv::impl::(anonymous namespace)::Set<1, -1, -1>, VDepth = cv::impl::(anonymous namespace)::Set<0, 2, 5>, sizePolicy = cv::impl::(anonymous namespace)::SizePolicy::NONE]", "G\\ZHYJWOVRUTSWQYOZL[ SLRNPONOMMMKNIPGSF]F[GZHYKXOVUTXQZL[H[GZGXHWJWLXOZQ[T[WZYX VFZG[G", "\"abc_searchview_description_search\" : \"Szukaj\"", "virtual void cv::cpu_baseline::(anonymous namespace)::ColumnSum<int, float>::operator()(const uchar **, uchar *, int, int, int)", "internal error: array realloc", "void cv::cpu_baseline::cvt16s32s(const short *, size_t, uchar *, size_t, int *, size_t, cv::Size, void *)", "Invalid value for parameter ", "begins.type()", "ml::getCovs_10()", "__itt_event_end", "CL_MISALIGNED_SUB_BUFFER_OFFSET", "build_coeff_matrix", "OpenCV TIFF: failed TIFFWriteEncodedStrip(tif, i, (tdata_t)img.ptr<float>(i), strip_size * sizeof(float)) != (tsize_t)-1", "ml::trainE_13()", "OURHR\\", "initInfEngine", "\"abc_activitychooserview_choose_application\" : \"Zgjidh nj\u00eb aplikacion\"", "criteria.isValid()", "N2cv3dnn14dnn4_v2019012212FlattenLayerE", "virtual bool cv::WebPEncoder::write(const cv::Mat &, const std::vector<int> &)", "npoints >= 0", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/detection_output_layer.cpp", "virtual void cv::ml::DTreesImplForRTrees::endTraining()", "TotalVariation", "photo::fastNlMeansDenoisingColored_11()", "Padding with offset is not implemented", "params.has(\"size\") ^ params.has(\"end\")", "void cv::hal::cpu_baseline::invSqrt32f(const float *, float *, int)", "%lu: Depth out of range, max %lu", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2019012218ReLU6KerasSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "Expected double, got: ", "): failed (int)TIFFReadEncodedStrip(tif, tileidx, buffer, buffer_size) >= 0", "SpatialAveragePooling", "inputs[i].dims == 4 && inputs[i].size[1] == input.size[1]", "all_loc_preds.size() == num", "I\\XRWOVNTMRMONMQLTLWMYNZP[R[UZWXXUYPYKXHWGUFRFPGOHOIPIPH RMPNNQMTMXNZ R[TZVXWUXPXKWHUF", "MWUPTRRSPROPPNRMTNUPUSTURVPV", "cvSplit", "LXLPNRQSSSVRXP", "\"abc_searchview_description_clear\" : \"Esborra la consulta\"", "calib3d::composeRT_16()", "java resource ", "calib3d::fisheye_1undistortPoints_12()", "MaxUnpool", "share_location", "N17opencv_tensorflow8GraphDefE", "DNGBackwardVersion", "int64 cv::dnn::dnn4_v20190122::Net::getFLOPS(const std::vector<MatShape> &) const", "H\\UFH[ UFV[ THU[ LUUU F[L[ R[X[", "\"abc_activitychooserview_choose_application\" : \"V\u00e6lg en app\"", "CV_IMAGES", "Data decoding (rle) failed.", "Freed EMS handle %u", "\"abc_searchview_description_query\" : \"Bilaketa-kontsulta\"", ": it is more than ", "\"abc_shareactionprovider_share_with\" : \"\u0411\u04e9\u043b\u0456\u0441\u0443\"", "FaxProfile", "void cv::hal::opt_SSE4_1::mul8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, const double *)", "void cv::hal::max32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, void *)", "kernelH > 0 && kernelW > 0", "convert", "D`DD``", "N2cv24KMeansPPDistanceComputerE", "void cv::hal::opt_AVX2::cmp32s(const int *, size_t, const int *, size_t, uchar *, size_t, int, int, int)", "Unknown_%d", "x0 - 6 * scale >= 0 && x0 + 6 * scale < Lx.cols", "cvGetSize", "NULL sequence pointer", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_19SqrRowSumIhiEENS_9allocatorIS5_EEEE", "Mat::n_1Mat__IIIDDDD()", "Invalid key code count (must be between 0 and 9999).", "Size of projection matrices must be 3x4", "\"abc_action_mode_done\" : \"Bitti\"", "void cv::opt_AVX2::medianBlur(const cv::Mat &, cv::Mat &, int)", "The destination image does not have the proper type", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi2EEExy7DistAbsiE", "CHANNELS", "std::nullptr_t", "/usr/local/google/buildbot/src/android/ndk-release-r16/external/libcxx/../../external/libunwind_llvm/src/UnwindCursor.hpp", "/home/vagrant/build/srclib/opencv/modules/calib3d/src/circlesgrid.cpp", ".dummy", "KYQKNLLNKQKSLVNXQYSYVXXVYSYQXNVLSKQK", "CV_IS_MAT(_rvec1) && CV_IS_MAT(_rvec2)", "current_channels > 0", "core::norm_11()", "N2cv7details5FastXE", "\"abc_action_mode_done\" : \"\u0aa5\u0a88 \u0a97\u0aaf\u0ac1\u0a82\"", "N6google8protobuf17FileDescriptorSetE", "core::getTimeSec_10()", "data with only one channel are supported", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline21SymmColumnSmallFilterINS2_4CastIffEENS2_22SymmColumnSmallVec_32fEEENS_9allocatorIS7_EEEE", "N2cv10opt_SSE4_116SymmColumnFilterINS0_4CastIftEENS0_11ColumnNoVecEEE", "OUTKSLRNROSQQRSSRURVSXTY", "F_[WYWWVUTRPQOONMNKOJQJSKUMVOVQURTUPWNYM[M", "E_\\N[O\\P]O]N\\M[MYNWPRXPZN[K[HZGXGVHTISKRPPROTMUKUITGRFPGOIOLPRQUSXUZW[Y[ZYZX K[IZHXHVITJSPP OLPQQTSWUYWZYZZY", "double cv::arcLength(cv::InputArray, bool)", "calib3d::reprojectImageTo3D_12()", "E`VNULSKQKOLNMMOMRNTOUQVSVUUVS OMNONROT QKPLOOORPUQV VKVSWUYVZV\\U]R]O\\L[JYHWGTFQFNGLHJJILHOHRIUJWLYNZQ[T[WZYYXYWZ WLWSXU VKXKXSYUZV", "core::save_10()", "imgproc::adaptiveThreshold_10()", "\"abc_searchview_description_clear\" : \"\u0e25\u0e49\u0e32\u0e07\u0e02\u0e49\u0e2d\u0e04\u0e27\u0e32\u0e21\u0e04\u0e49\u0e19\u0e2b\u0e32\"", "void cv::hal::gemm32fc(const float *, size_t, const float *, size_t, float, const float *, size_t, float, float *, size_t, int, int, int, int)", "  Group 4 Options:", "KYTMRY MQNPOPPQPUQVTVUUVSWP", "virtual void cv::dnn::ConcatLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "Unknown parameter concat_dim for layer type ", "0 <= b1 && b1 < nvars", "N2cv7TLSDataINS_18UMatDataAutoLockerEEE", "__itt_model_disable_pop", "traceArg", "void cv::hal::opt_SSE4_1::min8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int)", "N12opencv_caffe14LayerParameterE", "VIDEOIO(%s): trying capture cameraNum=%d ...", "imgcodecs::haveImageReader_10()", "Bad or unsupported metric type", "!data_node.empty()", "Can't remove file: ", "TIFFAppendToStrip", "\"search_menu_title\" : \"Vyh\u013ead\u00e1vanie\"", "G]KFKULXNZQ[S[VZXXYUYF KFLFLUMXNYQZSZVYWXXUXFYF", "\"abc_activity_chooser_view_see_all\" : \"\u0aac\u0aa7\u0ac1\u0a82 \u0a9c\u0ac1\u0a93\"", "N3Iex7EdomExcE", "virtual void cv::cpu_baseline::ColumnFilter<cv::cpu_baseline::Cast<int, short>, cv::cpu_baseline::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::Cast<int, short>, VecOp = cv::cpu_baseline::ColumnNoVec]", "param_priority == (size_t)(int)param_priority", "N2cv3hal8opt_AVX212_GLOBAL__N_120YUV420sp2RGB8InvokerILi0ELi1ELi3EEE", "/home/vagrant/build/srclib/opencv/modules/core/src/trace.cpp", "\"abc_capital_off\" : \"MATI\"", "srcType", "NSt6__ndk114default_deleteIN2cv3dnn12LRNLayerImplEEE", "int cv::getTrackbarPos(const cv::String &, const cv::String &)", "imgproc::goodFeaturesToTrack_15()", "terminating", "objdetect::computeGradient_11()", "\"abc_searchview_description_submit\" : \"Iesniegt vaic\u0101jumu\"", "opencv-matrix", "MWOPUV UPOV", "void cv::dnn::dnn4_v20190122::(anonymous namespace)::DarknetImporter::populateNet(cv::dnn::dnn4_v20190122::Net)", "\"abc_action_bar_home_description\" : \"Ev\u0259 naviqasiya et\"", "decimal32", "NVROQPRQSPRO SWRXQWRVSWSYQ[", "source_layer.bottom_size()=1", "Missing parameter '", "Unknown error", "\"abc_search_hint\" : \"\u0ab6\u0acb\u0aa7\u0acb\u2026\"", "height", "getOGlBuffer", "void cv::hal::opt_SSE4_1::add8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int)", "core::transpose_10()", "NSt6__ndk114default_deleteIN2cv3dnn16EltwiseLayerImplEEE", "Jul 24 2018", "outputs.size() == means.size()", "dlBNvz!/u{1?cmR^", "\"abc_action_menu_overflow_description\" : \"\u0e15\u0e31\u0e27\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e2d\u0e37\u0e48\u0e19\"", "void cv::mulTransposed(cv::InputArray, cv::OutputArray, bool, cv::InputArray, double, int)", "inputs[i].type() == input.type()", "forcing save of an unhandled chunk; please call png_set_keep_unknown_chunks", "32TegraCvtColor_rgb2bgr565_Invoker", "video::create_12()", "N2cv12cpu_baseline12ColumnFilterINS0_4CastIdhEENS0_11ColumnNoVecEEE", "Can't remove directory: ", "Extension not found.", "responses.type() == CV_32F || responses.type() == CV_32S", "\"abc_capital_on\" : \"\u062a\u0634\u063a\u064a\u0644\"", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/pyramids.cpp", "NSt6__ndk120__shared_ptr_emplaceIN2cv11JSONEmitterENS_9allocatorIS2_EEEE", "core::findFile_11()", "KYNORX OORV VORX LOQO TOXO", "No space for JPEG state block", "sz < (size_t)(maxCount - 1) && \"OpenCV persistence doesn't support very long lines\"", "m2.total()", "N2cv27MSURF_Descriptor_64_InvokerE", "cvLog", "IPP:(((ippicvsMagnitude_64f)(x, y, mag, len)) >= 0)", "bad color-map processing (internal error)", "N2cv3hal12cpu_baseline12_GLOBAL__N_120YUV420sp2RGB8InvokerILi2ELi0ELi3EEE", "typeinfo name for ", "/home/vagrant/build/srclib/opencv/modules/core/src/matmul.dispatch.cpp", "std::allocator", "reshape", "N2cv12cpu_baseline9RowFilterIsfNS0_13RowVec_16s32fEEE", "__itt_task_begin_fn_ex", "\"abc_searchview_description_voice\" : \"Ahots bidezko bilaketa\"", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/clahe.cpp", "factorsMat.type()", "/home/vagrant/build/srclib/opencv/modules/video/src/bgfg_KNN.cpp", "graph pointer is NULL", "tensor.dtype() == tensorflow::DT_FLOAT || tensor.dtype() == tensorflow::DT_HALF", "count >= 0 && to.checkVector(2) == count", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi3EEElm7DistAbsNS1_IiLi3EEEE", "calib3d::findEssentialMat_11()", "E`RMR[ SMS[ OMVM JNIOHNIMJMKNMRNSPTUTWSXRZN[M\\M]N\\O[N PTNUMVKZJ[ PTNVLZK[I[HZGX UTWUXVZZ[[ UTWVYZZ[\\[]Z^X O[V[", "int cv::cpu_baseline::SymmColumnVec_32s8u::operator()(const uchar **, uchar *, int) const", "void cv::non_linear_diffusion_step(cv::InputArray, cv::InputArray, cv::OutputArray, float)", "KZPBSETHTJSMQOQPURQTQUSWTZT\\S_Pb RDSGSKRN RVSYS]R`", "inp0.type() == dtype", "imgproc::createHanningWindow_10()", "Could not find type \"", "__itt_suppress_mark_range", "Invalid character in the stream", "\"abc_capital_off\" : \"\u05db\u05d1\u05d5\u05d9\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_19ColumnSumIisEENS_9allocatorIS5_EEEE", "/home/vagrant/build/srclib/opencv/modules/core/src/glob.cpp", "Tensor's data type is not supported", "Insufficient memory for pCAL purpose", "miny < maxy", "CL_INVALID_WORK_ITEM_SIZE", "Invalid proto descriptor for file \"", "\"abc_searchview_description_submit\" : \"\u0dc0\u0dd2\u0db8\u0dc3\u0dd4\u0db8 \u0dba\u0ddc\u0db8\u0dd4 \u0d9a\u0dbb\u0db1\u0dca\u0db1\"", "N6google8protobuf10TextFormat6Parser10ParserImpl20ParserErrorCollectorE", "F^IMN[ IMJMNX RMNX RPN[ RPV[ RMVX [MZMVX [MV[", "void cv::hal::cpu_baseline::split8u(const uchar *, uchar **, int, int)", "edgeDst(e) == edgeDst(d_prev)", "\"abc_searchview_description_voice\" : \"Cerca per veu\"", "core::normalize_14()", "OpenCV TIFF: failed (int)TIFFReadEncodedTile(tif, tileidx, (uint32*)buffer, buffer_size) >= 0", "OpenCV TIFF: failed TIFFSetField(tif, TIFFTAG_COMPRESSION, COMPRESSION_SGILOG)", "calib3d::decomposeProjectionMatrix_13()", "G[MJSV KPSL G\\[\\[RG\\", "N7cvflann7NNIndexINS_2L1IfEEEE", "NSt6__ndk110moneypunctIwLb1EEE", "Invalid key code prefix (must be between 0 and 999999).", "signedGradient", "NULL storage pointer", "core::empty_10()", "void cv::fisheye::initUndistortRectifyMap(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, const cv::Size &, int, cv::OutputArray, cv::OutputArray)", "!img.empty()", "stringvector", "Invalid scan script at entry %d", "void cv::Mat::copyTo(cv::OutputArray) const", "rgb[ga] color-map: too few entries", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_9HSV2RGB_fEEE", "/home/vagrant/build/srclib/opencv/modules/photo/src/merge.cpp", "/home/vagrant/build/srclib/opencv/modules/features2d/src/kaze/AKAZEFeatures.cpp", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::RGB2RGB<unsigned char> >::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::RGB2RGB<unsigned char>]", "imgproc::warpPerspective_12()", "Can't write tRNS with an alpha channel", "cellSize", "void cv::transform(cv::InputArray, cv::OutputArray, cv::InputArray)", "isInt() || isReal() || isString()", "void cv::max(cv::InputArray, cv::InputArray, cv::OutputArray)", "void cv::hal::cpu_baseline::add16s(const short *, size_t, const short *, size_t, short *, size_t, int, int)", "ptrofs != 0", "Null data pointer", "Q.size() == Size(4,4)", "core::addWeighted_10()", "H\\RFK[ RFY[ RIX[ I[O[ U[[[", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2HLS_b>::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2HLS_b]", "scaleFunc != 0", "calib3d::stereoRectify_11()", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/text_format.cc", "imgproc::sqrBoxFilter_10()", "Error in Huffman-encoded data (unexpected end of code table data).", "N3Iex9EagainExcE", "reserveNodeSpace", "\"abc_action_menu_overflow_description\" : \"\u0905\u0927\u093f\u0915 \u092a\u0930\u094d\u092f\u093e\u092f\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_19RowFilterIsdNS2_8RowNoVecEEENS_9allocatorIS5_EEEE", "N2cv10opt_SSE4_112_GLOBAL__N_111MorphFilterINS1_5MaxOpIhEENS1_8MorphVecINS1_4VMaxINS_10hal_SSE4_110v_uint8x16EEEEEEE", "void cv::hal::cvtBGRtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, int, int, bool)", "virtual void cv::dnn::SplitLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "The destination matrix should be continuous and have a single row or a single column", "LOCAL_SZ_Y", "Invalid screen window width in image header.", "I0.sameSize(flow)", "NSt6__ndk120__shared_ptr_pointerIPhPFvPvENS_9allocatorIhEEEE", "imgproc::Subdiv2D_10()", "St12out_of_range", "virtual void cv::opt_AVX2::ColumnFilter<cv::opt_AVX2::Cast<float, float>, cv::opt_AVX2::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::Cast<float, float>, VecOp = cv::opt_AVX2::ColumnNoVec]", "Cannot read image file \"", "\"abc_action_mode_done\" : \"Haz\u0131rd\u0131r\"", "LXNRVR", "setSize", "\"abc_shareactionprovider_share_with\" : \"\u5206\u4eab\u65b9\u5f0f\"", "/home/vagrant/build/srclib/opencv/modules/ml/src/inner_functions.cpp", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/blank_layer.cpp", "video::setSorIterations_10()", "(((poolingType == ROI || poolingType == PSROI) && dst.size[0] == rois.size[0]) || src.size[0] == dst.size[0])", "WIDTH", "N2cv10PngDecoderE", "IPP:(ipp_merge(mv, dst, (int)n))", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_18Filter2DIhNS2_4CastIftEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "CHECK failed: (type) != (WireFormatLite::TYPE_ENUM): ", "N12opencv_caffe24DetectionOutputParameterE", "\"abc_searchview_description_search\" : \"S\u00f6k\"", "Invalid sequence header", "Unknown tag type", "UNAVAILABLE", "N2cv2ml4ImplE", "n >= 0", "cv::impl::(anonymous namespace)::CvtHelper<cv::impl::(anonymous namespace)::Set<2, -1, -1>, cv::impl::(anonymous namespace)::Set<1, -1, -1>, cv::impl::(anonymous namespace)::Set<0, -1, -1>, cv::impl::(anonymous namespace)::SizePolicy::NONE>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::impl::(anonymous namespace)::Set<2, -1, -1>, VDcn = cv::impl::(anonymous namespace)::Set<1, -1, -1>, VDepth = cv::impl::(anonymous namespace)::Set<0, -1, -1>, sizePolicy = cv::impl::(anonymous namespace)::SizePolicy::NONE]", "Integer overflow in %s", "video::setVariationalRefinementAlpha_10()", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_110mRGBA2RGBAIhEEEE", "void cv::hal::opt_SSE4_1::cvtBGRtoYUV(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool, bool)", "void cv::hal::cvtOnePlaneYUVtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int, int)", "NSt6__ndk115basic_streambufIwNS_11char_traitsIwEEEE", "stopLoop", "LIBTIFF_STRILE_ARRAY_MAX_RESIZE_COUNT", "WhiteLevel", "attribute name", "G]SFPGNILLKOJSJVKYLZN[Q[TZVXXUYRZNZKYHXGVFSF SFQGOIMLLOKSKVLYN[ Q[SZUXWUXRYNYKXHVF", "setInput", " failed.", "ASCII conversion buffer too small", "opencv_tensorflow.NodeDef.input", "Insufficient memory for eXIf chunk data", "void cv::hal::cvtBGR5x5toBGR(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "File is too small", "void cv::resizeWindow(const cv::String &, int, int)", "Cannot initialize semaphore (%T).", "features2d::setMinDistance_10()", "fastNlMeansDenoisingMultiCheckPreconditions", "i >= 0 && (size_t)i < vv.size()", "getCanonicalSize", "%s %s encoding is not implemented", "background color must be supplied to remove alpha/transparency", "void cv::multiply(cv::InputArray, cv::InputArray, cv::OutputArray, double, int)", "pthread_mutexattr_init", "ml::getCatOfs_10()", "video::get_1errorCovPost_10()", "IDENTITY", "ml::getMiniBatchSize_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_19SqrRowSumIfdEENS_9allocatorIS5_EEEE", "type = 0x%04x (%s);", "cat_count", "N2cv3dnn15ConcatLayerImplE", "KYUBSDQGOKNPNTOYQ]S`Ub QHPKOOOUPYQ\\ SDRFQIPOPUQ[R^S`", "unload ", "Unknown parameter det_crop_mode for layer type ", "NSt6__ndk17collateIcEE", "\"abc_capital_off\" : \"\u0d9a\u0dca\u200d\u0dbb\u0dd2\u0dba\u0dcf\u0dc0\u0dd2\u0dbb\u0dc4\u0dd2\u0dad\u0dba\u0dd2\"", "imgLabels.rows == img.rows", "N2cv15DTColumnInvokerE", "rgb color-map: too few entries", "operator?", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2019012218ReLU6KerasSubgraphEEE", "Out of memory allocating %d byte temp buffer.", "void cv::hal::recip8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "LZWPreDecode", "N2cv8opt_AVX29RowFilterItfNS0_8RowNoVecEEE", "N2cv10opt_SSE4_112ColumnFilterINS0_4CastIdsEENS0_11ColumnNoVecEEE", "unable to allocate buffer space", "Mat::n_1eye__III()", "void cv::hal::cpu_baseline::mul8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, const double *)", "N6google8protobuf12_GLOBAL__N_124FieldValuePrinterWrapperE", "mtype == type0 || (CV_MAT_CN(mtype) == CV_MAT_CN(type0) && ((1 << type0) & fixedDepthMask) != 0)", "/home/vagrant/build/srclib/opencv/modules/video/src/camshift.cpp", "rows == mat->cols", "net_param != NULL", "/home/vagrant/build/srclib/opencv/modules/core/src/split.simd.hpp", "imgproc::rectangle_10()", "The hull matrix should be continuous and have a single row or a single column", "maskarr == 0", "EnumValueOptions", "Unknown data_format value: ", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline9RowFilterIddNS2_8RowNoVecEEENS_9allocatorIS5_EEEE", "E_RIQJRKSJRI IYHZI[JZIY [YZZ[[\\Z[Y", "cvInRangeS", "cntcmpts == 1 || cntcmpts == 3", "src.channels() == dst.channels()", "\"abc_searchview_description_submit\" : \"P\u00e4ringu esitamine\"", "avgpool_%d", "N2cv10opt_SSE4_112_GLOBAL__N_111MorphFilterINS1_5MinOpIsEENS1_8MorphVecINS1_4VMinINS_10hal_SSE4_19v_int16x8EEEEEEE", "src.isContinuous()", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphColumnFilter<cv::opt_AVX2::(anonymous namespace)::MaxOp<unsigned short>, cv::opt_AVX2::(anonymous namespace)::MorphColumnVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_uint16x16> > >::operator()(const uchar **, uchar *, int, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MaxOp<unsigned short>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphColumnVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_uint16x16> >]", "inputs.size() < 2 || inputs[1].dims == 4", "calib3d::fisheye_1estimateNewCameraMatrixForUndistortRectify_10()", "N3Iex8EcommExcE", "N2cv3hal12cpu_baseline12_GLOBAL__N_120RGB8toYUV420pInvokerE", "video::set_1controlMatrix_10()", "Input layer not found: ", "Luv2RGBfloat", "Sanity check on size of \"%s\" value failed; tag ignored", "G]TFN[ UFO[ VFP[ MFKL ]F\\L MF]F K[S[ NFKL PFLI RFMG YF\\G ZF\\H [F\\I \\F\\L OZL[ OYM[ PYQ[ OZR[", "endWriteChunk", "N12opencv_caffe14SliceParameterE", "copyMakeBorder", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX28Filter2DItNS2_4CastIddEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "Ptr<cv::BaseColumnFilter> cv::opt_SSE4_1::getColumnSumFilter(int, int, int, int, double)", "OPENCV_DUMP_ERRORS", "/home/vagrant/build/srclib/opencv/modules/features2d/src/brisk.cpp", "CHECK failed: file != NULL: ", "calib3d::fisheye_1stereoRectify_10()", "_param2.channels() == 1 && (((_param2.rows == 1 || _param2.cols == 1) && (_param2.rows + _param2.cols - 1 == cn || _param2.rows + _param2.cols - 1 == 1 || (_param1.size() == Size(1, 4) && _param1.type() == CV_64F && cn <= 4))) || (_param2.rows == cn && _param2.cols == cn && disttype == NORMAL))", "'out_location' must not be NULL", "CL_INVALID_GL_OBJECT", "\"abc_searchview_description_voice\" : \"Carian suara\"", "core::PSNR_11()", "Unknown pooling type \"", "static_cast<", "NSt6__ndk120__shared_ptr_emplaceIN2cv32AffinePartial2DEstimatorCallbackENS_9allocatorIS2_EEEE", "^AStereoMatcher.BM", "leafValues", "n_labels", "void cv::hal::cpu_baseline::addWeighted16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, const double *)", "out_index", "layerShapesIt != layersShapes.end()", "KYVOR\\ WOS\\ USUQSOQOOPNQMSMUNWPXRXTV QOOQNSNVPX P\\U\\", "imgproc::Laplacian_13()", "The library is compiled without QT support", "\"abc_searchview_description_clear\" : \"\uac80\uc0c9\uc5b4 \uc0ad\uc81c\"", "invalid after png_start_read_image or png_read_update_info", "\"abc_shareactionprovider_share_with\" : \"Shp\u00ebrnda publikisht me\"", "virtual void cv::MatOp_T::transpose(const cv::MatExpr &, cv::MatExpr &) const", "video::buildOpticalFlowPyramid_11()", "%s: Sorry, cannot nest SubIFDs", "virtual cv::Mat cv::BOWKMeansTrainer::cluster(const cv::Mat &) const", "video::readOpticalFlow_10()", "cannot zero out thread value for __cxa_get_globals()", "__itt_counter_set_value", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphFilter<cv::opt_AVX2::(anonymous namespace)::MinOp<short>, cv::opt_AVX2::(anonymous namespace)::MorphVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_int16x16> > >::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MinOp<short>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_int16x16> >]", "Invalid buffer size", "JZNFNX VLV^ NNVL NOVM NWVU NXVV", "\"abc_capital_off\" : \"\u0622\u0641\"", "\"abc_toolbar_collapse_description\" : \"Daralt\"", "\"abc_searchview_description_clear\" : \"P\u00e4ringu t\u00fchistamine\"", "dataWindow", "biasLayerData", "int cv::estimateAffine3D(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, double, double)", "I[JFRPR[ ZFRP", "RotatedRect", "video::calc_10()", "v.size() == svd.vt.size()", "left_val", "N2cv8opt_AVX212_GLOBAL__N_111MorphFilterINS1_5MinOpIdEENS1_10MorphNoVecEEE", "(cc%(bps*stride))!=0", "Ptr<cv::BaseColumnFilter> cv::cpu_baseline::getColumnSumFilter(int, int, int, int, double)", "imgproc::pyrMeanShiftFiltering_12()", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_111MorphFilterINS3_5MaxOpItEENS3_8MorphVecINS3_4VMaxINS1_12hal_baseline10v_uint16x8EEEEEEENS_9allocatorISD_EEEE", "N2cv36Upright_MLDB_Full_Descriptor_InvokerE", "F^RJIZ RJ[Z", "E_NFH[ OFI[ [FU[ \\FV[ KFRF XF_F LPXP E[L[ R[Y[", "batch_gradient_descent", "N2cv22Affine2DRefineCallbackE", "Unknown parameter num_output for layer type ", "photo::textureFlattening_13()", "!ld.outputBlobsWrappers[i].empty()", "void cv::hal::opt_AVX::log32f(const float *, float *, int)", "(ipoints.rows == 1 && ipoints.channels() == 2) || ipoints.cols*ipoints.channels() == 2", "W_ho.size[0] == (int)b_o.total()", "MapKey::GetInt32Value", "exceeds application limits", "N3Imf15Pxr24CompressorE", "KXRKPMOOMUK\\ QLPNNTL\\ RKTKVLVNUPRQ TKULUNTPRQ RQTRUTUVTWRXQXOWNT RQSRTTTVRX", "The matrix is not continuous so the number of rows can not be changed", "[ INFO:", "SOFT_MARGIN", "getByte", "/home/vagrant/build/srclib/opencv/modules/core/src/merge.simd.hpp", "blobs[1].total() == n && blobs[0].isContinuous() && blobs[1].isContinuous() && blobs[0].type() == CV_32F && blobs[1].type() == CV_32F", "N2cv8opt_AVX212_GLOBAL__N_117MorphColumnFilterINS1_5MaxOpIfEENS1_14MorphColumnVecINS1_4VMaxINS_8hal_AVX211v_float32x8EEEEEEE", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphRowFilter<cv::opt_AVX2::(anonymous namespace)::MaxOp<double>, cv::opt_AVX2::(anonymous namespace)::MorphRowNoVec>::operator()(const uchar *, uchar *, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MaxOp<double>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphRowNoVec]", "N12opencv_caffe17HDF5DataParameterE", "\"abc_action_bar_up_description\" : \"\u0d2e\u0d41\u0d15\u0d33\u0d3f\u0d32\u0d47\u0d15\u0d4d\u0d15\u0d4d \u0d28\u0d3e\u0d35\u0d3f\u0d17\u0d47\u0d31\u0d4d\u0d31\u0d41\u0d1a\u0d46\u0d2f\u0d4d\u0d2f\u0d41\u0d15\"", "getTypeFromDXGI_FORMAT", "moneypunct_byname failed to construct for ", "Ptr<cv::BaseColumnFilter> cv::opt_AVX2::getColumnSumFilter(int, int, int, int, double)", "decltype (", " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", "fabs(sc) > DBL_EPSILON", "latitude", "Repeated fields can't have default values.", " with type ", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_111MorphFilterINS3_5MaxOpIhEENS3_8MorphVecINS3_4VMaxINS1_8hal_AVX210v_uint8x32EEEEEEENS_9allocatorISD_EEEE", "Internal error", "reprojectImageTo3D", "psrc1->sameSize(*psrc2) && type1 == type2", "(int)nelems >= 0", "JZMLWX MLONQOTOVNWMWKUKUMTO ONTO QOWM VKVN ULWL WXUVSUPUNVMWMYOYOWPU UVPU SUMW NVNY MXOX", "void cv::matchTemplate(cv::InputArray, cv::InputArray, cv::OutputArray, int, cv::InputArray)", "ThunderDecode", "Number of input channels should be multiple of %d but got %d", "), this value label conflicts with ", "Unexpected number of input nodes", "%llu: Invalid strip byte count, strip %lu", "virtual void cv::opt_AVX2::SymmColumnFilter<cv::opt_AVX2::Cast<float, short>, cv::opt_AVX2::SymmColumnVec_32f16s>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::Cast<float, short>, VecOp = cv::opt_AVX2::SymmColumnVec_32f16s]", "Unexpected end of file.", "closest_quad", "int cv::opt_AVX2::(anonymous namespace)::MorphColumnVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_float32x8> >::operator()(const uchar **, uchar *, int, int, int) const [VecUpdate = cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_float32x8>]", "virtual void cv::cpu_baseline::(anonymous namespace)::SqrRowSum<unsigned short, double>::operator()(const uchar *, uchar *, int, int) [T = unsigned short, ST = double]", "use_cell_clip", "void cv::opt_AVX2::cvt64f8s(const double *, size_t, uchar *, size_t, schar *, size_t, cv::Size, void *)", "createGaussianKernels", "H\\KFKL YFYIXLTQSSRWR[ SRRTQWQ[ XLSQQTPWP[R[ KJLHNFPFUIWIXHYF MHNGPGRH KJLINHPHUI", "LXNQOPPPQQQSPV QSRQTPUPVQVSUVTY", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn13CropLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "N2cv2ml25NormalBayesClassifierImpl13NBPredictBodyE", "\"abc_shareactionprovider_share_with\" : \"\u092f\u093e\u0902\u091a\u094d\u092f\u093e\u0938\u0939 \u0938\u093e\u092e\u093e\u092f\u093f\u0915 \u0915\u0930\u093e\"", "Both input images must have the same data type", "NSt6__ndk111__money_getIcEE", "MXOVQVOROPPNRMSMUNVPVRTVVV", "void cv::dnn::dnn4_v20190122::Net::Impl::forwardLayer(cv::dnn::dnn4_v20190122::LayerData &)", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIhisEENS_12VResizeCubicIhisNS_11FixedPtCastIihLi22EEENS_21VResizeCubicVec_32s8uEEEEE", "cvXorS", "accumulate", "Upsample-name", "AddEnumValue accepts only valid integer values: value ", "G]PFNGLIKKJNJSKVLXNZP[T[VZXXYVZSZNYKXIVGTFPF OPUP", "Unknown parameter alpha for layer type ", "features2d::BFMatcher_11()", "m_offset == 32 + m_maplength", "The key is an empty", "paddings[i].first >= 0", "EnumOptions", "\"abc_searchview_description_clear\" : \"Ta bort fr\u00e5gan\"", "/home/vagrant/build/srclib/opencv/modules/ml/src/svm.cpp", "N6google8protobuf2io24ConcatenatingInputStreamE", "calib3d::getTextureThreshold_10()", "dist2Threshold", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphColumnFilter<cv::opt_AVX2::(anonymous namespace)::MinOp<float>, cv::opt_AVX2::(anonymous namespace)::MorphColumnVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_float32x8> > >::operator()(const uchar **, uchar *, int, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MinOp<float>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphColumnVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_float32x8> >]", "video::calcOpticalFlowPyrLK_15()", "video::setVarMax_10()", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::Gray2RGB<unsigned short> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::Gray2RGB<unsigned short>]", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphFilter<cv::opt_SSE4_1::(anonymous namespace)::MinOp<unsigned char>, cv::opt_SSE4_1::(anonymous namespace)::MorphVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_uint8x16> > >::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MinOp<unsigned char>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_uint8x16> >]", "scalefactor", "virtual void cv::ml::RTreesImpl::write(cv::FileStorage &) const", "!params.has(\"offset\")", "G^XIYFYLXIVGTFQFNGLIKKJNJSKVLXNZQ[T[VZXZY[YS MILKKNKSLVMX QFOGMJLNLSMWOZQ[ XTXY WSWYVZ TS\\S USWT VSWU ZSYU [SYT", "N2cv3dnn16ElementWiseLayerINS0_11ReLUFunctorEEE", "conflicting calls to set alpha mode and background", "#version: 1.0", "MWPORMRV", "G]OFI[K[ PFJ[ LFQFK[ YOYNXNXPZPZNYMWMUNQROS MSOSQTRUTYUZWZ QUSYTZ OSPTRZS[U[WZYW MFPG NFOH", "\"abc_searchview_description_submit\" : \"Bidali kontsulta\"", "N7cvflann7anyimpl21typed_base_any_policyIbEE", "void cv::cpu_baseline::cvt8s32s(const schar *, size_t, uchar *, size_t, int *, size_t, cv::Size, void *)", "Not implemented field number ", "TIFFFillTile", "\"abc_searchview_description_voice\" : \"\u0927\u094d\u0935\u0928\u093f \u0916\u094b\u091c\"", "N3Iex13EaddrinuseExcE", "DEBUG", "nBitmapToMat caught cv::Exception: %s", "virtual void cv::cpu_baseline::(anonymous namespace)::ColumnSum<int, short>::operator()(const uchar **, uchar *, int, int, int)", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphRowFilter<cv::cpu_baseline::(anonymous namespace)::MinOp<unsigned short>, cv::cpu_baseline::(anonymous namespace)::MorphRowVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_uint16x8> > >::operator()(const uchar *, uchar *, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MinOp<unsigned short>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphRowVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_uint16x8> >]", "cv::LUT only supports tables of size 256.", "dnn::getFLOPS_13()", "virtual void cv::cpu_baseline::ColumnFilter<cv::cpu_baseline::Cast<float, float>, cv::cpu_baseline::SymmColumnSmallVec_32f>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::Cast<float, float>, VecOp = cv::cpu_baseline::SymmColumnSmallVec_32f]", "src.type() == dst.type() && src.size() == dst.size()", "Invalid YCbCr subsampling", "int cv::cpu_baseline::sum16u(const ushort *, const uchar *, int *, int, int)", "../../../../3rdparty/protobuf/src/google/protobuf/map_field.h", "virtual bool cv::VideoCapture::grab()", "imgproc::accumulateSquare_10()", "CV_64FC1", "cv::Mat cv::estimateRigidTransform(cv::InputArray, cv::InputArray, bool)", "computeDescriptorsAndOrOrientation", "RefMerge", "/home/vagrant/build/srclib/opencv/modules/core/src/mathfuncs_core.simd.hpp", "Unsupported depth! Only CV_8U is supported for NORM_L2", "tilegrdtly", "N12_GLOBAL__N_118CLAHE_CalcLut_BodyIhLi256ELi0EEE", "Input array has NULL data pointer", "NSt6__ndk120__shared_ptr_emplaceIN2cv27HomographyEstimatorCallbackENS_9allocatorIS2_EEEE", "The vertex does not belong to the graph", "0 <= j && j < nsamples", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphRowFilter<cv::opt_AVX2::(anonymous namespace)::MinOp<double>, cv::opt_AVX2::(anonymous namespace)::MorphRowNoVec>::operator()(const uchar *, uchar *, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MinOp<double>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphRowNoVec]", "E_RJIZ RJ[Z", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/color_rgb.simd.hpp", "isSubmatrix", "ml::getVarSymbolFlags_10()", "HingeLoss", "srcs[i].size == dst.size && srcs[i].type() == dst.type() && srcs[i].isContinuous()", "Missing Huffman code table entry", "Sanity check on directory count failed, this is probably not a valid IFD offset", "void cv::hal::opt_SSE4_1::min32s(const int *, size_t, const int *, size_t, int *, size_t, int, int)", "src.type() == CV_8UC1 || src.type() == CV_8UC3 || src.type() == CV_8UC4", "N12opencv_caffe23TransformationParameterE", "features2d::compute_10()", "orderFoundConnectedQuads", "Not a TIFF file, bad BigTIFF offsetsize %d (0x%x)", "N2cv9BFMatcherE", "Can not grow image by strips when using separate planes", "BKbhTb~X", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/io/strtod.cc", "std::abs(w->ord_responses[si]) == 1", "void cv::hal::add64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, void *)", "SliceLayerImpl", "G]LML[ MMM[ WMW[ XMX[ IMPM TM[M MTWT I[P[ T[[[", "MWSZR[QZRYSZS\\R^Q_", "H\\PBP_ TBT_ XKXJWJWLYLYJXHWGTFPFMGKIKLLNOPURWSXUXXWZ LLMNOOUQWRXT MGLILKMMONUPXRYTYWXYWZT[P[MZLYKWKUMUMWLWLV", "TIFFAdvanceDirectory", "N3Iex8E2bigExcE", "XMLPacket", "KZOOK\\ POL\\ NUNWOXQXSWTV VOTVTWUXWXXWYU WOUVUWVX", "void cv::hal::opt_AVX2::cvtBGR5x5toGray(const uchar *, size_t, uchar *, size_t, int, int, int)", "virtual void cv::opt_SSE4_1::ColumnFilter<cv::opt_SSE4_1::Cast<float, short>, cv::opt_SSE4_1::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::Cast<float, short>, VecOp = cv::opt_SSE4_1::ColumnNoVec]", "\"search_menu_title\" : \"\u062c\u0633\u062a\u062c\u0648\"", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphRowFilter<cv::opt_SSE4_1::(anonymous namespace)::MaxOp<double>, cv::opt_SSE4_1::(anonymous namespace)::MorphRowNoVec>::operator()(const uchar *, uchar *, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MaxOp<double>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphRowNoVec]", "void cv::opt_AVX2::(anonymous namespace)::medianBlur_SortNet(const cv::Mat &, cv::Mat &, int) [Op = cv::opt_AVX2::(anonymous namespace)::MinMax16u, VecOp = cv::opt_AVX2::(anonymous namespace)::MinMaxVec16u]", "png_image_read: alpha channel lost", "ROIPooling", "/home/vagrant/build/srclib/opencv/modules/imgcodecs/src/utils.hpp", "concat_num", "LYOMONNNNMOLQKTKVLWNVPTQQROSNUNX TKULVNUPTQ NWOVPVSWVWWV PVSXVXWVWU", "Field numbers must be positive integers.", "Unknown ARM float register", "Symbol name \"", "ABORTED", "Invalid vertical YCbCr subsampling", "int cv::opt_AVX2::sum32f(const float *, const uchar *, double *, int, int)", "Ptr<cv::BaseRowFilter> cv::opt_AVX2::getMorphologyRowFilter(int, int, int, int)", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_114MorphRowFilterINS3_5MaxOpItEENS3_11MorphRowVecINS3_4VMaxINS1_8hal_AVX211v_uint16x16EEEEEEENS_9allocatorISD_EEEE", "uncompressed_support_vectors", "N6google8protobuf10TextFormat21FastFieldValuePrinterE", "`n`lns", "wrong number of points", "imgproc::setLevels_10()", "kernel_shape", "IZJRKPLONOOPORNUNWOX MONPNRMUMWOXQXSWTV VOTVTWUXWXXWYU WOUVUWVX", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_117MorphColumnFilterINS3_5MinOpIfEENS3_14MorphColumnVecINS3_4VMinINS1_8hal_AVX211v_float32x8EEEEEEENS_9allocatorISD_EEEE", "%s: Null count for \"%s\" (type %d, writecount %d, passcount %d)", "features2d::getDescriptorChannels_10()", "images must have at least four channels", "Ptr<cv::FilterEngine> cv::cpu_baseline::createBoxFilter(int, int, cv::Size, cv::Point, bool, int)", "TIFFCheckDirOffset", "\"abc_shareactionprovider_share_with\" : \"Deel met\"", "NSt6__ndk114default_deleteIN2cv3dnn23ShuffleChannelLayerImplEEE", "NSt6__ndk19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEE", "(int)LAST_VALUE_FLANN_INDEX_TYPE", "box_w", "G\\WHVJTORUQWOZM[ QLPNNOLOKMKKLINGQF[FXGWHVKTSSVRXPZM[K[IZHYHXIWJXIY SFWGXG OSPRRQVQXPZMXT", "alignof (", "void cv::hal::cmp64f(const double *, size_t, const double *, size_t, uchar *, size_t, int, int, void *)", "core::setNumThreads_10()", "Number of pixels per column in the image's data window is not a multiple of the y subsampling factor of the \"", "features2d::drawKeypoints_12()", "arrays[i] != 0", "TIFFWriteRawTile", "\"abc_capital_on\" : \"\u1260\u122d\u1277\u120d\"", "Monday", "covMatType == COV_MAT_GENERIC || covMatType == COV_MAT_DIAGONAL || covMatType == COV_MAT_SPHERICAL", "NSt6__ndk120__shared_ptr_emplaceIN2cv4impl10DynamicLibENS_9allocatorIS3_EEEE", "calib3d::estimateAffinePartial2D_10()", "ml::predict_10()", "img.depth() == CV_8U && winSize.width > 2 && winSize.height > 2", "Failed to allocate memory for temporary new sampleinfo array (%d 16 bit elements)", "short", "MWNLVX", "N3Iex15EconnabortedExcE", "\"abc_activitychooserview_choose_application\" : \"Escoller unha aplicaci\u00f3n\"", "Missing ':'", "basic_shader_group_size", "Invalid JPEG file structure: two SOF markers", "\"abc_search_hint\" : \"\u0a16\u0a4b\u0a1c\u2026\"", "8void cv::getRectSubPix(cv::InputArray, cv::Size, cv::Point2f, cv::OutputArray, int)", "inpShape.size() >= paddings.size()", "cvStartAppendToSeq", "BruteForce-HammingLUT", "virtual void cv::opt_AVX2::RowFilter<double, double, cv::opt_AVX2::RowNoVec>::operator()(const uchar *, uchar *, int, int) [ST = double, DT = double, VecOp = cv::opt_AVX2::RowNoVec]", "BruteForce-Hamming", "ml::getGamma_10()", "\", which is not imported by \"", "UpgradeV0LayerType", "fields; these will be ignored for the upgrade.", "\"abc_action_bar_up_description\" : \"Nach oben\"", "?void cv::QRDetect::init(const cv::Mat &, double, double)", "npoints >= 4 && npoints == std::max(ipoints.checkVector(2, CV_32F), ipoints.checkVector(2, CV_64F))", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/floodfill.cpp", "TonemapMantiuk", "CV_ARE_TYPES_EQ(A, dABdB) && dABdB->rows == A->rows*B->cols && dABdB->cols == B->rows*B->cols", "The fundamental matrix must be a single-channel matrix", "\"abc_action_mode_done\" : \"Fet\"", "... Line %d: trying open '%s'", "void cv::hal::opt_AVX2::addWeighted16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, const double *)", "inputs[0][1] % group == 0", "TIFFWriteDirectoryTagLongLong8Array", "virtual cv::VideoCapture &cv::VideoCapture::operator>>(cv::UMat &)", "JP2 box: ", "void cv::convertScaleAbs(cv::InputArray, cv::OutputArray, double, double)", "MXUSTQRPPQOSPURVTUUS VPSY", "\" in prototxt", "imgproc::blur_10()", "  Message type: ", "\"abc_activitychooserview_choose_application\" : \"Scegli un'applicazione\"", "Null <sizes> pointer", "findHomography", "N2cv28MLDB_Full_Descriptor_InvokerE", "sCAL height", "void cv::hal::opt_AVX2::recip16u(const ushort *, size_t, ushort *, size_t, int, int, const double *)", "int cv::opt_SSE4_1::(anonymous namespace)::MorphRowVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_uint16x8> >::operator()(const uchar *, uchar *, int, int) const [VecUpdate = cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_uint16x8>]", "/home/vagrant/build/srclib/opencv/modules/core/src/matmul.simd.hpp", "\"abc_activitychooserview_choose_application\" : \"Khetha uhlelo lokusebenza\"", "F^JJQJUKWLYNZQZSYVWXUYQZJZ ORZR", "int cv::opt_AVX2::(anonymous namespace)::MorphVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_uint16x16> >::operator()(uchar **, int, uchar *, int) const [VecUpdate = cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_uint16x16>]", "Value out of range for int32 option \"", "interpolation", "TextureWrapModes", "ml::setTrainMethod_12()", "cvMul", "winSigma", "0 <= i && i < sz.height", "N12opencv_caffe15PythonParameterE", "dst_buffer", "Failed to parse GraphDef file: ", "Invalid key_size (=%d). Valid values for your system are %d <= key_size < %d.", "N2cv3dnn13LSTMLayerImplE", "incorrect byte-order specifier", "Unsupported source image", "cv::BinaryFunc cv::getConvertFunc(int, int)", "bool cv::eigen(cv::InputArray, cv::OutputArray, cv::OutputArray)", "cvSetSeqReaderPos", "cvPrevTreeNode", "    Component %d: %dhx%dv q=%d", "push_back", "videoio::VideoCapture_12()", "IZWNUMRMONMPLSLVMYNZQ[T[VZ RMPNNPMSMVNYOZQ[ MTUT", "N6google8protobuf2io25CopyingInputStreamAdaptorE", "void cv::destroyWindow(const cv::String &)", "%s: Out of memory (TIFF structure)", "core::setErrorVerbosity_10()", "H\\KQMNOMRMSOSR QMRORRQVPXNZL[K[JZJYKXLYKZ QVQYR[U[WZYW YNXOYPZOZNYMXMVNTPSRRVRYS[", "dynamic_cast", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2019012230DeconvolutionSameKerasSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "width", "MWOSUSTQRPPQOSPURVTV", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2019012219SoftMaxSlimSubgraphEEE", "cvClearSeq", "OPENCV_TRACE", "Too much image data", "cv::Moments cv::moments(cv::InputArray, bool)", "org.opencv.dnn", "dnn::get_1name_10()", "N6google8protobuf2io16FileOutputStream23CopyingFileOutputStreamE", "void cv::dnn::dnn4_v20190122::(anonymous namespace)::CaffeImporter::populateNet(cv::dnn::dnn4_v20190122::Net)", "/home/vagrant/build/srclib/opencv/modules/features2d/src/akaze.cpp", "Threshold", "N2cv22KMeansDistanceComputerILb0EEE", "NSt6__ndk114default_deleteIN2cv11ParallelJobEEE", "IPP:ipp_bilateralFilter(src, dst, d, sigmaColor, sigmaSpace, borderType)", "compute_gradient", "GetInt32", "Ptr<cv::BaseRowFilter> cv::cpu_baseline::getMorphologyRowFilter(int, int, int, int)", "static cv::MatExpr cv::Mat::ones(cv::Size, int)", "Software", "\" seems to be defined in \"", "void cv::hal::cpu_baseline::min32s(const int *, size_t, const int *, size_t, int *, size_t, int, int)", "inv_output_scale", "video::setNumLevels_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_114MorphRowFilterINS3_5MinOpIsEENS3_11MorphRowVecINS3_4VMinINS1_12hal_baseline9v_int16x8EEEEEEENS_9allocatorISD_EEEE", "transform_param messages for transformation fields.", "G]KEJJ ZEYJ ONNS VNUS KWJ\\ ZWY\\ KGYG KHYH OPUP OQUQ KYYY KZYZ", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_116SymmColumnFilterINS2_4CastIdtEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "F\\IIJGLFOFQGRIRLQOPQNSKU OFPGQIQMPPNS VFT[ WFS[ KUYU", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/repeated_field.cc", "Video I/O: plugin '", "\"abc_activity_chooser_view_see_all\" : \"\u09b8\u09ac\u0997\u09c1\u09b2\u09cb \u09a6\u09c7\u0996\u09c1\u09a8\"", "basic_string::substr", "virtual void cv::opt_SSE4_1::SymmColumnFilter<cv::opt_SSE4_1::Cast<float, float>, cv::opt_SSE4_1::SymmColumnVec_32f>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::Cast<float, float>, VecOp = cv::opt_SSE4_1::SymmColumnVec_32f]", "H\\QFNGLJKOKRLWNZQ[S[VZXWYRYOXJVGSFQF QFOGNHMJLOLRMWNYOZQ[ S[UZVYWWXRXOWJVHUGSF", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::YCrCb2RGB_f<float> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::YCrCb2RGB_f<float>]", "void cv::hal::resize(int, const uchar *, size_t, int, int, uchar *, size_t, int, int, double, double, int)", "\"abc_activity_chooser_view_see_all\" : \"Zobrazit v\u0161e\"", "photo::setExposureWeight_10()", "calib3d::solvePnP_11()", "Import \"", "CV_IS_IMAGE(arr)", "cvHoughLines2", "__itt_sync_acquired", "\"abc_action_bar_home_description\" : \"\u8f6c\u5230\u4e3b\u5c4f\u5e55\"", "outputs.size() == scaleFactors.size()", "__itt_track_group_create", "_TIFFVGetField", "N2cv5utils5trace7details17AsyncTraceStorageE", "objdetect::QRCodeDetector_10()", "The mask must be 8-bit 1-channel image", "videoio::release_10()", "output_buffer", "image_jacobian_translation_ECC", "calib3d::initUndistortRectifyMap_10()", "dSinCos_LA", "void cv::opt_AVX2::cvt8u64f(const uchar *, size_t, uchar *, size_t, double *, size_t, cv::Size, void *)", "/home/vagrant/build/srclib/opencv/modules/core/src/mean.dispatch.cpp", "OpenCV TIFF: failed (int)TIFFReadEncodedStrip(tif, tileidx, buffer, buffer_size) >= 0", "LYMQNOPMSMTNTQRWRZS[ RMSNSQQWQZR[U[WYXW", "None of array parameters is changed: dummy call?", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIfEE", "__itt_suppress_pop", "void cv::sqrBoxFilter(cv::InputArray, cv::OutputArray, int, cv::Size, cv::Point, bool, int)", "ml::trainM_10()", "N2cv10opt_SSE4_112_GLOBAL__N_19ColumnSumIdsEE", "NWQMSQQV WMSQ", "N2cv10PxMDecoderE", "\"abc_activitychooserview_choose_application\" : \"Izv\u0113lieties lietotni\"", "\" is not defined or is not an extension of \"", "_dst.data == data0", "Mat::n_1setTo__JDDDDJ()", "dnn::blobFromImages_13()", "void cv::opt_AVX2::cvt32f8u(const float *, size_t, uchar *, size_t, uchar *, size_t, cv::Size, void *)", "empty rotated images", "computeOrbDescriptors", "Google.Protobuf.Reflection", "UnknownVideoAPI(%d)", "getCell", "void cv::opt_AVX2::cvt16u16f(const ushort *, size_t, uchar *, size_t, cv::float16_t *, size_t, cv::Size, void *)", "sublevels", "initHalideBackend", "\"abc_capital_on\" : \"An\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_19ColumnSumIddEENS_9allocatorIS5_EEEE", "\"abc_capital_off\" : \"\u5173\u95ed\"", "cv::Mat cv::internal::NormalizePixels(const cv::Mat &, const cv::internal::IntrinsicParams &)", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::RGB2HLS_b>::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::RGB2HLS_b]", "cv::SumFunc cv::getSumFunc(int)", "itePerStep", "\"abc_action_menu_overflow_description\" : \"Vi\u0161e opcija\"", "BackendWrapper", "calib3d::estimateAffinePartial2D_16()", "ngroups > 0 && inpCn % ngroups == 0 && outCn % ngroups == 0", "cvUndistortPointsInternal", "F]KMILHJHIIGKFLFNGOIOKNOMRLVLXMZN[P[RZTXVUWSYM [FYMVWT]RbPfNgMfMdNaP^S[VY[V", "\"abc_activitychooserview_choose_application\" : \"Dastur tanlang\"", "G]ZIJY ZIWJQJ XKUKQJ ZIYLYR XKXNYR QRJR PSMSJR QRQY PSPVQY", "OXRRUOWLXIXGWFUGTIKdKfLgNfOcPZQ[S[UZVYXV TISNRRO[M`Kd", "JFIF extension marker: type 0x%02x, length %u", "KYOKPX PKQV YKPX MKRK VK[K", "N2cv8opt_AVX212_GLOBAL__N_114MorphRowFilterINS1_5MinOpIfEENS1_11MorphRowVecINS1_4VMinINS_8hal_AVX211v_float32x8EEEEEEE", "!objectPoints.empty() && (objectPoints.type() == CV_32FC3 || objectPoints.type() == CV_64FC3)", "p.checkVector(2, CV_32S) >= 0", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ElementWiseLayerINS2_14SigmoidFunctorEEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "calib3d::create_110()", "H]SFLb YFRb LQZQ KWYW", "varType.at<uchar>(ninputvars + i) == VAR_ORDERED", "N10__cxxabiv116__shim_type_infoE", "hconcat", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_117MorphColumnFilterINS3_5MaxOpIsEENS3_14MorphColumnVecINS3_4VMaxINS1_8hal_AVX210v_int16x16EEEEEEENS_9allocatorISD_EEEE", "drawContours", "video::createBackgroundSubtractorKNN_13()", "CHECK failed: backup_bytes_ == 0 && buffer_.get() != NULL: ", "N3Iex9EnoentExcE", "N17opencv_tensorflow6OpListE", "No profile for iCCP chunk", "Fractional scanlines cannot be read", "cannot allocate __cxa_eh_globals", "src1.size() == src2.size()", "void cv::hal::cpu_baseline::absdiff32s(const int *, size_t, const int *, size_t, int *, size_t, int, int)", "m.dims <= 2 && m.rows == m.cols", "imgproc::GaussianBlur_10()", "dst->refcount == 0", "N6google8protobuf22ServiceDescriptorProtoE", "imagePoints1 should contain vector of vectors of points of type Point2f", "!fixedSize() || ((ogl::Buffer*)obj)->size() == _sz", "calib3d::convertPointsToHomogeneous_10()", "getBytes", "hasLayerAttr(layer, \"mode\") && getLayerAttr(layer, \"mode\").s() == \"MIN_FIRST\"", "Start Of Frame 0x%02x: width=%u, height=%u, components=%d", "_descriptors.isUMat() || _descriptors.isUMatVector() || _descriptors.isMat() || _descriptors.isMatVector()", "features2d::radiusMatch_11()", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphColumnFilter<cv::cpu_baseline::(anonymous namespace)::MinOp<double>, cv::cpu_baseline::(anonymous namespace)::MorphColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MinOp<double>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphColumnNoVec]", "::string literal", "\"abc_activitychooserview_choose_application\" : \"T\u0259tbiq se\u00e7in\"", "void cv::fisheye::projectPoints(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, double, cv::OutputArray)", "G]KFK[ YFY[ KFYF", "keep_dims", "updateSideB", "nmixtures <= 255", "base_size", "input.size[1] == outBlob.size[1]", "NSt6__ndk120__shared_ptr_emplaceI20CvPriorityQueueFloatNS_9allocatorIS1_EEEE", "Mat::nDump()", "NSt6__ndk114default_deleteIN2cv3dnn17PriorBoxLayerImplEEE", "32FastNlMeansMultiDenoisingInvokerIhlm7DistAbsiE", "void cv::hal::sub8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "Input image is too small. Expected at least 3x3", "checkScalar(value, type(), _value.kind(), _InputArray::MAT )", "There should be space between literals", "virtual void cv::opt_AVX2::SymmColumnFilter<cv::opt_AVX2::Cast<float, float>, cv::opt_AVX2::SymmColumnSmallVec_32f>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::Cast<float, float>, VecOp = cv::opt_AVX2::SymmColumnSmallVec_32f]", "objdetect::setSVMDetector_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_114MorphRowFilterINS3_5MinOpIfEENS3_11MorphRowVecINS3_4VMinINS1_10hal_SSE4_111v_float32x4EEEEEEENS_9allocatorISD_EEEE", "!fixedSize() || len == ((std::vector<uchar>*)v)->size() / esz", "src1.size() == src3.size()", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_9Lab2RGB_fEEE", "Image step is wrong", "DefaultCropOrigin", "N2cv25DummyBufferPoolControllerE", "OpenCVThread-%03d", "cvRange", "PXM::readData(): unknown exception", "core::calcCovarMatrix_11()", "N2cv8StereoBME", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_18RGB2GrayItEEEE", "dnn::readNetFromCaffe_12()", "Improper call to JPEG library in state %d", "N6google8protobuf2io18IstreamInputStream25CopyingIstreamInputStreamE", "\"abc_searchview_description_submit\" : \"\u0caa\u0ccd\u0cb0\u0cb6\u0ccd\u0ca8\u0cc6\u0caf\u0ca8\u0ccd\u0ca8\u0cc1 \u0cb8\u0cb2\u0ccd\u0cb2\u0cbf\u0cb8\u0cc1\"", "Invalid SOS parameters for sequential JPEG", "MXQ[P[OZOYPXQXRYR[Q]P^N_ PYPZQZQYPY Q[Q\\P^", "N2cv8opt_AVX212_GLOBAL__N_19SqrRowSumIddEE", ">N2cv8colormap6WinterE", "Invalid SVM kernel type (or custom kernel)", "Output", "\"abc_toolbar_collapse_description\" : \"\u0421\u043e\u0431\u0435\u0440\u0438\"", "float64", "video::createBackgroundSubtractorKNN_10()", "resizeGeneric_Invoker", "numWeights != 0", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16SoftMaxLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "MeteringMode", "dnn::setInput_13()", "result == true", "\"search_menu_title\" : \"\u041f\u0440\u0435\u0431\u0430\u0440\u0430\u0458\"", "ml::trainM_12()", "N2cv8LMSolverE", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi2EEElm7DistAbsiE", "photo::fastNlMeansDenoisingColored_10()", "You should explicitly call mapDevice/unmapDevice methods for ogl::Buffer object", "N2cv3hal8opt_AVX212_GLOBAL__N_119YUV420p2RGB8InvokerILi2ELi4EEE", "NWTMSNSOTP UPSPQQPSPUQVSWSXRYQY", "factorWidth.type()", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_111MorphFilterINS3_5MinOpIfEENS3_8MorphVecINS3_4VMinINS1_10hal_SSE4_111v_float32x4EEEEEEENS_9allocatorISD_EEEE", "photo::createCalibrateDebevec_13()", "Error in Huffman-encoded data (decoded data are shorter than expected).", "Unknown operation type \"", "(mask.cols == 1 || mask.rows == 1) && (int)mask.total() == count", "(Ljava/lang/Object;)Z", "hIST must be after", "KYOBOb PBPb OBVB ObVb", "\"abc_activitychooserview_choose_application\" : \"S\u00e9lectionner une application\"", "N2cv3hal12cpu_baseline12_GLOBAL__N_119YUV422toRGB8InvokerILi2ELi0ELi1ELi4EEE", "core::batchDistance_10()", "iterator != 0", "void cv::ellipse(cv::InputOutputArray, cv::Point, cv::Size, double, double, double, const cv::Scalar &, int, int, int)", "int cv::cpu_baseline::(anonymous namespace)::MorphRowVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_uint8x16> >::operator()(const uchar *, uchar *, int, int) const [VecUpdate = cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_uint8x16>]", "void cv::hal::min32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, void *)", "requiredOutputs > 0 && inpShape[axis] % requiredOutputs == 0", "BOOST", "ImageFullWidth", "missing blank line after FORMAT specifier", "G]VGUHVIWHWGUF XFRFOGMILLL[ RFPGNIMLM[ WHW[ XFX[ IMWM I[P[ T[[[", "\"abc_search_hint\" : \"Iyasesha...\"", "F`PFP[ QFQ[ IFHLHFTF QPXP[Q\\R]T]W\\Y[ZX[M[ XPZQ[R\\T\\W[YZZX[", "ml::getTrainSampleIdx_10()", "void cv::nld_step_scalar_one_lane(const cv::Mat &, const cv::Mat &, cv::Mat &, float, int, int)", "KYTFN[ UFO[ VFP[ QFYF K[S[ RFUG SFTH WFUH XFUG OZL[ OYM[ PYQ[ OZR[", "imgproc::phaseCorrelate_11()", "OTSMQSQURVSV", "Unsqueeze", "void cv::hal::cvtBGRtoXYZ(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool)", "__itt_api_fini", "Unsupported combination of source format (=%d), and buffer format (=%d)", "double cv::solvePoly(cv::InputArray, cv::OutputArray, int)", "allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size", "vtable for ", "D`DUGSKQPPTPYQ]S`U", "{unnamed type#", "\"abc_action_bar_home_description\" : \"\u0627\u0644\u062a\u0646\u0642\u0644 \u0625\u0644\u0649 \u0627\u0644\u0634\u0627\u0634\u0629 \u0627\u0644\u0631\u0626\u064a\u0633\u064a\u0629\"", "ml::setBackpropWeightScale_10()", "Unknown colormap id; use one of COLORMAP_*", "\"abc_activity_chooser_view_see_all\" : \"Angalia zote\"", "reorgStride > 0", "ml::create_11()", "outer", "int cv::solveCubic(cv::InputArray, cv::OutputArray)", "I[LMR[ MMRY NMSY XNSYR[ JMQM TMZM KMNO PMNN VMXN YMXN", "src.size() == dst.size() && dst.type() == CV_32FC1", "cvPutText", "internal row logic error", "photo::createTonemapDrago_11()", "N2cv2ml10KDTreeImplE", "N3Iex15EafnosupportExcE", "/home/vagrant/build/srclib/opencv/modules/dnn/src/op_halide.cpp", "void cv::hal::opt_AVX2::cvt32f16f(const float *, cv::float16_t *, int)", "N6google8protobuf8internal12FieldSkipperE", "RelatedSoundFile", "! _src.empty()", "_sizes && 0 < d && d <= CV_MAX_DIM", "!m.empty() && m.size() == covSize && (m.channels() == 1)", "videoio::getBackendName_10()", "getWeights", "\"abc_action_bar_home_description\" : \"Revenir \u00e0 l'accueil\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_16RowSumIhiEENS_9allocatorIS5_EEEE", "nclusters >= 1", "CPPTYPE_ENUM", "Unknown matcher name", "objdetect::detectMultiScale_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline16SymmColumnFilterINS2_4CastIdsEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", " len = %d;", "Unexpected data block length.", "void cv::opt_AVX2::cvt16s64f(const short *, size_t, uchar *, size_t, double *, size_t, cv::Size, void *)", "\"abc_action_bar_up_description\" : \"\u0416\u043e\u0433\u043e\u0440\u0443\"", "padded_area", "H]WJR[T[ ZFXJS[ ZFT[ ZFJUZU", "F_\\S[UYVWVUUTTQPPONNLNJOIQISJULVNVPUQTTPUOWNYN[O\\Q\\S", "_disp.type() == CV_16S || _disp.type() == CV_32S", "execute", "I[YYKK SLOLKKLOLS OLLLLO", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline18SymmRowSmallFilterIffNS2_19SymmRowSmallVec_32fEEENS_9allocatorIS5_EEEE", "N2cv2ml5BoostE", "N3Iex8EnxioExcE", "\"abc_capital_off\" : \"NO\"", "I[OMK[ YNXMWMUNQROSNS NSPTQUSZT[U[VZ", "type2 == CV_64F && (sz2.height == 1 || sz2.height == 4)", "CV_IS_MAT(_tvec1) && CV_IS_MAT(_tvec2)", "Write to XMS failed", "ReadNetParamsFromTextBufferOrDie", "Cannot determine current file position (%T).", "Unknown exception in JNI code {core::minMaxLoc()}", "Not a TIFF file, bad version number %d (0x%x)", "inconsistent rendering intents", "virtual void cv::opt_AVX2::RowFilter<unsigned short, double, cv::opt_AVX2::RowNoVec>::operator()(const uchar *, uchar *, int, int) [ST = unsigned short, DT = double, VecOp = cv::opt_AVX2::RowNoVec]", "TIFFReadRawStrip", "features2d::setBlockSize_10()", "int cv::opt_AVX2::(anonymous namespace)::MorphRowVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_uint8x32> >::operator()(const uchar *, uchar *, int, int) const [VecUpdate = cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_uint8x32>]", "int cv::cpu_baseline::sum32f(const float *, const uchar *, double *, int, int)", "The matrix is not continuous, thus its number of rows can not be changed", "cvtOnePlaneYUVtoBGR", "outputs[0][0] > 0 && outputs[0][1] > 0 && outputs[0][2] > 0 && outputs[0][3] > 0", "Get_MLDB_Full_Descriptor", "Valid palette required for paletted images", "void cv::cpu_baseline::cvt8u8s(const uchar *, size_t, uchar *, size_t, schar *, size_t, cv::Size, void *)", "\"abc_searchview_description_clear\" : \"Not\u012br\u012bt vaic\u0101jumu\"", "MWNPOPPQPROTOUPVRVSUTS UPTSTUUVVV", "N2cv12cpu_baseline9RowFilterItdNS0_8RowNoVecEEE", "Cannot allocate buffer larger than kint32max for ", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_114MorphRowFilterINS3_5MaxOpItEENS3_11MorphRowVecINS3_4VMaxINS1_12hal_baseline10v_uint16x8EEEEEEENS_9allocatorISD_EEEE", "core::norm_15()", "parseMap", "G\\HJJGLFMFOHOKNOLVLYM[ MFNHNKLRKVKYM[N[QZTWVTXPYMZIZGYFXFWGVIVLWNYP[Q]Q", "nattr % 2 == 0", "leaf_max_size", "\"abc_action_bar_home_description\" : \"\u0548\u0582\u0572\u0572\u057e\u0565\u056c \u057f\u0578\u0582\u0576\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_19ColumnSumIdtEENS_9allocatorIS5_EEEE", "int cv::opt_AVX2::RowVec_32f::operator()(const uchar *, uchar *, int, int) const", "Invalid data for scanline %ld", "google.protobuf.EnumValueOptions", "MWOHQJSMTPTTSWQZO\\ QJRLSPSTRXQZ", "CPPTYPE_INT32", "\"abc_searchview_description_search\" : \"Pretraga\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_16RowSumItiEENS_9allocatorIS5_EEEE", "filter_h", "NYNVPSQQQSSVTXTZR[ NZP[T[VZWYYV", "calib3d::create_17()", "CL_LINKER_NOT_AVAILABLE", "initJasper", "KZKVMSNQMUGg MUNSPRRRTSUUUWTYSZQ[ MZO[R[UZWYZV", "\"status_bar_notification_info_overflow\" : \"\u0431\u043e\u043b\u044c\u0448 \u0437\u0430 999\"", "JZNKNX OKOX LKSKVLWNVPSQ SKULVNUPSQ OQSQVRWTWUVWSXLX SQURVTVUUWSX", "text chunk: out of memory", "distanceTransform", "FieldDescriptorProto.oneof_index $0 is out of range for type \"$1\".", "\"abc_action_bar_home_description\" : \"P\u0101rvietoties uz s\u0101kuma ekr\u0101nu\"", "\"search_menu_title\" : \"\u641c\u5c0b\"", "train_rprop", "BatchNormalization", "N2cv3dnn14dnn4_v2019012212EltwiseLayerE", "AddInt32", "Illegal jstype for int64, uint64, sint64, fixed64 or sfixed64 field: ", "KZNMONPPPXQZS[U[WZXX OMPNQPQXRZ LPMNNMPMQNRPRXSZT[", "\"abc_action_bar_up_description\" : \"Eiti \u012f vir\u0161\u0173\"", "\"abc_toolbar_collapse_description\" : \"Komprimera\"", "virtual void cv::opt_AVX2::ColumnFilter<cv::opt_AVX2::Cast<double, double>, cv::opt_AVX2::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::Cast<double, double>, VecOp = cv::opt_AVX2::ColumnNoVec]", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120YUV420sp2RGB8InvokerILi2ELi1ELi3EEE", "\"abc_searchview_description_voice\" : \"\u0413\u043e\u043b\u043e\u0441\u043e\u0432\u0438\u0439 \u043f\u043e\u0448\u0443\u043a\"", "unexpected NamedColor ICC profile class", "minArea", "imgproc::applyColorMap_11()", "cv::MatExpr cv::max(double, const cv::Mat &)", ">N2cv3hal10opt_SSE4_112_GLOBAL__N_120RGB8toYUV420pInvokerE", "biasLayerData->outputBlobsWrappers.size() == 1", "img.rows", "fdetector must not be empty when keypoints1 or keypoints2 is empty", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_18Gray2RGBIfEEEE", "void cv::cpu_baseline::cvt64f16u(const double *, size_t, uchar *, size_t, ushort *, size_t, cv::Size, void *)", "\"abc_action_menu_overflow_description\" : \"Jo\u0161 opcija\"", "F^KFK[ LFL[ XFX[ YFY[ HFOF UF\\F H[\\[ [[\\b \\[\\b", "\"abc_action_bar_home_subtitle_description_format\" : \"%1$s \u2013 %2$s \u2013 %3$s\"", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::RGB5x52Gray>::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::RGB5x52Gray]", "maxLevel >= 0 && winSize.width > 2 && winSize.height > 2", "srccn == 3 || srccn == 4", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/arena.cc", "Note that enum values use C++ scoping rules, meaning that enum values are siblings of their type, not children of it.  Therefore, \"", "Wrong \"StripByteCounts\" field, ignoring and calculating from imagelength", "Horizontal differencing \"Predictor\" not supported with %d-bit samples", "Cannot determine an origin framework with a name ", "ml::getUseSurrogates_10()", "\"abc_searchview_description_query\" : \"\u0a38\u0a35\u0a3e\u0a32 \u0a16\u0a4b\u0a1c\u0a4b\"", "void cv::hal::cpu_baseline::split16u(const ushort *, ushort **, int, int)", "__itt_get_timestamp", "FLANN_INDEX", " but not used.", "The closing '%c' does not match the opening '%c'", "unexpected compose", "virtual void cv::dnn::FlattenLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "(npoints = prevPtsMat.checkVector(2, CV_32F, true)) >= 0", "Missing required \"Colormap\" tag", "N7cvflann11KMeansIndexINS_2L2IfEEE22KMeansDistanceComputerE", "StripRowCounts", "input.isContinuous()", "Feel free to add support for more if you need it.", "IO error during reading of \"%s\"; tag ignored", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/geometry.cpp", "AXCRGRR` GSRa FSRb X:Rb", "virtual const vector<int> &cv::ml::DTreesImplForRTrees::getActiveVars()", "Opened temporary file %s", "void cv::hal::opt_AVX2::sub8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "src9.isMat() || src9.isUMat()", "void cv::goodFeaturesToTrack(cv::InputArray, cv::OutputArray, int, double, double, cv::InputArray, int, int, bool, double)", "cv::VideoCapture::VideoCapture(const cv::String &, int)", "\"search_menu_title\" : \"Soek\"", "void cv::hal::cpu_baseline::addRNGBias32f(float *, const float *, int)", "fn[\"initialStepSize\"].isReal()", "imgproc::setMaxBufferSize_10()", "mv && n > 0", "cv::MatExpr cv::min(const cv::Mat &, const cv::Mat &)", "CL_INVALID_KERNEL", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIfffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIfffNS_4CastIffEENS_20VResizeLinearVec_32fEEEEE", "is_m2_vector", "%virtual void cv::ORB_Impl::detectAndCompute(cv::InputArray, cv::InputArray, std::vector<KeyPoint> &, cv::OutputArray, bool)", "N10__cxxabiv120__function_type_infoE", "void cv::hal::magnitude32f(const float *, const float *, float *, int)", "core::bitwise_1not_11()", "While cross-validation one or more of the classes have been fell out of the sample. Try to reduce <Params::k_fold>", "TlsAbstraction", "3)a>3)a>3)a>3)a>", "features2d::getNOctaveLayers_10()", "\"abc_action_bar_home_subtitle_description_format\" : \"%1$s \u104a %2$s \u104a %3$s\"", "CV_IS_MAT(matP) && matP->rows == 3 && (matP->cols == 3 || matP->cols == 4)", "__itt_heap_allocate_begin", "NSt6__ndk114default_deleteIN2cv3dnn16ElementWiseLayerINS2_13AbsValFunctorEEEEE", "Early end of file: read ", "registered: ", "concat_index", "adj_w", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicItffEENS_12VResizeCubicItffNS_4CastIftEENS_22VResizeCubicVec_32f16uEEEEE", "narrays <= 1000", "N3Iex9EisdirExcE", "J[OOMOLNLLMKOKPLPNNPMRMUNWOXQYTYVXWWXUXRWPUNULVKXKYLYNXOVO NWPXUXWW", "Cannot remove compression scheme %s; not registered", "\"abc_shareactionprovider_share_with_application\" : \"Dela med %s\"", "cv::Size cv::getContinuousSize2D(cv::Mat &, cv::Mat &, int)", "Must set \"ImageWidth\" before writing data", "cv::Mat cv::findFundamentalMat(cv::InputArray, cv::InputArray, int, double, double, cv::OutputArray)", "A.type() == x.type() && A.cols == x.rows && x.cols == b.cols", "Invalid data type specification", "imgproc::pyrUp_10()", "NSt6__ndk114default_deleteIN2cv13RHO_HEST_REFCEEE", "factorHeight.type()", "calib3d::estimateAffine2D_10()", "N2cv9FormatterE", "virtual void cv::dnn::MVNLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "\"abc_searchview_description_voice\" : \"Hangalap\u00fa keres\u00e9s\"", "\"abc_searchview_description_clear\" : \"\u0421\u04b1\u0440\u0430\u049b\u0442\u044b \u0436\u043e\u044e\"", "j>=0 && j<(int)vtcs.size()", "core::solvePoly_10()", "decompose", "terminating with %s exception of type %s: %s", "Conv2D", "virtual void cv::opt_SSE4_1::(anonymous namespace)::ColumnSum<double, unsigned char>::operator()(const uchar **, uchar *, int, int, int) [ST = double, T = unsigned char]", "objectPoints should contain vector of vectors of points of type Point3f", "Data compression (zlib) failed.", "TIFFFetchStripThing", "N2cv12cpu_baseline8Filter2DIdNS0_4CastIddEENS0_11FilterNoVecEEE", "MapKey::GetUInt32Value", "1.6.10", "\"abc_action_menu_overflow_description\" : \"Fleiri valkostir\"", "unsigned short", "imgproc::line_12()", "N2cv29Bayer2RGB_EdgeAware_T_InvokerIhNS_24SIMDBayerInterpolator_8uEEE", "objdetect::save_11()", "int cv::opt_SSE4_1::(anonymous namespace)::MorphRowVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_uint16x8> >::operator()(const uchar *, uchar *, int, int) const [VecUpdate = cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_uint16x8>]", "opencv_tensorflow.OpDef.ArgDef.description", "cv::Mat cv::getRotationMatrix2D(cv::Point2f, double, double)", "_param", "cmap[idx] == val", "imgproc::EMD_10()", "video::correct_10()", "virtual void cv::ml::DTreesImplForRTrees::startTraining(const Ptr<cv::ml::TrainData> &, int)", "cn == 1 || cn == 3", "Missing parameter: '", "%YAML 1.", "cv::impl::(anonymous namespace)::CvtHelper<cv::impl::(anonymous namespace)::Set<1, -1, -1>, cv::impl::(anonymous namespace)::Set<2, -1, -1>, cv::impl::(anonymous namespace)::Set<0, -1, -1>, cv::impl::(anonymous namespace)::SizePolicy::NONE>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::impl::(anonymous namespace)::Set<1, -1, -1>, VDcn = cv::impl::(anonymous namespace)::Set<2, -1, -1>, VDepth = cv::impl::(anonymous namespace)::Set<0, -1, -1>, sizePolicy = cv::impl::(anonymous namespace)::SizePolicy::NONE]", "Too many color components: %d, max %d", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphRowFilter<cv::opt_SSE4_1::(anonymous namespace)::MaxOp<unsigned short>, cv::opt_SSE4_1::(anonymous namespace)::MorphRowVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_uint16x8> > >::operator()(const uchar *, uchar *, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MaxOp<unsigned short>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphRowVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_uint16x8> >]", "png_write_info was never called before png_write_row", "forwardVkCom failed, fallback to CPU implementation. ", "Directory count exceeded 65535 limit, giving up on counting.", "ONE_CLASS", "void cv::hal::opt_AVX2::absdiff16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int)", "core::mulTransposed_10()", ">N2cv8colormap7RainbowE", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_10RGB5x52RGBEEE", "\"abc_capital_off\" : \"DESAKTIBATUTA\"", "maxConvexity", "Unsupported asymmetric padding in convolution layer", "F^IUISJPLONOPPTSVTXTZS[Q ISJQLPNPPQTTVUXUZT[Q[O", "core::sqrt_10()", "{opencv-object-detector-hog", "I\\PFNMMSMWNYOZQ[S[VZXWYTYRXOWNUMSMQNPOOQNT QFOMNQNWOZ VYWWXTXQWO MFRFPMNT S[UYVWWTWQVNUM NFQG OFPH", "void cv::ml::LogisticRegressionImpl::compute_gradient(const cv::Mat &, const cv::Mat &, const cv::Mat &, const double, cv::Mat &)", "features2d::setQualityLevel_10()", "ml::setMiniBatchSize_10()", "_maxSize > _minSize", "F\\OFI[ PFJ[ QFK[ ULST LF[FZL NPTP F[N[ MFPG NFOH RFPH SFPG WFZG XFZH YFZI ZFZL ULSPST TNRPSR TOQPSQ JZG[ JYH[ KYL[ JZM[", "(icvPOSIT( pObject, imagePoints,(float) focalLength, criteria, rotation, translation )) >= 0", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi4EEExy7DistAbsiE", "IPP:ipp_copyTo(*this, dst, mask)", "setProduceCellOutput", "+Xc=+Xc=+Xc=+Xc=+Xc=+Xc=+Xc=+Xc=", "sortMatrixRowsByIndices", "G]KFKULXNZQ[S[VZXXYUYF", "Unexpected tile block length.", "I[IPKR LKNP RGRO XKVP [PYR", "NSt6__ndk19__num_putIwEE", "(scores[1] & 1) == 0", "radiusSearch", "HarrisResponses", "\"abc_searchview_description_query\" : \"So\u2018rovni izlash\"", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphColumnFilter<cv::opt_AVX2::(anonymous namespace)::MinOp<unsigned char>, cv::opt_AVX2::(anonymous namespace)::MorphColumnVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_uint8x32> > >::operator()(const uchar **, uchar *, int, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MinOp<unsigned char>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphColumnVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_uint8x32> >]", "Field with message or enum type missing type_name.", "cvNextGraphItem", "JPEGEncode", "ranges[i][k] < ranges[i][k+1]", "NVUNTMSMRNRV PPTP", "void cv::PCAProject(cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray)", "Failed to seek in AVI file: position is out of range", "bad parameters to zlib", " [$0]", "JPEG tile height must be multiple of %d", "channels == 1", "u != 0", "\"abc_font_family_body_1_material\" : \"sans-serif\"", "\"abc_searchview_description_query\" : \"\u041f\u043e\u0438\u0441\u043a\u043e\u0432\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441\"", "predictProb", "void cv::hal::gemm32f(const float *, size_t, const float *, size_t, float, const float *, size_t, float, float *, size_t, int, int, int, int)", "FocalLength", "CPPTYPE_MESSAGE", "?qxs?", "N3Iex8ErrnoExcE", "Scale", "N2cv3dnn12LRNLayerImplE", "Sorry, requested compression method is not configured", "Unimplemented mode of LRN layer", "/home/vagrant/build/srclib/opencv/modules/objdetect/src/qrcode.cpp", "J[RGR[ SGS[R[ LFYFYG LFLGYG", "video::createBackgroundSubtractorMOG2_10()", "fractional scanline not read", "+CCC++", "void cv::hal::cpu_baseline::mul32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, const double *)", "anchors >= 1", "N2cv12cpu_baseline12_GLOBAL__N_19ColumnSumIiiEE", "ZIPPostEncode", "MapValueRef::GetStringValue", "tiledesc", "int cv::opt_AVX2::FilterEngine__proceed(cv::FilterEngine &, const uchar *, int, int, uchar *, int)", "video::calcOpticalFlowPyrLK_13()", " complex", "\"abc_action_mode_done\" : \"\u0414\u0443\u0443\u0441\u0441\u0430\u043d\"", "N7cvflann14AutotunedIndexINS_2L2IfEEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn20ConvolutionLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "ml::create_13()", "scalarToRawData", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline9RowFilterItdNS2_8RowNoVecEEENS_9allocatorIS5_EEEE", "softmax_loss", "__itt_marker_ex", "double cv::calibrateCamera(cv::InputArrayOfArrays, cv::InputArrayOfArrays, cv::Size, cv::InputOutputArray, cv::InputOutputArray, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays, int, cv::TermCriteria)", "BcGMG[ HMH[ HPJNMMOMRNSPS[ OMQNRPR[ SPUNXMZM]N^P^[ ZM\\N]P][ DMHM D[K[ O[V[ Z[a[", "depth == CV_32F || depth == CV_32S || depth == CV_64F", "Slice", "imgproc::contourArea_11()", "Wh.rows == 4*Wh.cols", "Grid step must greater than 1", "IYWHUKSPQUPWNZL[ YLWNTOQOONNLNJOHQGUFYFWHVJTPRVQXOZL[J[IZIXJWKXJY", "inp0.dims >= 2 && (int)inp0.total(1) == numInp", "calib3d::fisheye_1initUndistortRectifyMap_10()", "RURUTTURTPRO", "maxArea", "N2cv8opt_AVX230FAST_t_patternSize16_AVX2_ImplE", "dp/dc must be 2Nx2 floating-point matrix", "photo::setSamples_10()", "BaselineNoise", "imgproc::sepFilter2D_13()", "calib3d::getOptimalNewCameraMatrix_10()", "void cv::hal::sqrt64f(const double *, double *, int)", "int cv::opt_SSE4_1::FilterEngine__proceed(cv::FilterEngine &, const uchar *, int, int, uchar *, int)", "A.type() == CV_64FC1 && B.type() == CV_64FC1", "WhitePoint", "cv::TransformFunc cv::getPerspectiveTransform(int)", "blockSize.width % cellSize.width == 0 && blockSize.height % cellSize.height == 0", "occ0%rowsize != 0", "\"abc_capital_on\" : \"SEES\"", "cHRM Red Z", "LXVPUNTMRMPNOONQNSOUPVRVTUUSRS", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/smooth.dispatch.cpp", "|R&K>", "eigen", "void cv::opt_AVX2::cvt16f64f(const cv::float16_t *, size_t, uchar *, size_t, double *, size_t, cv::Size, void *)", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline16SymmColumnFilterINS2_4CastIdtEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "Import ", "imgproc::dilate_12()", "img.type() == CV_8UC1 || img.type() == CV_8UC3 || img.type() == CV_8UC4", "N7cvflann12KNNResultSetIfEE", "CL_INVALID_DEVICE_PARTITION_COUNT", "Layer \"%s\" produce only %zu outputs, the #%d was requested", "N2cv8opt_AVX212_GLOBAL__N_19ColumnSumIisEE", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_8RGB2GrayIfEEEE", "keypoints.size() == (size_t)nimages", "calib3d::findHomography_15()", "PUSLRMSNTMSL SPSXRYQYPX", "padding_w", "0 <= coi && coi < cn", "LXTFQQPUPXQZR[T[VYWW UFRQQUQZ QFVFRTQX RFUG SFTH", "N2cv7TLSDataINS_5instr11NodeDataTlsEEE", "I[N.Q1S4U8V=VCUITMQXP\\ObOgPlQoSs Q1S5T8U=UBTHSLPWO[NaNgOlQpSsVv", "N3Imf14TypedAttributeIN5Imath4Vec2IfEEEE", "cvGraphRemoveVtx", "horDiff32", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_118SymmRowSmallFilterIffNS2_19SymmRowSmallVec_32fEEENS_9allocatorIS5_EEEE", "The number of pyramid levels is too large or negative", "Ptr<cv::BaseRowFilter> cv::cpu_baseline::getRowSumFilter(int, int, int, int)", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIddfLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "TIFFFetchNormalTag", "uchar", " message of type \"", "Integer overflow", "Bad sequence slice", "photo::stylization_11()", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_7RGB2RGBIhEEEE", "Corrupt JPEG data: bad ICC marker", "cvInitUndistortMap", "plugin_api", "I[X+U1R8P=OANFMNMVN^OcPgRlUsXy U1S6Q<P@OFNNNVO^PdQhSnUs", "'\\uXXXX' currently not supported", "rsz == dims*2 || (rsz == 0 && images.depth(0) == CV_8U)", "]?8i^?", "calcEdges", "void cv::spatialGradient(cv::InputArray, cv::OutputArray, cv::OutputArray, int, int)", "getVotes", "Data type is not the same for all arrays", "H]UFO[ VFP[ OFLLNF]F\\L\\F L[S[", "void cv::idft(cv::InputArray, cv::OutputArray, int, int)", "\"abc_searchview_description_search\" : \"\u0d24\u0d3f\u0d30\u0d2f\u0d7d\"", "addLayerInput", "void cv::warpPerspective(cv::InputArray, cv::OutputArray, cv::InputArray, cv::Size, int, int, const cv::Scalar &)", "com.intel.itt.collector_lib_64", "Unknown APP0 marker (not JFIF), length %u", "Unexpected character", "idxmat.isContinuous() && idxmat.type() == CV_32S && (idxmat.cols == 1 || idxmat.rows == 1)", "Parameter '", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2019012220ReshapeKerasSubgraphEEE", "NSt6__ndk120__shared_ptr_pointerIP12AMediaFormatPFvS2_ENS_9allocatorIS1_EEEE", "ml::getClassWeights_10()", "\"abc_action_mode_done\" : \"Kon\u010dano\"", "recursive_mutex lock failed", "photo::edgePreservingFilter_13()", "N2cv9XMLParserE", "void cv::medianBlur(cv::InputArray, cv::OutputArray, int)", "keep_top_k", "float cv::compute_k_percentile(const cv::Mat &, float, float, int, int, int)", "Z_OK on Z_FINISH with output space", "7Z:RARRo @RQo ?RRr Z\"VJRr", "(D.rows == ((flags & 1) == 0 ? A.rows : A.cols))", "Invalid index file, cannot read", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_9CCStatsOpEE10SecondScanE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2019012220SoftMaxKerasSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "getScharrKernels", "RP&>6", "NULL vertex array pointer", "void cv::pyrUp(cv::InputArray, cv::OutputArray, const cv::Size &, int)", "MXTTTSSRQROSNTMVMXNZP[S[VYXV", "extended", "cvCartToPolar", "imgproc::sepFilter2D_12()", "N2cv10opt_SSE4_112ColumnFilterINS0_4CastIisEENS0_25SymmColumnSmallVec_32s16sEEE", "JYT^R[PVOPOJPGRFTFUGVJVMURR[PaOdNfLgKfKdLaN^P\\SZWX", "calib3d::undistort_10()", "Need space between number and identifier.", "Mat::nPutD()", "features2d::setPatchSize_10()", "Tile width is zero", "N2cv10opt_SSE4_112_GLOBAL__N_114MorphRowFilterINS1_5MinOpIhEENS1_11MorphRowVecINS1_4VMinINS_10hal_SSE4_110v_uint8x16EEEEEEE", "put_bits", "imgproc::Subdiv2D_11()", "void cv::colormap::ColorMap::operator()(cv::InputArray, cv::OutputArray) const", "Extensions to non-lite types can only be declared in non-lite files.  Note that you cannot extend a non-lite type to contain a lite type, but the reverse is allowed.", "imgproc::connectedComponentsWithStats_10()", "G]ZFH[ [FI[ \\FJ[ \\FNFLL H[V[XU OFLL PFMI RFNG R[VZ T[WX U[XU", "NSt6__ndk114default_deleteIN2cv3dnn16PermuteLayerImplEEE", "N2cv12_GLOBAL__N_126SparsePyrLKOpticalFlowImplE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12ColumnFilterINS2_4CastIftEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "N2cv10opt_SSE4_112_GLOBAL__N_114MorphRowFilterINS1_5MinOpIdEENS1_13MorphRowNoVecEEE", ">img.dims <= 2 && templ.dims <= 2 && corr.dims <= 2", "0 == (jas_image_tlx(image)) && \"not supported\"", "N17opencv_tensorflow26NodeDef_AttrEntry_DoNotUseE", "void cv::hal::opt_AVX2::add16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int)", "vectorWidths", "FFMPEG", "KYQFOGNINKOMQNSNUMVKVIUGSFQF", "max_depth", "__itt_resume", "(lutcn == cn || lutcn == 1) && _lut.total() == 256 && _lut.isContinuous() && (depth == CV_8U || depth == CV_8S)", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIbEE", "image_w", "void cv::fastNlMeansDenoisingMulti(cv::InputArrayOfArrays, cv::OutputArray, int, int, float, int, int)", "N2cv3ocl20OpenCLBufferPoolImplE", "/home/vagrant/build/srclib/opencv/modules/core/src/batch_distance.cpp", "box_h", "TIFF directory is missing required \"StripByteCounts\" field, calculating from imagelength", "N2cv23CvtColorIPPLoop_InvokerINS_19IPPGray2BGRAFunctorItEEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_117MorphColumnFilterINS3_5MinOpIsEENS3_14MorphColumnVecINS3_4VMinINS1_8hal_AVX210v_int16x16EEEEEEENS_9allocatorISD_EEEE", "points must have only one channel", "too big maximum Huffman code size", "contour.depth() == CV_32S || contour.depth() == CV_32F", "CV_32S", "findOutsideCorners", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_9RGB2HLS_bEEE", "virtual cv::Mat cv::BOWKMeansTrainer::cluster() const", "Mat::n_1zeros__I_3II()", "img.depth() <= CV_8S && img.channels() == 1", "__itt_mark_global", "Can't open \"", "cropSize.total()", "N2cv12cpu_baseline16SymmColumnFilterINS0_4CastIffEENS0_17SymmColumnVec_32fEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_111MorphFilterINS3_5MinOpIhEENS3_8MorphVecINS3_4VMinINS1_8hal_AVX210v_uint8x32EEEEEEENS_9allocatorISD_EEEE", "void cv::setTrackbarPos(const cv::String &, const cv::String &, int)", "OpenGL API call", "NVSLRMSNTMSL QROXOZQ[SZTYVV RRPXPZQ[", "octaves", "cvInitNArrayIterator", "imgproc::resize_13()", "Cannot transcode due to multiple use of quantization table %d", "void cv::Mat::convertTo(cv::OutputArray, int, double, double) const", "I[WQWPVPVRXRXPWNUMRMONMQLTLVMYNZP[R[UZWW OONQMTMWNY RMPOOQNTNWOZP[", "/home/vagrant/build/srclib/opencv/modules/core/src/persistence_json.cpp", "PFvP15AMediaExtractorE", "void cv::hal::exp64f(const double *, double *, int)", "N12opencv_caffe18HingeLossParameterE", "Not a PNG file", "27FastNlMeansDenoisingInvokerItlm7DistAbsiE", "\". Value: \"", "insufficient memory", "core::multiply_10()", "calib3d::sampsonDistance_10()", "NSt6__ndk18numpunctIwEE", "N2cv17SparseOpticalFlowE", "\"search_menu_title\" : \"Buscar\"", "branching", "Call to NULL write function", "F^MMKLJJJIKGMFNFPGQIQKPONULYJ[H[GZGX MRVOXN[L]J^H^G]F\\FZHXLVRUWUZV[W[YZZY\\V", "reorder", "MWTMRMPNOPOSPURVTUUSTQRPPQOS", "model_proto.has_graph()", "Wrong data type %d for \"%s\"; tag ignored", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphFilter<cv::opt_SSE4_1::(anonymous namespace)::MaxOp<short>, cv::opt_SSE4_1::(anonymous namespace)::MorphVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_int16x8> > >::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MaxOp<short>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_int16x8> >]", "no rotation images", "bool cv::utils::fs::exists(const cv::String &)", "Unknown metric type", "The numbers of input and output samples do not match", "int cv::cpu_baseline::(anonymous namespace)::MorphVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_float32x4> >::operator()(uchar **, int, uchar *, int) const [VecUpdate = cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_float32x4>]", "OWOVQSTNULVIVGUFSGRIQMPTPZQ[R[TZUYWV", "\"abc_searchview_description_search\" : \"Buscar\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_111MorphFilterINS3_5MinOpItEENS3_8MorphVecINS3_4VMinINS1_10hal_SSE4_110v_uint16x8EEEEEEENS_9allocatorISD_EEEE", "basic_string", "\"abc_shareactionprovider_share_with_application\" : \"Kop\u012bgot ar %s\"", "TIFFVStripSize64", "\"abc_activitychooserview_choose_application\" : \"\u0538\u0576\u057f\u0580\u0565\u056c \u056e\u0580\u0561\u0563\u056b\u0580\"", "cvComputeCorrespondEpilines", "N17opencv_tensorflow19AttrValue_ListValueE", "incorrect count for field \"%s\", expected 2, got %d", "I[LOOX MOOU ROOX ROUX SOUU XOUX JOOO VOZO", "fillPoly", "\"abc_action_bar_home_description\" : \"Ir \u00e1 p\u00e1xina de inicio\"", "JZZGXGUHSIPLONNQNUOXPZQ[S[TZUXVUVQUNTLQIOHLGJG", "ml::setOptimalParameters_11()", "N2cv29AffinePartial2DRefineCallbackE", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::Gray2RGB<float> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::Gray2RGB<float>]", "L[VKVX WKWX VRUPSOQOOPNRNUOWQXSXUWVU QOPPOROUPWQX TKWK VXYX", "allocated", "void cv::hal::opt_SSE4_1::max16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int)", "G^XIYLYFXIVGSFQFNGLIKKJNJSKVLXNZQ[S[VZXX QFOGMILKKNKSLVMXOZQ[ XSX[ YSY[ US\\S", "(cc0%rowsize)!=0", "ulong3", "j < nimages", "features2d::cluster_11()", "MWRXWOMORX RUUP RUOP RRSP RRQP", "arithm_ipp_min64f", "vcausal", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/shapedescr.cpp", "\"abc_shareactionprovider_share_with_application\" : \"%s \u0ab8\u0abe\u0aa5\u0ac7 \u0ab6\u0ac7\u0ab0 \u0a95\u0ab0\u0acb\"", "\"abc_shareactionprovider_share_with_application\" : \"Partekatu %s erabiltzailearekin\"", "void cv::DescriptorMatcher::knnMatch(cv::InputArray, cv::InputArray, std::vector<std::vector<DMatch> > &, int, cv::InputArray, bool) const", "imgproc::line_11()", "N2cv3dnn14dnn4_v2019012219L2NormalizeSubgraphE", "\"abc_capital_off\" : \"\u0e1b\u0e34\u0e14\"", "\"abc_searchview_description_clear\" : \"\u0bb5\u0bbf\u0ba9\u0bb5\u0bb2\u0bc8 \u0b85\u0bb4\u0bbf\"", "N2cv18DISOpticalFlowImpl26PatchInverseSearch_ParBodyE", "cvRelease", "TIFFReadBufferSetup", "core::PCACompute_11()", "N6google8protobuf14DescriptorPool14ErrorCollectorE", "video::getPolySigma_10()", "checkTrainData", "N12opencv_caffe17AccuracyParameterE", "imgproc::distanceTransformWithLabels_11()", " for ", "\"abc_action_bar_up_description\" : \"Navegar hacia arriba\"", "Invalid progressive parameters at scan script entry %d", "pthread_mutex_lock: ", "detectMultiScale", "w.isContinuous() && w.type() == CV_32F && w.total() == (size_t)n", "IPP:((ippicviCopy_8u_C1R_L)(sptr, (int)src.step, dptr, (int)dst.step, ippiSizeL(sz.width, sz.height))) >= 0", "\" implements neither SetCachedSize() nor ByteSize().  Must implement one or the other.", "CV_IS_MAT(_imagePoints1) && CV_IS_MAT(_imagePoints2) && CV_IS_MAT(_objectPoints) && CV_IS_MAT(_npoints) && CV_IS_MAT(matR) && CV_IS_MAT(matT)", "png_read_update_info/png_start_read_image: duplicate call", "N2cv12cpu_baseline12_GLOBAL__N_19ColumnSumIddEE", "N2cv12cpu_baseline12_GLOBAL__N_111MorphFilterINS1_5MinOpIfEENS1_8MorphVecINS1_4VMinINS_12hal_baseline11v_float32x4EEEEEEE", "double cv::fisheye::stereoCalibrate(cv::InputArrayOfArrays, cv::InputArrayOfArrays, cv::InputArrayOfArrays, cv::InputOutputArray, cv::InputOutputArray, cv::InputOutputArray, cv::InputOutputArray, cv::Size, cv::OutputArray, cv::OutputArray, int, cv::TermCriteria)", "void cv::filter2D(cv::InputArray, cv::OutputArray, int, cv::InputArray, cv::Point, double, int)", "Read error on strip %lu; got %llu bytes, expected %llu", "Unsupported file storage format", "SpatialBatchNormalization", "virtual void cv::opt_AVX2::(anonymous namespace)::SqrRowSum<unsigned short, double>::operator()(const uchar *, uchar *, int, int) [T = unsigned short, ST = double]", "pterm", "N3Imf14TiledInputFile4DataE", "findChessboardCorners", "CHECK failed: dest: ", "\"abc_searchview_description_voice\" : \"\u1780\u17b6\u179a\u179f\u17d2\u179c\u17c2\u1784\u179a\u1780\u200b\u179f\u17c6\u17a1\u17c1\u1784\"", "route", "N7cvflann7anyimpl16small_any_policyIfEE", "%s at line %u of %s %u (got %u, expected %u)", "N2cv22resizeAreaFast_InvokerIffNS_26ResizeAreaFastVec_SIMD_32fEEE", "Freed XMS handle %u", "uniqueness ratio must be non-negative", "photo::fastNlMeansDenoisingMulti_16()", "static Ptr<cv::ml::RTrees> cv::ml::RTrees::load(const cv::String &, const cv::String &)", "N2cv13IVideoCaptureE", "<invalid depth>", "trace", "0 && \"Not supported\"", "virtual void cv::cpu_baseline::ColumnFilter<cv::cpu_baseline::Cast<float, unsigned char>, cv::cpu_baseline::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::Cast<float, unsigned char>, VecOp = cv::cpu_baseline::ColumnNoVec]", "int cv::cpu_baseline::(anonymous namespace)::MorphVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_int16x8> >::operator()(uchar **, int, uchar *, int) const [VecUpdate = cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_int16x8>]", "\"abc_capital_on\" : \"\u958b\u555f\"", "writeLibTiff", "SSE4.2", "double cv::PSNR(cv::InputArray, cv::InputArray, double)", "void cv::hal::opt_SSE4_1::sub8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int)", "!_map1.empty()", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/prior_box_layer.cpp", "void cv::nld_step_scalar(cv::Mat &, const cv::Mat &, cv::Mat &, float)", "N2cv8opt_AVX29RowFilterIffNS0_10RowVec_32fEEE", "/data/local/tmp/__opencv_temp.XXXXXX", "Mask is not supported", "%s: Failed to allocate space for list of custom values", "L\\UUTSRRPRNSMTLVLXMZO[Q[SZTXVRUWUZV[W[YZZY\\V", "N2cv10opt_SSE4_112_GLOBAL__N_111MorphFilterINS1_5MaxOpItEENS1_8MorphVecINS1_4VMaxINS_10hal_SSE4_110v_uint16x8EEEEEEE", "!hasBias() || blobs[1].total() == (size_t)numOutput", "virtual void cv::opt_AVX2::(anonymous namespace)::RowSum<unsigned short, int>::operator()(const uchar *, uchar *, int, int) [T = unsigned short, ST = int]", "N2cv12cpu_baseline16SymmColumnFilterINS0_4CastIffEENS0_22SymmColumnSmallVec_32fEEE", "N2cv2ml21NormalBayesClassifierE", "void cv::hal::cpu_baseline::mul64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, const double *)", "\"abc_searchview_description_submit\" : \"\u0418\u0437\u043f\u0440\u0430\u0449\u0430\u043d\u0435 \u043d\u0430 \u0437\u0430\u044f\u0432\u043a\u0430\u0442\u0430\"", "opencv_tensorflow.OpDef.ArgDef.name", "std::", "connectedComponents_sub1", "NULL <sizes> pointer", "fabs(m_scale_factor) > 0.0f", "N3Iex10EisconnExcE", "Reserved range end number must be greater than start number.", "NSt6__ndk120__shared_ptr_emplaceIN2cv10ExrDecoderENS_9allocatorIS2_EEEE", "\"abc_shareactionprovider_share_with_application\" : \"\u0e41\u0e0a\u0e23\u0e4c\u0e01\u0e31\u0e1a %s\"", "H\\RFJ[ QIX[ RIY[ RFZ[ KYXY KZXZ J[Z[", "NSt6__ndk117__widen_from_utf8ILj32EEE", "cv::impl::(anonymous namespace)::CvtHelper<cv::impl::(anonymous namespace)::Set<3, -1, -1>, cv::impl::(anonymous namespace)::Set<3, 4, -1>, cv::impl::(anonymous namespace)::Set<0, 5, -1>, cv::impl::(anonymous namespace)::SizePolicy::NONE>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::impl::(anonymous namespace)::Set<3, -1, -1>, VDcn = cv::impl::(anonymous namespace)::Set<3, 4, -1>, VDepth = cv::impl::(anonymous namespace)::Set<0, 5, -1>, sizePolicy = cv::impl::(anonymous namespace)::SizePolicy::NONE]", "The input samples must be 32f matrix with the number of columns = nallvars", "../../../../modules/core/include/opencv2/core/private.cuda.hpp", "\"abc_capital_on\" : \"S\u00cd\"", "LSTMLayerImpl", "FCV_IS_MAT(A) && CV_IS_MAT(B)", "Selected %d colors for quantization", "range.end", "divUp(dcount1, 8) == desc_size", " plugin(s) for ", "Invalid level rounding mode in image header.", "N2cv10opt_SSE4_19RowFilterIfdNS0_8RowNoVecEEE", "opencv_tensorflow.FunctionDef.Node.AttrEntry.key", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_117MorphColumnFilterINS3_5MaxOpIsEENS3_14MorphColumnVecINS3_4VMaxINS1_10hal_SSE4_19v_int16x8EEEEEEENS_9allocatorISD_EEEE", "G]LFL[ MFM[ IFYFYLXF MPUPXQYRZTZWYYXZU[I[ UPWQXRYTYWXYWZU[", "core::add_14()", "fabs(sumw) > 0", "calling android_getCpuFeatures() ... Done (%llx)", "../../../../3rdparty/protobuf/src/google/protobuf/map_field_inl.h", "virtual void cv::dnn::ElementWiseLayer<cv::dnn::PowerFunctor>::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays) [Func = cv::dnn::PowerFunctor]", "max_val1", "_drawKeypoint", "ml::trainAuto_10()", "D`H>Hf I>If M>Mf QBSBSDQDQAR?T>W>Y?[A\\D\\I[LYNWOUOSNRLQNOQNROSQVRXSVUUWUYV[X\\[\\`[cYeWfTfReQcQ`S`SbQb RBRD QCSC Y?ZA[D[IZLYN RLRNPQNRPSRVRX YVZX[[[`ZcYe R`Rb QaSa", "MXTFRGQIQLRMSMTLTKSJRJQK RKRLSLSKRK RGQK QIRJ", "void cv::dnn::dnn4_v20190122::Layer::forward_fallback(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "!sizes.empty()", "MWQMOSPURVTUUSTQRPPQOS", "N2cv11TonemapImplE", "Invalid float number: ", "I\\WIVJVLWMYMZKZIYGWFTFRGQHPJPLQNSO TFRHQJQMSO SOQONPLRKTKWLYMZO[R[UZWXXVXTWRURSSRU QOOPMRLTLXMZ", "time_put_byname failed to construct for ", "tiles", "DetectionBasedTracker: workcycleObjectDetectorFunction: ERROR concerning pointer, received as the function parameter", "(type == CV_8U && dtype == CV_32S) || dtype == CV_32F", "Need space between identifier and decimal point.", "\"abc_search_hint\" : \"\u062c\u0633\u062a\u062c\u0648\u2026\"", "G]SFPGNILLKOJSJVKYLZN[Q[TZVXXUYRZNZKYHXGVFSF OIMLLOKSKWLY UXWUXRYNYJXH SFQGOJNLMOLSLXMZN[ Q[SZUWVUWRXNXIWGVF LXMVOUPURVSXT]U^V^W] T^U_V_ SXS_T`V`W]W\\", "preFilterCap", "LocalizedCameraModel", "NSt6__ndk114default_deleteIN2cv3dnn15RegionLayerImplEEE", "void cv::HuMoments(const cv::Moments &, double *)", "../../../..//", "ROI selector", "dnn::blobFromImage_11()", "double cv::contourArea(cv::InputArray, bool)", "cvarrToMat", "N2cv10AKAZE_ImplE", "Requested layer \"", "objdetect::setEpsY_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112ColumnFilterINS2_4CastIdtEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "\"abc_searchview_description_query\" : \"Iskalna poizvedba\"", "DEADLINE_EXCEEDED", "dst.size() == src.size() && dst.type() == CV_MAKETYPE(lut.depth(), src.channels())", "\" has no value named \"", "read error: failed to allocate buffer", "Too long data type specification", "NSt6__ndk120__shared_ptr_emplaceIN2cv12LegacyWriterENS_9allocatorIS2_EEEE", "_m.dims() <= 2", "KZMONLOKPKQLRORX XOWLVKUKTLSOSX MONMOLPLQMRO XOWMVLULTMSO PXUX", "unexpected info code: %zd", "H\\NJPISFS[ NJNKPJRHR[S[", "posThresh_ > 0", "void cv::dnn::dnn4_v20190122::Net::Impl::initVkComBackend()", "virtual void cv::opt_SSE4_1::(anonymous namespace)::ColumnSum<unsigned short, unsigned char>::operator()(const uchar **, uchar *, int, int, int)", "Non-repeated field \"", "J[OMO[ PMP[ LMSM PTTTWUXWXXWZT[L[ TTVUWWWXVZT[", "__itt_heap_record", "N17opencv_tensorflow12OpDef_ArgDefE", "void cv::hal::opt_AVX2::log32f(const float *, float *, int)", "The position of side B could not be determined, because gamma(b) could not be computed.", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_16RowSumIsdEENS_9allocatorIS5_EEEE", "KZPHPVQYRZT[V[XZYX QHQWRY PHRFRWSZT[ MMVM", "XClipPathUnits", "src1.size == dst.size && src1.channels() == dst.channels()", "scanline oriented access is not supported for downsampled JPEG compressed images, consider enabling TIFF_JPEGCOLORMODE as JPEGCOLORMODE_RGB.", "N2cv8colormap6ParulaE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX216SymmColumnFilterINS2_4CastIfhEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "virtual void cv::opt_AVX2::RowFilter<float, float, cv::opt_AVX2::SymmRowSmallVec_32f>::operator()(const uchar *, uchar *, int, int) [ST = float, DT = float, VecOp = cv::opt_AVX2::SymmRowSmallVec_32f]", "\".  To use it here, please add the necessary import.", "Unknown parameter beta for layer type ", "torch.", "\") to start from the outermost scope.", "When the input arrays in add/subtract/multiply/divide functions have different types, the output array type must be explicitly specified", "\"abc_font_family_menu_material\" : \"sans-serif\"", "video::setWinSize_10()", "src1.type() == dst.type()", "calib3d::setMode_10()", "cvSeqInsertSlice", "OPENCV_VIDEOCAPTURE_DEBUG", "Mat::n_1setTo__JJ()", "getPos", "bytes. ", "Insufficient memory (case %d)", "std::bad_exception", "dfself->file.isReadable", "core::getVersionString_10()", "imgproc::spatialGradient_11()", "calib3d::decomposeEssentialMat_10()", "NormalizeBBoxLayerImpl", "N2cv10opt_SSE4_112_GLOBAL__N_19ColumnSumIiiEE", "imgproc::setCannyHighThresh_10()", "): failed TIFFWriteScanline(tif, buffer, y, 0) == 1", "Only compression windows <= 32k supported by PNG", "\"abc_capital_on\" : \"\u0423\u041a\u0409\u0423\u0427\u0418\"", "\"search_menu_title\" : \"\u0391\u03bd\u03b1\u03b6\u03ae\u03c4\u03b7\u03c3\u03b7\"", "arithm_ipp_and8u", "(strlen(format) >= 2 ? (format[0] == '*') && (format[1] == 'a' || format[1] == 'l') : 0)", "Null double array pointer", "N6google8protobuf8internal12MapEntryImplIN17opencv_tensorflow31NameAttrList_AttrEntry_DoNotUseENS0_7MessageENSt6__ndk112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSF_11ELi0EE15MapEntryWrapperE", "THDiskFile_readString", "void cv::hal::cpu_baseline::div8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, const double *)", "N2cv16BaseImageEncoderE", "/gamma", "batchDistance", "/home/vagrant/build/srclib/opencv/modules/dnn/misc/onnx/opencv-onnx.pb.cc", "Comments are not allowed here", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi3EEEij11DistSquarediE", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/convolution_layer.cpp", "NSt6__ndk117moneypunct_bynameIwLb0EEE", "N2cv3dnn14dnn4_v2019012218ReLU6KerasSubgraphE", "photo::createTonemapMantiuk_13()", "\"abc_action_menu_overflow_description\" : \"M\u00e9s opcions\"", "dnn::set_1blobs_10()", "ResizeLayerImpl", "imgproc::remap_11()", "MIN_FIRST", "\"abc_searchview_description_search\" : \"\u0ba4\u0bc7\u0b9f\u0bc1\"", "\"abc_action_bar_home_subtitle_description_format\" : \"\u200f%1$s\u200f\u060c %2$s\u200f\u060c %3$s\"", "_dx.type() == CV_16SC1 || _dx.type() == CV_16SC3", "\"abc_shareactionprovider_share_with_application\" : \"Deljenje z:\"", "core::findFileOrKeep_10()", "cvDestroyWindow", "features2d::create_14()", "N2cv3hal5DFT2DE", "calcProjection", "proto", "H\\WFW[X[ WFXFX[ WPUNSMPMNNLPKSKULXNZP[S[UZWX WPSNPNNOMPLSLUMXNYPZSZWX", "__itt_api_init", "unsigned __int128", "\"abc_toolbar_collapse_description\" : \"Sbalit\"", "src_points.size() == 4", "J[UPSOQOPQPRQTSTUS UOUSVTXTYRYQXNVLSKRKOLMNLQLRMUOWRXSXVW", "Some collection type: FileNode::SEQ or FileNode::MAP must be specified", "Failed to read directory at offset %llu", "void cv::cpu_baseline::cvt8s64f(const schar *, size_t, uchar *, size_t, double *, size_t, cv::Size, void *)", "virtual void cv::AgastFeatureDetector_Impl::detect(cv::InputArray, std::vector<KeyPoint> &, cv::InputArray)", "key2 < fs->p->str_hash_data.size()", "abort_message", "BaselineSharpness", "videoio::get_10()", "calib3d::recoverPose_12()", "JZMMWW WMMW", "core::useIPP_1NotExact_10()", "use_surrogates", "ReadProtoFromBinaryFile(param_file, param)", "30TegraCvtColor_gray2rgb_Invoker", "weakClassifiers", "N2cv18TonemapMantiukImplE", "N6google8protobuf8internal29InternalMetadataWithArenaBaseINS0_15UnknownFieldSetENS1_25InternalMetadataWithArenaEE9ContainerE", "Photometric tag is missing, assuming data is YCbCr", "imgproc::filter2D_10()", "undeclared position %d requested", "N2cv18ResizeArea_InvokerIffEE", "ml::getRpropDWMinus_10()", "One of required arguments is not a valid matrix", "Mat::n_1submat_1rr()", "F^[FYGVHSHPGNFLFJGIIIKKMMMOLPJPHNF [FH[ [FI[ [FJ[ YTWTUUTWTYV[X[ZZ[X[VYT OGLFIIJLMMPJOG NFJGIK KMOLPH ZUWTTWUZX[[XZU YTUUTY V[ZZ[V H[J[", "ml::getRpropDWMin_10()", "Jacobian is not a valid matrix", "void cv::hal::cpu_baseline::cvtGraytoBGR5x5(const uchar *, size_t, uchar *, size_t, int, int, int)", "0 <= b1 && b1 <= b2 && b2 < nvars", "N6google8protobuf8internal26GeneratedMessageReflectionE", "E_MFMHKYK[ NGLX OFMW UFMWK[ UFUHSYS[ VGTX WFUW ]GUWS[ JFRF UFWF ZF`F KFNG LFMH PFNI QFNG [F]G _F]G", "ml::setTrainTestSplitRatio_11()", "MYRFRWSZU[W[ OMVM", "unique_lock::lock: references null mutex", "The function only supports 32sC1 and 32fC1 datatypes", "dst.cols == (src1.cols*2)", "ICC profile too short", "N2cv3dnn14dnn4_v2019012222ResizeBilinearSubgraphE", "inputs.size() == 2", "CHECK failed: dynamic.get() != NULL: ", "dims <= 3", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi3EEEij7DistAbsiE", "\"abc_action_bar_home_subtitle_description_format\" : \"%1$s - %2$s\uff1a%3$s\"", "\"abc_shareactionprovider_share_with\" : \"\u0a86\u0aa8\u0ac0 \u0ab8\u0abe\u0aa5\u0ac7 \u0ab6\u0ac7\u0ab0 \u0a95\u0ab0\u0acb\"", "    '", "cell_clip", "svd.w.at<double>(0) / svd.w.at<double>(svd.w.rows - 1) < thresh_cond", "Expected hex digits for escape sequence.", "cvPOSIT", "\"abc_toolbar_collapse_description\" : \"\u0cb8\u0c82\u0c95\u0cc1\u0c9a\u0cbf\u0cb8\u0cc1\"", "binary", "\"abc_search_hint\" : \"T\u00ecm ki\u1ebfm\u2026\"", "\"abc_searchview_description_voice\" : \"\u0414\u0443\u0443\u0442 \u0445\u0430\u0439\u043b\u0442\"", "video::createBackgroundSubtractorKNN_11()", "/home/vagrant/build/srclib/opencv/modules/features2d/src/mser.cpp", "ml::setRpropDWPlus_10()", "\"search_menu_title\" : \"Qidirish\"", "warpPerspective", "utils::findDataFile(): the current directory is build sub-directory: ", "N12opencv_caffe12ExpParameterE", "getLayerInputs", "node_proto.input_size() == 0", "widths.size() == heights.size()", "cvScalarToRawData", "variance_encoded_in_target", "PFvP11AMediaCodecE", "N2cv12cpu_baseline12_GLOBAL__N_16RowSumIhtEE", "CodingMethods", "/home/vagrant/build/srclib/opencv/modules/features2d/src/kaze.cpp", "the output array of rotation vectors must be 3-channel 1xn or nx1 array or 1-channel nx3 or nx9 array, where n is the number of views", "  Problem     : ", "static cv::MatExpr cv::Mat::ones(int, const int *, int)", "normalized_bbox", "Attempting to upgrade batch norm layers using deprecated ", "imgproc::invertAffineTransform_10()", "void cv::Cloning::illuminationChange(cv::Mat &, cv::Mat &, cv::Mat &, cv::Mat &, float, float)", "setRegressionAccuracy", "F\\HRINKMMMONPOQRRYSb IOKNMNOOPP HRIPKOMOOPPQQTRYRa XMWPVRTUSWR[Qb YMWQ ZMYOWRTVSXR[ XMZM QbSb", "\"abc_search_hint\" : \"Ara\u2026\"", "N2cv8colormap4BoneE", "responses", "numOutput % ngroups == 0", "TransferFunction", "header_sz > 0", "N2cv5MatOpE", " <!-- resumed -->", "\"abc_shareactionprovider_share_with\" : \"\u0d07\u0d35\u0d30\u0d41\u0d2e\u0d3e\u0d2f\u0d3f \u0d2a\u0d19\u0d4d\u0d15\u0d3f\u0d1f\u0d41\u0d15\"", "adjust3rdMatrix", "TIFFFieldWithTag", "operator[]", "nthreads", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_7RGB2RGBIfEEEE", "Unknown pixel data type.", "N12_GLOBAL__N_116ExifParsingErrorE", "NSt6__ndk110__function6__baseIFvRKN2cv5RangeEEEE", "count >= 0", "N6google8protobuf12_GLOBAL__N_123StringBaseTextGeneratorE", "op == CV_REDUCE_SUM || op == CV_REDUCE_MAX || op == CV_REDUCE_MIN || op == CV_REDUCE_AVG", "NSt6__ndk120__shared_ptr_emplaceIN2cv21CascadeClassifierImplENS_9allocatorIS2_EEEE", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphRowFilter<cv::opt_SSE4_1::(anonymous namespace)::MinOp<float>, cv::opt_SSE4_1::(anonymous namespace)::MorphRowVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_float32x4> > >::operator()(const uchar *, uchar *, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MinOp<float>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphRowVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_float32x4> >]", "\"abc_action_bar_home_description\" : \"\u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u043d\u0430 \u0433\u043b\u0430\u0432\u043d\u044b\u0439 \u044d\u043a\u0440\u0430\u043d\"", "\"search_menu_title\" : \"Tafuta\"", "\"abc_action_bar_home_description\" : \"\u0110i\u1ec1u h\u01b0\u1edbng v\u1ec1 trang ch\u1ee7\"", "N2cv12cpu_baseline8Filter2DItNS0_4CastIftEENS0_11FilterNoVecEEE", ",parentThread=%d,parent=%lld", "\" (numLevels() is not defined for files with RIPMAP level mode).", "inv_scale_y > 0", "Input4", "Mat::nGetIdx()", "getFontData", "TIFFRegisterCODEC", "\" channel is invalid.", "getPoint", "malformed sPLT chunk", "width1", "\"abc_activitychooserview_choose_application\" : \"\u0627\u06cc\u06a9 \u0627\u06cc\u067e \u0645\u0646\u062a\u062e\u0628 \u06a9\u0631\u06cc\u06ba\"", "dCos_A11", "PURURVSVSURU", "objdetect::detect_12()", "Unknown algorithm for choosing initial centers.", "wrapmodes", "ResolutionUnit", "H]LIKFKLLINGQFSFVGXIYKZNZSYVXXVZS[P[MZLYKWKVLUMVLW SFUGWIXKYNYSXVWXUZS[ PPYP", ". This will make the proto fail to compile for some languages, such as C#.", "core::hconcat_10()", "void cv::QRDetect::init(const cv::Mat &, double, double)", "N2cv17Bayer2RGB_InvokerItNS_26SIMDBayerStubInterpolator_ItEEEE", "errf.isContinuous() && errf.type() == CV_32F && (int)errf.total() == count", "dnn::readNet_14()", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16PaddingLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "icvInitMemStorage", "25TegraRowOp_split4_InvokerIKllE", "calib3d::setSmallerBlockSize_10()", "N3Iex9EdquotExcE", "void cv::hal::invSqrt64f(const double *, double *, int)", "bool cv::hal::Cholesky64f(double *, size_t, int, double *, size_t, int)", "/home/vagrant/build/srclib/opencv/modules/dnn/src/caffe/caffe_io.cpp", "mulSpectrums", "int cv::cpu_baseline::FilterVec_8u16s::operator()(const uchar **, uchar *, int) const", "JZLLMKOKQLRNRPQRPSNT OKPLQNQQPS VKUX WKTX NTXT", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2019012231DeconvolutionValidKerasSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "Mat::n_1rowRange()", ">c;j1", "int cv::waitKey(int)", "ColumnFilter", "void cv::compute_diffusivity(cv::InputArray, cv::InputArray, cv::OutputArray, float, KAZE::DiffusivityType)", "void cv::fisheye::undistortImage(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, cv::InputArray, const cv::Size &)", "invalid location in png_set_unknown_chunks", "cvAvgSdv", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline8Filter2DIsNS2_4CastIfsEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "Not implemented", "void cv::hal::absdiff8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "\"abc_searchview_description_submit\" : \"\u101b\u103e\u102c\u1016\u103d\u1031\u1005\u101b\u102c \u1021\u1001\u103b\u1000\u103a\u1021\u101c\u1000\u103a\u1000\u102d\u102f \u1015\u1031\u1038\u1015\u102d\u102f\u1037\u101b\u1014\u103a\"", "int cv::cpu_baseline::(anonymous namespace)::MorphColumnVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_float32x4> >::operator()(const uchar **, uchar *, int, int, int) const [VecUpdate = cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_float32x4>]", "MWNPOPPQPROTOUPVRVTUURUP", "!flow_u.empty() && flow_u.depth() == CV_32F && flow_u.channels() == 1", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn18MaxUnpoolLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "virtual void cv::opt_SSE4_1::SymmColumnFilter<cv::opt_SSE4_1::Cast<float, float>, cv::opt_SSE4_1::SymmColumnSmallVec_32f>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::Cast<float, float>, VecOp = cv::opt_SSE4_1::SymmColumnSmallVec_32f]", "CHECK failed: (backup_bytes_) == (0): ", "light_adapt", "MXQMNV QMTV WMTV", "imgproc::drawContours_14()", "Not supported escape character", "\"abc_toolbar_collapse_description\" : \"Thu g\u1ecdn\"", "focus", "data.type() == CV_8UC1", "core::addSamplesDataSearchSubDirectory_10()", "cvReleaseStructuringElement", "IPP:(ipp_accumulate_product(_src1, _src2, _dst, _mask))", "\"abc_shareactionprovider_share_with\" : \"Delen met\"", "\"search_menu_title\" : \"Suchen\"", "void cv::hal::cpu_baseline::div16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, const double *)", "Unknown pattern type", "ml::setPriors_10()", "imgproc::getDerivKernels_11()", "findContours", "void cv::reduce(cv::InputArray, cv::OutputArray, int, int, int)", "/home/vagrant/build/srclib/opencv/modules/core/src/va_intel.cpp", "sdk/etc", "N2cv12cpu_baseline16SymmColumnFilterINS0_4CastIdtEENS0_11ColumnNoVecEEE", "fastNlMeansDenoisingMulti", "N2cv12cpu_baseline8Filter2DItNS0_4CastIddEENS0_11FilterNoVecEEE", "unique_lock::unlock: not locked", "OpenCL: using workgroup size: ", "Cannot copy the value of an image file attribute of type \"", "getNodePtr", "int cv::opt_AVX2::(anonymous namespace)::MorphVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_float32x8> >::operator()(uchar **, int, uchar *, int) const [VecUpdate = cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_float32x8>]", "\"abc_action_bar_home_description\" : \"\u700f\u89bd\u9996\u9801\"", "virtual bool cv::ml::StatModel::train(cv::InputArray, int, cv::InputArray)", "Error writing TIFF header", "halfsample_image", "\"abc_action_bar_home_description\" : \"Vrati se na po\u010detnu stranicu\"", "frame", "ColorMatrix2", "startTraining", "Square", "ml::trainAuto_16()", "cvWarpPerspective", "KXNMNV SMNV SMSV XMSV", "F_OFI[ OFVX OIV[ \\FV[ LFOF YF_F F[L[", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphColumnFilter<cv::cpu_baseline::(anonymous namespace)::MaxOp<unsigned char>, cv::cpu_baseline::(anonymous namespace)::MorphColumnVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_uint8x16> > >::operator()(const uchar **, uchar *, int, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MaxOp<unsigned char>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphColumnVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_uint8x16> >]", "opencv_ml_ann_mlp", "video::apply_10()", "MWOMRQOV OMUM OVUV", "convertFromGLTexture2D", "void cv::approxPolyDP(cv::InputArray, cv::OutputArray, double, bool)", "_a.depth() == CV_32F", "getAffineTransform", "\"abc_search_hint\" : \"Mekl\u0113jiet\u2026\"", "__itt_thr_mode_set", "Padding layer input to non-convolutional / non-pooling layer type ", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_117MorphColumnFilterINS3_5MinOpIdEENS3_16MorphColumnNoVecEEENS_9allocatorIS8_EEEE", "!weights || (!weights->empty() && (weights->cols == 1 || weights->rows == 1) && static_cast<int>(weights->total()) == nclusters && (weights->type() == CV_32FC1 || weights->type() == CV_64FC1))", "virtual void cv::opt_SSE4_1::(anonymous namespace)::ColumnSum<int, unsigned short>::operator()(const uchar **, uchar *, int, int, int)", "png_write_image: internal call error", "NSt6__ndk114default_deleteIN2cv10opt_SSE4_129WarpPerspectiveLine_SSE4_ImplEEE", "mean_ == Scalar() && \"Mean subtraction is not supported for CV_8U blob depth\"", "SetInt64", "\"abc_activitychooserview_choose_application\" : \"\u0ec0\u0ea5\u0eb7\u0ead\u0e81\u0ec1\u0ead\u0eb1\u0e9a\u0eaf\"", "void cv::Canny(cv::InputArray, cv::OutputArray, double, double, int, bool)", "__itt_heap_reset_detection", "\"abc_search_hint\" : \"Axtar\u0131\u015f...\"", "dnn::forward_10()", "core::addSamplesDataSearchPath_10()", "unspecified system_category error", "imdecode_('", "ksize.width > 0 && ksize.width % 2 == 1 && ksize.height > 0 && ksize.height % 2 == 1", "imgcodecs::imreadmulti_10()", "N2cv11MOG2InvokerE", "image.size() == image0.size()", "N2cv16ReplacementDFT1DE", "N2cv10opt_SSE4_112_GLOBAL__N_117MorphColumnFilterINS1_5MinOpIfEENS1_14MorphColumnVecINS1_4VMinINS_10hal_SSE4_111v_float32x4EEEEEEE", "getVariance", "Unexpected torch container: ", "\"abc_activitychooserview_choose_application\" : \"Odaberite aplikaciju\"", "void cv::fisheye::undistortPoints(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray)", "imgproc::integral3_10()", "\"abc_action_mode_done\" : \"Luk\"", "Mat::n_1reshape__JI()", "\"abc_shareactionprovider_share_with\" : \"Share with\"", "ShaveImage", "calcHist", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline9RowFilterIfdNS2_8RowNoVecEEENS_9allocatorIS5_EEEE", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphRowFilter<cv::opt_AVX2::(anonymous namespace)::MaxOp<unsigned char>, cv::opt_AVX2::(anonymous namespace)::MorphRowVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_uint8x32> > >::operator()(const uchar *, uchar *, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MaxOp<unsigned char>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphRowVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_uint8x32> >]", "getFLOPS", "CL_INVALID_DEVICE_QUEUE", "j,z4>", "double cv::matchShapes(cv::InputArray, cv::InputArray, int, double)", "output_x", "virtual void cv::KAZE_Impl::detectAndCompute(cv::InputArray, cv::InputArray, std::vector<KeyPoint> &, cv::OutputArray, bool)", "I\\MKMX NNRX NKRU WKRX WKWX XKXX KKNK WKZK KXOX UXZX", "_aspectRatios.empty()", "mv[i].size == mv[0].size && mv[i].depth() == depth", "void cv::fastNlMeansDenoisingColored(cv::InputArray, cv::OutputArray, float, float, int, int)", "predictOutputDataLayout", "ZIPDecode", "Numbers starting with leading zero must be in octal.", "PTRLQMRNSMRL RPRV", "LXVRURTSSURVOVNUNSORRQSPSNRMPMONOPQSSUUVVV", "video::collectGarbage_10()", "nMatToBitmap caught unknown exception (...)", "image_jacobian_euclidean_ECC", "void cv::hal::opt_AVX2::add32s(const int *, size_t, const int *, size_t, int *, size_t, int, int)", "ACROSS_CHANNELS", "int cv::opt_AVX2::sum8s(const schar *, const uchar *, int *, int, int)", "\"abc_searchview_description_search\" : \"B\u00fasqueda\"", "\"abc_searchview_description_search\" : \"Pesquisar\"", "N3Iex8EpipeExcE", "\"abc_toolbar_collapse_description\" : \"\u06a9\u0648\u0686\u06a9 \u06a9\u0631\u062f\u0646\"", "VERBOSE", "\"abc_search_hint\" : \"S\u00f8g\u2026\"", "Board", "$0 to $1, ", "std::basic_iostream<char, std::char_traits<char> >", "dims <= 2", "cvConvertPointsHomogeneous", "VScn::contains(scn)", "void cv::opt_AVX2::cvt32s64f(const int *, size_t, uchar *, size_t, double *, size_t, cv::Size, void *)", "\"abc_capital_off\" : \"FRA\"", "OVUMSSRUQVPVOUOT", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi3EEEij7DistAbsNS1_IiLi3EEEE", "\"abc_activity_chooser_view_see_all\" : \"\u05e8\u05d0\u05d4 \u05d4\u05db\u05dc\"", "incorrect count for field \"%s\" (%llu, expecting %u); tag trimmed", "Func_.type()==CV_64FC1 || Func_.type()==CV_32FC1", "maskBoundingRect", "I\\RMR[ SMS[ MMLRLMYMYRXM O[V[", "dvec[j].size() == src.size()", "nodesMapIt != nodesMap.end()", "virtual void cv::opt_SSE4_1::ColumnFilter<cv::opt_SSE4_1::Cast<double, double>, cv::opt_SSE4_1::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::Cast<double, double>, VecOp = cv::opt_SSE4_1::ColumnNoVec]", "\"abc_shareactionprovider_share_with\" : \"\u0c35\u0c40\u0c30\u0c3f\u0c24\u0c4b \u0c2d\u0c3e\u0c17\u0c38\u0c4d\u0c35\u0c3e\u0c2e\u0c4d\u0c2f\u0c02 \u0c1a\u0c47\u0c2f\u0c3f\"", "org.opencv.android.Utils", "virtual void cv::MatOp_T::multiply(const cv::MatExpr &, double, cv::MatExpr &) const", "G[LFL[ MGMZ NFN[ IFYFYL NPTP TLTT I[Q[ JFLG KFLH OFNH PFNG TFYG VFYH WFYI XFYL TLSPTT TNRPTR TOPPTQ LZJ[ LYK[ NYO[ NZP[", "void cv::hal::opt_SSE4_1::absdiff16s(const short *, size_t, const short *, size_t, short *, size_t, int, int)", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_111MorphFilterINS3_5MaxOpIdEENS3_10MorphNoVecEEENS_9allocatorIS8_EEEE", "data.rows == 1", "blobColor", "void cv::textureFlattening(cv::InputArray, cv::InputArray, cv::OutputArray, float, float, int)", "objdetect::getDefaultPeopleDetector_10()", "MWPMOQQPRPTQUSTURVQVOU PMTM", "BcRGQHRISHRGPFMFJGHIGLG[ MFKGIIHLH[ \\G[H\\I]H]G[F ^FXFUGSIRLR[ XFVGTISLS[ ]H][ ^F^[ DM]M D[K[ O[V[ Z[a[", "unsigned long long", "JZNKNX OKOX WKOS QQVX RQWX LKQK TKYK LXQX TXYX", "features2d::descriptorSize_10()", "releaseReference", "scale_train", "addNodeAndTrySplit", "png_image_write_to_memory: invalid argument", "I\\TFQGOJNLMOLTLXMZO[Q[TZVWWUXRYMYIXGVFTF TFRGPJOLNOMTMXNZO[ Q[SZUWVUWRXMXIWGVF NPWP", "Unknown custom filter method", "imgproc::createLineSegmentDetector_14()", "NSt6__ndk120__shared_ptr_emplaceIN2cv10BRISK_ImplENS_9allocatorIS2_EEEE", "isoSpeed", "\" failed. The files use different compression methods.", "int cv::CascadeClassifierImpl::runAt(Ptr<cv::FeatureEvaluator> &, cv::Point, int, double &)", "KYNORX OORV VORXP[N\\M\\L[LZMZM[L[ LOQO TOXO", "IZJQKOMMPMQNQPPTN[ OMPNPPOTM[ PTRPTNVMXMYNYOXPWOXN", "splits", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ElementWiseLayerINS2_11ReLUFunctorEEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "virtual void cv::opt_SSE4_1::(anonymous namespace)::ColumnSum<double, double>::operator()(const uchar **, uchar *, int, int, int) [ST = double, T = double]", "CL_INVALID_COMPILER_OPTIONS", "CaHFH[ IFI[ EFLF IPPPSQTRUTUWTYSZP[E[ PPRQSRTTTWSYRZP[ [F[[ \\F\\[ XF_F X[_[", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_117MorphColumnFilterINS3_5MaxOpIfEENS3_14MorphColumnVecINS3_4VMaxINS1_12hal_baseline11v_float32x4EEEEEEENS_9allocatorISD_EEEE", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphColumnFilter<cv::opt_AVX2::(anonymous namespace)::MinOp<double>, cv::opt_AVX2::(anonymous namespace)::MorphColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MinOp<double>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphColumnNoVec]", "CbHMH[ IMI[ RMR[ SMS[ \\M\\[ ]M][ EMLM OMVM YM`M E[`[", "OPENCV_IO_ENABLE_JASPER", "cv::ml::RTreeParams::RTreeParams()", "void cv::BackgroundSubtractorMOG2Impl::getBackgroundImage_intern(cv::OutputArray) const [T = unsigned char, CN = 1]", "\"abc_action_menu_overflow_description\" : \"Flere alternativer\"", "preferableTarget == DNN_TARGET_CPU || IS_DNN_OPENCL_TARGET(preferableTarget)", "ml::getDefaultK_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv9BitStreamENS_9allocatorIS2_EEEE", "Can not read scanlines from a tiled image", "VIDEOIO(%s): trying writer with filename='%s' fourcc=0x%08x fps=%g sz=%dx%d isColor=%d...", "(int)_numAxes == inputs[0].size()", "PLACEHOLDER_VALUE", "virtual void cv::dnn::DeConvolutionLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "N2cv25VariationalRefinementImpl23ComputeDataTerm_ParBodyE", "cvCloneMatND", "../../../../modules/dnn/include/opencv2/dnn/dnn.inl.hpp", "CHECK failed: this->MapFieldBase::repeated_field_ != NULL: ", "/home/vagrant/build/srclib/opencv/modules/calib3d/src/levmarq.cpp", "\"abc_searchview_description_voice\" : \"\u0c35\u0c3e\u0c2f\u0c3f\u0c38\u0c4d \u0c36\u0c4b\u0c27\u0c28\"", "\"abc_searchview_description_query\" : \"\u05e9\u05d0\u05d9\u05dc\u05ea\u05ea \u05d7\u05d9\u05e4\u05d5\u05e9\"", "imgproc::sqrBoxFilter_12()", "(type == CV_32F || type == CV_64F) && inputs.cols == layer_sizes[0]", "N2cv10opt_SSE4_112_GLOBAL__N_117MorphColumnFilterINS1_5MinOpIdEENS1_16MorphColumnNoVecEEE", "0 <= ci && ci < nclasses", "deallocate", "core::compare_10()", "F\\KFK[ LGLZ MFM[ XGMR PPW[ QPX[ QNY[ HFPF UF[F H[P[ T[[[ IFKG JFKH NFMH OFMG WFXG ZFXG KZI[ KYJ[ MYN[ MZO[ WYU[ WYZ[", "j < nsrcs && src[j].depth() == depth", "void cv::hal::opt_AVX2::absdiff32f(const float *, size_t, const float *, size_t, float *, size_t, int, int)", "node_proto.output_size() >= 1", "N7cvflann7anyimpl14big_any_policyINS_17flann_algorithm_tEEE", "mutex lock failed", " !\"#$%&'()*+,-./0123456789:;<=>?", "25TegraRowOp_split3_InvokerIKllE", "\"abc_capital_on\" : \"W\u0141.\"", "MWNONNOMPMQNRPRV VOVNUMTMSNRP", "Reserved range $0 to $1 overlaps with already-defined range $2 to $3.", "u->origdata", "scanline", "LYNNONOONONNOLQKTKVLWNWOVQSRRSRTST TKVMVPUQSR RWRXSXSWRW", "getPoolingKernelParams", "core::locateROI_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_19RowFilterItdNS2_8RowNoVecEEENS_9allocatorIS5_EEEE", "N2cv10opt_SSE4_19RowFilterIsdNS0_8RowNoVecEEE", "N2cv5utils5trace7details12TraceStorageE", "Invalid QR code source points", "H[V+R1P5O:O>PBTJTLSNROMRRUSVTXTZPbOfOjPoRsVy T.R2Q5P:P>QCRF R^QaPfPjQoRrTv", "is_m3_vector", "nchannels == output.size[1]", "FieldDescriptorProto.extendee set for non-extension field.", "inputs.size() == 1 && inputs[0].size() == 4", ">ippIP SSE4.2 (p8)", "KYTPTSUTVTWSWQVOUNSMQMONNOMQMSNUOVQWSWUV TQSPQPPQPSQTSTTS", "void cv::HuMoments(const cv::Moments &, cv::OutputArray)", "calib3d::solvePnPRansac_12()", "imgcodecs: Jasper (JPEG-2000) codec is disabled. You can enable it via 'OPENCV_IO_ENABLE_JASPER' option. Refer for details and cautions here: https://github.com/opencv/opencv/issues/14058", "format", "0 <= vi && vi <= (int)varType.size()", "getMorphologyColumnFilter", "N2cv3hal12cpu_baseline12_GLOBAL__N_119YUV422toRGB8InvokerILi0ELi1ELi0ELi3EEE", "matchTemplateMask", "N2cv12cpu_baseline12ColumnFilterINS0_4CastIffEENS0_11ColumnNoVecEEE", "node_proto.input_size() == 2", "N2cv20StaticBackendFactoryE", "total <= step[i]", "n.isInt()", "-4 <= idx && idx < 4", "for field buffer.", "getScaleData", "H\\TLTMUNWNYMZKZIYGWFTFQGOIMLLNKRKVLYMZO[Q[TZVXWV", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline9RowFilterIsfNS2_13RowVec_16s32fEEENS_9allocatorIS5_EEEE", "\"abc_shareactionprovider_share_with_application\" : \"%s\u0c24\u0c4b \u0c2d\u0c3e\u0c17\u0c38\u0c4d\u0c35\u0c3e\u0c2e\u0c4d\u0c2f\u0c02 \u0c1a\u0c47\u0c2f\u0c3f\"", "mapcount == 0", "cvCalibrationMatrixValues", "CHECK failed: target_ != NULL: ", "maxValue.type()", "virtual void cv::opt_SSE4_1::SymmColumnFilter<cv::opt_SSE4_1::Cast<float, unsigned short>, cv::opt_SSE4_1::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::Cast<float, unsigned short>, VecOp = cv::opt_SSE4_1::ColumnNoVec]", "\"abc_searchview_description_query\" : \"\u0995\u09cd\u09af\u09cb\u09af\u09bc\u09be\u09b0\u09c0 \u0985\u09a8\u09c1\u09b8\u09a8\u09cd\u09a7\u09be\u09a8 \u0995\u09b0\u09c1\u09a8\"", "void cv::hconcat(cv::InputArray, cv::InputArray, cv::OutputArray)", "dw_scale", "void cv::DescriptorMatcher::radiusMatch(cv::InputArray, cv::InputArray, std::vector<std::vector<DMatch> > &, float, cv::InputArray, bool) const", "!ld.outputBlobsWrappers.empty() && !ld.outputBlobsWrappers[pin.oid].empty()", "MWRMQNROSNRM RYQZR[SZRY", "virtual void cv::CascadeClassifierImpl::detectMultiScale(cv::InputArray, std::vector<Rect> &, std::vector<int> &, std::vector<double> &, double, int, int, cv::Size, cv::Size, bool)", "gamma", "haveHalide()", "size == 0 || size == 4 || size == 8", "\"abc_action_bar_up_description\" : \"Omhoog navigeren\"", "imgIdx < (int)startIdxs.size()", "N2cv13HOGDescriptorE", "srcTotal == dstTotal", "ml::getRpropDWPlus_10()", "inputs.empty()", "<N2cv2ml9StatModelE", "loadWindowParameters", "N3Imf14TypedAttributeIN5Imath3BoxINS1_4Vec2IiEEEEEE", "cvConvexityDefects", "N2cv25VariationalRefinementImpl18ParallelOp_ParBodyE", "void cv::hal::cpu_baseline::max16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int)", "N6google8protobuf3MapINS0_6MapKeyENS0_11MapValueRefEE8InnerMapE", "clamp", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphFilter<cv::opt_AVX2::(anonymous namespace)::MaxOp<float>, cv::opt_AVX2::(anonymous namespace)::MorphVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_float32x8> > >::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MaxOp<float>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_float32x8> >]", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212ColumnFilterINS2_4CastIddEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "shadowThreshold", "int cv::Subdiv2D::locate(cv::Point2f, int &, int &)", "Sorry, can not handle separated image with %s=%d", "void cv::illuminationChange(cv::InputArray, cv::InputArray, cv::OutputArray, float, float)", "): failed TIFFWriteDirectory(tif)", "(depth == CV_8U || depth == CV_32F) && type == _templ.type() && _img.dims() <= 2", "F]ILHLGKGIHGJFNFMHLLKUJ[ LLLUK[ VFTHRLOUMYK[ VFUHTLSUR[ TLTUS[ `F^G\\IZLWUUYS[", "\", which is not defined. The innermost scope is searched first in name resolution. Consider using a leading '.'(i.e., \".", "scalarParams.has(\"padW\") && scalarParams.has(\"padH\")&& scalarParams.has(\"dW\")&& scalarParams.has(\"dH\")&& scalarParams.has(\"adjW\")&& scalarParams.has(\"adjH\")&& scalarParams.has(\"kW\")&& scalarParams.has(\"kH\")&& scalarParams.has(\"nOutputPlane\")", "N6google8protobuf14SourceCodeInfoE", "void cv::hal::cpu_baseline::invSqrt64f(const double *, double *, int)", "NSt6__ndk120__shared_ptr_emplaceIN2cv16MergeMertensImplENS_9allocatorIS2_EEEE", "\"abc_search_hint\" : \"\u0406\u0437\u0434\u0435\u0443\u2026\"", "THDiskFile_readChar", "void cv::cornerMinEigenVal(cv::InputArray, cv::OutputArray, int, int, int)", "OUQOOQOSQUSUUSUQSOQO QPPQPSQTSTTSTQSPQP RQQRRSSRRQ", "GetRepeatedEnumValue", "imgproc::setTilesGridSize_10()", "N2cv8opt_AVX212ColumnFilterINS0_13FixedPtCastExIihEENS0_19SymmColumnVec_32s8uEEE", "N2cv5mjpeg12MjpegEncoderE", "void cv::pencilSketch(cv::InputArray, cv::OutputArray, cv::OutputArray, float, float, float)", "src5.isContinuous()", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_111RGB5x52GrayEEE", "NSt6__ndk18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE", "addVertex", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_19ColumnSumIdfEENS_9allocatorIS5_EEEE", "OpenCV TIFF: failed TIFFSetField(tif, TIFFTAG_SUBFILETYPE, FILETYPE_PAGE)", "medianBlur_8u_Om", "\"abc_shareactionprovider_share_with_application\" : \"Chia s\u1ebb v\u1edbi %s\"", "virtual void cv::cpu_baseline::ColumnFilter<cv::cpu_baseline::Cast<float, float>, cv::cpu_baseline::SymmColumnVec_32f>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::Cast<float, float>, VecOp = cv::cpu_baseline::SymmColumnVec_32f]", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/layers_common.cpp", "NSt6__ndk114default_deleteIN2cv3dnn12RNNLayerImplEEE", "clamped.end <= axisSize", "TIFFWriteDirectoryTagShortPerSample", "void cv::hal::absdiff16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, void *)", "ERROR: Unexpected logging level value: ", "dstcn == 3 || dstcn == 4", "kernelToStr", "NSt6__ndk114default_deleteIN2cv3dnn14SliceLayerImplEEE", "N2cv14NumpyFormatterE", "ITT-API-Version 0.0.0 (20151119)", "JZPKLX QKMX NKUKWLXMXOWQTROR UKWMWOVQTR SRTWUXVXWW SRTSUWVX JXOX", "magSpectrums", "imgproc::resize_10()", "recoverPose", "pImpl->lock_shared()", "__itt_model_task_end_2", "Read error at scanline %lu, strip %lu; got %llu bytes, expected %llu", "void cv::hal::opt_SSE4_1::cmp32s(const int *, size_t, const int *, size_t, uchar *, size_t, int, int, int)", "output_offset", "cannot parse partitions", "Split", "N6google8protobuf2io20ZeroCopyOutputStreamE", "default_k", "_dy.type() == _dx.type()", "N2cv17FlannBasedMatcherE", "NSt6__ndk114default_deleteIN2cv3dnn22CropAndResizeLayerImplEEE", " __vector(", "video::getBackgroundImage_10()", "N3Iex10EnoexecExcE", "core::invert_10()", "\"abc_shareactionprovider_share_with\" : \"\u5171\u6709\"", "\"abc_activity_chooser_view_see_all\" : \"\u0645\u0634\u0627\u0647\u062f\u0647 \u0647\u0645\u0647\"", "LYPMQNQOPPOPNONNOMPMSNUNWMNV USTTTUUVVVWUWTVSUS", "void cv::CascadeClassifierImpl::detectMultiScaleNoGrouping(cv::InputArray, std::vector<Rect> &, std::vector<int> &, std::vector<double> &, double, cv::Size, cv::Size, bool)", "depth == CV_16S || depth == CV_32S || depth == CV_32F || depth == CV_64F", "detectImpl", "inputs.size() >= 1 && inputs.size() <= 2", "invalid with alpha channel", "Ar.size() == Size(3,3) || Ar.size() == Size(4, 3)", "strides.i_size() == 4", "getNeighbors", "can't reach here.", "NSt6__ndk120__shared_ptr_emplaceIN2cv13HaarEvaluatorENS_9allocatorIS2_EEEE", "feature_maps.front().size()", "history", "The point-matrices must have one row, and an equal number of columns", "convexityDefects", "TIFFjpeg_tables_dest", "+Xc=+Xc=+Xc=+Xc=", "calib3d::create_11()", "</opencv_storage>", "\"abc_action_menu_overflow_description\" : \"\u0d15\u0d42\u0d1f\u0d41\u0d24\u0d7d\u200d \u0d13\u0d2a\u0d4d\u200c\u0d37\u0d28\u0d41\u0d15\u0d33\u0d4d\u200d\"", "Invalid color quantization mode change", "void cv::Algorithm::writeFormat(cv::FileStorage &) const", "!sizes_node.empty()", "IPP:(ipp_accumulate_weighted(_src, _dst, alpha, _mask))", "void cv::hal::opt_AVX2::max16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int)", "\"abc_action_mode_done\" : \"\u092a\u0942\u0930\u094d\u0923\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline21SymmColumnSmallFilterINS2_13FixedPtCastExIihEENS2_19SymmColumnVec_32s8uEEENS_9allocatorIS7_EEEE", "Invalid bitsperpixel value read from TIFF header! Must be 1, 8, 16, 32 or 64.", "photo::illuminationChange_12()", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_114MorphRowFilterINS3_5MinOpItEENS3_11MorphRowVecINS3_4VMinINS1_10hal_SSE4_110v_uint16x8EEEEEEENS_9allocatorISD_EEEE", "\"abc_activity_chooser_view_see_all\" : \"\u986f\u793a\u5168\u90e8\"", "CPU revision", "softmax", "features2d::setNonmaxSuppression_10()", "image.dims == 2 && (nch == 1)", "cvFindGraphEdgeByPtr", "Subdiv2D::locate returned invalid location = %d", "virtual void cv::cpu_baseline::SymmColumnFilter<cv::cpu_baseline::Cast<double, unsigned short>, cv::cpu_baseline::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::Cast<double, unsigned short>, VecOp = cv::cpu_baseline::ColumnNoVec]", "warnings", "N2cv32MultiscaleDerivativesKAZEInvokerE", "imgproc::linearPolar_10()", "N7cvflann7anyimpl16small_any_policyIPPNS_11KDTreeIndexINS_2L1IfEEE4NodeEEE", "Sorry, can not handle LogL image with %s=%d", "N6google8protobuf13RepeatedFieldIfEE", "F^ZJSJOKMLKNJQJSKVMXOYSZZZ", "inputs[0].size[1] % blobs[0].size[1] == 0", "cvReleaseMat", "LZRRPRNSMTLVLXMZO[Q[SZTYUWUUTSRRQSQURWTXWXYWZV", "void cv::hal::cpu_baseline::div32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, const double *)", "unsupported point type", "int p3p::solve(std::vector<cv::Mat> &, std::vector<cv::Mat> &, const cv::Mat &, const cv::Mat &)", "gray.type()", "_flags == LOCAL || _flags == CONSTANT || _m != NULL", "ld.outputBlobs.size() == 1", "Portable bitmap(.pgm) expects gray image", "OpenCV TIFF: failed TIFFSetField(tif, TIFFTAG_SAMPLEFORMAT, SAMPLEFORMAT_IEEEFP)", "imgproc::setMinDist_10()", "core::setIdentity_11()", "void cv::hal::opt_SSE4_1::div32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, const double *)", "getMorphologyRowFilter", "void cv::hal::opt_SSE4_1::cvtBGRtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, int, int, bool)", "N2cv12cpu_baseline8Filter2DIhNS0_4CastIffEENS0_11FilterNoVecEEE", "JZRMRX MRWR MXWX", "Unsupported sequence type", "cvSVD", "cvCompareHist", "N2cv10opt_SSE4_112ColumnFilterINS0_4CastIisEENS0_11ColumnNoVecEEE", "\"abc_searchview_description_submit\" : \"Invia query\"", "N2cv25VariationalRefinementImpl36ComputeSmoothnessTermHorPass_ParBodyE", "Autotrace call", "getValues", "virtual void cv::MergeMertensImpl::process(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::InputArray, cv::InputArray)", "\"abc_font_family_title_material\" : \"sans-serif-medium\"", "No or invalid \"cls_labels\" in NBayes classifier", "N3Iex12EmultihopExcE", "G]LMLXMZP[R[UZWX MMMXNZP[ WMW[ XMX[ IMMM TMXM W[[[", "minScale_ > 0.0 && minScale_ < maxScale_", "I[LMW[X[ LMMMX[ XMWML[ XMM[L[", "int cv::waitKeyEx(int)", "\"abc_search_hint\" : \"Ie\u0161koti...\"", "F^KFKULXNZQ[S[VZXXYUYG LGLVMX MFMVNYOZQ[ HFPF VF\\F IFKG JFKH NFMH OFMG WFYG [FYG", "imgproc::sqrBoxFilter_11()", "objdetect::compute_10()", "\"abc_capital_on\" : \"\u0d13\u0d7a\"", "\"abc_action_bar_up_description\" : \"Navegar para cima\"", "\"abc_searchview_description_submit\" : \"\u0422\u0430\u043b\u0430\u043f \u0436\u04e9\u043d\u04e9\u0442\u04af\u04af\"", "void cv::fisheye::projectPoints(cv::InputArray, cv::OutputArray, const cv::Affine3d &, cv::InputArray, cv::InputArray, double, cv::OutputArray)", "\"abc_activitychooserview_choose_application\" : \"\u0627\u0646\u062a\u062e\u0627\u0628 \u0628\u0631\u0646\u0627\u0645\u0647\"", "\"abc_searchview_description_voice\" : \"Penelusuran suara\"", "core::stop_10()", "N2cv3dnn14ReorgLayerImplE", "Failed to allocate memory for %s (%ld elements of %ld bytes each)", "cvCreateHist", "SpatialZeroPadding", "ratio", "convertToVASurface", "\"abc_action_menu_overflow_description\" : \"\u041e\u0449\u0435 \u043e\u043f\u0446\u0438\u0438\"", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/connectedcomponents.cpp", "__itt_model_lock_release_2", "void cv::hal::opt_AVX2::min8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int)", "Unexpected end of input stream", "calib3d::findEssentialMat_16()", "src2.size == dst.size && src2.channels() == dst.channels()", "TIFFResetField", "Premature end of JPEG file", "N7cvflann7anyimpl16small_any_policyIPPNS_11KDTreeIndexINS_2L2IfEEE4NodeEEE", "cvSetMouseCallback", "__itt_task_begin", "OpenCV samples: Can't find required data file: %s", "gamma value", "FastNlMeansDenoisingInvoker", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_18Filter2DIhNS2_4CastIffEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "\"abc_capital_on\" : \"P\u00c5\"", "I\\RNOOMQLTLUMXOZR[S[VZXXYUYTXQVOSNRN RHNJRFRN SHWJSFSN RSQTQURVSVTUTTSSRS RTRUSUSTRT", "sum.data == sum0.data && sqsum.data == sqsum0.data && tilted.data == tilted0.data", "The field \"var_count\" of NBayes classifier is missing or non-positive", "Bad input align", "0 <= colRange_.start && colRange_.start <= colRange_.end && colRange_.end <= m.cols", "calib3d::stereoRectifyUncalibrated_10()", "nimages > 0 && dims > 0", "Mat::n_1Mat__JII()", "\" is resolved to \"", "bytes", "imgproc::convexityDefects_10()", "JPEGDecodeRaw", "\"abc_searchview_description_submit\" : \"Envia la consulta\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_19ColumnSumIdhEENS_9allocatorIS5_EEEE", "    - ", "Unsupported combination of buffer format (=%d), and destination format (=%d)", "File not open for reading", "!content.empty()", "\"abc_capital_off\" : \"AF\"", "CPPTYPE_UINT64", "ml::setUse1SERule_10()", "LYUFO[ VFP[ RFYF L[S[", "hull_next != NULL && hull_cur != NULL", "objdetect::get_1blockStride_10()", "N3Imf14TiledInputFileE", "void cv::cpu_baseline::cvt16s16f(const short *, size_t, uchar *, size_t, cv::float16_t *, size_t, cv::Size, void *)", "detectAndCompute", "void cv::hal::min32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, void *)", "operator~", "video::setUseMeanNormalization_10()", "virtual void cv::opt_AVX2::RowFilter<float, float, cv::opt_AVX2::RowVec_32f>::operator()(const uchar *, uchar *, int, int) [ST = float, DT = float, VecOp = cv::opt_AVX2::RowVec_32f]", "N2cv8colormap15TwilightShiftedE", "void cv::hal::cpu_baseline::exp64f(const double *, double *, int)", "(size_t)weightsBlobIndex < blobs.size()", "features2d::getOctaves_10()", "Insufficient memory", "\"abc_activitychooserview_choose_application\" : \"Pumili ng isang app\"", "bool cv::clipLine(cv::Rect, cv::Point &, cv::Point &)", "N2cv12cpu_baseline12ColumnFilterINS0_4CastIdsEENS0_11ColumnNoVecEEE", "arithm_ipp_add32f", "PermuteLayerImpl", "matM.rows == 2 && matM.cols == 3", "double cv::opt_AVX2::MahalanobisImpl(const cv::Mat &, const cv::Mat &, const cv::Mat &, double *, int) [T = double]", "F^KHK\\ LHL\\ XHX\\ YHY\\ HH\\H H\\O\\ U\\\\\\", "void cv::bitwise_xor(cv::InputArray, cv::InputArray, cv::OutputArray, cv::InputArray)", "N2cv10opt_SSE4_112_GLOBAL__N_111MorphFilterINS1_5MinOpIdEENS1_10MorphNoVecEEE", "LXVQUQURVRVQUPSOQOOPNRNUOWQXSXUWVV QOPPOROUPWQX", "templEdges_.type() == CV_8UC1", "%.100s: Can not read TIFF directory", "locale not supported", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112ColumnFilterINS2_4CastIftEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "inputs.size() == (size_t)1", "H]NFLL [FZIXLTQRTQWP[ RSPWO[ XLRRPUOWN[P[ MIPFRFWI OGRGWI MIOHRHWIYIZH[F", "Improper JPEG strip/tile size, expected %dx%d, got %dx%d", "timeCode", "imgproc::HoughLinesP_10()", "N2cv12cpu_baseline12_GLOBAL__N_16RowSumIiiEE", "Output shape must have 4 elements.", "DumpModeDecode", "parseKey", "virtual void cv::cpu_baseline::(anonymous namespace)::RowSum<unsigned char, unsigned short>::operator()(const uchar *, uchar *, int, int) [T = unsigned char, ST = unsigned short]", "I[XIXJYJYIXHVHTJSLROQUPYO[ UITKSORUQXPZN\\L\\K[KZLZL[ QNOONQNSOUQVSVUUVSVQUOSNQN", "void cv::cpu_baseline::gemm32fc(const float *, size_t, const float *, size_t, float, const float *, size_t, float, float *, size_t, int, int, int, int)", "Invalid sCAL width ignored", "\"abc_action_bar_home_description\" : \"\u0e81\u0eb1\u0e9a\u0ec4\u0e9b\u0edc\u0ec9\u0eb2\u0eab\u0ebc\u0eb1\u0e81\"", "input.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "void cv::fastNlMeansDenoisingMulti(cv::InputArrayOfArrays, cv::OutputArray, int, int, const std::vector<float> &, int, int, int)", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline16SymmColumnFilterINS2_4CastIffEENS2_17SymmColumnVec_32fEEENS_9allocatorIS7_EEEE", "?N2cv12RemapInvokerE", "void cv::completeSymm(cv::InputOutputArray, bool)", "\"abc_toolbar_collapse_description\" : \"\u0425\u0443\u043c\u0438\u0445\"", "Can't find output blob \"", "\"abc_activitychooserview_choose_application\" : \"Escolher uma aplica\u00e7\u00e3o\"", "void cv::bilateralFilter_32f(const cv::Mat &, cv::Mat &, int, double, double, int)", "left.size() == right.size() && left.type() == right.type() && left.depth() == CV_8U", "Found ", "Permute layer parameter contains duplicated orders.", "N2cv3dnn14dnn4_v2019012220OpenCLBackendWrapperE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX29RowFilterIhfNS2_8RowNoVecEEENS_9allocatorIS5_EEEE", "J[TFSGUQTR TFTR TFUGSQTR OIPIXOYO OIYO OIOJYNYO YIXIPOOO YIOO YIYJONOO", "\"abc_searchview_description_submit\" : \"\u0a38\u0a35\u0a3e\u0a32 \u0a2a\u0a4d\u0a30\u0a38\u0a24\u0a41\u0a24 \u0a15\u0a30\u0a4b\"", "temp.ptr<Point2f>() == dst", "!layerOutShapes.empty()", "N2cv24BackgroundSubtractorMOG2E", "\"abc_action_mode_done\" : \"\u0413\u043e\u0442\u043e\u0432\u043e\"", "features2d::knnMatch_12()", "JZRLRX MOWU WOMU", "AsShotPreProfileMatrix", "_cn <= CV_CN_MAX", "\"abc_searchview_description_clear\" : \"Ryd foresp\u00f8rgslen\"", "N2cv8opt_AVX216SymmColumnFilterINS0_4CastIfhEENS0_11ColumnNoVecEEE", "photo::fastNlMeansDenoisingColoredMulti_13()", "St9type_info", "handle != -1", "group_by_classes", "N3Iex15EtoomanyrefsExcE", "\"abc_searchview_description_submit\" : \"\u0eaa\u0ebb\u0ec8\u0e87\u0e81\u0eb2\u0e99\u0e8a\u0ead\u0e81\u0eab\u0eb2\"", "imgproc::bilateralFilter_11()", "nBitmapToMat caught unknown exception (...)", "core::mulTransposed_11()", "LogLuvEncode24", "signature1 must contain at least one non-zero value", "JYNOMX OONUMX VRVOWOVRTUQWNXMX LOOO", "bool cv::TiffEncoder::writeLibTiff(const std::vector<Mat> &, const std::vector<int> &)", "!bias || (size_t)numOutput == blobs[1].total()", "reflect", "void cv::hal::split8u(const uchar *, uchar **, int, int)", "MWUPUY USTQRPPQOSPURVTUUS", "ulong16", "int cv::solveP3P(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays, int)", "NSt6__ndk115messages_bynameIwEE", "NVROQPRQSPRO RVQWRXSWRV", "invalid screen gamma in png_set_gamma", "Normalize", "Hardware", "Invalid JPEG file structure: SOS before SOF", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_19ColumnSumIiiEENS_9allocatorIS5_EEEE", "__itt_sync_rename", "Focal length (fx and fy) must be positive", "ImageDepth", "New header size must be non-less than sizeof(CvContour)", "cvPointSeqFromMat", "Eltwise", "void cv::hal::log64f(const double *, double *, int)", "blockIdx == fs_data_ptrs.size()-1", "_mask.empty() || (_mask.type() == CV_8UC1 && _mask.sameSize(_image))", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn22CropAndResizeLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "IPP:ipp_countNonZero(src, res)", "\"abc_activitychooserview_choose_application\" : \"\u0627\u062e\u062a\u064a\u0627\u0631 \u062a\u0637\u0628\u064a\u0642\"", "N2cv10opt_SSE4_19RowFilterIffNS0_19SymmRowSmallVec_32fEEE", "\"abc_searchview_description_voice\" : \"\u0ab5\u0ac9\u0a87\u0ab8 \u0ab6\u0acb\u0aa7\"", "J[NONUOWQXSXUWVU OOOUPWQX VOVX WOWX LOOO TOWO VXYX", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX28Filter2DIsNS2_4CastIffEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "JYNKNX OKOX SOSS LKVKVOUK OQSQ LXVXVTUX", "G\\LFL[MZOZ MGMY IFNFNZ NPONQMSMVNXPYSYUXXVZS[Q[OZNX WPXRXVWX SMUNVOWRWVVYUZS[ JFLG KFLH", "N2cv12cpu_baseline12_GLOBAL__N_16RowSumItiEE", "dstm1type == CV_16SC2 || dstm1type == CV_32FC1 || dstm1type == CV_32FC2", "N2cv3dnn20ConvolutionLayerImpl12ParallelConvE", "FocalPlaneXResolution", "photo::fastNlMeansDenoisingMulti_13()", "N2cv21Dft_C_IPPLoop_InvokerINS_16IPPDFT_C_FunctorEEE", "BaGBQPFb FBPP EBPQ EB\\B^I[B Ga\\a Fb\\b^[[b", "ml::getRpropDW0_10()", "Not implemented yet", "video::getMaxLevel_10()", "NSt6__ndk117bad_function_callE", "%s compression support is not configured", "YResolution", "\"abc_activity_chooser_view_see_all\" : \"Shikoji t\u00eb gjitha\"", "Warning: Less observations than feature dimension given!", "UTF-8 data when ", "One of <ranges> elements is NULL", "_img.dims() <= 2", "I\\LKLJMHNGQFTFWGXHYJYLXNWOUPRQ LKMKMJNHQGTGWHXJXLWNUORP MIPG UGXI XMTP RPRTSTSP RXQYQZR[S[TZTYSXRX RYRZSZSYRY", "MutableRepeatedMessage", "I\\MFM[ NGNZ MFYF NGYGYF NPTPTQ NQTQ NZYZY[ M[Y[", "core::add_11()", "void cv::hal::split64s(const int64 *, int64 **, int, int)", "N2cv12cpu_baseline12_GLOBAL__N_117MorphColumnFilterINS1_5MaxOpIhEENS1_14MorphColumnVecINS1_4VMaxINS_12hal_baseline10v_uint8x16EEEEEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv5utils5trace7details17AsyncTraceStorageENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2019012217BatchNormSubgraphEEE", "NSt6__ndk115numpunct_bynameIwEE", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/contours.cpp", "4-cols flann data is expected", "H\\YIWGTFPFMGKIKKLMMNOOTQVRWSXUXXWYTZPZNYMXKX YIWIVHTGPGMHLILKMMONTPVQXSYUYXWZT[P[MZKX", "process", "aspect_ratio", "Extensions in proto3 are only allowed for defining options.", "m_maxval < 256 && m_maxval > 0", "img.channels() == 1 && img.depth() == CV_8U", "NSt6__ndk120__shared_ptr_emplaceIN2cv11WebPEncoderENS_9allocatorIS2_EEEE", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi4EEElm7DistAbsNS1_IiLi4EEEE", "unsupported register class", "N2cv10opt_SSE4_19RowFilterIddNS0_8RowNoVecEEE", "Error in Huffman-encoded data (invalid code table entry).", "N2cv8opt_AVX212_GLOBAL__N_19ColumnSumIiiEE", "Too long string literal", "Unsupported image format! Only CV_8U, CV_8UC2, CV_8UC3 and CV_8UC4 are supported", "Key must end with '\"'", "N11opencv_onnx14AttributeProtoE", "!fixedSize()", "N2cv12WLByteStreamE", "TIFFWriteDirectoryTagCheckedSlong8Array", "%s: %s", "Expected a tiled file but the file is not tiled.", "count <= msi->rows", "ALIGN_TYPE is wrong, please fix", "features2d::knnMatch_14()", "cvGet2D", "m.dims", "getKernelSize", "imgproc::warpPolar_10()", "(int)w->sample_weights.size() == nsamples", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_111MorphFilterINS3_5MaxOpIsEENS3_8MorphVecINS3_4VMaxINS1_10hal_SSE4_19v_int16x8EEEEEEENS_9allocatorISD_EEEE", "/home/vagrant/build/srclib/opencv/platforms/android/build/o4a/install", "(delta.cols == src.cols || delta.cols == 1)", "MWTNSMRMQNQORPTQUSTURVPUOSPQRP", "N2cv10opt_SSE4_112ColumnFilterINS0_4CastIftEENS0_11ColumnNoVecEEE", "invalid color", "ml::getSampleWeights_10()", "void cv::hal::cpu_baseline::cmp16s(const short *, size_t, const short *, size_t, uchar *, size_t, int, int, int)", "__itt_mark", "SAME_UPPER", "\"abc_search_hint\" : \"Zoeken\u2026\"", "Usage: %s [params] ", "convertPointsToHomogeneous", "sfixed32", "void cv::decomposeProjectionMatrix(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray)", "DNN: OpenCL target is not available in this OpenCV build, switching to CPU.", "StripByteCounts", "solve_eps_svr", "\"abc_activitychooserview_choose_application\" : \"\u30a2\u30d7\u30ea\u306e\u9078\u629e\"", "points.channels()", "\"abc_search_hint\" : \"Soek \u2026\"", "Integer out of range (", "cvCanny", "NormalizeBBox", "N11opencv_onnx18OperatorSetIdProtoE", "Tried to read a raw scanline from a tiled image.", "sint64", "M\\MVOSRNSLTITGSFQGPIOMNSM[ M[NXOVQSSRURVSVUUXUZV[W[YZZY\\V", "void cv::cpu_baseline::cvt64f16s(const double *, size_t, uchar *, size_t, short *, size_t, cv::Size, void *)", "cvSubRS", "calib3d::recoverPose_17()", "N2cv8colormap7InfernoE", "KMP_FOR_TPROFILE", "I[KRYR", "stride_h", "findFundamentalMat", "Unknown training method", "virtual void cv::opt_SSE4_1::SymmRowSmallFilter<float, float, cv::opt_SSE4_1::SymmRowSmallVec_32f>::operator()(const uchar *, uchar *, int, int) [ST = float, DT = float, VecOp = cv::opt_SSE4_1::SymmRowSmallVec_32f]", "writeDataToBuf", "CV_MAT_CN(_type) == e.a.channels()", "\"abc_shareactionprovider_share_with\" : \"Bagikan dengan\"", "void cv::hal::div32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, void *)", "Ptr<cv::BaseFilter> cv::cpu_baseline::getLinearFilter(int, int, const cv::Mat &, cv::Point, double, int)", "centers.depth() == data.depth()", "imgproc::calcHist_11()", "Unspecified error", "Planarconfig tag value assumed incorrect, assuming data is contig instead of chunky", "NULL matrix header pointer", "\"abc_searchview_description_query\" : \"Pretra\u017ei upit\"", "Null string pointer", "calib3d::fisheye_1estimateNewCameraMatrixForUndistortRectify_13()", "N10__cxxabiv117__pbase_type_infoE", "unknown function", "void cv::opt_AVX2::cvt32f16u(const float *, size_t, uchar *, size_t, ushort *, size_t, cv::Size, void *)", "\"abc_searchview_description_submit\" : \"Wy\u015blij zapytanie\"", "videoio::VideoCapture_13()", "LYQOOQOSQUSUUSUQSOQO QOPQPSQU SUTSTQSO TPUOVO PTOUOXPYTYVZ OWPXTXVYV[T\\P\\N[NYPX", "uncompressed_sv_total", "calib3d::getOptimalNewCameraMatrix_12()", "at least three point pairs are needed", "dx >= 0 && dy >= 0 && dx+dy == 1", "video::setVarMin_10()", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIddfEENS_12VResizeCubicIddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "fontQt", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphFilter<cv::opt_AVX2::(anonymous namespace)::MinOp<unsigned short>, cv::opt_AVX2::(anonymous namespace)::MorphVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_uint16x16> > >::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MinOp<unsigned short>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_uint16x16> >]", "void cv::groupRectangles_meanshift(std::vector<Rect> &, std::vector<double> &, std::vector<double> &, double, cv::Size)", "IPP:ipp_boxfilter(src, dst, ksize, anchor, normalize, borderType)", "dst.rows", "cvAddWeighted", "dst.channels()", "Non-positive width or height", "objdetect::detectMultiScale_14()", "operator/", "N2cv32HoughCircleEstimateRadiusInvokerINS_11NZPointListEEE", "saveWindowParameters", "void cv::cpu_baseline::cvt16f16u(const cv::float16_t *, size_t, uchar *, size_t, ushort *, size_t, cv::Size, void *)", "features2d::BOWKMeansTrainer_12()", "void cv::hal::cpu_baseline::cvtBGR5x5toGray(const uchar *, size_t, uchar *, size_t, int, int, int)", "Seed point is outside of image", "N12opencv_caffe18RecurrentParameterE", "\"abc_action_bar_home_description\" : \"\u0ab9\u0acb\u0aae \u0aaa\u0ab0 \u0aa8\u0ac7\u0ab5\u0abf\u0a97\u0ac7\u0a9f \u0a95\u0ab0\u0acb\"", "AdobeDeflate", "video::set_1errorCovPre_10()", "it.ptr", "N12opencv_caffe24ContrastiveLossParameterE", "AddEnum", "virtual int cv::FilterEngine::start(const cv::Size &, const cv::Size &, const cv::Point &)", "COI must be non-null in case of planar images", "Group4Options", "firstLevel >= 0", "ImageData", "((flags & CV_COVAR_ROWS) != 0) ^ ((flags & CV_COVAR_COLS) != 0)", "Minimum", "objdetect::HOGDescriptor_16()", "constant_scalar", "\"abc_action_mode_done\" : \"\u0d85\u0dc0\u0dc3\u0dcf\u0db1 \u0dc0\u0dd6\"", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/intersection.cpp", "rectify3Collinear", "N3Iex8EbusyExcE", "total_sz", "H\\LJMKLLKKKJLHMGPFTFWGXHYJYLXNUPPRNSLUKXK[ TFVGWHXJXLWNTPPR KYLXNXSZVZXYYX NXS[W[XZYXYV", "missing FORMAT specifier", "NSt6__ndk115__codecvt_utf16IDsLb1EEE", "N2cv10opt_SSE4_118SymmRowSmallFilterIhiNS0_21SymmRowSmallVec_8u32sEEE", "ctype == CV_32F || ctype == CV_64F", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2019012230DeconvolutionSameKerasSubgraphEEE", "N2cv3hal8opt_AVX212_GLOBAL__N_119YUV422toRGB8InvokerILi2ELi0ELi0ELi3EEE", "(_R.size() == Size(3, 3) || _R.total() * _R.channels() == 3) && (_R.depth() == CV_32F || _R.depth() == CV_64F)", "\"abc_shareactionprovider_share_with\" : \"\u041d\u0430\u0434\u0456\u0441\u043b\u0430\u0442\u0438 \u0447\u0435\u0440\u0435\u0437\"", "/home/vagrant/build/srclib/opencv/modules/dnn/src/tensorflow/tf_importer.cpp", "virtual void cv::opt_SSE4_1::(anonymous namespace)::RowSum<unsigned char, unsigned short>::operator()(const uchar *, uchar *, int, int) [T = unsigned char, ST = unsigned short]", "Parent region exceeds children count. Bailout", "cvSetTrackbarMin", "MVQMNV QMVM PQSQ NVSV", "void cv::hal::addWeighted32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, void *)", "this_v.size() == v.size()", "NSt6__ndk120__shared_ptr_emplaceIN2cv11YAMLEmitterENS_9allocatorIS2_EEEE", "_SVDcompute", "drawFrameAxes", "m > 0", "24TegraRowOp_phase_InvokerIKffE", "void cv::correctMatches(cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray)", "N12opencv_caffe12LogParameterE", "Only 8-bit grayscale or color images are supported", "N6google8protobuf24MergedDescriptorDatabaseE", "isMap()", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_18Filter2DIsNS2_4CastIffEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "void cv::opt_AVX2::cvt16u32f(const ushort *, size_t, uchar *, size_t, float *, size_t, cv::Size, void *)", "G^RFR[ SFS[ IMJLLMMQNSOTQU JLKMLQMSNTQUTUWTXSYQZM[L TUVTWSXQYM[L\\M OFVF O[V[", "G\\VMV[ WMW[ ZMOMLNKPKQLSOTVT OMMNLPLQMSOT TTQUPVNZM[ TTRUQVOZN[L[KZJX S[Z[", "!roots.empty()", "G\\KFK[ KFTFWGXHYJYLXNWOTPKP RPY[", "void cv::hal::opt_SSE4_1::add16s(const short *, size_t, const short *, size_t, short *, size_t, int, int)", "PixarLog", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_19ColumnSumIisEENS_9allocatorIS5_EEEE", "virtual void cv::dnn::ElementWiseLayer<cv::dnn::ELUFunctor>::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays) [Func = cv::dnn::ELUFunctor]", "PixelXDimension", "u->mapcount == 0", "width (frame): %d", "growTop", "PFvP12AMediaFormatE", "static cv::MatExpr cv::Mat::eye(cv::Size, int)", "rectangle", "!fixedType() || ((ogl::Buffer*)obj)->type() == mtype", "Friday", "imgproc::arcLength_10()", "Mat::nGetF()", "H[YGUGQHNJLMKPKSLVNYQ[U\\Y\\ YGVHSJQMPPPSQVSYV[Y\\", "photo::setSaturationWeight_10()", "polyfit", "label > 0 && label <= (int)n", "N3Imf17ScanLineInputFileE", "out_x", "void cv::hal::opt_SSE4_1::cmp8s(const schar *, size_t, const schar *, size_t, uchar *, size_t, int, int, int)", "imgproc::HoughLinesP_11()", "N3Iex8EintrExcE", "void cv::ml::randMVNormal(cv::InputArray, cv::InputArray, int, cv::OutputArray)", "CL_PROFILING_INFO_NOT_AVAILABLE", "pAPIEH", "KYWOWPVQNVMWMX NQOOROUQ OPRPUQVQ NVOVRWUW OVRXUXVV", "cannot parse filter header", "min_theta", "depth == CV_8U || depth == CV_16U || depth == CV_16S || depth == CV_32F || depth == CV_64F", "N7cvflann7anyimpl21typed_base_any_policyINS0_9empty_anyEEE", "basic_iostream", "virtual void cv::cpu_baseline::(anonymous namespace)::SqrRowSum<short, double>::operator()(const uchar *, uchar *, int, int) [T = short, ST = double]", "N2cv12cpu_baseline8Filter2DIfNS0_4CastIffEENS0_13FilterVec_32fEEE", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/permute_layer.cpp", "I[YKKY LQLUKYOXSX LULXOX", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphColumnFilter<cv::opt_AVX2::(anonymous namespace)::MinOp<unsigned short>, cv::opt_AVX2::(anonymous namespace)::MorphColumnVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_uint16x16> > >::operator()(const uchar **, uchar *, int, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MinOp<unsigned short>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphColumnVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_uint16x16> >]", "entry.clBuffer_ != NULL", "euclidean_loss", "imgproc::goodFeaturesToTrack_17()", "THDiskFile_seekEnd", "\"abc_toolbar_collapse_description\" : \"\u1001\u1031\u102b\u1000\u103a\u101b\u1014\u103a\"", "video::getFastPyramids_10()", "dCos_LA", "OpenCV TIFF: failed TIFFGetField(tif, TIFFTAG_IMAGELENGTH, &hght)", "N2cv8opt_AVX212_GLOBAL__N_111MorphFilterINS1_5MaxOpIfEENS1_8MorphVecINS1_4VMaxINS_8hal_AVX211v_float32x8EEEEEEE", "NSt6__ndk114default_deleteIN2cv21DetectionBasedTracker21SeparateDetectionWorkEEE", "photo::getColorAdaptation_10()", "N2cv3dnn16ElementWiseLayerINS0_20ChannelsPReLUFunctorEEE", "void cv::hal::opt_AVX2::split64s(const int64 *, int64 **, int, int)", "MWRYQZR[SZRY", "stitch", "calib3d::projectPoints_12()", "NSt6__ndk119__iostream_categoryE", "KYOBQDSGUKVPVTUYS]Q`Ob SHTKUOUUTYS\\ QDRFSITOTUS[R^Q`", "objdetect::computeGradient_10()", "}?the number of model points should be positive", "getDecisionFunction", "Transpose", "_dx.sameSize(_dy)", "data && dims <= 2 && rows == m && cols == n && channels() == 1", "ml::getVarIdx_10()", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2YCrCb_f<float> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2YCrCb_f<float>]", "JYSBTDUGVLVPUUSYQ\\N_Jb SBTEUJUOTTSWQ[N_", "npoints >= 0 && (depth == CV_32S || depth == CV_32F)", "vdInvSqrt", "JZJ]L]O\\Q[TXUVVSVOULTJSIQIPJOLNONSOVPXS[U\\X]Z]", "epsMat.total()", "thickness <= MAX_THICKNESS", "angleThresh_ > 0", "N3Iex15EconnrefusedExcE", "is_training", "zTXt: invalid compression type", "\"abc_activity_chooser_view_see_all\" : \"Kuva k\u00f5ik\"", "void cv::cpu_baseline::cvt32s64f(const int *, size_t, uchar *, size_t, double *, size_t, cv::Size, void *)", "void cv::normalize(cv::InputArray, cv::InputOutputArray, double, double, int, int, cv::InputArray)", "_img.size().height <= _templ.size().height && _img.size().width <= _templ.size().width", "N3Imf14TypedAttributeINS_15TileDescriptionEEE", "calib3d::solvePnPRansac_10()", "Iterator with mask is not supported", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::RGB2Lab_b>::operator()(const cv::Range &) const [Cvt = cv::RGB2Lab_b]", "void cv::hal::cpu_baseline::min8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "N2cv10opt_SSE4_112_GLOBAL__N_117MorphColumnFilterINS1_5MinOpIhEENS1_14MorphColumnVecINS1_4VMinINS_10hal_SSE4_110v_uint8x16EEEEEEE", "Destination double pointer is NULL", "\"abc_action_bar_home_description\" : \"\u041f\u0440\u0438\u0434\u0432\u0438\u0436\u0432\u0430\u043d\u0435 \u043a\u044a\u043c \u201e\u041d\u0430\u0447\u0430\u043b\u043e\u201c\"", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/split_layer.cpp", "templDx_.type() == CV_32FC1 && templDx_.size() == templEdges_.size()", "L.channels() == 1 && I.channels() == 1", "cl_intel_subgroups", "N3Imf14TypedAttributeINS_14ChromaticitiesEEE", "K[UUTSRRPRNSMTLVLXMZO[Q[SZTX PRNTMVMYO[ VRTXTZV[XZYY[V WRUXUZV[", "symbolToType", "I\\KKKILGMFOFPGQIRMR[ KIMGOGQI ZKZIYGXFVFUGTISMS[ ZIXGVGTI O[V[", "core::start_10()", "NSt6__ndk114codecvt_bynameIcc9mbstate_tEE", " flags=0x%08llx", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi2EEEij11DistSquarediE", "G]QFNGLIKKJOJRKVLXNZQ[S[VZXXYVZRZOYKXIVGSFQF QFOGMILKKOKRLVMXOZQ[ S[UZWXXVYRYOXKWIUGSF NYNXOVQURUTVUXV_W`Y`Z^Z] UXV\\W^X_Y_Z^", "operator%", "photo::getExposureWeight_10()", "(type == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3)) || type == (((6) & ((1 << 3) - 1)) + (((1)-1) << 3)) || type == (((5) & ((1 << 3) - 1)) + (((2)-1) << 3)) || type == (((6) & ((1 << 3) - 1)) + (((2)-1) << 3)))", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2HSV_f>::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2HSV_f]", ".Too many IDATs found", "\"abc_shareactionprovider_share_with_application\" : \"\u200f\u0627\u0634\u062a\u0631\u0627\u06a9\u200c\u06af\u0630\u0627\u0631\u06cc \u0628\u0627 %s\"", "Cannot determine number of parameters for batch normalization layer.", "Corrupt JPEG data: found marker 0x%02x instead of RST%d", "opencv_tensorflow.OpDef.ArgDef.number_attr", "calcAngles", "val != lmap.end()", "n.isString() && String(n) == name", "floating point predictor ", "d == 2 && sz.area() == sizes[0]*sizes[1]", "NSt6__ndk120__shared_ptr_emplaceIN2cv19TonemapReinhardImplENS_9allocatorIS2_EEEE", "2019.0.0 Beta Update 1", "N2cv3dnn14dnn4_v201901228RNNLayerE", "!I0.empty() && I0.channels() == 1", "0123456789ABCDEF", "SoftMax", "virtual void cv::opt_AVX2::(anonymous namespace)::SqrRowSum<float, double>::operator()(const uchar *, uchar *, int, int) [T = float, ST = double]", "cvUndistort2", "sgnd == 0 && \"not supported\"", "N2cv12cpu_baseline12ColumnFilterINS0_13FixedPtCastExIihEENS0_19SymmColumnVec_32s8uEEE", "N2cv21DetectionBasedTrackerE", "N3Iex12EnetresetExcE", "/data/data/com.intel.vtune/perfrun/lib64/runtime/libittnotify.so", "H\\WMWbXb WMXMXb WPUNSMPMNNLPKSKULXNZP[S[UZWX WPSNPNNOMPLSLUMXNYPZSZWX", "ColorMatrix1", "\"abc_action_mode_done\" : \"\u5b8c\u4e86\"", "CPPTYPE_INT64", "Input array must be 8uC1 or 8sC1", "Protocol message could not be serialized.", "N2cv12VideoCaptureE", "yolo_%d", "THDiskFile_readShort", " A!I0.empty() && I0.channels() == 1", "vdSin", "\"abc_capital_on\" : \"VULIWE\"", "\"abc_shareactionprovider_share_with_application\" : \"Compartir con %s\"", "cmp_loop", "N2cv10opt_SSE4_19RowFilterIhdNS0_8RowNoVecEEE", "One of required vector arguments is not a valid matrix", "imgproc::EMD_11()", "dnn::finalize_10()", "\"abc_searchview_description_submit\" : \"Envoyer la requ\u00eate\"", "Mat::n_1assignTo__JJI()", "(srcimg.rows / 3) * 2 == dstimg.rows", "imgcodecs::imwrite_10()", "cvDestroyAllWindows", "src1.size()==src2.size()", "Input1", "void cv::hal::recip8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, void *)", "G]OFOb UFUb JQZQ JWZW", "N3Iex12EnotemptyExcE", "setStrides", "void cv::details::normalizePoints1D(cv::InputArray, cv::OutputArray, cv::OutputArray)", "basic_istream", "src.size == dst.size && src.type() == dst.type()", "G]KFK[ LIL[K[ LIY[ KFXX XFXX XFYFY[", "convertTo", "\"abc_activity_chooser_view_see_all\" : \"Poka\u017ei vse\"", "_jp2overhead", "%%.%dg", "virtual void cv::ml::DTreesImplForRTrees::clear()", "cvReleaseMemStorage", "__itt_string_handle_create", "N2cv3hal10opt_SSE4_112_GLOBAL__N_119YUV422toRGB8InvokerILi2ELi0ELi0ELi4EEE", "utils::findDataFile(): can't find data file via ", "/home/vagrant/build/srclib/opencv/modules/dnn/src/torch/THDiskFile.cpp", "G]ONMOKQJTJWKYLZN[Q[TZWXYUZRZOXMVMTORSPXMb", "E[EPFRHTJUMVQVUUXSZP[NZLWLSMQNNPLSKVKYL\\M^", "E`UQUNTLRKPKNLMMLPLSMUOVQVSUTTUQ OLNMMPMSNU RKPLOMNPNSOUPV VKUQUSVUXVZV\\U]R]O\\L[JYHWGTFQFNGLHJJILHOHRIUJWLYNZQ[T[WZYYXYWZ WKVQVSWU VKXKWQWSXUZV", "photo::getSaturationWeight_10()", "N2cv8opt_AVX216SymmColumnFilterINS0_4CastIddEENS0_11ColumnNoVecEEE", "N3Iex9EnospcExcE", "The algorithm stopped before its convergence. The correlation is going to be minimized. Images may be uncorrelated or non-overlapped", "m_height", "\"abc_capital_on\" : \"I-ON\"", "\"abc_action_mode_done\" : \"Kwenziwe\"", "H\\XFK[ YFL[ LFKLKFYF K[Y[YUX[", "Mat::n_1t()", " = { <proto text format> }\". To set fields within it, use syntax like \"", "NSt6__ndk17codecvtIDsc9mbstate_tEE", "CHECK failed: file->pool_->lazily_build_dependencies_: ", "Ptr<cv::BaseFilter> cv::opt_AVX2::getMorphologyFilter(int, int, const cv::Mat &, cv::Point)", "Too complex format for the matrix", "NSt6__ndk114default_deleteIN2cv15OcvDftBasicImplEEE", "minCircularity", "N2cv12DTRowInvokerE", "core::setUseIPP_10()", "\"abc_action_bar_up_description\" : \"\u10d6\u10d4\u10db\u10dd\u10d7 \u10dc\u10d0\u10d5\u10d8\u10d2\u10d0\u10ea\u10d8\u10d0\"", "fitLine", "centers.rows == cluster_count", "!dst.empty()", "create", "in use by IDAT", "InstanceNormalization", "I\\JPLNNMOMQNROSRSVR[ ZMYPXRR[P_Ob", "subspaceReconstruct", "Ignoring attempt to write 16-bit bKGD chunk when bit_depth is 8", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::RGB2RGB<float> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::RGB2RGB<float>]", "imgproc::createLineSegmentDetector_10()", "N2cv3dnn14dnn4_v2019012218CropAndResizeLayerE", "N3Imf9InputFileE", "NSt6__ndk18messagesIcEE", "\"abc_searchview_description_clear\" : \"\u067e\u0627\u06a9 \u06a9\u0631\u062f\u0646 \u0639\u0628\u0627\u0631\u062a \u062c\u0633\u062a\u062c\u0648\"", "ml::setSvmsgdType_10()", "Insufficient memory to store text", "\"abc_action_mode_done\" : \"Tayyor\"", "reuseMap.find(user) == reuseMap.end()", "\"abc_activitychooserview_choose_application\" : \"\u9009\u62e9\u5e94\u7528\"", "CV_ARE_SIZES_EQ(_tvec1, _tvec2) && CV_ARE_SIZES_EQ(_tvec1, _rvec1)", "CHECK failed: it != end(): ", "resizeWriteBuffer", "void cv::QRDetect::fixationPoints(vector<cv::Point2f> &)", "Connectivity must be 4, 0(=4) or 8", "calib3d::decomposeProjectionMatrix_11()", "N2cv21resizeGeneric_InvokerINS_12HResizeCubicIfffEENS_12VResizeCubicIfffNS_4CastIffEENS_19VResizeCubicVec_32fEEEEE", "N12opencv_caffe16PoolingParameterE", "void cv::DescriptorMatcher::match(cv::InputArray, std::vector<DMatch> &, cv::InputArrayOfArrays)", "mean.size() == size", "\"abc_shareactionprovider_share_with\" : \"Chia s\u1ebb v\u1edbi\"", "getGpuMatRef", "no color-map for color-mapped image", "!I.empty() && (I.channels()==3)", "N2cv23CvtColorIPPLoop_InvokerINS_24IPPReorderGeneralFunctorEEE", "N2cv12cpu_baseline8Filter2DIhNS0_4CastIddEENS0_11FilterNoVecEEE", "coolingRatio < 1.0f", "polylines", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/scale_layer.cpp", "NVQLRMSLRKQLQNSP", "update.isContinuous()", "void cv::hal::opt_AVX2::cvtBGRtoThreePlaneYUV(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "Key name may only contain alphanumeric characters [a-zA-Z0-9], '-' and '_'", "CPPTYPE_FLOAT", "type == FileNode::SEQ", "step_x", "video::predict_11()", "N2cv8opt_AVX212ColumnFilterINS0_4CastIisEENS0_25SymmColumnSmallVec_32s16sEEE", "matchesMask must have the same size as matches1to2", "offset_x", "virtual void cv::cpu_baseline::(anonymous namespace)::ColumnSum<int, double>::operator()(const uchar **, uchar *, int, int, int) [ST = int, T = double]", "depth == CV_8U || depth == CV_32F", "\"abc_search_hint\" : \"Rechercher\u2026\"", "rsz == dims*2 || (rsz == 2 && _1d) || (rsz == 0 && images.depth(0) == CV_8U)", "imgproc::demosaicing_11()", "\"abc_activitychooserview_choose_application\" : \"\u0418\u0437\u0431\u0435\u0440\u0438 \u0430\u043f\u043b\u0438\u043a\u0430\u0446\u0438\u0458\u0430\"", "core::setRNGSeed_10()", "features2d::train_10()", "N6google8protobuf16RepeatedPtrFieldINS0_7MessageEEE", "(winSize.width - blockSize.width) % blockStride.width == 0 && (winSize.height - blockSize.height) % blockStride.height == 0", "!corners.empty()", "NSt6__ndk120__shared_ptr_pointerIPN2TH8THFile__EPFvS3_ENS_9allocatorIS2_EEEE", "blobShapeFromTensor", "photo::setMaxBits_10()", "void cv::hal::min64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, void *)", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_114MorphRowFilterINS3_5MinOpIfEENS3_11MorphRowVecINS3_4VMinINS1_12hal_baseline11v_float32x4EEEEEEENS_9allocatorISD_EEEE", "Portable image format - float (*.pfm)", "numpunct_byname<wchar_t>::numpunct_byname failed to construct for ", "calib3d::triangulatePoints_10()", "\"abc_shareactionprovider_share_with_application\" : \"Udost\u0119pnij dla %s\"", "unknown tagname", "map_matrix.isContinuous()", "Start of Image", "getOldCascade", "NSt6__ndk120__shared_ptr_emplaceIN2cv13Jpeg2KEncoderENS_9allocatorIS2_EEEE", "N2cv12RLByteStreamE", "cvSet2D", "MWRQQRRSSRRQ", "MWMMWW", "virtual void cv::TonemapDragoImpl::process(cv::InputArray, cv::OutputArray)", "cv::MatExpr cv::max(const cv::Mat &, const cv::Mat &)", "core::magnitude_10()", "\"abc_searchview_description_search\" : \"Suchen\"", "photo::fastNlMeansDenoising_17()", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12ColumnFilterINS2_4CastIdhEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "N3Imf14TypedAttributeINS_11ChannelListEEE", "updateHash", "width_size", "KYOBO[ UBU[", "ml::predictProb_11()", "calcUV", "!descriptors.empty()", "NSt6__ndk114default_deleteIN2cv3dnn16ElementWiseLayerINS2_14SigmoidFunctorEEEEE", "ml::setAnnealItePerStep_10()", "F^YGXHYIZHZGXF \\FUFRGPIOKNNMRK[J_Ia UFSGQIPKONMWL[K^J`IaGbEbDaD`E_F`Ea [FWTVXVZW[Z[\\Y]W \\FXTWXWZX[ JMYM", "N6google8protobuf13RepeatedFieldIbEE", "\"abc_searchview_description_search\" : \"S\u00f8k\"", "ApertureValue", "N6google8protobuf8internal16FunctionClosure0E", "dst_x", "IPP:ipp_Canny(Mat(), dx, dy, dst, (float)low_thresh, (float)high_thresh, L2gradient, 0)", "\"abc_activitychooserview_choose_application\" : \"\u1218\u1270\u130d\u1260\u122a\u12eb \u12ed\u121d\u1228\u1321\"", "virtual void cv::cpu_baseline::SymmColumnFilter<cv::cpu_baseline::Cast<float, unsigned short>, cv::cpu_baseline::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::Cast<float, unsigned short>, VecOp = cv::cpu_baseline::ColumnNoVec]", "operator->*", "cv::Mat cv::dnn::dnn4_v20190122::Net::Impl::getBlob(const cv::dnn::dnn4_v20190122::LayerPin &)", "There should be at least 5 points to fit the ellipse", "N2cv5utils5trace7details16SyncTraceStorageE", "data && m_current && count >= 0", "stage_threshold", "N2cv10opt_SSE4_116SymmColumnFilterINS0_4CastIisEENS0_11ColumnNoVecEEE", "IYJRKPLONOOPOQMX MONPNQLX OQPPROTOVPVRS\\ TOUPURR\\", "!nidx.empty()", "NRRROPNNNLOKPK", "haveInfEngine()", "Unhandled type (%d)", "video::set_1gain_10()", "Mat::n_1adjustROI()", "virtual void cv::MergeMertensImpl::process(cv::InputArrayOfArrays, cv::OutputArray)", "stoul", "compareSegments", "\"abc_toolbar_collapse_description\" : \"\u062a\u0635\u063a\u064a\u0631\"", "BcRGQHRISHRGPFMFJGHIGLG[ MFKGIIHLH[ ]G\\H]I^H]G[FXFUGSIRLR[ XFVGTISLS[ ]M][ ^M^[ DM^M D[K[ O[V[ Z[a[", "borderType == BORDER_DEFAULT", "cvGet1D", "video/", "findChessboardCornersSB", "Raw image encoder error: ", "Error flushing data before directory write", "N3Iex7MathExcE", "Branching factor must be at least 2", "N9__gnu_cxx24__concurrence_lock_errorE", "reductionIndices.type() == CV_32SC1", "' in ", "module->params.has(\"indices_blob_id\")", "calib3d::RQDecomp3x3_10()", "void cv::PCACompute(cv::InputArray, cv::InputOutputArray, cv::OutputArray, double)", "H\\LMMNNPT_VaXbZb[a NOOPU_V` INJMLMNNPPV_WaXb VSXPYMZMYOVSN\\K`JbKbL_N\\", "cv::Mat cv::imdecode(cv::InputArray, int, cv::Mat *)", "warpMatrix must be single-channel floating-point matrix", "N2cv12cpu_baseline12_GLOBAL__N_19ColumnSumIidEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212ColumnFilterINS2_13FixedPtCastExIihEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "K2.empty() || (K1.size() == Size(3,3))", "N2cv3hal8opt_AVX212_GLOBAL__N_119YUV422toRGB8InvokerILi0ELi0ELi0ELi4EEE", "envmap", "imgproc::setTemplate_11()", "core::norm_14()", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::HSV2RGB_b>::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::HSV2RGB_b]", "\"abc_capital_on\" : \"B\u1eacT\"", "H][MQMNNLQKTKWLYMZO[Q[TZVWWTWQVOUNSM QMONMQLTLXMZ Q[SZUWVTVPUN UN[N", "cvExp", "H\\LMLbMb LMMMMb MPONQMTMVNXPYSYUXXVZT[Q[OZMX MPQNTNVOWPXSXUWXVYTZQZMX", "MXNQOPQPRQRSQW VPURSTQWPY", "\"search_menu_title\" : \"\u0d24\u0d3f\u0d30\u0d2f\u0d41\u0d15\"", "cvDecomposeProjectionMatrix", "SetRepeatedFloat", " requested bytes.", "N2cv3dnn16PaddingLayerImplE", "\"abc_action_bar_home_subtitle_description_format\" : \"%1$s\u3001%2$s\u3001%3$s\"", "\"abc_toolbar_collapse_description\" : \"Strni\"", "ClipPath", "cache_path.empty() || utils::fs::isDirectory(cache_path)", "0 && \"OpenCV TIFF: unsupported depth\"", "H\\NFNHOYO[ OGPX PFQW [GO[ LFSF XF^F MFNH QFPH RFOG YF[G ]F[G", "Invalid filter type specified", "void cv::groupRectangles(std::vector<Rect> &, int, double, std::vector<int> *, std::vector<double> *)", "H\\XIYFYLXIVGSFPFMGKIKKLMMNOOUQWRYT KKMMONUPWQXRYTYXWZT[Q[NZLXKUK[LX", "NSt6__ndk120__shared_ptr_emplaceIN12_GLOBAL__N_118CLAHE_CalcLut_BodyIhLi256ELi0EEENS_9allocatorIS3_EEEE", "void cv::cornerEigenValsAndVecs(cv::InputArray, cv::OutputArray, int, int, int)", "cvInitIntrinsicParams2D", "void cv::cpu_baseline::cvt16u8u(const ushort *, size_t, uchar *, size_t, uchar *, size_t, cv::Size, void *)", "depth == CV_32F", "At marker 0x%02x, recovery action %d", "video::getVarThresholdGen_10()", "fromBinary", "D`DRJR ORUR ZR`R", "trainDescCollection[iIdx].rows < IMGIDX_ONE", "Video I/O: loaded plugin '", "cv::MatExpr cv::min(double, const cv::Mat &)", "N2cv8opt_AVX212_GLOBAL__N_19SqrRowSumIsdEE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi2EEExy7DistAbsNS1_IiLi2EEEE", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi4EEExy7DistAbsiE", "void cv::hal::div64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, void *)", "\"abc_search_hint\" : \"\u0628\u062d\u062b\u2026\"", "\"abc_action_bar_home_description\" : \"\u0d9c\u0dd9\u0daf\u0dbb\u0da7 \u0dc3\u0d82\u0da0\u0dcf\u0dbd\u0db1\u0dba \u0d9a\u0dbb\u0db1\u0dca\u0db1\"", "MXOQQPVP SPRV", "Sequential", "%s: Can not read TIFF directory entry.", "preferableBackend != DNN_BACKEND_HALIDE || preferableTarget == DNN_TARGET_CPU || preferableTarget == DNN_TARGET_OPENCL", "pointsMask.empty() || pointsMask.checkVector(1, CV_8U) == npoints", "Unknown data format %d for LogLuv compression", "predict2", "H\\KFY[ K[YF", "dnn::getInferenceEngineVPUType_10()", "H\\RLPLNKMINGQFTFXG[G]F XGVNTTRXPZN[L[JZIXIVJULUNV QPZP", "srcimg.rows / 2 == dstimg.rows", "void cv::hal::opt_SSE4_1::xor8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_111MorphFilterINS3_5MaxOpItEENS3_8MorphVecINS3_4VMaxINS1_10hal_SSE4_110v_uint16x8EEEEEEENS_9allocatorISD_EEEE", "imgproc::warpAffine_10()", "N2cv2ml6EMImplE", "R.>\\8", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_111MorphFilterINS3_5MaxOpIsEENS3_8MorphVecINS3_4VMaxINS1_12hal_baseline9v_int16x8EEEEEEENS_9allocatorISD_EEEE", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/spatialgradient.cpp", "virtual void cv::MatOp::divide(const cv::MatExpr &, const cv::MatExpr &, cv::MatExpr &, double) const", "calib3d::findHomography_10()", "void cv::hal::cpu_baseline::cvt16f32f(const cv::float16_t *, float *, int)", "\"abc_searchview_description_submit\" : \"So\u2018rov yaratish\"", "convertToCollection", "void cv::hal::opt_SSE4_1::recip32s(const int *, size_t, int *, size_t, int, int, const double *)", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_19ColumnSumIifEENS_9allocatorIS5_EEEE", "NSt6__ndk114default_deleteIN2cv5utils5trace7details16SyncTraceStorageEEE", "LXLKNKPLWX NKOLVX RPMX RPNX", "JZLKRX MKRV XKRX LKXK NLWL", "TIFFRawStripSize", "N2cv8opt_AVX216SymmColumnFilterINS0_4CastIdhEENS0_11ColumnNoVecEEE", "png_set_keep_unknown_chunks: invalid keep", "H\\QMNNLPKSKULXNZQ[S[VZXXYUYSXPVNSMQM MPLRLVMX WXXVXRWP QMONNOMRMVNYOZQ[ S[UZVYWVWRVOUNSM", "N2cv23Nld_Step_Scalar_InvokerE", "operator/=", "N2cv3hal12cpu_baseline12_GLOBAL__N_119YUV420p2RGB8InvokerILi0ELi4EEE", "int cv::hal::LU32f(float *, size_t, int, float *, size_t, int)", "CHECK failed: allow_unknown_field_ || reserved_field: ", "FastNlMeansMultiDenoisingInvoker", "N6google8protobuf12_GLOBAL__N_123AggregateErrorCollectorE", "void cv::hal::opt_SSE4_1::recip16s(const short *, size_t, short *, size_t, int, int, const double *)", "Tile (", "The JSON camel-case name of field \"", "L[LVNSPO SFL[ TFM[ OUQSSRTRVSVUUXUZV[ TRUSUUTXTZV[XZYY[V", "One of new dimension sizes is non-positive", "imgproc::accumulateProduct_11()", "\"abc_searchview_description_search\" : \"\u691c\u7d22\"", "G\\TFQGOIMMLPKTJZIb TFRGPINMMPLTKZJb TFVFXGYHYKXMWNTOPO VFXHXKWMVNTO POTPVRWTWWVYUZR[P[NZMYLV POSPURVTVWUYTZR[", "Note that future Caffe releases will only support ", "radius >= 0 && thickness <= MAX_THICKNESS && 0 <= shift && shift <= XY_SHIFT", "imgproc::setCannyLowThresh_10()", "photo::fastNlMeansDenoising_11()", "cc%(bps*stride))!=0", "\"abc_search_hint\" : \"\u0425\u0430\u0439\u0445...\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv4impl12PluginWriterENS_9allocatorIS3_EEEE", "calib3d::create_19()", "features2d::read_10()", "N3Iex10EnotblkExcE", "N2cv15PythonFormatterE", "JPEGTables", "minMaxIdx", "\"abc_action_mode_done\" : \"Klaar\"", "xDensity", "imgproc::cornerMinEigenVal_10()", "thread", "/home/vagrant/build/srclib/opencv/modules/features2d/src/matchers.cpp", "calib3d::findChessboardCornersSB_11()", "src.type() == dst.type() && dst.rows % src.rows == 0 && dst.cols % src.cols == 0", "N2cv9KAZE_ImplE", "H\\NIMKMMNOPPSPVOXN[K\\H\\G[FZFXGWHVJUMSTRWPZN[ VJUNTUSXQZN[K[IZHXHWIVJWIX", "__itt_model_lock_release", "NSt6__ndk120__shared_ptr_emplaceINS_6vectorIN2cv12LBPEvaluator10OptFeatureENS_9allocatorIS4_EEEENS5_IS7_EEEE", "IPP:ipp_flip(src, dst, flip_mode)", "photo::getScale_10()", "sigmoid", "N2cv3hal10opt_SSE4_112_GLOBAL__N_119YUV420p2RGB8InvokerILi2ELi4EEE", "calib3d::setMinDisparity_10()", "Cannot determine an origin framework of files: ", "IPP:((ippicvsInvSqrt_64f_A50)(src, dst, len)) >= 0", "0 <= _dims && _dims <= CV_MAX_DIM", " contains invalid ", "maxResults > 0", "num_output", "!_descriptors.empty()", "N3Iex8EtimeExcE", "JPEG files (*.jpeg;*.jpg;*.jpe)", "virtual void cv::FlannBasedMatcher::radiusMatchImpl(cv::InputArray, std::vector<std::vector<DMatch> > &, float, cv::InputArrayOfArrays, bool)", "__itt_heap_reallocate_end", "NSt6__ndk120__shared_ptr_emplaceIN2cv12_GLOBAL__N_124FarnebackOpticalFlowImplENS_9allocatorIS3_EEEE", "img.isContinuous() && I1.isContinuous() && I2.isContinuous()", "\"abc_shareactionprovider_share_with\" : \"\u1785\u17c2\u1780\u179a\u17c6\u179b\u17c2\u1780\u200b\u1787\u17b6\u1798\u17bd\u1799\"", "PReLU", "N2cv12cpu_baseline12_GLOBAL__N_19SqrRowSumItdEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_117MorphColumnFilterINS3_5MaxOpItEENS3_14MorphColumnVecINS3_4VMaxINS1_8hal_AVX211v_uint16x16EEEEEEENS_9allocatorISD_EEEE", "algorithm", "videoio::open_11()", "calib3d::calibrationMatrixValues_10()", "vecopTypeToStr", "cat_var_count", "divUp(dpos, 8) == desc_size", "virtual void cv::MatOp_AddEx::add(const cv::MatExpr &, const cv::Scalar &, cv::MatExpr &) const", "virtual void cv::cpu_baseline::RowFilter<short, double, cv::cpu_baseline::RowNoVec>::operator()(const uchar *, uchar *, int, int) [ST = short, DT = double, VecOp = cv::cpu_baseline::RowNoVec]", "I\\XNYOZNYMXMVNUO QMONNOMQMSNUOVQWSWUVVUWSWQVOUNSMQM OONQNSOU UUVSVQUO QMPNOPOTPVQW SWTVUTUPTNSM NUMVLXLYM[N\\Q]U]X^Y_ N[Q\\U\\X] LYMZP[U[X\\Y^Y_XaUbObLaK_K^L\\O[ ObMaL_L^M\\O[", "!sz.empty()", "(String)fn[\"name\"] == name_", "frameType == CV_8UC1 || frameType == CV_8UC3 || frameType == CV_32FC1 || frameType == CV_32FC3", "virtual void cv::dnn::LRNLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "photo::createMergeMertens_12()", "cvInsertNodeIntoTree", "SpatialZeroPadding in cropping mode is not implemented", "N2cv8opt_AVX28Filter2DIhNS0_4CastIffEENS0_11FilterNoVecEEE", "IPP:((ippicviCopy_32s_C4MR)((const Ipp32s *)src, (int)sstep, (Ipp32s *)dst, (int)dstep, ippiSize(size), (const Ipp8u *)mask, (int)mstep)) >= 0", "Can not unlink directory in read-only file", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::RGB5x52Gray>::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::RGB5x52Gray]", "KZTKPX UKQX PKNNOKZKYNYK NXSX", "../../../../3rdparty/protobuf/src/google/protobuf/reflection_internal.h", "int cv::opt_SSE4_1::(anonymous namespace)::MorphVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_uint16x8> >::operator()(uchar **, int, uchar *, int) const [VecUpdate = cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_uint16x8>]", "ip.type() == FileNode::SEQ", "@@condition_variable::wait: mutex not locked", "AntiAliasStrength", "src.depth() == dst.depth() && src.size == dst.size", "Sorry, can not handle image with %s=%d, %s=%d", "FocalPlaneResolutionUnit", "NSt6__ndk120__shared_ptr_pointerIPN2cv15OcvDftBasicImplENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "N3Iex15EdestaddrreqExcE", "i1 >= 0 && j < ndsts && dst[j].depth() == depth", "rectifyGrid", "ThunderScan", "Invalid or unsupported syntax", "virtual void cv::cpu_baseline::RowFilter<unsigned short, float, cv::cpu_baseline::RowNoVec>::operator()(const uchar *, uchar *, int, int) [ST = unsigned short, DT = float, VecOp = cv::cpu_baseline::RowNoVec]", "TIFFFillStripPartial", "numReferences", "png_write_image: unsupported transformation", "N2cv3hal8opt_AVX212_GLOBAL__N_119YUV420p2RGB8InvokerILi2ELi3EEE", "features2d::getNOctaves_10()", "close", "class_weights", "cvStartWriteSeq", "\"abc_activity_chooser_view_see_all\" : \"\u00d6sszes megtekint\u00e9se\"", "N11opencv_onnx22StringStringEntryProtoE", "\"abc_searchview_description_submit\" : \"\u63d0\u4ea4\u67e5\u8a62\"", "bilateralFilter_8u", "\"search_menu_title\" : \"\u0ba4\u0bc7\u0b9f\u0bc1\"", "Mat::n_1Mat__I_3IIDDDD()", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::RGB2RGB5x5>::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::RGB2RGB5x5]", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/hough.cpp", "Unexpected header format (expected line break)", "N2cv12cpu_baseline12_GLOBAL__N_19SqrRowSumIhiEE", "derivAperture", "readParams", "File is not an image file.", "N2cv12cpu_baseline21SymmColumnSmallFilterINS0_4CastIisEENS0_25SymmColumnSmallVec_32s16sEEE", "Contrast", "Requested blob \"", "N2cv10opt_SSE4_121SymmColumnSmallFilterINS0_4CastIffEENS0_22SymmColumnSmallVec_32fEEE", "lineOrder", "objdetect::detectMultiScale3_11()", "October", "ml::getCovarianceMatrixType_10()", "N9IlmThread10ThreadPoolE", "OPENCV_VIDEOIO_PRIORITY_%s", "NSt6__ndk111__money_putIcEE", "int cv::cpu_baseline::RowVec_16s32f::operator()(const uchar *, uchar *, int, int) const", "void cv::dnn::dnn4_v20190122::Net::getMemoryConsumption(const std::vector<MatShape> &, size_t &, size_t &) const", "ASCII value for tag \"%s\" does not end in null byte", "NSt6__ndk113basic_filebufIcNS_11char_traitsIcEEEE", "convertAndUnrollScalar", "\"abc_searchview_description_submit\" : \"Dien navraag in\"", "?N7cvflann7anyimpl14big_any_policyINS0_9empty_anyEEE", "__itt_model_site_end", "NPwI2", "N3Iex11ElibexecExcE", "shape", "void cv::hal::addWeighted32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, void *)", "cv::dnn::dnn4_v20190122::TorchImporter::TorchImporter(cv::String, bool, bool)", "mean == Scalar() || inputsData[i].size[1] <= 4", "N3Iex14EnetunreachExcE", "N2cv3dnn16ElementWiseLayerINS0_12ReLU6FunctorEEE", "generateKernel", "(dst_width > 0 && dst_height > 0) || (inv_scale_x > 0 && inv_scale_y > 0)", "m1.checkVector(2) == m2.checkVector(2)", "\"abc_search_hint\" : \"\u041f\u0440\u0435\u0442\u0440\u0430\u0436\u0438\u0442\u0435...\"", "Size of position vector must be 4x1!", "imgproc::convertMaps_11()", "kernel", "\"abc_capital_on\" : \"YONIQ\"", "(rtype == CV_32F || rtype == CV_64F) && (ttype == CV_32F || ttype == CV_64F)", "buf != 0 && 0 <= sidx && sidx < getNSamples()", "max must be greater than min", "ImageScaler", "rot2quatMinimal", "N2cv25Affine2DEstimatorCallbackE", "coeffs[0] + coeffs[1] + coeffs[2] == (1 << shift)", "\"abc_shareactionprovider_share_with_application\" : \"%s \u098f\u09b0 \u09b8\u09be\u09a5\u09c7 \u09b6\u09c7\u09af\u09bc\u09be\u09b0 \u0995\u09b0\u09c1\u09a8\"", "LXOKOP PKOP UKUP VKUP", "Logic problem? szsrc = ", "__itt_frame_end_v3", "void cv::hal::cpu_baseline::cvt32f16f(const float *, cv::float16_t *, int)", "weightedCentroid", "Registering anonymous field with tag %d (0x%x) failed", "dnn::setInput_10()", "objdetect::detectAndDecode_10()", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_17RGB2RGBItEEEE", "nlabels == n", "photo::getSaturation_10()", "!_Function.empty()", "features2d::setDescriptorSize_10()", "void cv::merge(const cv::Mat *, size_t, cv::OutputArray)", "Error calling levelHeight() on image file \"", "\"abc_searchview_description_clear\" : \"Slett s\u00f8ket\"", "calib3d::findFundamentalMat_12()", "N6google8protobuf17GeneratedCodeInfoE", "uninterpreted_option", "isClassifier()", "\"abc_toolbar_collapse_description\" : \"\u6298\u308a\u305f\u305f\u3080\"", "Relu6", "void cv::hal::opt_AVX::invSqrt32f(const float *, float *, int)", "%d.%d.%d", "<init>", "N2cv3dnn24DetectionOutputLayerImplE", "virtual void cv::dnn::ElementWiseLayer<cv::dnn::BNLLFunctor>::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays) [Func = cv::dnn::BNLLFunctor]", "virtual void cv::cpu_baseline::ColumnFilter<cv::cpu_baseline::FixedPtCastEx<int, unsigned char>, cv::cpu_baseline::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::FixedPtCastEx<int, unsigned char>, VecOp = cv::cpu_baseline::ColumnNoVec]", "findStereoCorrespondenceBM", "video::calcOpticalFlowPyrLK_14()", "MXRMPNOPOSPURVSVUUVSVPUNSMRM", "operator()", "productsum", "\"abc_capital_on\" : \"ACTIVAT\"", "OPENCV_CPU_DISABLE", "void cv::hal::opt_AVX::sqrt32f(const float *, float *, int)", "void cv::opt_AVX2::cvt16u16s(const ushort *, size_t, uchar *, size_t, short *, size_t, cv::Size, void *)", "The matrix has NULL data pointer", "calib3d::fisheye_1calibrate_10()", "get_row_func != 0", "N2cv18ResizeArea_InvokerItfEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16SunRasterDecoderENS_9allocatorIS2_EEEE", "void cv::cpu_baseline::bilateralFilterInvoker_32f(int, int, int, int *, const cv::Mat &, cv::Mat &, float, float *, float *)", "Source is not a sequence nor matrix", "\"abc_action_menu_overflow_description\" : \"Rohkem valikuid\"", "blobs[0].dims == 2", "reservedEntries_.empty()", "THDiskFile_readLong", "Note that future Caffe releases will not support ", "inputs.size() == outputs.size()", "i != j", "ddepth == CV_32F || ddepth == CV_8U", "\"abc_capital_on\" : \"ACTIVADO\"", "NVRMOV UPTPRQPS PSQUSVTV", "outputDetections_", "N7cvflann27HierarchicalClusteringIndexINS_10HammingLUTEEE", "F^ISJSLTMVMXLZ ISIRJQLQMRNTNWMYLZ RGPIOLOOQUQXPZR\\ RGTIULUOSUSXTZR\\ [S[RZQXQWRVTVWWYXZ [SZSXTWVWXXZ KVYV", "N12opencv_caffe17ProposalParameterE", "...<truncated>...", "void cv::dnn::dnn4_v20190122::Net::Impl::allocateLayer(int, const cv::dnn::dnn4_v20190122::Net::Impl::LayersShapesMap &)", "invalid CSV format; no data found", "void cv::hal::cpu_baseline::not8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "(unsigned)_labels.at<int>(i) < (unsigned)K", "M[MVOSRNSLTITGSFQGPIOMNSM[ M[NXOVQSSRURVSVUTVQV QVSWTZU[V[XZYY[V", "The combination of type=%d, dtype=%d and normType=%d is not supported", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline9RowFilterIhfNS2_8RowNoVecEEENS_9allocatorIS5_EEEE", "MVOMOV OVUV", "LXRMPNOONQNSOUPVRVTUUTVRVPUNTMRM", "std::basic_ostream<char, std::char_traits<char> >", "_kernel.type() == DataType<KT>::type", "Unknown parameter dropout_ratio for layer type ", "!blobs.empty() || inputs.size() == 2", "static_cast", "N7cvflann7anyimpl21typed_base_any_policyIfEE", "__itt_task_end_overlapped_ex", "CV_32F", "void cv::hal::cpu_baseline::merge64s(const int64 **, int64 *, int, int)", "core::extractChannel_10()", "ml::setActiveVarCount_10()", "photo::createTonemapDrago_13()", "N6google8protobuf14MessageOptionsE", "video::buildOpticalFlowPyramid_13()", "N7cvflann9ResultSetIfEE", "NSt6__ndk19basic_iosIcNS_11char_traitsIcEEEE", "TIFFInitCCITTFax4", "void cv::opt_AVX2::cvt32s16u(const int *, size_t, uchar *, size_t, ushort *, size_t, cv::Size, void *)", "internalNodes", "Mat::n_1convertTo__JJIDD()", "Smoothing not supported with nonstandard sampling ratios", "NSt6__ndk120__shared_ptr_emplaceIN2cv10ExrEncoderENS_9allocatorIS2_EEEE", "solvePnPRansac", "CL_INVALID_GLOBAL_OFFSET", "inconsistent chromaticities", "keyCode", "void cv::hal::opt_AVX2::addRNGBias32f(float *, const float *, int)", "N2cv24LMeDSPointSetRegistratorE", "JZPKLX PKTX QKTU XKTX NKQK VKZK JXNX", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline8Filter2DItNS2_4CastIftEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "count > 0", "Deconvolution", "\"abc_activity_chooser_view_see_all\" : \"\u054f\u0565\u057d\u0576\u0565\u056c \u0562\u0578\u056c\u0578\u0580\u0568\"", "PTQPPQPSQTSTTSTQSPQP", "    with %d x %d thumbnail image", "): failed TIFFSetField(tif, TIFFTAG_XRESOLUTION, (float)dpiX)", "vfpv4", "I[M+MRMy N+NRNy M+X+ MyXy", "K.type()", "cvXor", ">NULL vertex array pointer", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphColumnFilter<cv::cpu_baseline::(anonymous namespace)::MinOp<short>, cv::cpu_baseline::(anonymous namespace)::MorphColumnVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_int16x8> > >::operator()(const uchar **, uchar *, int, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MinOp<short>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphColumnVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_int16x8> >]", "input.size() >= 1 && input.size() <= 2", "NSt6__ndk120__shared_ptr_emplaceIN2cv24FastFeatureDetector_ImplENS_9allocatorIS2_EEEE", "E]JMHLGJGIHGJFKFMGNINKMPLTJ[ LTOLQHRGTFVFXGYIYKXPVWVZW[X[ZZ[Y]V", "exact nine points are expected to initialize the board", "JZRDJR RDZR", "__itt_notify_sync_cancel", "Frame buffer slice name cannot be an empty string.", "\"abc_search_hint\" : \"\uac80\uc0c9...\"", "Pushed vector type is not the same as matrix type", "u->data != NULL", "void cv::insertChannel(cv::InputArray, cv::InputOutputArray, int)", "N2cv9ExceptionE", "F]JQLOONNMLNJQITIWJZK[M[OZQWRT IWJYKZMZOYQW QTQWRZS[U[WZYWZTZQYNXMWNYOZQ QWRYSZUZWYYW", "Premature end of input file", "CV_MAT_CN(sumType) == CV_MAT_CN(srcType)", "Invalig horizontal/vertical sampling value", "isAsymmetricGrid ^ isSymmetricGrid", "NSt6__ndk116__narrow_to_utf8ILj32EEE", "computeProbabilities", "whiteLuminance", "void cv::cpu_baseline::cvt32s8s(const int *, size_t, uchar *, size_t, schar *, size_t, cv::Size, void *)", "ml::getEmax_10()", "ml::getNVars_10()", "I[YHXJVOTUSWQZO[ SLRNPONOMMMKNIPGSF\\FZGYHXKVSUVTXRZO[M[KZJYJXKWLXKY UFYGZG", "[empty_any]", "scalarParams.has(\"pad_b\")", "\"abc_searchview_description_voice\" : \"\u0413\u0430\u043b\u0430\u0441\u0430\u0432\u044b \u043f\u043e\u0448\u0443\u043a\"", "video::setPatchStride_10()", "NVQFRGSFREQF RMR[", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline9RowFilterIsdNS2_8RowNoVecEEENS_9allocatorIS5_EEEE", "int cv::opt_SSE4_1::(anonymous namespace)::MorphRowVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_float32x4> >::operator()(const uchar *, uchar *, int, int) const [VecUpdate = cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_float32x4>]", "\"abc_searchview_description_voice\" : \"\u05d7\u05d9\u05e4\u05d5\u05e9 \u05e7\u05d5\u05dc\u05d9\"", "I[MTXTXQWOVNTMQMONMPLSLUMXOZQ[T[VZXX MSWSWQVOTNQNOONPMSMUNXOYQZTZVYWWXX", "\"abc_searchview_description_submit\" : \"Lek\u00e9rdez\u00e9s k\u00fcld\u00e9se\"", "cv::dnn::dnn4_v20190122::(anonymous namespace)::DarknetImporter::DarknetImporter(std::istream &, std::istream &)", "ml::getMeans_10()", "video::setVariationalRefinementDelta_10()", "imgproc::spatialGradient_10()", "DetectionOutputLayerImpl", "the actual field type (for enums T should be the generated enum ", "src.size == dst.size && src.channels() == dst.channels()", "R_gripper2base.isMatVector() && t_gripper2base.isMatVector() && R_target2cam.isMatVector() && t_target2cam.isMatVector()", "setUseSVM", "BayerGreenSplit", "calib3d::setDisp12MaxDiff_10()", "known incorrect sRGB profile", "reference temporary #", "invertAffineTransform", "Photoshop", "opencv_tensorflow.GradientDef.function_name", "N2cv3dnn14dnn4_v2019012210ScaleLayerE", "Write error at scanline %lu", "virtual void cv::opt_SSE4_1::(anonymous namespace)::RowSum<unsigned char, double>::operator()(const uchar *, uchar *, int, int) [T = unsigned char, ST = double]", "Mat::n_1create__JI_3II()", "img->dataOrder == IPL_DATA_ORDER_PIXEL", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline8Filter2DIhNS2_4CastIftEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", ".MSER", "!blobs.empty()", "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", "int cv::cpu_baseline::SymmRowSmallVec_32f::operator()(const uchar *, uchar *, int, int) const", "void cv::cpu_baseline::(anonymous namespace)::medianBlur_SortNet(const cv::Mat &, cv::Mat &, int) [Op = cv::cpu_baseline::(anonymous namespace)::MinMax32f, VecOp = cv::cpu_baseline::(anonymous namespace)::MinMaxVec32f]", "Unknown LevelMode format.", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphFilter<cv::opt_SSE4_1::(anonymous namespace)::MaxOp<unsigned short>, cv::opt_SSE4_1::(anonymous namespace)::MorphVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_uint16x8> > >::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MaxOp<unsigned short>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_uint16x8> >]", "Number of channels is not the same for all arrays", "virtual void cv::HaarEvaluator::computeChannels(int, cv::InputArray)", "NSt6__ndk120__shared_ptr_emplaceINS_6vectorIN2cv12LBPEvaluator7FeatureENS_9allocatorIS4_EEEENS5_IS7_EEEE", "eigenvalues", "N2cv17FileStorageParserE", "src.dims <= 2 && src.channels() == 1", "dnn::blobFromImage_10()", "initInterTab2D", "too many profiles", "preferableBackend == DNN_BACKEND_HALIDE", "sortByExecutionOrder", "ColorResponseUnit", "ml::getTrainNormCatResponses_10()", "G^[MZQYTWXUZR[P[MZKXJUJSKPMNPMRMUNVOWQYXZZ[[\\[ ZMYQXTWVUYTZR[ LXKVKRLP P[NZMYLVLRMONNPM RMTNUOVQXXYZ[[", "N2cv12MergeDebevecE", "image.type() == CV_8UC1", "OPENCV_VIDEOIO_PLUGIN_", "N2cv3hal12cpu_baseline12_GLOBAL__N_119YUV422toRGB8InvokerILi0ELi0ELi1ELi4EEE", "cv::ml::ParamGrid::ParamGrid(double, double, double)", "_model must have CV_64FC1 type, rows == 1 and cols == 13*componentsCount", "int cv::cpu_baseline::sum8u(const uchar *, const uchar *, int *, int, int)", "\"abc_capital_off\" : \"VYP.\"", "cvCmpS", "\"abc_shareactionprovider_share_with\" : \"Dijeljenje sa\"", "vfpv3d16", "imgproc::warpPerspective_13()", "virtual void cv::opt_SSE4_1::(anonymous namespace)::ColumnSum<int, short>::operator()(const uchar **, uchar *, int, int, int)", "=N2cv17Bayer2RGB_InvokerIhNS_24SIMDBayerInterpolator_8uEEE", "N2cv4impl12PluginWriterE", "void cv::bilateralFilter_8u(const cv::Mat &, cv::Mat &, int, double, double, int)", "Upsample", "\"abc_action_bar_up_description\" : \"P\u0101rvietoties aug\u0161up\"", "NSt6__ndk113basic_ostreamIcNS_11char_traitsIcEEEE", "OPENCV_DATA_PATH", "\"status_bar_notification_info_overflow\" : \">999\"", "2 == inputs.size()", "void cv::hal::opt_SSE4_1::div64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, const double *)", "int cv::opt_AVX2::sqsum8s(const schar *, const uchar *, int *, int *, int, int)", "(flags & FIXED_TYPE) != 0", "GetRepeatedStringReference", "CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST", "\"abc_searchview_description_search\" : \"\u0a16\u0a4b\u0a1c\u0a4b\"", "dropout_ratio", "MWOMOV UMUV OMUM", "Unknown projection type", "\"abc_activity_chooser_view_see_all\" : \"Buka konke\"", "OpenCV TIFF: failed TIFFSetField(tif, TIFFTAG_SAMPLEFORMAT, depth >= CV_32F ? SAMPLEFORMAT_IEEEFP : SAMPLEFORMAT_UINT)", "calib3d::composeRT_10()", "N3Iex12EcanceledExcE", "KYMPMV MSNQOPPPQQRSRV RSSQTPUPVQWSWV", "google.protobuf.FileOptions", "number of rows in data and labels should be equal", "BestQualityScale", "St13bad_exception", "St15underflow_error", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline16SymmColumnFilterINS2_4CastIftEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "MWOMOV OMRMTNUPUSTURVOV", "NSt6__ndk120__shared_ptr_emplaceIN2cv22CalibrateRobertsonImplENS_9allocatorIS2_EEEE", "0 <= i && i < sz", "(size_t)eigenvectors64f.cols == n", "L2Normalize", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_4NoOpEE22FirstScan4ConnectivityE", "N3Iex9EbfontExcE", "\"abc_shareactionprovider_share_with\" : \"\u053f\u056b\u057d\u057e\u0565\u056c\"", "!fixedSize() || ((UMat*)obj)->size.operator()() == Size(_cols, _rows)", "/home/vagrant/build/srclib/opencv/modules/dnn/misc/tensorflow/versions.pb.cc", "ml::setBoostType_10()", "largeSegments.size() == cornersCount", "CHECK failed: iter == extensions_.end(): ", "virtual void cv::Feature2D::detect(cv::InputArrayOfArrays, std::vector<std::vector<KeyPoint> > &, cv::InputArrayOfArrays)", "I[WUWRVOUNSMQMONMPLSLVMYNZP[R[TZVXWUXPXKWHVGTFRFPGNI", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_19ColumnSumIihEENS_9allocatorIS5_EEEE", "void cv::hal::addWeighted16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, void *)", "0 <= index && index < outPlaneTotal", "0 < k", "H[WPVQWRXQXPVNTMQMNNLPKSKULXNZQ[S[VZXX QMONMPLSLUMXOZQ[ LbXF", "objdetect::empty_10()", "copyTo", "N17opencv_tensorflow16TensorShapeProtoE", "opencv_tensorflow.FunctionDef.Node.dep", "op == CMP_LT || op == CMP_LE || op == CMP_EQ || op == CMP_NE || op == CMP_GE || op == CMP_GT", "computeChannels", "MapKey::GetInt64Value", "KZVMWKWOVMULSKQKOLNMNOOPQQTRVSWT NNOOQPTQVRWSWVVWTXRXPWOVNTNXOV", "\"search_menu_title\" : \"S\u00f6k\"", "E^P[MZJXHUGRGOHLJIMGPFTFWGYI[L\\O\\R[UYXVZS[P[ UKVJVNUKSJPJNKMLLOLRMUNVPWSWUVVT PJNLMOMRNUPW", "__itt_model_task_end", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/stubs/strutil.cc", "\"abc_action_menu_overflow_description\" : \"Dig\u0259r variantlar\"", "uchar2", "void cv::line(cv::InputOutputArray, cv::Point, cv::Point, const cv::Scalar &, int, int, int)", "F^JIZRJ[", "Invalid graph pointer", "across_spatial", "virtual void cv::opt_AVX2::SymmColumnSmallFilter<cv::opt_AVX2::Cast<int, short>, cv::opt_AVX2::SymmColumnSmallVec_32s16s>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::Cast<int, short>, VecOp = cv::opt_AVX2::SymmColumnSmallVec_32s16s]", "(D.cols == ((flags & 2) == 0 ? B.cols : B.rows))", "ld.inputBlobsWrappers.size() == 1", "setIdentity", "CHECK failed: file()->finished_building_ == true: ", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_18Filter2DIhNS2_4CastIfsEENS2_15FilterVec_8u16sEEENS_9allocatorIS7_EEEE", "int cv::opt_AVX2::(anonymous namespace)::MorphColumnVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_float32x8> >::operator()(const uchar **, uchar *, int, int, int) const [VecUpdate = cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_float32x8>]", "MXVFTHSJSKTLUKTJ", "CV_32FC1", "Pixel type of \"", "TIFFWriteDirectoryTagTransferfunction", "cvGraphAddVtx", "N2cv12TonemapDragoE", "virtual void cv::opt_SSE4_1::ColumnFilter<cv::opt_SSE4_1::Cast<float, float>, cv::opt_SSE4_1::SymmColumnVec_32f>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::Cast<float, float>, VecOp = cv::opt_SSE4_1::SymmColumnVec_32f]", "N2cv3dnn23ShuffleChannelLayerImplE", "png_image_write_to_file: invalid argument", "void cv::hal::invSqrt32f(const float *, float *, int)", "lbScalar == ubScalar", "s.type() == CV_64FC1 && t.type() == CV_64FC1", "/home/vagrant/build/srclib/opencv/modules/imgcodecs/src/rgbe.cpp", "__itt_counter_inc_v3", "Application must supply a known background gamma", "opencv_ml_boost", "opencv-nd-matrix", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_117MorphColumnFilterINS3_5MinOpIsEENS3_14MorphColumnVecINS3_4VMinINS1_12hal_baseline9v_int16x8EEEEEEENS_9allocatorISD_EEEE", "utils::findDataFile(): ... skip, not a valid directory: ", "!begins.empty()", "images.size() == times.total()", "google.protobuf.FieldOptions", "Bad idx", "void cv::cpu_baseline::gemmImpl(cv::Mat, cv::Mat, double, cv::Mat, double, cv::Mat, int)", "HZLFL[ LFYF LPTP", "n >= 0 && m >= 0", "void cv::dnn::dnn4_v20190122::TorchImporter::populateNet(cv::dnn::dnn4_v20190122::Net)", "virtual void cv::MatOp_Initializer::multiply(const cv::MatExpr &, double, cv::MatExpr &) const", "N2cv13parallelCannyE", "\"abc_searchview_description_submit\" : \"\u0d05\u0d28\u0d4d\u0d35\u0d47\u0d37\u0d23\u0d02 \u0d38\u0d2e\u0d7c\u0d2a\u0d4d\u0d2a\u0d3f\u0d15\u0d4d\u0d15\u0d41\u0d15\"", "Wrong mean shape for the given eigenvector matrix. Expected %d, but was %zu.", "preFilterType must be = CV_STEREO_BM_NORMALIZED_RESPONSE", "imgproc::putText_13()", "Obtained EMS handle %u", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_111YCrCb2RGB_fIfEEEE", "?void cv::decolor(cv::InputArray, cv::OutputArray, cv::OutputArray)", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphColumnFilter<cv::opt_AVX2::(anonymous namespace)::MaxOp<double>, cv::opt_AVX2::(anonymous namespace)::MorphColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MaxOp<double>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphColumnNoVec]", "core::pow_10()", "ml::setEmax_10()", "ShutterSpeedValue", "Incompatible type for \"%s\"; tag ignored", "randMVNormal", "matchShapes", "iterationsPerStep > 0", "\"abc_action_menu_overflow_description\" : \"\u1015\u102d\u102f\u1019\u102d\u102f\u101b\u103d\u1031\u1038\u1001\u103b\u101a\u103a\u1005\u101b\u102c\u1019\u103b\u102c\u1038\"", "CHECK failed: (count) <= (last_returned_size_): ", "\"abc_action_bar_home_description_format\" : \"\u200f%1$s\u200f, %2$s\"", "Mat::nPutI()", "imgproc::HoughLines_11()", "polarToCart", "FAILED: ", "OUTPUT ", "N6google8protobuf14ServiceOptionsE", "virtual void cv::opt_AVX2::ColumnFilter<cv::opt_AVX2::FixedPtCastEx<int, unsigned char>, cv::opt_AVX2::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::FixedPtCastEx<int, unsigned char>, VecOp = cv::opt_AVX2::ColumnNoVec]", "N2cv12_GLOBAL__N_116ByteStreamBufferE", "N3Iex9EnolckExcE", "void cv::opt_AVX2::cvt16u8s(const ushort *, size_t, uchar *, size_t, schar *, size_t, cv::Size, void *)", "__itt_frame_submit_v3", "MWWRWQVOUNSMQMONNOMQMR", "__itt_id_create", "noconvert", "cv::VideoCapture::VideoCapture(int, int)", "a_size.width == len", "void cv::hal::opt_SSE4_1::div8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, const double *)", "H\\PKOLMLLKLIMGOFQFSGTITLSPQUOXMZJ[H[GZGXHWIXHY QFRGSISLRPPUNXLZJ[ ]G\\H]I^H^G]F[FYGWIULSPRURXSZT[U[WZYX", "ml::train_12()", "parseBase64", "GlobalMaxPool", "cannot parse segment header", "int cv::cpu_baseline::(anonymous namespace)::MorphColumnVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_uint8x16> >::operator()(const uchar **, uchar *, int, int, int) const [VecUpdate = cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_uint8x16>]", "!is_completed", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::HSV2RGB_f>::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::HSV2RGB_f]", "Failed to write AVI file: number of frames is too large", "NWRKRLSLSKRK RORX SOSX POSO PXUX", "softmax_tree", "N2cv15resizeNNInvokerE", "void cv::dnn::dnn4_v20190122::blobFromImage(cv::InputArray, cv::OutputArray, double, const cv::Size &, const cv::Scalar &, bool, bool, int)", "void cv::opt_AVX2::cvt32s(const int *, size_t, uchar *, size_t, int *, size_t, cv::Size, void *)", "SpatialDropout", "Unexpected blob data type", "Unsupported combination of input/output matrices", "N2cv22resizeAreaFast_InvokerIhiNS_17ResizeAreaFastVecIhNS_25ResizeAreaFastVec_SIMD_8uEEEEE", "): failed TIFFSetField(tif, TIFFTAG_BITSPERSAMPLE, 32)", "outputDimension", "H\\JMKILGMFOFPGQIRM LHMGOGPH JMKJMHOHPIQMQ[ RMR[ ZMYJWHUHTISMS[ XHWGUGTH ZMYIXGWFUFTGSIRM N[V[ QYP[ QZO[ SZU[ SYT[", "cvCalibrateCamera2Internal", "cvGetMat", "int cv::opt_AVX2::RowVec_8u32s::operator()(const uchar *, uchar *, int, int) const", "N2cv11JpegEncoderE", "non-positive width", "KYTBTb UBUb NBUB NbUb", "minConvexity", "MorphFilter", "void cv::hal::addWeighted8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi3EEElm7DistAbsNS1_IiLi3EEEE", "N2cv24HoughCirclesAccumInvokerE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn13LSTMLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "MWOQPPQPRQRUSVTVUU VQUPTPSQQUPVOVNU", "eigenNonSymmetric", "qmult", "scalarParams.has(\"nOutput\")", "_dx.dims() == 2", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX28Filter2DItNS2_4CastIffEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "CV_IS_MAT(objectPoints) && CV_IS_MAT(imagePoints) && CV_IS_MAT(A) && CV_IS_MAT(rvec) && CV_IS_MAT(tvec)", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi2EEEij7DistAbsiE", "Cannot handle zero scanline size", "NVSLRMQLRKSLSNQP", "\"abc_searchview_description_search\" : \"\u041f\u043e\u0448\u0443\u043a\"", "file != 0", "Portable bitmap(.ppm) expects BGR image", "void cv::mixChannels(cv::InputArrayOfArrays, cv::InputOutputArrayOfArrays, const int *, size_t)", "currpos >= pospos", "boolean", "AVX512ER", "Unknown parameter source for layer type ", "calib3d::fisheye_1undistortPoints_10()", "rhs.data == 0 || (rhs.type() == type && rhs.rows == m)", "Number of basis graphs is not 2", "Size of projection matrix must be 3x4!", "CHECK failed: (from.GetDescriptor()) == (descriptor): ", "void cv::hal::opt_AVX2::addWeighted8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, const double *)", "virtual void cv::cpu_baseline::(anonymous namespace)::BilateralFilter_8u_Invoker::operator()(const cv::Range &) const", "dims <= 2 && m.dims <= 2 && size() == m.size() && tp == m.type() && ((rows == 3 && cols == 1) || (cols*channels() == 3 && rows == 1))", "The operation is neither 'array op array' (where arrays have the same size and type), nor 'array op scalar', nor 'scalar op array'", "Fax3Decode1D", "MVQMNV OSPQQPSPTQTRSTSUTVUV", "Can't ", "N3Iex8LogicExcE", "\"abc_searchview_description_clear\" : \"\u10db\u10dd\u10d7\u10ee\u10dd\u10d5\u10dc\u10d8\u10e1 \u10d2\u10d0\u10e1\u10e3\u10e4\u10d7\u10d0\u10d5\u10d4\u10d1\u10d0\"", "core::meanStdDev_11()", "\". The type has already been registered.", "channels_last", "N6google8protobuf2io18StringOutputStreamE", "\"status_bar_notification_info_overflow\" : \"\u1049\u1049\u1049+\"", "JZLMR[ LMMMRY XMWMRYNb XMR[ObNb", "OPENCV_LEGACY_WAITKEY", "void cv::hal::cpu_baseline::absdiff16s(const short *, size_t, const short *, size_t, short *, size_t, int, int)", "N2cv3dnn16ElementWiseLayerINS0_12PowerFunctorEEE", "dnn::getPerfProfile_10()", "means", "LZWDecode: Strip %d not terminated with EOI code", "wchar_t", "_mean.size() == mean_sz", "Scan script does not transmit all data", "SSE4.1", "op_def.proto", "filter_len", "NSt6__ndk19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE", "/home/vagrant/build/srclib/opencv/modules/photo/src/calibrate.cpp", "void cv::hal::opt_SSE4_1::cvtBGRtoGray(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool)", "NSt6__ndk120__shared_ptr_emplaceIN12_GLOBAL__N_118CLAHE_CalcLut_BodyItLi65536ELi0EEENS_9allocatorIS3_EEEE", "Colormap", "H\\XFK[ YFL[ KFYF KFKGXG LZYZY[ K[Y[", "core::divide_11()", "ml::getUse1SERule_10()", "N2cv16DenseOpticalFlowE", "photo::detailEnhance_11()", "google.protobuf.Any", "JYKPLPMQMSLV MSNQOPQPRQRSQV RSSQTPVPWQWRVTVUWVXV", "TIFFWriteDirectoryTagSampleformatArray", "HYLFL[ L[X[", "Field does not match message type.", "N12opencv_caffe9ParamSpecE", "0 <= j && j < nvars", "JArray", "\"abc_action_menu_overflow_description\" : \"\u05e2\u05d5\u05d3 \u05d0\u05e4\u05e9\u05e8\u05d5\u05d9\u05d5\u05ea\"", "void cv::dnn::dnn4_v20190122::Net::Impl::initInfEngineBackend()", "_ofs >= 0", "duplicate sRGB information ignored", "photo::process_10()", "imgproc::drawContours_12()", "blobs[i].rows == N && blobs[i].cols == N", "__itt_counter_inc", "features2d::getMinDistance_10()", "getScoreMaxAbove", "I[LRXR", "arithm_ipp_cmp16s", "\"abc_searchview_description_query\" : \"\u0395\u03c1\u03ce\u03c4\u03b7\u03bc\u03b1 \u03b1\u03bd\u03b1\u03b6\u03ae\u03c4\u03b7\u03c3\u03b7\u03c2\"", "photo::edgePreservingFilter_11()", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2019012224BatchNormNoGammaSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "Cannot quantize to more than %d colors", "): failed TIFFGetField(tif, TIFFTAG_IMAGEWIDTH, &wdth)", "Invalid memory pool code %d", "DiscreteAdaboost", "InfogainLoss", "MapValueRef::type MapValueRef is not initialized.", " layer parameter does not contain ", "cvInitImageHeader", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::RGB2Luv_f>::operator()(const cv::Range &) const [Cvt = cv::RGB2Luv_f]", "LYPFSCSP RDRP OPVP MRXR SVSa TTTa TTM]X] QaVa", "Both width and height of the pattern should have bigger than 2", "video::getFixedPointIterations_10()", "Unsupported combination of input and output formats", "NSt6__ndk120__shared_ptr_emplaceIN2cv12CSVFormatterENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_19SqrRowSumIsdEENS_9allocatorIS5_EEEE", "eta > 0", "NSt6__ndk17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEE", "Extension range $0 to $1 overlaps with reserved range $2 to $3.", "H]KHJJJLKNNOQOUNWMYKZIZGYFWFTGQJOMMQLULXMZP[R[UZWXXVXTWRURSSRU WFUGRJPMNQMUMXNZP[", "virtual void cv::ml::DTreesImplForRTrees::read(const cv::FileNode &)", "__itt_mark_global_off", "\"abc_activitychooserview_choose_application\" : \"Selecciona una aplicaci\u00f3\"", "core::copyTo_10()", "inp0.dims >= 2 && (int)inp0.total(2) == numInp", "Invalid wire type for CPPTYPE_INT64: ", "E60Om", "Computation will probably fail.", "N3Iex10EremchgExcE", "J[YPXPXQYQYPXOWOVPUTTVSWQXOXMWLVLTMSORRPSNSLRKPKOLONPQUWWXXXYW OXMVMTOR ONPPVWWX", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_111Gray2RGB5x5EEE", "NSt6__ndk112ctype_bynameIwEE", "Write Error", "N2cv10BaseFilterE", "N2cv3dnn15InterpLayerImplE", "F^NMLNKNIMHKHJIHKGLGNHOJOKNMKQJTJVKYM[P\\T\\W[YYZVZTYQVMUKUJVHXGYG[H\\J\\K[MYNXNVM JVKXMZP[T[WZYXZV", "/home/vagrant/build/srclib/opencv/modules/imgcodecs/src/utils.cpp", "pseudo-", "calib3d::estimateAffinePartial2D_13()", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_18Filter2DItNS2_4CastIftEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "half8", "/home/vagrant/build/srclib/opencv/modules/calib3d/src/chessboard.cpp", "(string)", "ulong8", "virtual void cv::opt_AVX2::(anonymous namespace)::RowSum<unsigned char, unsigned short>::operator()(const uchar *, uchar *, int, int) [T = unsigned char, ST = unsigned short]", "imgproc::getMinDist_10()", "KYRKPLOMNOMRMUNWPXRXTWUVVTWQWNVLTKRK RKPMOONRNVPX RXTVUTVQVMTK OWOVPUQURVRZS[T[UZ RVSZT[", "N3Iex5IoExcE", "cvGetSubRect", "cvAvg", "videoio::retrieve_11()", "N3Iex10EunatchExcE", "I[LKOX MKOT RKOX RKUX SKUT XKUX JKOK VKZK", "F]OFI[ PFJ[ QFK[ LFUFXGYHZKZOYSWWUYSZO[F[ WGXHYKYOXSVWTY UFWHXKXOWSUWRZO[ MFPG NFOH RFPH SFPG JZG[ JYH[ KYL[ JZM[", "DigitalZoomRatio", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphFilter<cv::opt_AVX2::(anonymous namespace)::MinOp<float>, cv::opt_AVX2::(anonymous namespace)::MorphVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_float32x8> > >::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MinOp<float>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_float32x8> >]", "Invalid sCAL unit", "G\\HQIOKMNMONOPNTJb MMNNNPMTIb NTOQQNSMUMWNXOYQYTXWVZS[Q[OZNWNT WNXPXTWWUZS[ FbMb", "svmType == C_SVC || svmType == NU_SVC", "/home/vagrant/build/srclib/opencv/modules/features2d/src/agast.cpp", "ofs < fs_data_blksz[blockIdx]", "NSt6__ndk19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE", "N2cv3dnn16ElementWiseLayerINS0_10ELUFunctorEEE", "St12system_error", "imgproc::warpPerspective_11()", "shape == MORPH_RECT || shape == MORPH_CROSS || shape == MORPH_ELLIPSE", "src1.size == window.size", "\"abc_action_bar_home_description\" : \"\u041f\u0435\u0440\u0430\u0439\u0441\u0446\u0456 \u043d\u0430 \u0433\u0430\u043b\u043e\u045e\u043d\u0443\u044e \u0441\u0442\u0430\u0440\u043e\u043d\u043a\u0443\"", "OpenCV was build without DirectX support", "void cv::HoughLinesP(cv::InputArray, cv::OutputArray, double, double, int, double, double)", "ml::getAnnealItePerStep_10()", "features2d::setMaxFeatures_10()", "FullyConnectedLayerImpl", "/home/vagrant/build/srclib/opencv/modules/core/src/persistence_xml.cpp", "error in split_range_string(", "St14error_category", "Input images should have the same size and type!", "_patternSize.height >= 0 && _patternSize.width >= 0", "csz == 0 || csz == dims || (csz == 1 && _1d)", ",tIPP=%lld", "void cv::computeCorrespondEpilines(cv::InputArray, int, cv::InputArray, cv::OutputArray)", "N2cv15ThresholdRunnerE", "ASCII value for tag \"%s\" contains null byte in value; value incorrectly truncated during reading due to implementation limitations", "_arr.dims <= 2", "</opencv_storage> tag is missing", "char16", "imgproc::floodFill_11()", "void cv::inpaint(cv::InputArray, cv::InputArray, cv::OutputArray, double, int)", "COI is not supported by this operation", "accumulated_concat_axis", "FieldSize", "\"abc_search_hint\" : \"\u0ba4\u0bc7\u0b9f\u0bc1...\"", "subspaceProject", "spherical", "Pure virtual function called!", "\"abc_search_hint\" : \"\u0985\u09a8\u09c1\u09b8\u09a8\u09cd\u09a7\u09be\u09a8...\"", "startStep == START_AUTO_STEP || startStep == START_E_STEP || startStep == START_M_STEP", "\"abc_toolbar_collapse_description\" : \"Da\u011f\u0131t\"", "J[NONX OOOX ORPPROTOVPWRWX TOUPVRVX LOOO LXQX TXYX", "cov_rotate_mats", "Cannot read semaphore value (%T).", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX218SymmRowSmallFilterIhiNS2_21SymmRowSmallVec_8u32sEEENS_9allocatorIS5_EEEE", "dst.depth() == src.depth()", "virtual void cv::HOGDescriptor::computeGradient(cv::InputArray, cv::InputOutputArray, cv::InputOutputArray, cv::Size, cv::Size) const", "F]VFNb GQHOJMLMMNMPLULXMZO[Q[TZVXXUZP[M", "N2cv14DefaultDeleterI5CvMatEE", "N2cv12cpu_baseline12ColumnFilterINS0_4CastIfsEENS0_11ColumnNoVecEEE", "NVRBRb", "Incorrect size of input array", "OPENCV_IO_MAX_IMAGE_PIXELS", "Only uniform bin ranges can be used here (to avoid memory allocation)", "operator&&", "\"abc_search_hint\" : \"Vyhledat\u2026\"", "map.rows == 2 || map.rows ==3", "N2cv8opt_AVX28Filter2DIsNS0_4CastIfsEENS0_11FilterNoVecEEE", "core::batchDistance_12()", "): failed TIFFSetField(tif, TIFFTAG_YRESOLUTION, (float)dpiY)", "Color channels", "CL_MEM_OBJECT_IMAGE2D == mem_type", "video::getVariationalRefinementAlpha_10()", "N2cv17Bayer2RGB_InvokerIhNS_24SIMDBayerInterpolator_8uEEE", "\"abc_search_hint\" : \"Bilatu\u2026\"", "the output array of standard deviations vectors must be 1-channel 1x(n*6 + NINTRINSIC) or (n*6 + NINTRINSIC)x1 array, where n is the number of views, NINTRINSIC = 18", "N2cv12cpu_baseline16SymmColumnFilterINS0_4CastIfsEENS0_20SymmColumnVec_32f16sEEE", "i_wh=", "sSin_LA", "Decode", "End-of-file inside block comment.", "void cv::opt_AVX2::cvt16s8s(const short *, size_t, uchar *, size_t, schar *, size_t, cv::Size, void *)", "key_ == -1", "calib3d::recoverPose_16()", "SubIFD", "fastNlMeansDenoising_", "relu_%d", "LYPFSCSP RDRP OPVP MRXR QTOUNWOYQZTZVYWWVUTTQT QTPUOWPYQZ TZUYVWUUTT QZO[N]N^O`QaTaV`W^W]V[TZ QZP[O]O^P`Qa TaU`V^V]U[TZ", "WhiteBalance", "__itt_memory_update", "Value of type \"", "core::copyMakeBorder_10()", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120YUV420sp2RGB8InvokerILi0ELi1ELi4EEE", "ml::setTrainMethod_10()", "N11opencv_onnx14ValueInfoProtoE", "/home/vagrant/build/srclib/opencv/modules/ml/src/precomp.hpp", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_16RowSumItiEENS_9allocatorIS5_EEEE", "\"abc_search_hint\" : \"Recherche en cours...\"", "opencv_tensorflow.NameAttrList.name", "JXNKNX OKOX SOSS LKVKVOUK OQSQ LXQX", "Extension factory's GetPrototype() returned NULL for extension: ", "_filter == CV_GAUSSIAN_5x5 && src.type() == dst.type()", "virtual void cv::opt_SSE4_1::(anonymous namespace)::SqrRowSum<unsigned short, double>::operator()(const uchar *, uchar *, int, int) [T = unsigned short, ST = double]", "k == STD_VECTOR_UMAT", "MWONUROV", "texture threshold must be non-negative", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_16RowSumIhtEENS_9allocatorIS5_EEEE", "core::reduce_11()", "computeCorrespondEpilines", "F^RTTWVXXXZW[U[SZQXPVPSQ SQUOVMVKUISHQHOINKNMOOQQ QQNPLPJQISIUJWLXNXPWRT RTQYP\\ RTSYT\\ P\\T\\", "\"abc_action_mode_done\" : \"\u5b8c\u6210\"", "KYUBUb NBUB NbUb", "unknown interlace type", "Bogus JPEG colorspace", "png_get_eXIf does not work; use png_get_eXIf_1", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::RGB2RGB<float> >::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::RGB2RGB<float>]", "whitePt[1] == softdouble::one()", "calib3d::create_16()", "calib3d::recoverPose_15()", "I\\MRORSQVOXMYKYHXFVFUGTISNRSQVPXNZL[J[IZIXJWLWNXQZT[V[YZ[X", "void cv::randn(cv::InputOutputArray, cv::InputArray, cv::InputArray)", "multiView", "void cv::cpu_baseline::cvt16u(const ushort *, size_t, uchar *, size_t, ushort *, size_t, cv::Size, void *)", "void cv::fastNlMeansDenoising(cv::InputArray, cv::OutputArray, const std::vector<float> &, int, int, int)", "opencv_tensorflow.OpDef.name", "N3Iex12EremoteioExcE", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/wire_format.cc", "OPENCV_OPENCL_HOST_PTR_BUFFERPOOL_LIMIT", "Mat::n_1size()", "NSt6__ndk120__shared_ptr_emplaceIN2cv27BackgroundSubtractorKNNImplENS_9allocatorIS2_EEEE", "~TLSDataContainer", "ml::getClustersNumber_10()", "ml::getVarCount_10()", "void cv::normalize(const cv::SparseMat &, cv::SparseMat &, double, int)", "dnn::setParam_10()", "LXQFQ[ RGRZ SFS[ NFVF N[V[ OFQG PFQH TFSH UFSG QZO[ QYP[ SYT[ SZU[", "src.type() == CV_8UC1 || src.type() == CV_32FC1", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_9Luv2RGB_bEEE", "void cv::groupRectangles(std::vector<Rect> &, std::vector<int> &, int, double)", "int cv::cpu_baseline::(anonymous namespace)::MorphRowVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_float32x4> >::operator()(const uchar *, uchar *, int, int) const [VecUpdate = cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_float32x4>]", "(_contours.kind() == _InputArray::STD_VECTOR_VECTOR || _contours.kind() == _InputArray::STD_VECTOR_MAT || _contours.kind() == _InputArray::STD_VECTOR_UMAT)", "X.size == Y.size && type == Y.type() && (depth == CV_32F || depth == CV_64F)", "fs.is_open()", "photo::createCalibrateDebevec_10()", "N2cv12cpu_baseline12_GLOBAL__N_114MorphRowFilterINS1_5MinOpIsEENS1_11MorphRowVecINS1_4VMinINS_12hal_baseline9v_int16x8EEEEEEE", "NSt6__ndk120__shared_ptr_pointerIPN20tiff_dummy_namespace4tiffEPFvPvENS_9allocatorIS2_EEEE", "N2cv16FeatureEvaluatorE", "Proto type ", "N2cv8opt_AVX221SymmColumnSmallFilterINS0_13FixedPtCastExIihEENS0_19SymmColumnVec_32s8uEEE", "Filter2D", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16PoolingLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv4impl13PluginCaptureENS_9allocatorIS3_EEEE", "setData", "N2cv8opt_AVX212ColumnFilterINS0_4CastIffEENS0_11ColumnNoVecEEE", "F^ISJQLPNPPQTTVUXUZT[Q ISJPLONOPPTSVTXTZS[Q IW[W I[[[", "\" does not contain a preview image.", "missing LZ dictionary", "BatchToSpaceND", "Tried to read a raw tile from a scanline-based image.", "H]ZKYIWGUFQFOGMILKKNKSLVMXOZQ[U[WZYXZV ZKYKXIWHUGQGOHMKLNLSMVOYQZUZWYXXYVZV", "virtual void cv::opt_SSE4_1::(anonymous namespace)::ColumnSum<int, int>::operator()(const uchar **, uchar *, int, int, int)", "HoughCircleEstimateRadiusInvoker", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_19ColumnSumIthEENS_9allocatorIS5_EEEE", "!hasVotes || voteOutBuf_.size() == posOutBuf_.size()", "core::mean_11()", "findBasis", "J[NKNX OKOX VKVX WKWX LKQK TKYK OQVQ LXQX TXYX", "imageCount > 0", "N2cv8opt_AVX212_GLOBAL__N_117MorphColumnFilterINS1_5MaxOpItEENS1_14MorphColumnVecINS1_4VMaxINS_8hal_AVX211v_uint16x16EEEEEEE", "dilation_w", "Read Error", "JPEG-2000 files (*.jp2)", "layer_id.find(mvnName) == layer_id.end()", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_9XYZ2RGB_iIhEEEE", "imgproc::integral_11()", "calibrateCameraRO", "CAddTable", "void cv::cpu_baseline::cvt64f8s(const double *, size_t, uchar *, size_t, schar *, size_t, cv::Size, void *)", "IS_DNN_OPENCL_TARGET(preferableTarget)", "google.protobuf.EnumOptions", "\"abc_capital_on\" : \"ACTIV\u00c9\"", "G]LFL[ MGMZ NFN[ IFSFVGXIYKZNZSYVXXVZS[I[ WIXKYNYSXVWX SFUGWJXNXSWWUZS[ JFLG KFLH OFNH PFNG LZJ[ LYK[ NYO[ NZP[", "imgproc::morphologyEx_14()", "core::checkRange_12()", "Read from EMS failed", "src.depth() == CV_8U && ((borderType & BORDER_ISOLATED) || !src.isSubmatrix())", "<!-- %s -->", "G^[BIbJb [B\\BJb", "LXNKOMQNSNUMVK NKONQOSOUNVK", "objdetect::HOGDescriptor_17()", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphFilter<cv::opt_SSE4_1::(anonymous namespace)::MinOp<double>, cv::opt_SSE4_1::(anonymous namespace)::MorphNoVec>::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MinOp<double>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphNoVec]", "Cancel the selection process by pressing c button!", "calib3d::filterSpeckles_10()", "video::setkNNSamples_10()", "virtual void cv::opt_AVX2::ColumnFilter<cv::opt_AVX2::FixedPtCastEx<int, unsigned char>, cv::opt_AVX2::SymmColumnVec_32s8u>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::FixedPtCastEx<int, unsigned char>, VecOp = cv::opt_AVX2::SymmColumnVec_32s8u]", "Read error at row %lu, col %lu; got %llu bytes, expected %llu", "N2cv23HomographyDecomposition16HomographyDecompE", "map_matrix.rows == 2 && update.rows == 6", "calib3d::decomposeProjectionMatrix_10()", "0 == (jas_image_tly(image)) && \"not supported\"", "NSt6__ndk112codecvt_baseE", "I[LMOMNSMXL[ YMXPWRUURXOZL[", "Input node with name ", "distCoeffs.size() == Size(1, 4) || distCoeffs.size() == Size(4, 1) || distCoeffs.size() == Size(1, 5) || distCoeffs.size() == Size(5, 1) || distCoeffs.size() == Size(1, 8) || distCoeffs.size() == Size(8, 1) || distCoeffs.size() == Size(1, 12) || distCoeffs.size() == Size(12, 1) || distCoeffs.size() == Size(1, 14) || distCoeffs.size() == Size(14, 1)", "cvPolarToCart", "A^GfHfIeIdHcGcFdFfGhIiKiNhPfQdR`RUQ;Q4R/S-U,V,X-Y/Y3X6W8U;P?JCHEFHEJDNDREVGYJ[N\\R\\V[XZZW[T[PZMYKWITHPHMIKKJNJRKUMW GdGeHeHdGd U;Q?LCIFGIFKENERFVGXJ[ R\\U[WZYWZTZPYMXKVITH", "virtual cv::VideoWriter &cv::VideoWriter::operator<<(const cv::UMat &)", "MergeDebevec", "transformation parameters: ", "\"abc_action_mode_done\" : \"Gotowe\"", "!fs_data_ptrs.empty()", "calib3d::estimateAffine2D_14()", "N2cv25AgastFeatureDetector_ImplE", "JPEGSetupEncode", "calib3d::calibrateCameraRO_11()", "/home/vagrant/build/srclib/opencv/modules/ml/src/testset.cpp", "/home/vagrant/build/srclib/opencv/modules/calib3d/src/solvepnp.cpp", "Bits/sample", "<convertAndUnrollScalar", "CHECK failed: (&from) != (to): ", "MWNPOPPQPROTOUPVRVSUTS UPSVRXQYOYNX", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml25NormalBayesClassifierImplENS_9allocatorIS3_EEEE", "31initUndistortRectifyMapComputer", "control", "\"abc_searchview_description_submit\" : \"\u0421\u04b1\u0440\u0430\u049b\u0442\u044b \u0436\u0456\u0431\u0435\u0440\u0443\"", "void cv::hal::min16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, void *)", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/sumpixels.cpp", "The number of samples must equal the number of labels. Given %zu labels, %d samples. ", "readTensorFromONNX", "\"abc_shareactionprovider_share_with_application\" : \"Shp\u00ebrnda publikisht me %s\"", "lost/gained channels", "UTF-8", "cHRM Blue X", "\"search_menu_title\" : \"\u0a16\u0a4b\u0a1c\"", "31TegraCvtColor_bgrx2hsvf_Invoker", "Don't lookup extension types if they aren't present (2). ", "/home/vagrant/build/srclib/opencv/modules/video/src/lkpyramid.cpp", "All histograms must have 32fC1 type", "void cv::hal::cpu_baseline::mul16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, const double *)", "\"abc_searchview_description_search\" : \"Tra\u017ei\"", "knnMatchImpl", "N2cv8opt_AVX212ColumnFilterINS0_4CastIdtEENS0_11ColumnNoVecEEE", "cn == 3", "dnn::getMemoryConsumption_12()", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_111MorphFilterINS3_5MinOpIsEENS3_8MorphVecINS3_4VMinINS1_12hal_baseline9v_int16x8EEEEEEENS_9allocatorISD_EEEE", "maxValue.total()", "calib3d::create_18()", "/home/vagrant/build/srclib/opencv/modules/ml/src/kdtree.cpp", "N2cv10PAMEncoderE", "could not find a writer for the specified extension", "N6google8protobuf4hashINS0_6MapKeyEEE", "BatchNormLayerImpl", "imgproc::findNearest_11()", "JYNON\\ OOO\\ ORPPROTOVPWRWUVWTXRXPWOU TOUPVRVUUWTX LOOO L\\Q\\", "src.size() == idx.size() && idx.type() == CV_32S && src.data != idx.data", "calib3d::fisheye_1calibrate_12()", "N12opencv_caffe13BiasParameterE", "TIFFWriteDirectorySec", "\"abc_searchview_description_clear\" : \"Zoekopdracht wissen\"", "void cv::hal::opt_AVX2::fastAtan64f(const double *, const double *, double *, int, bool)", "m_width", "void cv::hal::opt_AVX2::cvtBGRtoGray(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool)", "tilted", "I\\RBR_S_ RBSBS_ WIYIWGTFQFNGLILKMMNNVRWSXUXWWYTZQZOYNX WIVHTGQGNHMIMKNMVQXSYUYWXYWZT[Q[NZLXNX XXUZ", "INTER", "__next_prime overflow", "imgproc::getVertex_11()", "31TegraCvtColor_rgbx2bgrx_Invoker", "NSt6__ndk112future_errorE", "Mat::n_1dot()", "src.isContinuous() && (src.depth() == CV_32F || src.depth() == CV_64F) && ((src.rows == 1 && src.channels() == 2) || src.cols*src.channels() == 2)", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/distransform.cpp", "cvResize", "Bad format of floating-point constant", "D.empty() || (D.total() == 4)", "photo::createCalibrateDebevec_12()", "imgproc::createCLAHE_11()", "void cv::cpu_baseline::cvt32f16f(const float *, size_t, uchar *, size_t, cv::float16_t *, size_t, cv::Size, void *)", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX216SymmColumnFilterINS2_4CastIdtEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "MWUPUVTXRYPY USTQRPPQOSPURVTUUS", "Attempt to set the number of threads in a thread pool to a negative value.", "img.rows == imgLabels.rows", "H\\WMWb XMXb WPUNSMQMNNLPKSKULXNZQ[S[UZWX QMONMPLSLUMXOZQ[ Tb[b", "signature2 must not contain negative weights", "N2cv2ml3SVME", "LogL16Decode", "KYO@RCTFUIULTOQVPYP\\Q_Ra RCSETHTKSNPUOXO[P^RaUd", "void cv::cpu_baseline::cvt16f64f(const cv::float16_t *, size_t, uchar *, size_t, double *, size_t, cv::Size, void *)", "G]KKYY YKKY", "term_criteria", "Unsupported marker type 0x%02x", "N2cv19PointSetRegistrator8CallbackE", "\"abc_action_menu_overflow_description\" : \"Higit pang mga opsyon\"", "void cv::warpAffine(cv::InputArray, cv::OutputArray, cv::InputArray, cv::Size, int, int, const cv::Scalar &)", "void cv::cpu_baseline::cvt32f64f(const float *, size_t, uchar *, size_t, double *, size_t, cv::Size, void *)", "N2cv38Upright_MLDB_Descriptor_Subset_InvokerE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_111MorphFilterINS3_5MinOpIdEENS3_10MorphNoVecEEENS_9allocatorIS8_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_114MorphRowFilterINS3_5MinOpItEENS3_11MorphRowVecINS3_4VMinINS1_12hal_baseline10v_uint16x8EEEEEEENS_9allocatorISD_EEEE", "inputDims == -1 || inpShape.size() == inputDims || inpShape.size() > paddings.size()", "cvRemap", "\"abc_capital_on\" : \"\u041a\u04ae\u0419\u04ae\u041a\"", "png_image_begin_read_from_stdio: incorrect PNG_IMAGE_VERSION", ">333?", "cv::RotatedRect cv::fitEllipse(cv::InputArray)", "Ptr<cv::BaseRowFilter> cv::getRowSumFilter(int, int, int, int)", "calcSharrDeriv", "multi_probe_level", "chromaticities", "G]NMNQMWLZK[J[IZJYKZ WMW[ XMX[ KM[M T[[[", "\").  Note that the exact same class is required; not just the same descriptor.", "OVRPQSQURVSVTU", "(layout == ROW_SAMPLE && responses.rows == nsamples) || (layout == COL_SAMPLE && responses.cols == nsamples)", "blobs[0].dims >= 2 && (size_t)(innerSize * numOutput) == blobs[0].total()", "N3Iex9EnoanoExcE", "dx >= 0 && dy >= 0 && dx+dy > 0", "softmax_%d", "\"search_menu_title\" : \"Szukaj\"", "Compute_Descriptors", "libittnotify.so", "ml::setTrainMethod_11()", "void cv::create_nonlinear_scale_space(cv::InputArray, const cv::AKAZEOptions &, const std::vector<std::vector<float> > &, std::vector<Evolution<MatType> > &) [MatType = cv::Mat]", "                                                               ", "NSt6__ndk110__stdinbufIwEE", "N6google8protobuf2io26CopyingOutputStreamAdaptorE", "N2cv20FarnebackOpticalFlowE", "%sEOL padding", "N2cv23HomographyDecomposition21HomographyDecompZhangE", "virtual void cv::opt_AVX2::RowFilter<unsigned char, int, cv::opt_AVX2::SymmRowSmallVec_8u32s>::operator()(const uchar *, uchar *, int, int) [ST = unsigned char, DT = int, VecOp = cv::opt_AVX2::SymmRowSmallVec_8u32s]", "void cv::fitLine(cv::InputArray, cv::OutputArray, int, double, double, double)", "npoints == nypoints && npoints >= order+1", "SADWindowSize must be odd, be within 5..255 and be not larger than image width or height", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2Gray<float> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2Gray<float>]", "N2cv10opt_SSE4_112_GLOBAL__N_19ColumnSumIdfEE", "\"abc_action_bar_up_description\" : \"\u0416\u043e\u0493\u0430\u0440\u044b \u049b\u043e\u0437\u0493\u0430\u043b\u0443\"", "\"abc_shareactionprovider_share_with_application\" : \"Zdie\u013ea\u0165 pomocou %s\"", "virtual void cv::cpu_baseline::(anonymous namespace)::RowSum<int, int>::operator()(const uchar *, uchar *, int, int) [T = int, ST = int]", "varianceSize == 4", "ml::getCoef0_10()", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_110RGBA2mRGBAIhEEEE", "NWROPVPWQXSXUWVU SOQVQWRX", "ALREADY_EXISTS", "G]SFPGNILLKOJSJVKYLZN[Q[TZVXXUYRZNZKYHXGVFSF OIMLLOKSKWLY UXWUXRYNYJXH SFQGOJNLMOLSLXMZN[ Q[SZUWVUWRXNXIWGVF", "const cv::Mat &cv::KalmanFilter::correct(const cv::Mat &)", "Message type \"", "void cv::integral(cv::InputArray, cv::OutputArray, cv::OutputArray, int, int)", "Unsupported source type", "nmixtures", "N6google8protobuf8internal16FunctionClosure1IPNSt6__ndk14pairIPKNS0_20FileDescriptorTablesEPKNS0_14SourceCodeInfoEEEEE", "videoio::VideoWriter_13()", "MWQMONNOMQMSNUOVQWSWUVVUWSWQVOUNSMQM", "KYKRYR", "calib3d::fisheye_1projectPoints_10()", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_111RGB2YCrCb_iItEEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv13StaticBackendENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv25AgastFeatureDetector_ImplENS_9allocatorIS2_EEEE", "N7cvflann7anyimpl21typed_base_any_policyINS_17flann_algorithm_tEEE", "minimize", "Unrecognized equation type for pCAL chunk", "virtual void cv::MatOp_AddEx::multiply(const cv::MatExpr &, double, cv::MatExpr &) const", "unsupported zlib version", "NSt6__ndk114default_deleteIN2cv3dnn15ConcatLayerImplEEE", "  Predictor: ", "Corrupt JPEG data: %u extraneous bytes before marker 0x%02x", "Didn't expect more than one scan", "J.isContinuous() && J.cols == 4", "?\"\"\"?&&&?***?...?222?666?:::?>>>?BBB?FFF?JJJ?NNN?RRR?VVV?ZZZ?^^^?bbb?fff?jjj?nnn?rrr?vvv?zzz?~~~?", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_19ColumnSumIdsEENS_9allocatorIS5_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_114MorphRowFilterINS3_5MinOpIdEENS3_13MorphRowNoVecEEENS_9allocatorIS8_EEEE", "Unsupported destination image", "imgproc::symEdge_10()", "dp/df must be 2Nx2 floating-point matrix", "KYOOLX POMX UOVPWPVOTORQOR ORPSRWTXVWWU ORQSSWTX", "TIFFNumberOfStrips", "countNonZero", "\"abc_action_bar_up_description\" : \"Yuqoriga o\u2018tish\"", "comments", "OpenCV TIFF(line ", "G]NYKYJWK[O[MVKRJOJLKIMGPFTFWGYIZLZOYRWVU[Y[ZWYYVY LSKOKLLI XIYLYOXS O[MULPLKMHNGPF TFVGWHXKXPWUU[ KZNZ VZYZ", "N2cv18DISOpticalFlowImpl21Densification_ParBodyE", "Invalid level mode in image header.", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::RGB2YCrCb_f<float> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::RGB2YCrCb_f<float>]", "virtual void cv::cpu_baseline::ColumnFilter<cv::cpu_baseline::Cast<double, unsigned char>, cv::cpu_baseline::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::Cast<double, unsigned char>, VecOp = cv::cpu_baseline::ColumnNoVec]", "ExposureIndex", "I[LMR[ MMRY XMR[P_NaLbKbJaK`La JMPM TMZM", "27TegraRowOp_combine3_InvokerIKllE", "operator<<", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX29RowFilterItdNS2_8RowNoVecEEENS_9allocatorIS5_EEEE", "video::buildOpticalFlowPyramid_14()", "void cv::distanceTransform(cv::InputArray, cv::OutputArray, cv::OutputArray, int, int, int)", "\"abc_searchview_description_submit\" : \"Serah pertanyaan\"", "LogL16Encode", "bool cv::solvePnPRansac(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, bool, int, float, double, cv::OutputArray, int)", "CV_TM_SQDIFF <= method && method <= CV_TM_CCOEFF_NORMED", "imgproc::goodFeaturesToTrack_16()", "video::setNumIters_10()", "TIFFStripSize", "\"status_bar_notification_info_overflow\" : \"\u200e999+\u200e\"", "<hP<K=G?DAAD?G=K<P<T=Y?]A`DcGeKgPhThYg]e`cc`e]gYhThPgKeGcD`A]?Y=T<P<", "void cv::hal::cpu_baseline::recip8s(const schar *, size_t, schar *, size_t, int, int, const double *)", "dst.dims == 4", "src1.type() == CV_32FC1 || src1.type() == CV_64FC1", "java Class for ", "void cv::minMaxIdx(cv::InputArray, double *, double *, int *, int *, cv::InputArray)", "_src.channels() <= 4 || (interpolation != INTER_LANCZOS4 && interpolation != INTER_CUBIC)", "When enum name is stripped and label is PascalCased (", "G\\WMQb XMRb WMYMSb UTUQTNRMPMMNKQJTJVKYLZN[P[RZSYTWUT MOLQKTKWLY PMNOMQLTLWMZN[ NbVb RaOb R`Pb S`Tb RaUb", "!obj[\"winSize\"].empty()", "permute_order", "N2cv10opt_SSE4_112_GLOBAL__N_117MorphColumnFilterINS1_5MaxOpIhEENS1_14MorphColumnVecINS1_4VMaxINS_10hal_SSE4_110v_uint8x16EEEEEEE", "thresholdStep", "H]SFPGOHNJNMOOQPTPWOYNZLZIYGWFSF UFPG PHOJONPO OORP SPWO XNYLYIXG YGUF SFQHPJPNQP TPVOWNXLXHWF QPMQKSJUJXKZN[R[VZWYXWXTWRVQTP RPMQ NQLSKUKXLZ KZP[VZ VYWWWTVR VQSP QPOQMSLULXMZN[ R[TZUYVWVSUQTP", "Unknown parameter shuffle for layer type ", "void cv::hal::opt_SSE4_1::cmp16s(const short *, size_t, const short *, size_t, uchar *, size_t, int, int, int)", "variance_off", "SpatialConvolution", "operator", "?N2cv16ReplacementDFT1DE", "Sorry, can not handle RGB image with %s=%d", "isFormatSupported", "NSt6__ndk114default_deleteIN2cv3dnn13LSTMLayerImplEEE", "C.type() == type", "inputs.size() == requiredOutputs", "Tabs are prohibited in YAML!", "serializing", "MYUFQTPXPZQ[T[VYWW VFRTQXQZR[ RFVF", "MAX_ALLOC_CHUNK is wrong, please fix", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml9ParamGridENS_9allocatorIS3_EEEE", "void cv::hal::cvt16f32f(const cv::float16_t *, float *, int)", "N7cvflann8LshIndexINS_2L2IfEEEE", "MWUNORUV", "src1.isMat() || src1.isUMat()", "features2d::Params_10()", "Unknown parameter bias_filler for layer type ", " restrict", "system", "int cv::cpu_baseline::(anonymous namespace)::MorphVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_uint8x16> >::operator()(uchar **, int, uchar *, int) const [VecUpdate = cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_uint8x16>]", "\"abc_toolbar_collapse_description\" : \"Runtuhkan\"", "src.type() == CV_8UC1 && dst.type() == CV_8UC1", "imgproc::Sobel_10()", "calib3d::fisheye_1undistortImage_11()", "Fax4Decode", "(data.cols == 1 || data.rows == 1) && (data.type() == CV_32S || data.type() == CV_32F)", "void cv::cpu_baseline::cvt8u16f(const uchar *, size_t, uchar *, size_t, cv::float16_t *, size_t, cv::Size, void *)", "NVRFR[", "Can't infer a dim denoted by -1", "video::create_18()", "The hull matrix must have the same type as input or 32sC1 (integers)", "Iterator pointer is NULL", "sv_total", "\"abc_shareactionprovider_share_with\" : \"\u0645\u0634\u0627\u0631\u0643\u0629 \u0645\u0639\"", "void cv::hal::cpu_baseline::mul8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, const double *)", "dvec[j].depth() == src.depth()", "there should be at least one input and one output and every hidden layer must have more than 1 neuron", " was modified concurrently during serialization.", "features2d::getNonmaxSuppression_10()", "virtual void cv::opt_SSE4_1::ColumnFilter<cv::opt_SSE4_1::Cast<int, short>, cv::opt_SSE4_1::SymmColumnSmallVec_32s16s>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::Cast<int, short>, VecOp = cv::opt_SSE4_1::SymmColumnSmallVec_32s16s]", "0 < x_points && x_points <= cols", "void cv::hal::cpu_baseline::cmp32f(const float *, size_t, const float *, size_t, uchar *, size_t, int, int, int)", "calib3d::getSpeckleRange_10()", "Short", "G]QFNGLIKKJOJRKVLXNZQ[S[VZXXYVZRZOYKXIVGSFQF MILKKNKSLVMX WXXVYSYNXKWI QFOGMJLNLSMWOZQ[ S[UZWWXSXNWJUGSF NXOVQURUTVUXV^W`Y`Z^Z\\ V\\W^X_Y_ UXW]X^Y^Z]", "\"abc_searchview_description_search\" : \"Bilatu\"", "N9IlmThread4TaskE", "empty", "', file: ", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX28Filter2DIhNS2_4CastIftEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "video::getShadowThreshold_10()", "invalid gray level", "[ERROR] cvflann::set_distance_type only provides backwards compatibility for the L1 and L2 distances. For other distance types you must use cv::flann::GenericIndex<Distance>", "virtual bool cv::VideoCapture::set(int, double)", "N17opencv_tensorflow9AttrValueE", "void cv::hal::opt_SSE4_1::sub64f(const double *, size_t, const double *, size_t, double *, size_t, int, int)", "distanceATS_L1_8u", "TIFFWriteDirectoryTagData", "DecodeBBox", "Bad normalization factor (set it to 1.0 if unsure)", "Portable image format - gray (*.pgm)", "N2cv8colormap6AutumnE", "File is already registered: ", "growLeft", "NSt6__ndk120__shared_ptr_emplaceIN2cv4impl13PluginBackendENS_9allocatorIS3_EEEE", "\"abc_search_hint\" : \"\u0391\u03bd\u03b1\u03b6\u03ae\u03c4\u03b7\u03c3\u03b7\u2026\"", "IMWRITE_EXR_TYPE is invalid or not supported", "N17opencv_tensorflow11GradientDefE", "void cv::hal::addWeighted64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, void *)", "\"abc_capital_off\" : \"IZSL\u0112GTS\"", "error", "Ptr<cv::BaseColumnFilter> cv::cpu_baseline::getMorphologyColumnFilter(int, int, int, int)", "calcBackProj_", "Unknown blob input ", "depth == CV_8U && (cn == 1 || cn == 3)", "N2cv2ml6RTreesE", "NSt6__ndk120__shared_ptr_emplaceIN2cv11WebPDecoderENS_9allocatorIS2_EEEE", "The buffer is too small to fit the pyramid", "int cv::opt_SSE4_1::SymmColumnVec_32f::operator()(const uchar **, uchar *, int) const", "void cv::hal::opt_SSE4_1::cmp16u(const ushort *, size_t, const ushort *, size_t, uchar *, size_t, int, int, int)", "N2cv10opt_SSE4_112_GLOBAL__N_16RowSumItiEE", "objdetect::detectMultiScale3_12()", "Directive tags are not allowed here", "ranges[i] && ranges[i][0] < ranges[i][1]", "plugin_api_", "fabs(nt) > 0", "objdetect::HOGDescriptor_11()", "cvCreatePyramid", "Read failure in png_handle_zTXt", "RANSACUpdateNumIters", "cv::ScaleAddFunc cv::getScaleAddFunc(int)", "features2d::setType_10()", "void cv::cpu_baseline::cvt8u64f(const uchar *, size_t, uchar *, size_t, double *, size_t, cv::Size, void *)", "Invalid palette size, hIST allocation skipped", "model.rows % nmodels == 0", "Invalid values for YCbCrCoefficients tag", "G]LFL[ MGMZ NFN[ IFUFXGYHZJZLYNXOUPNP XHYJYLXN UFWGXIXMWOUP RPTQUSWYX[Z[[Y[W WWXYYZZZ TQURXXYYZY[X I[Q[ JFLG KFLH OFNH PFNG LZJ[ LYK[ NYO[ NZP[", "Ptr<cv::BaseFilter> cv::opt_AVX2::getLinearFilter(int, int, const cv::Mat &, cv::Point, double, int)", "H\\IQJOLMNMONOPNTL[ NTPPRNTMVMXOXRWWTb", "void cv::DescriptorMatcher::match(cv::InputArray, cv::InputArray, std::vector<DMatch> &, cv::InputArray) const", "classifier should be trained first", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/color_yuv.simd.hpp", "features2d::setNOctaveLayers_10()", "numDets <= keepTopAfterNMS", "opencv_ml_svm", "F_JMILIJJHLGNGPHQIRKSP IJKHMHOIPJQLRPR[ [M\\L\\J[HYGWGUHTISKRP \\JZHXHVIUJTLSPS[", "The kernel parameter <degree> must be positive", "Extensions of MessageSets must be optional messages.", "ml::getCatCount_10()", "cv::sortRowsByIndices only works on integer indices!", "N2cv8opt_AVX212_GLOBAL__N_117MorphColumnFilterINS1_5MinOpIsEENS1_14MorphColumnVecINS1_4VMinINS_8hal_AVX210v_int16x16EEEEEEE", "\"search_menu_title\" : \"\u10eb\u10d8\u10d4\u10d1\u10d0\"", "-D %s_T=%s -D %s_T1=%s -D %s_CN=%d -D %s_TSIZE=%d -D %s_T1SIZE=%d -D %s_DEPTH=%d", "N6google8protobuf8internal15ExtensionFinderE", "Error calling numXTiles() on image file \"", "size == Ly.size()", "medianBlur_8u_O1", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphFilter<cv::cpu_baseline::(anonymous namespace)::MinOp<float>, cv::cpu_baseline::(anonymous namespace)::MorphVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_float32x4> > >::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MinOp<float>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_float32x4> >]", "std::string cv::QRCodeDetector::decode(cv::InputArray, cv::InputArray, cv::OutputArray)", "virtual void cv::opt_SSE4_1::(anonymous namespace)::SqrRowSum<double, double>::operator()(const uchar *, uchar *, int, int) [T = double, ST = double]", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi2EEExy7DistAbsiE", "IZNMN[ OMO[ OSPPRNTMWMXNXOWPVOWN KMOM K[R[", "void cv::dnn::dnn4_v20190122::Net::Impl::forwardToLayer(cv::dnn::dnn4_v20190122::LayerData &, bool)", "N2cv3dnn14dnn4_v2019012218ChannelsPReLULayerE", "N6google8protobuf11EnumOptionsE", "cvGetReal2D", "KXUGTHUIVHVGUFSFQGPIP[ SFRGQIQ[ MMUM M[T[", "pyrUp_", "ShadowScale", "_stepX > 0.", "int cv::cpu_baseline::(anonymous namespace)::MorphRowVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_int16x8> >::operator()(const uchar *, uchar *, int, int) const [VecUpdate = cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_int16x8>]", "Element size doesn't match to the size of predefined element type (try to use 0 for sequence element type)", "N7cvflann8LshIndexINS_2L1IfEEEE", "N2cv3dnn14dnn4_v2019012214BackendWrapperE", "MessageSet is not supported in proto3.", "MWNPOPOV UPTSRUOV", "void cv::hal::opt_SSE4_1::sub32f(const float *, size_t, const float *, size_t, float *, size_t, int, int)", "\" of type \"", "\"abc_search_hint\" : \"S\u00f8k \u2026\"", "cvSeqRemoveSlice", "output id=", "points.checkVector(2, CV_32S) >= 0", "NVSKQMQORPSORNQO", "H]KFRQR[ LFSQS[ ZFSQ IFOF VF\\F O[V[", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_9RGB2HLS_bEEE", "virtual void cv::MatOp::multiply(const cv::MatExpr &, double, cv::MatExpr &) const", "int cv::cpu_baseline::(anonymous namespace)::MorphVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_uint16x8> >::operator()(uchar **, int, uchar *, int) const [VecUpdate = cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_uint16x8>]", "thread initialization failed.", "xF64cP", "min_val1", "Unknown parameter hdf5_output_param for layer type ", "St10bad_typeid", "core::sort_10()", "cornerEigenValsVecs", "No space for Palette mapping table", "icvTraceContour_32s", "N2cv18CalibrateRobertsonE", "F^JIZRJ[ JIJJXRJZJ[", "imageFeatures_.size() == templFeatures_.size()", "icvInitEMD", "N2cv12cpu_baseline12_GLOBAL__N_16RowSumIsdEE", "histPrepareImages", "\"abc_searchview_description_voice\" : \"Pesquisa por voz\"", "void cv::hal::opt_SSE4_1::div16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, const double *)", "N2cv9MSER_ImplE", "elem_type == CV_32SC2", "delta.channels() == 1", "read_number", "\"abc_searchview_description_clear\" : \"\u0dc0\u0dd2\u0db8\u0dc3\u0dd4\u0db8 \u0dc4\u0dd2\u0dc3\u0dca \u0d9a\u0dbb\u0db1\u0dca\u0db1\"", "BackgroundSubtractor.MOG2", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphFilter<cv::opt_AVX2::(anonymous namespace)::MinOp<double>, cv::opt_AVX2::(anonymous namespace)::MorphNoVec>::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MinOp<double>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphNoVec]", "out of memory", "is_m1_vector", "CL_INVALID_IMAGE_SIZE", "const_layers.insert(std::make_pair(name, li)).second", "imgproc::pyrUp_12()", "Appending data to compressed file is not implemented", "\"abc_searchview_description_clear\" : \"\u0410\u0441\u0443\u0443\u043b\u0433\u044b\u0433 \u0446\u044d\u0432\u044d\u0440\u043b\u044d\u0445\"", "void cv::hal::cpu_baseline::div16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, const double *)", "KZPKLX QKMX OQPPROTOVPVRUUUWVX TOUPURTUTWUXWXXWYU NKQK", "Apparently should be %d,%d.", ".placeholder.proto", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_18Filter2DItNS2_4CastIddEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "\"abc_toolbar_collapse_description\" : \"\u0633\u06a9\u06cc\u0691\u06cc\u06ba\"", "void cv::cpu_baseline::cvt8s8u(const schar *, size_t, uchar *, size_t, uchar *, size_t, cv::Size, void *)", "/OPENCV_KMEANS_PARALLEL_GRANULARITY", "TIFFWriteDirectoryTagCheckedSrationalArray", "%a %b %d %H:%M:%S %Y", "Fractional sampling not implemented yet", "inp.type() == CV_32F && out.type() == CV_32F", "\"abc_activitychooserview_choose_application\" : \"\u0412\u044b\u0431\u0440\u0430\u0446\u044c \u043f\u0440\u0430\u0433\u0440\u0430\u043c\u0443\"", "PUSNRNRMSMSORQ", "THDiskFile_littleEndianEncoding", "ColorSpace", "ANDROID_MEDIANDK", "ml::setUseSurrogates_10()", "output gamma out of expected range", "virtual void cv::DetectionBasedTracker::process(const cv::Mat &)", "imgproc::fitEllipseDirect_10()", "0 <= vi && vi < n", "(count >= 4) || (count == 3 && useExtrinsicGuess)", "MWOMOV OSPURVTUUSTQRPPQOS", "cvSetTrackbarPos", "virtual void cv::cpu_baseline::(anonymous namespace)::RowSum<float, double>::operator()(const uchar *, uchar *, int, int) [T = float, ST = double]", "JYNKNU OKNR NROPQOSOUPVQVTTVTXUYVYWX SOUQUTTV LKOK", "readDataFromBuf", "imgproc::cornerEigenValsAndVecs_11()", "\"abc_shareactionprovider_share_with_application\" : \"\u053f\u056b\u057d\u057e\u0565\u056c %s-\u056b \u0574\u056b\u057b\u0578\u0581\u0578\u057e\"", "NVRMOV OVTV", "int cv::opt_SSE4_1::(anonymous namespace)::MorphColumnVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_uint16x8> >::operator()(const uchar **, uchar *, int, int, int) const [VecUpdate = cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_uint16x8>]", "char3", "IPP:((ippicvsExp_32f_A21)(src, dst, n)) >= 0", "unexpected alpha swap transformation", "calib3d::create_111()", "Non-continuous nD arrays are not supported", "The first enum value must be zero in proto3.", "imgproc::getGaborKernel_11()", "\"abc_shareactionprovider_share_with_application\" : \"%s\u3068\u5171\u6709\"", "G]NFU[ OFV[ \\FH[ LFRF XF^F F[L[ R[X[", "virtual void cv::opt_SSE4_1::ColumnFilter<cv::opt_SSE4_1::Cast<double, unsigned short>, cv::opt_SSE4_1::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::Cast<double, unsigned short>, VecOp = cv::opt_SSE4_1::ColumnNoVec]", "stochastic", "skipped trace entries", "videoio::VideoCapture_11()", "bad_weak_ptr", "java/util/ArrayList", "OptoelectricConversionFactor", "\"abc_searchview_description_query\" : \"\u091c\u093f\u091c\u094d\u091e\u093e\u0938\u093e\u0915\u094b \u0916\u094b\u091c \u0917\u0930\u094d\u0928\u0941\u0939\u094b\u0938\u094d\"", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/concat_layer.cpp", "Wrong length of decoded string: data probably corrupted at scanline %d", "F^[FI[ NFPHPJOLMMKMIKIIJGLFNFPGSHVHYG[F WTUUTWTYV[X[ZZ[X[VYTWT", "b,%d,%lld,%lld,%lld", "Portable Network Graphics files (*.png)", "findNearest", "Cannot read version ", "Data is already allocated", " type(0)=", "imgproc::minEnclosingTriangle_10()", "No space for %s arrays", "__itt_relation_add_ex", "JZJVLSNRPRQSQUPXOZM[L[KZKYLYKZ WSVTWTWSVRURSSRUQXQZR[U[XYZV QSRU SSQU PXQZ QXOZ", "FarnebackPolyExp", "getContinuousSize2D", "sSinCos_LA", "cv::Mat cv::findEssentialMat(cv::InputArray, cv::InputArray, double, cv::Point2d, int, double, double, cv::OutputArray)", "\"abc_searchview_description_submit\" : \"\u0627\u0633\u062a\u0641\u0633\u0627\u0631 \u062c\u0645\u0639 \u06a9\u0631\u0627\u0626\u06cc\u06ba\"", "N3Iex9EnostrExcE", "trainAuto", "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", "\"abc_shareactionprovider_share_with_application\" : \"%s \u1000\u102d\u102f \u1019\u103b\u103e\u101d\u1031\u1015\u102b\u101b\u1014\u103a\"", "method == DECOMP_LU || method == DECOMP_CHOLESKY", "core::randShuffle_12()", "int cv::cpu_baseline::(anonymous namespace)::MorphRowVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_float32x4> >::operator()(const uchar *, uchar *, int, int) const [VecUpdate = cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_float32x4>]", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_4NoOpEE22FirstScan8ConnectivityE", "N2cv3dnn14dnn4_v2019012211ConcatLayerE", "Failed to seek in AVI file: value is out of range", "Some of new output training vector components run exceed the original range too much", "virtual void cv::cpu_baseline::ColumnFilter<cv::cpu_baseline::Cast<int, short>, cv::cpu_baseline::SymmColumnSmallVec_32s16s>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::Cast<int, short>, VecOp = cv::cpu_baseline::SymmColumnSmallVec_32s16s]", "N2cv10opt_SSE4_19RowFilterIffNS0_10RowVec_32fEEE", "N2cv3dnn14dnn4_v2019012212SoftmaxLayerE", "u->mapcount-- == 1", "F^JJQJUKWLYNZQZSYVWXUYQZJZ", "CHECK failed: (min_bytes) <= (std::numeric_limits<size_t>::max() - kHeaderSize): ", "\"abc_shareactionprovider_share_with_application\" : \"Comparteix amb %s\"", "JPEGPreDecode", "void cv::BackgroundSubtractorMOG2Impl::getBackgroundImage_intern(cv::OutputArray) const [T = unsigned char, CN = 3]", "func != 0 && cn <= 4", "noShortPairs_ < indSize", "no rows for png_write_image to write", "Wednesday", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_114MorphRowFilterINS3_5MinOpIsEENS3_11MorphRowVecINS3_4VMinINS1_10hal_SSE4_19v_int16x8EEEEEEENS_9allocatorISD_EEEE", "Mat::n_1convertTo__JJI()", "Invalid bit depth in IHDR", "Start Of Scan: %d components", "wstart", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_9RGB2XYZ_iItEEEE", "int cv::opt_SSE4_1::SymmColumnSmallVec_32s16s::operator()(const uchar **, uchar *, int) const", "I[KKYY QXUXYYXUXQ UXXXXU", "_stepY > 0.", "src.size() == dst.size() && src.channels() == dst.channels()", "cvGraphRemoveEdge", "String field", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_8RGB2GrayItEEEE", "DocumentName", "void cv::setOpenGlDrawCallback(const cv::String &, cv::OpenGlDrawCallback, void *)", "growRight", "Rsqrt", "for chopped \"StripOffsets\" array", "rangeScale >= 0", "R_gripper2base_.size() == t_gripper2base_.size() && R_target2cam_.size() == t_target2cam_.size() && R_gripper2base_.size() == R_target2cam_.size()", "N6google8protobuf8internal31RepeatedPtrFieldMessageAccessorE", "LXSKSURWQX TKTUSWQXPXNWMUNTOUNV QKVK", "counters[k] != 0", "N2cv10PFMEncoderE", "convolved_image_data", "\"abc_action_menu_overflow_description\" : \"Opsi lain\"", "G]KFK[ KFY[ YFY[", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_114MorphRowFilterINS3_5MaxOpIdEENS3_13MorphRowNoVecEEENS_9allocatorIS8_EEEE", "contrast_weight", "ippIP AVX2 (h9)", "\" is a repeated message. Repeated message options must be initialized using an aggregate value.", "!bias || (blobs.size() == 2 && (size_t)numOutput == blobs[1].total())", "NSt6__ndk114default_deleteIN2cv3dnn16ReshapeLayerImplEEE", "\"abc_searchview_description_submit\" : \"Sor\u011funu g\u00f6nd\u0259rin\"", "H\\IQJOLMNMONPPPSNX ONORNVNZ OPMUMXNZP[R[TZVXXUYQYMXMXNYP", "sz > 0", "imgproc::Sobel_11()", "operator<<=", "deflateEnd failed (ignored)", "N10__cxxabiv129__pointer_to_member_type_infoE", "/home/vagrant/build/srclib/opencv/modules/core/src/alloc.cpp", "Sun raster files (*.sr;*.ras)", "cvSetSeqBlockSize", "cvProjectPCA", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi3EEExy7DistAbsNS1_IiLi3EEEE", "N2cv2ml43LogisticRegressionImpl_ComputeDradient_ImplE", "Image width is zero in IHDR", "N2cv7MatOp_TE", "N2cv14DISOpticalFlowE", "N2cv2ml8KNearestE", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2YCrCb_i<uchar> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2YCrCb_i<uchar>]", "1 <= blobs.size() && blobs.size() <= 2", "!means.empty()", "N2cv8opt_AVX29RowFilterIddNS0_8RowNoVecEEE", "raw_data.size() / 2 == (int)dstBlob.total()", "virtual void cv::opt_SSE4_1::SymmRowSmallFilter<unsigned char, int, cv::opt_SSE4_1::SymmRowSmallVec_8u32s>::operator()(const uchar *, uchar *, int, int) [ST = unsigned char, DT = int, VecOp = cv::opt_SSE4_1::SymmRowSmallVec_8u32s]", "readComponent8u", "kernel_size", "utcOffset", "loadCSV", "void cv::hal::div8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "NSt6__ndk120__shared_ptr_pointerIPN2cv12FilterEngineENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "NSt6__ndk114default_deleteIN2cv5utils5trace7details17AsyncTraceStorageEEE", "virtual void cv::opt_AVX2::(anonymous namespace)::ColumnSum<double, unsigned short>::operator()(const uchar **, uchar *, int, int, int) [ST = double, T = unsigned short]", "Interpreting non ascii codepoint %d.", "-0123456789", "N2cv18ResizeArea_InvokerIddEE", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphRowFilter<cv::opt_AVX2::(anonymous namespace)::MinOp<unsigned short>, cv::opt_AVX2::(anonymous namespace)::MorphRowVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_uint16x16> > >::operator()(const uchar *, uchar *, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MinOp<unsigned short>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphRowVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_uint16x16> >]", "calib3d::fisheye_1stereoCalibrate_10()", "cvAddText", "virtual void cv::opt_AVX2::(anonymous namespace)::RowSum<short, int>::operator()(const uchar *, uchar *, int, int) [T = short, ST = int]", "(src.type() == CV_32FC1 || src.type() == CV_32FC3) && src.data != dst.data", "MXTZS[R[QZQYRXSXTYT\\S^Q_ RYRZSZSYRY S[T\\ TZS^", "photo::setContrastWeight_10()", "calib3d::RQDecomp3x3_13()", "/home/vagrant/build/srclib/opencv/modules/core/src/matrix_operations.cpp", "(method != DECOMP_LU && method != DECOMP_CHOLESKY) || is_normal || src.rows == src.cols", "Integer addition overflow.", "void cv::UMat::convertTo(cv::OutputArray, int, double, double) const", "norm_class_idx", "N2cv3hal12cpu_baseline12_GLOBAL__N_120YUV420sp2RGB8InvokerILi0ELi0ELi4EEE", "Row/col passed to TIFFReadRGBATile() must be topleft corner of a tile.", "floodFill", "features2d::detect_10()", "\"abc_searchview_description_submit\" : \"Wasilisha hoja\"", "N9__gnu_cxx26__concurrence_unlock_errorE", "quantized_counting_sort", "G\\LFL[ MFM[ SLST IFYFYLXF MPSP I[Y[YUX[", "void cv::repeat(cv::InputArray, int, int, cv::OutputArray)", "_bboxesNormalized || inputs.size() >= 4", "TIFFWriteDirectoryTagColormap", "create() called for the missing output array", "MWTHPRT\\", "G]QFNGLIKKJOJRKVLXNZQ[S[VZXXYVZRZOYKXIVGSFQF MILKKNKSLVMX WXXVYSYNXKWI QFOGMJLNLSMWOZQ[ S[UZWWXSXNWJUGSF", "core::randShuffle_10()", "/home/vagrant/build/srclib/opencv/modules/imgcodecs/src/bitstrm.cpp", "calib3d::convertPointsFromHomogeneous_10()", "\"abc_searchview_description_query\" : \"Consulta\"", "G^ZH[H\\F[L[JZHYGVFRFOGMIMLNNPPVSWUWXVZ NLONVRWT OGNINKOMUPWRXTXWWYVZS[O[LZKYJWJUI[JYKY", "CHECK failed: (bytes_produced_by_serialization) == (byte_size_before_serialization): ", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_8Gray2RGBIfEEEE", "\"abc_search_hint\" : \"\u0916\u094b\u091c\u094d\u0928\u0941\u0939\u094b\u0938\u094d...\"", "aQ'D>", "CHECK failed: (size) <= (6): ", "F^ZIJRZ[", "E^EVGSIRKSKUI[ IRJSJUH[ KUMSORPRRSRUP[ PRQSQUO[ RUTSVRWRYSYUXXXZY[ WRXSXUWXWZY[[Z\\Y^V", "\"abc_toolbar_collapse_description\" : \"Skupi\"", "File already exists in database: ", "saturation_weight", "void cv::groupRectangles(std::vector<Rect> &, std::vector<int> &, std::vector<double> &, int, double)", "core::absdiff_10()", "fpDiff", "\"abc_activity_chooser_view_see_all\" : \"Sien alles\"", "Error calling numYTiles() on image file \"", "calc_f", "features2d::radiusMatch_13()", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_117MorphColumnFilterINS3_5MinOpItEENS3_14MorphColumnVecINS3_4VMinINS1_10hal_SSE4_110v_uint16x8EEEEEEENS_9allocatorISD_EEEE", "TIFFInitCCITTFax3", "cv::Mat cv::imread(const cv::String &, int)", "void cv::calcBackProject(const cv::Mat *, int, const int *, cv::InputArray, cv::OutputArray, const float **, double, bool)", "Saturation", "old_pos", "All the matrices must have the same data type", "cvGetRectSubPix", "calib3d::getP2_10()", "virtual void cv::flann::Index::build(cv::InputArray, const cv::flann::IndexParams &, cvflann::flann_distance_t)", "Mat::n_1assignTo__JJ()", "N2cv8opt_AVX212_GLOBAL__N_19ColumnSumIdtEE", "Could not decode alpha data.", "\"abc_action_bar_home_description\" : \"\u041d\u0435\u0433\u0456\u0437\u0433\u0456 \u0431\u0435\u0442\u0442\u0435 \u049b\u043e\u0437\u0493\u0430\u043b\u0443\"", "virtual void cv::cpu_baseline::(anonymous namespace)::RowSum<short, double>::operator()(const uchar *, uchar *, int, int) [T = short, ST = double]", "JZRMRX MMWM MRWR", "I[WML[ XMM[ MMLQLMXM L[X[XWW[", "Subdivision is empty", "google/protobuf/descriptor.proto", "features2d::drawMatchesKnn_12()", "addNodeToMatch", "TIFFReadScanline", "Cannot overwrite scan line ", "Virtual array controller messed up", "\"search_menu_title\" : \"Mekl\u0113t\"", "input.size() == 1", "\"abc_searchview_description_query\" : \"Requ\u00eate de recherche\"", "void cv::hal::cpu_baseline::recip8u(const uchar *, size_t, uchar *, size_t, int, int, const double *)", "H]XMT[S^QaOb YMU[S_ XMZMV[T_RaObLbJaI`I^K^K`J`J_ VTVQUNSMQMNNLQKTKVLYMZO[Q[SZTYUWVT NOMQLTLWMY QMOONQMTMWNZO[", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/resize.cpp", "FreeByteCounts", "fabs(normL2Sqr<float>(intersection[minI] - intersection[minJ]) - minD) < 1e-6", "Requested blob not found", "void cv::internal::projectPoints(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, const cv::internal::IntrinsicParams &, cv::OutputArray)", "WEBPVP8X", "(best_labels.cols == 1 || best_labels.rows == 1) && best_labels.cols*best_labels.rows == N && best_labels.type() == CV_32S && best_labels.isContinuous()", "photo::createMergeMertens_11()", "Define Restart Interval %u", "RPROP", "N2cv8opt_AVX212_GLOBAL__N_114MorphRowFilterINS1_5MinOpIdEENS1_13MorphRowNoVecEEE", "\"abc_searchview_description_clear\" : \"Cancella query\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_16RowSumIddEENS_9allocatorIS5_EEEE", "n > 0", "G\\LFL[ MFM[ MPONQMSMVNXPYSYUXXVZS[Q[OZMX SMUNWPXSXUWXUZS[ IFMF", "int cv::opt_SSE4_1::SymmColumnVec_32s8u::operator()(const uchar **, uchar *, int) const", "imgproc::circle_12()", "Insufficient memory to process text chunk", ".xml.gz", "St13runtime_error", "\"abc_searchview_description_search\" : \"\u0916\u094b\u091c\u094d\u0928\u0941\u0939\u094b\u0938\u094d\"", "objdetect::detectMultiScale2_13()", "cvStereoRectify", "\"abc_activity_chooser_view_see_all\" : \"Voir toutes les cha\u00eenes\"", "JZJRNKVYZR", "cv::ml::RTreeParams::RTreeParams(bool, int, cv::TermCriteria)", "(coi1 != 0 || src.channels() == 1) && (coi2 != 0 || dst.channels() == 1)", "photo::setBias_10()", "features2d::getType_10()", "SetRepeatedUInt32", "ci.isContinuous()", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_19SqrRowSumIddEENS_9allocatorIS5_EEEE", "void cv::hal::opt_AVX2::absdiff8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "areEqualPoints(p, q) == false", "LYRKPLONOOPQRRSRUQVOVNULSKRK RRRX SRSX OUVU", "count_include_pad", "void cv::hal::absdiff64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, void *)", "cvSort", "cvClearHist", "Unknown pixel type.", "Value must be \"true\" or \"false\" for boolean option \"", "\"abc_capital_off\" : \"\u0391\u03a0\u0395\u039d\u0395\u03a1\u0393\u039f\u03a0\u039f\u0399\u0397\u03a3\u0397\"", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::RGB2XYZ_i<ushort> >::operator()(const cv::Range &) const [Cvt = cv::RGB2XYZ_i<ushort>]", "\"abc_action_bar_home_description\" : \"Przejd\u017a do strony g\u0142\u00f3wnej\"", "JZNKNX OKOX LKSKVLWNWOVQSROR SKULVNVOUQSR LXQX SRTSUWVXWXXW SRUSVWWX", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphRowFilter<cv::cpu_baseline::(anonymous namespace)::MaxOp<double>, cv::cpu_baseline::(anonymous namespace)::MorphRowNoVec>::operator()(const uchar *, uchar *, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MaxOp<double>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphRowNoVec]", "ComputeExtrinsicRefine", "SymmRowSmallFilter", "_newsz[i] >= 0", "AsShotICCProfile", "\"abc_shareactionprovider_share_with\" : \"Trimite\u021bi la\"", "int cv::cpu_baseline::(anonymous namespace)::MorphColumnVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_float32x4> >::operator()(const uchar **, uchar *, int, int, int) const [VecUpdate = cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_float32x4>]", "double cv::getWindowProperty(const cv::String &, int)", "scalarParams.has(\"p\")", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_19ColumnSumIdfEENS_9allocatorIS5_EEEE", "\"abc_activitychooserview_choose_application\" : \"Valitse sovellus\"", "mean.rows == 1 || mean.cols == 1", "decltype(auto)", "imgproc::fillPoly_12()", "pad_b", "\" is specified along with field \"", "inp0.size() >= 2 && total(inp0, 2) == _numInp", "Unknown parameter rand_skip for layer type ", "ystart == 0 && \"not supported\"", "\"abc_shareactionprovider_share_with\" : \"\u9078\u64c7\u5206\u4eab\u5c0d\u8c61\"", "\"abc_capital_off\" : \"KI\"", "\"abc_searchview_description_query\" : \"\u101b\u103e\u102c\u1005\u101b\u102c \u1021\u1001\u103b\u1000\u103a\u1021\u101c\u1000\u103a\u1014\u1031\u101b\u102c\"", "void cv::computeRecallPrecisionCurve(const std::vector<std::vector<DMatch> > &, const std::vector<std::vector<uchar> > &, std::vector<Point2f> &)", "!tensor_proto.raw_data().empty() || !tensor_proto.float_data().empty() || !tensor_proto.double_data().empty() || !tensor_proto.int64_data().empty()", "'), where", "OpenCV TIFF: failed (int)TIFFReadEncodedStrip(tif, tileidx, (uint32*)buffer, buffer_size) >= 0", "cvIplImage", "fabs(dprod) > 0", "bKGD must be after", "type_name.empty()", "cn == CV_MAT_CN(_dstType)", "unrecognized exception", "NSt6__ndk117moneypunct_bynameIcLb0EEE", "The image has NULL data pointer", "getConvertScaleElem", "void cv::minMaxLoc(const cv::SparseMat &, double *, double *, int *, int *)", "LULRUWUMLR ORTU ORTO RRTS RRTQ", "Improper JPEG data precision", "I[RFJ[ RFZ[", "__itt_sync_create", "basic_string::resize", "video::setFinestScale_10()", "void cv::hal::cpu_baseline::absdiff32f(const float *, size_t, const float *, size_t, float *, size_t, int, int)", "solveCubic", "dnn::readNetFromTensorflow_12()", "CHECK failed: !coded_out.HadError(): ", "b < ntest", "centers.cols == data.cols", "JPEG-2000 Code Stream Syntax (ISO/IEC 15444-1)", "\"abc_action_bar_home_description\" : \"\u092e\u0941\u0916\u094d\u092f\u092a\u0943\u0937\u094d\u0920 \u092a\u0930 \u0928\u0947\u0935\u093f\u0917\u0947\u091f \u0915\u0930\u0947\u0902\"", "where", "%s: Bad value %f for \"%s\" tag", "variance > 0", "Bogus DHT index %d", "cvMorphologyEx", "I\\MFM[ MQPNRMUMWNXQX[", "checkContinuous", "Mat::n_1Mat__I_3II()", "F^NLLLKKKILGNFPFRGSISLQUQXRZT[V[XZYXYVXUVU ]I]G\\FZFXGVITLPUNXLZJ[H[GZGX", "CV_8UC3", "drawKeypoints", "global_hysteresis", "\"abc_shareactionprovider_share_with\" : \"Udost\u0119pnij dla\"", "V0NetParameter to NetParameter (see above); continuing anyway.", "virtual void cv::dnn::ShuffleChannelLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "0 <= anchor.x && anchor.x < ksize.width && 0 <= anchor.y && anchor.y < ksize.height", "ndisp % 8 == 0", "void cv::opt_AVX2::gemm64fc(const double *, size_t, const double *, size_t, double, const double *, size_t, double, double *, size_t, int, int, int, int)", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_19SqrRowSumIhdEENS_9allocatorIS5_EEEE", "options_->descriptor_channels <= max_channels", "CHECK failed: options_descriptor: ", "setSVMDetector", "JYPKLX QKMX NKUKWLXMXOWQTROR UKWMWOVQTR JXOX", "JoinTable", "N2cv3dnn16ElementWiseLayerINS0_20ChannelsPReLUFunctorEE5PBodyE", "virtual void cv::opt_AVX2::(anonymous namespace)::ColumnSum<int, unsigned short>::operator()(const uchar **, uchar *, int, int, int)", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_117MorphColumnFilterINS3_5MinOpItEENS3_14MorphColumnVecINS3_4VMinINS1_8hal_AVX211v_uint16x16EEEEEEENS_9allocatorISD_EEEE", "\"abc_searchview_description_query\" : \"\u0e02\u0e49\u0e2d\u0e04\u0e27\u0e32\u0e21\u0e04\u0e49\u0e19\u0e2b\u0e32\"", "(size_t)eigenvectors64f.rows == n", "VkCom pipeline of ", "It doesn't make any sense to use more than one tree for exact search", "reductionIndices.at<int>(i) == reductionIndices.at<int>(i - 1) + 1", "void cv::hal::opt_AVX2::div8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, const double *)", "double cv::dotProd_32s(const int *, const int *, int)", "N7cvflann21RadiusUniqueResultSetIiEE", "KYRJKVYVRJ", "nlevels", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_117MorphColumnFilterINS3_5MinOpItEENS3_14MorphColumnVecINS3_4VMinINS1_12hal_baseline10v_uint16x8EEEEEEENS_9allocatorISD_EEEE", "\"abc_searchview_description_clear\" : \"Sula inkinga\"", "RawDataUniqueID", "N12opencv_caffe12LRNParameterE", "NVRFRM", "void cv::preCornerDetect(cv::InputArray, cv::OutputArray, int, int)", "JZRMLW RMXW", "(mtype == CV_8UC1 || mtype == CV_8SC1) && _mask.sameSize(*psrc1)", "MWRFSGTFSERF SMS^RaPbNb", "npoints >= 0 && (depth == CV_32F || depth == CV_64F)", "double cv::ml::LogisticRegressionImpl::compute_cost(const cv::Mat &, const cv::Mat &, const cv::Mat &)", "imgproc::convexHull_12()", "Sigmoid", "N12opencv_caffe19HDF5OutputParameterE", "N3Iex9EsrmntExcE", "virtual void cv::FlannBasedMatcher::knnMatchImpl(cv::InputArray, std::vector<std::vector<DMatch> > &, int, cv::InputArrayOfArrays, bool)", "features2d::create_110()", "\"abc_searchview_description_submit\" : \"Pateikti u\u017eklaus\u0105\"", "KYLQNOPORPSSSXR\\ LQNPPPRQSS WOVRSXQ\\", "I[PFNM QFNM YFWM ZFWM", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphColumnFilter<cv::cpu_baseline::(anonymous namespace)::MaxOp<float>, cv::cpu_baseline::(anonymous namespace)::MorphColumnVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_float32x4> > >::operator()(const uchar **, uchar *, int, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MaxOp<float>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphColumnVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_float32x4> >]", "calib3d::getBlockSize_10()", "icvSeqFindNextElem", "profile matches sRGB but writing iCCP instead", "void cv::hal::cpu_baseline::max32f(const float *, size_t, const float *, size_t, float *, size_t, int, int)", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorIlEE", "Mat::nGetB()", "N2cv8opt_AVX28Filter2DIsNS0_4CastIffEENS0_11FilterNoVecEEE", "NSt6__ndk120__shared_ptr_pointerIPN2cv10OcvDctImplENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "H\\MMM[ NMN[ JMQM NTPTSSTRVNWMXMYNXOWN PTSUTVVZW[ PTRUSVUZV[X[YZZX J[Q[", "N2cv10opt_SSE4_112_GLOBAL__N_19SqrRowSumIhiEE", "cvSetImageROI", "void cv::hal::cpu_baseline::recip16u(const ushort *, size_t, ushort *, size_t, int, int, const double *)", "\"abc_shareactionprovider_share_with\" : \"\u1019\u103b\u103e\u101d\u1031\u1016\u102d\u102f\u1037 \u101b\u103d\u1031\u1038\u1015\u102b\"", "utils::findDataFile(): the binary module directory is build sub-directory: ", "photo::getRandom_10()", "CHECK failed: (count) <= (buffer_used_): ", "I[JFR[ ZFR[", "\"t1?\"t1?\"t1?\"t1?", "virtual void cv::opt_AVX2::ColumnFilter<cv::opt_AVX2::Cast<double, unsigned short>, cv::opt_AVX2::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::Cast<double, unsigned short>, VecOp = cv::opt_AVX2::ColumnNoVec]", "N2cv18DctIPPLoop_InvokerE", "G]YFVQUUUXVZW[Y[[Y\\W ZFWQVUVZ VF[FWTVX UTUQTNRMPMMNKQJTJVKYLZN[P[RZSYTWUT MOLQKTKWLY PMNOMQLTLWMZN[ WFZG XFYH", "NSt6__ndk118__time_get_storageIcEE", "Division or mod by zero: dividend.hi=", "outputs[0].dims == 4", "F^ISMSLRKOKMLJNHQGSGVHXJYMYOXRWS[S ITOTMRLOLMMJOHQG SGUHWJXMXOWRUT[T KXYX KYYY", "sortMatrixColumnsByIndices", "void cv::opt_AVX2::cvt32f32s(const float *, size_t, uchar *, size_t, int *, size_t, cv::Size, void *)", "TIFFStartTile", "minWeight > 0", "G^SFKbLb SFTFLb YFQbRb YFZFRb KP\\P\\Q KPKQ\\Q IWZWZX IWIXZX", "ml::train_11()", "JFIF extension marker: RGB thumbnail image, length %u", "H\\XMRb YMSb VTVQUNSMQMNNLQKTKWLYMZO[Q[SZUWVT QMONMQLTLXMZ ObVb", "unexpected zlib return code", "CL_INVALID_VALUE", "void cv::hal::merge8u(const uchar **, uchar *, int, int)", "getDevice", "core::PCACompute_10()", "dst.cols == (6*src1.cols)", "calib3d::recoverPose_13()", "wholeSize.width > 0 && wholeSize.height > 0", "N3Iex10EucleanExcE", "): failed (int)TIFFReadEncodedStrip(tif, tileidx, (uint32*)buffer, buffer_size) >= 0", "image must have CV_8UC3 type", "inputsData.size() == outputs.size()", "void cv::dft(cv::InputArray, cv::OutputArray, int, int)", "cv::sortColumnsByIndices only works on integer indices!", "input_scale", "N3ipp11IwExceptionE", " type(-1)=", "\"abc_activitychooserview_choose_application\" : \"Kies 'n program\"", "No Error", "ml::trainM_11()", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_9HLS2RGB_bEEE", "TIFFNumberOfTiles", "E_IM[M IR[R IW[W", "virtual void cv::MatOp_Bin::multiply(const cv::MatExpr &, double, cv::MatExpr &) const", "CL_INVALID_OPERATION", " 2pjVUUUVUUUVUUUVUUU", "var_importance", "thread::join failed", "@void cv::Canny(cv::InputArray, cv::OutputArray, double, double, int, bool)", "void cv::hal::cpu_baseline::magnitude64f(const double *, const double *, double *, int)", "internal error", "video::computeECC_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX218SymmRowSmallFilterIffNS2_19SymmRowSmallVec_32fEEENS_9allocatorIS5_EEEE", "): failed TIFFSetField(tif, TIFFTAG_IMAGEWIDTH, width)", "features2d::getFirstLevel_10()", "errMat.isContinuous()", "JZOGO^ UFU] MNWL MOWM MWWU MXWV", "blockStride", "CV_32SC1", "imgproc::pointPolygonTest_10()", "GetString", "KYTFPTOXOZP[S[UYVW UFQTPXPZQ[ NMWM", "Error in Huffman-encoded data (decoded data are longer than expected).", "NSt6__ndk110__time_putE", "void cv::hal::cpu_baseline::cvtBGR5x5toBGR(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "\"abc_searchview_description_voice\" : \"T\u00ecm ki\u1ebfm b\u1eb1ng gi\u1ecdng n\u00f3i\"", "Error writing directory link", "this_.dstY <= this_.roi.height", "m.dims == 4", "N2cv12cpu_baseline8Filter2DIhNS0_4CastIfhEENS0_12FilterVec_8uEEE", "SeparateDetectionWork", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_111YCrCb2RGB_iItEEEE", "void cv::hal::addRNGBias32f(float *, const float *, int)", "Only collections as YAML streams are supported by this parser", "calib3d::getValidDisparityROI_10()", "int cv::opt_AVX2::(anonymous namespace)::MorphRowVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_uint16x16> >::operator()(const uchar *, uchar *, int, int) const [VecUpdate = cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_uint16x16>]", "N2cv5CLAHEE", "Mat::nGetS()", "type == v2.type()", "timecode", "Field \"", "gtStripSeparate", "getLayerParams", "J[XPWNTMQMNNMPNRPSUUWV VUWWWXVZ WYTZQZNY OZNXMX XPWPVN WOTNQNNO ONNPOR NQPRUTWUXWXXWZT[Q[NZMX", "): failed TIFFSetField(tif, TIFFTAG_SGILOGDATAFMT, SGILOGDATAFMT_FLOAT)", "/home/vagrant/build/srclib/opencv/modules/flann/src/miniflann.cpp", "query.isContinuous() && indices.isContinuous() && dists.isContinuous()", "imageDx_.type() == CV_32FC1 && imageDx_.size() == imageSize_", " (value:%s)", "H]OJPKOLNKNJOHPGSFWFZG[I[KZMYNSPQQQSRTTT WFYGZIZKYMXNVO PYOZP[QZPY", "sCos_A11", "H\\YIWGTFPFMGKIKKLMMNOOUQWRXSYUYXWZT[P[MZKX", "I[MVQUTTWRXPWNUMRMONMQLTLVMYNZP[R[UZWX OONQMTMWNY RMPOOQNTNWOZP[", "imgproc::resize_12()", "\"abc_searchview_description_submit\" : \"Odeslat dotaz\"", "calib3d::getDefaultNewCameraMatrix_11()", "ofs == fs_data_blksz[blockIdx]", "operator delete[]", "CellLength", "imgproc::getGaussianKernel_11()", "BitsPerSample tag is missing, assuming 8 bits per sample", "Huffman table 0x%02x was not defined", "N3Iex10ElibbadExcE", "1 < dst.dims && dst.dims <= 4", "JZRYQ\\ RYS\\ Q\\S\\ RYVXVVXUXRZQZLYIXHVHTGPGNHLHKIJLJQLRLUNVNXRY", "H]PFJ[ QFK[ MTOPQNSMUMWNXOXQVWVZW[ UMWOWQUWUZV[Y[[Y\\W MFQF", "MXRKQLQMSNVN TNQOPPPRRSUS TNROQPQRRS SSPTOUOWQXSYTZT[S\\Q\\ SSQTPUPWQX", "findBestSplit", "/home/vagrant/build/srclib/opencv/modules/core/src/gl_core_3_1.cpp", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphColumnFilter<cv::opt_SSE4_1::(anonymous namespace)::MinOp<unsigned char>, cv::opt_SSE4_1::(anonymous namespace)::MorphColumnVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_uint8x16> > >::operator()(const uchar **, uchar *, int, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MinOp<unsigned char>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphColumnVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_uint8x16> >]", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_117MorphColumnFilterINS3_5MinOpIhEENS3_14MorphColumnVecINS3_4VMinINS1_10hal_SSE4_110v_uint8x16EEEEEEENS_9allocatorISD_EEEE", "imgproc::HoughCircles_11()", "N2cv23FindExtremumKAZEInvokerE", "TIFFInitZIP", "iterations", "Application transferred too few scanlines", "\"abc_searchview_description_voice\" : \"\u0dc4\u0dac \u0dc3\u0dd9\u0dc0\u0dd3\u0db8\"", "NSt6__ndk15ctypeIwEE", "CHECK failed: s != NULL: ", "SetRepeatedBool", "cHRM Red Y", "Closing tag should not include any attributes", "\"abc_capital_on\" : \"\u0631\u0648\u0634\u0646\"", "size.width>0 && size.height>0", "JZWNUMRMPNNPMSMVNYOZQ[T[VZ MTUT", "NWSFRGRM SGRM SFTGRM", "preFilterSize must be odd and be within 5..255", "\"abc_activity_chooser_view_see_all\" : \"\u041f\u0435\u0440\u0435\u0433\u043b\u044f\u043d\u0443\u0442\u0438 \u0432\u0441\u0456\"", "scaleFactor > 1 && _image.depth() == CV_8U", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn12MVNLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "features", "imgproc::createCLAHE_12()", "Tonemap", "N2cv23CvtColorIPPLoop_InvokerINS_24IPPGeneralReorderFunctorEEE", "N3Iex9EilseqExcE", "cvCreateMatNDHeader", "lost rgb to gray", "int cv::opt_SSE4_1::(anonymous namespace)::MorphVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_int16x8> >::operator()(uchar **, int, uchar *, int) const [VecUpdate = cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_int16x8>]", "WebP codec supports 8U images only", "virtual void cv::FlannBasedMatcher::train()", "H\\QKNLLNKQKSLVNXQYSYVXXVYSYQXNVLSKQK RKRY KRYR", "imagePoints.type() == CV_32FC2 || imagePoints.type() == CV_64FC2", "ReadProtoFromTextFile", "imgproc::createLineSegmentDetector_15()", "npoints >= 0 && (depth == CV_32S || depth == CV_32F || depth == CV_64F)", "N2cv3hal12cpu_baseline12_GLOBAL__N_120YUV420sp2RGB8InvokerILi0ELi1ELi3EEE", "ld.requiredOutputs.size() <= outShapes.size()", "flags == SOLVEPNP_P3P || flags == SOLVEPNP_AP3P", "N2cv10opt_SSE4_112_GLOBAL__N_118fixedSmoothInvokerIhNS1_13ufixedpoint16EEE", "void cv::hal::cpu_baseline::max8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int)", "en_US.UTF-8", "parallel_for_body", "(numPriors * _numLocClasses * 4) == total(inputs[0], 1)", "Exceeded maximum protobuf size of 2GB: ", "Unknown/unsupported distance type", "NSt6__ndk114default_deleteIN2cv12LBPEvaluatorEEE", "Invalid td_samplesperpixel value", "N2cv16BatchDistInvokerE", "%YAML:1.", "H\\YMU[T^RaObLbJaI`I_J^K_J` XMT[S^QaOb VTVQUNSMQMNNLQKTKWLYMZO[Q[SZUWVT QMONMQLTLXMZ", "\"abc_searchview_description_query\" : \"T\u00ecm ki\u1ebfm truy v\u1ea5n\"", "isOpened()", "rs[%d] = %d; re[%d] = %d; ", "calib3d::recoverPose_14()", "Compression scheme %u %s decoding is not implemented", "rotate", "N2cv8opt_AVX216SymmColumnFilterINS0_4CastIisEENS0_25SymmColumnSmallVec_32s16sEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12_GLOBAL__N_126SparsePyrLKOpticalFlowImplENS_9allocatorIS3_EEEE", "features2d::detectAndCompute_10()", "void cv::cpu_baseline::cvt8s16u(const schar *, size_t, uchar *, size_t, ushort *, size_t, cv::Size, void *)", "cvCheckContourConvexity", "/home/vagrant/build/srclib/opencv/modules/dnn/src/darknet/darknet_importer.cpp", "void cv::circle(cv::InputOutputArray, cv::Point, int, const cv::Scalar &, int, int, int)", "Const input blob for weights not found", "ellipse", "ReadNetParamsFromTextFileOrDie", "hdr && hdr->dims == 1", "void cv::hal::cpu_baseline::addWeighted32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, const double *)", "remapBilinear", "core::divide_14()", "N2cv16MergeDebevecImplE", "bool cv::VideoWriter::open(const cv::String &, int, int, double, cv::Size, bool)", "I\\KFRPR[S[ KFLFSP ZFYFRP ZFSPS[", "Gather", "core::meanStdDev_10()", "N2cv9finalPassE", "6b  27-Mar-1998", "calibrate", "N2cv10opt_SSE4_129WarpPerspectiveLine_SSE4_ImplE", "N2cv3dnn18MaxUnpoolLayerImplE", "distCoeffs is NULL while dpdk is not", "void cv::opt_AVX2::cvt16f32f(const cv::float16_t *, size_t, uchar *, size_t, float *, size_t, cv::Size, void *)", "MWVNTMRMPNPPQQTRUSUUSVPVNU", "H\\MFXFQO MFMGWG WFPO QNSNVOXQYTYUXXVZS[P[MZLYKWLW POSOVPXS TOWQXTXUWXTZ XVVYSZPZMYLW OZLX", "NSt6__ndk114default_deleteIN2cv3dnn18MaxUnpoolLayerImplEEE", "Conv Layer takes a single blob as input.", "\"abc_toolbar_collapse_description\" : \"Contraer\"", "MWRMQNPPOSOVPWRWSVTTUQUNTMRM PRTR", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_10mRGBA2RGBAIhEEEE", "Some of required array pointers is NULL", "NULL storage pointer ", "horAcc16", "inputs[0].dims == 4", "calib3d::findHomography_14()", "Unknown parameter det_context_pad for layer type ", "I[XPVNTMQMONMPLSLUMXOZQ[T[VZXX XPWQVOTNQNOONPMSMUNXOYQZTZVYWWXX", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphFilter<cv::cpu_baseline::(anonymous namespace)::MaxOp<double>, cv::cpu_baseline::(anonymous namespace)::MorphNoVec>::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MaxOp<double>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphNoVec]", "?N2cv8colormap3HotE", "LINEAR", "NVSWRXQWRVSWSYQ[", "condition_variable::timed wait: mutex not locked", "PSROIPooling", "ASCII value for tag \"%s\" does not end in null byte. Forcing it to be null", "m.dims <= 2", "H\\RFK[ RFY[ RIX[ MUVU I[O[ U[[[", "N3Imf14TypedAttributeIN5Imath3BoxINS1_4Vec2IfEEEEEE", "imgproc::getCannyLowThresh_10()", "test_samples.type() == CV_32F && test_samples.cols == samples.cols", "CL_INVALID_EVENT", "H1.type() == H2.type() && H1.depth() == CV_32F", "ml::getSamples_10()", "\"abc_activitychooserview_choose_application\" : \"Zvo\u013ete aplik\u00e1ciu\"", "Unknown blob_share_mode: %d", "png_image_begin_read_from_file: invalid argument", "\"abc_toolbar_collapse_description\" : \"\u6536\u5408\"", "MXP[OZPYQZQ[P]N_", "ReorgLayerImpl", "clone", "RowsPerStrip must be multiple of %d for JPEG", "video::set_1statePre_10()", "hdr && hdr->dims == 3", "\"abc_capital_off\" : \"\u1015\u102d\u1010\u103a\"", "F^[CZD[E\\D\\C[BYBWCUETGSJRNPZO^N` VDUFTJRVQZP]O_MaKbIbHaH`I_J`Ia", "maxDistance > std::numeric_limits<float>::epsilon()", "N2cv3hal12cpu_baseline12_GLOBAL__N_119YUV420p2RGB8InvokerILi2ELi3EEE", "buildIndex_", "blobs.size() != 0", "MXOQQPVP QPQRPV TPTRUV", "fastNlMeansDenoisingMulti_", "CL_INVALID_COMMAND_QUEUE", "void cv::opt_AVX2::gemm32fc(const float *, size_t, const float *, size_t, float, const float *, size_t, float, float *, size_t, int, int, int, int)", "winSize", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14SliceLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "Indexed", "KZQKOLNMMPMSNVOWQXTXVWWVXSXPWMVLTKQK QKOMNPNSOVQX TXVVWSWPVMTK", "\"abc_action_bar_up_description\" : \"Ngjitu lart\"", "initialTemperature > finalTemperature", "unexpected DeviceLink ICC profile class", "Field with primitive type has type_name.", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::HLS2RGB_f>::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::HLS2RGB_f]", "durationNS", "CV_IS_MAT(_src) && CV_IS_MAT(_dst) && (_src->rows == 1 || _src->cols == 1) && (_dst->rows == 1 || _dst->cols == 1) && _src->cols + _src->rows - 1 == _dst->rows + _dst->cols - 1 && (CV_MAT_TYPE(_src->type) == CV_32FC2 || CV_MAT_TYPE(_src->type) == CV_64FC2) && (CV_MAT_TYPE(_dst->type) == CV_32FC2 || CV_MAT_TYPE(_dst->type) == CV_64FC2)", "N2cv10opt_SSE4_118SymmRowSmallFilterIffNS0_19SymmRowSmallVec_32fEEE", "int cv::cpu_baseline::SymmColumnVec_32f16s::operator()(const uchar **, uchar *, int) const", "dnn::NMSBoxes_14()", "\"abc_capital_off\" : \"DESATIVAR\"", "\"abc_searchview_description_query\" : \"Kueri penelusuran\"", "Bad code word", "N2cv10opt_SSE4_19RowFilterIsfNS0_13RowVec_16s32fEEE", "global_var_idx", "A.size == arrays[i0]->size", "groups", "The array is too big", "?png_get_eXIf does not work; use png_get_eXIf_1", "AcPALBJCGEEGCJBLAPATBXCZE]G_JaLbPcTcXbZa]__]aZbXcTcPbLaJ_G]EZCXBTAPA", "SpatialMaxPooling", "getPrefix", "OpenCV TIFF: failed TIFFSetField(tif, TIFFTAG_BITSPERSAMPLE, 32)", "pad_t", "Strip/tile too large for JPEG", "DISABLED", "void cv::hal::or8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "Only scalar types can be dynamically assigned to a file node", "\"abc_capital_off\" : \"DESATIVADO\"", "objdetect::load_10()", "LYPNSKSX RLRX OXVX", "N9IlmThread5MutexE", "IZVKWL XKSKQLPMOOLYK[J\\ SKQMPOMYL[J\\H\\H[I\\ WKTVTWUXWXXWYU XKUVUWVX LOVO", "align_corners", ">normalize_variance", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v201901229DataLayerENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "\"abc_searchview_description_clear\" : \"\u0a38\u0a35\u0a3e\u0a32 \u0a39\u0a1f\u0a3e\u0a13\"", "virtual void cv::opt_SSE4_1::RowFilter<short, double, cv::opt_SSE4_1::RowNoVec>::operator()(const uchar *, uchar *, int, int) [ST = short, DT = double, VecOp = cv::opt_SSE4_1::RowNoVec]", "Cannot quantize more than %d color components", "N2cv16TLSDataContainerE", "\"abc_searchview_description_clear\" : \"\u041e\u0447\u0438\u0441\u0442\u0438\u0442\u0438 \u0437\u0430\u043f\u0438\u0442\"", "char4", "unknown_%d", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_11RGB2YCrCb_iItEEEE", "CCSIDFT", "\"abc_action_bar_up_description\" : \"Navigera upp\u00e5t\"", "w->wnodes[nidx].left > 0 && w->wnodes[nidx].right > 0", "void cv::hal::recip32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, void *)", "vecsplit_", "cvEigenVV", "cvGEMM", "calcCovarMatrix", "objdetect::groupRectangles_11()", "N2cv12cpu_baseline12_GLOBAL__N_117MorphColumnFilterINS1_5MaxOpIfEENS1_14MorphColumnVecINS1_4VMaxINS_12hal_baseline11v_float32x4EEEEEEE", "node.input_size() == inpIndices.size()", "G^LFL[ MFYY MHY[ YFY[ IFMF VF\\F I[O[", "org.opencv.features2d", "void cv::hal::cvtYUVtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool, bool)", "src.type() == dst.type() && src.size == dst.size", "thresh_8u", "\"abc_activity_chooser_view_see_all\" : \"\u0a38\u0a2d \u0a26\u0a47\u0a16\u0a4b\"", "ctype_byname<wchar_t>::ctype_byname failed to construct for ", "calib3d::stereoRectifyUncalibrated_11()", "ml::setGamma_10()", "N2cv3dnn14dnn4_v2019012215ActivationLayerE", "N2cv10opt_SSE4_112ColumnFilterINS0_4CastIffEENS0_17SymmColumnVec_32fEEE", "Orientation", "N2cv3hal12cpu_baseline12_GLOBAL__N_119YUV420p2RGB8InvokerILi2ELi4EEE", "@TIFFClientOpen", "EfNSOUQVSVUUVSVQUOSNQNOONPMSMVNYP[S\\V\\Y[[Y\\W]T]P\\MZJXIUHRHOIMJKLIOHSHXI]KaMcPeTfYf]e`cba KLJNIRIXJ\\L`NbQdUeYe]d_cba POTO OPUP NQVQ NRVR NSVS OTUT PUTU aLaNcNcLaL bLbN aMcM aVaXcXcVaV bVbX aWcW", "\"abc_search_hint\" : \"\u041f\u0440\u0435\u0431\u0430\u0440\u0443\u0432\u0430\u045a\u0435\u2026\"", "decimal128", "virtual void cv::Feature2D::detect(cv::InputArray, std::vector<KeyPoint> &, cv::InputArray)", "photo::getMaxIter_10()", "N2cv8opt_AVX212_GLOBAL__N_19ColumnSumIthEE", "StringOutputStream.", "G^OFObPb OFPFPb UFUbVb UFVFVb JP[P[Q JPJQ[Q JW[W[X JWJX[X", "I\\MFMU NFMQ MQNOONQMTMWNXPXRWTUV TMVNWPWRTXTZU[W[YY KFNF", "readHeader", "int cv::cpu_baseline::sqsum8s(const schar *, const uchar *, int *, int *, int, int)", "cv::MatExpr cv::abs(const cv::Mat &)", "use_1se_rule", "font != 0 && hscale > 0 && vscale > 0 && thickness >= 0", "extractBinaryLayerParams", "Ptr<cv::BaseColumnFilter> cv::getColumnSumFilter(int, int, int, int, double)", "N2cv18SimpleBlobDetectorE", "src.cols / 2 == dst.cols", "sz[i] <= (size_t)INT_MAX", "N2cv16MinProblemSolver8FunctionE", "NSt6__ndk120__shared_ptr_emplaceIN2cv13FormattedImplENS_9allocatorIS2_EEEE", "output EOS", "void cv::split(cv::InputArray, cv::OutputArrayOfArrays)", "BuildMapBitdepth16To8", "virtual void cv::opt_SSE4_1::(anonymous namespace)::RowSum<int, int>::operator()(const uchar *, uchar *, int, int) [T = int, ST = int]", "fitEllipseAMS", "N12opencv_caffe15ConcatParameterE", "CHECK failed: (type) != (WireFormatLite::TYPE_GROUP): ", "\"abc_action_bar_home_description\" : \"Navigeerimine avaekraanile\"", "N2cv4impl20PluginBackendFactoryE", "N3Imf14TypedAttributeINS_8RationalEEE", "H\\LJMKLLKKKJLHMGPFTFWGXIXLWNTOQO TFVGWIWLVNTO TOVPXRYTYWXYWZT[P[MZLYKWKVLUMVLW WQXTXWWYVZT[", "void cv::hal::opt_AVX2::max16s(const short *, size_t, const short *, size_t, short *, size_t, int, int)", "traits::Type<_Tp>::value == type() && cols == 1", "photo::inpaint_10()", "N2cv22SimpleBlobDetectorImplE", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::YCrCb2RGB_i<uchar> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::YCrCb2RGB_i<uchar>]", "core::kmeans_11()", "Cannot unlock mutex (%T).", "I[LSXSXQWOVNTMQMONMPLSLUMXOZQ[T[VZXX", "void cv::hal::opt_AVX2::div32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, const double *)", "VIDEOIO: Disable backend: ", "box2f", "core::eigen_10()", "E_GFM[ GFHFMX RFMX RIM[ RIW[ RFWX ]F\\FWX ]FW[", "color-map index out of range", "src && nsrcs > 0 && dst && ndsts > 0 && fromTo && npairs > 0", "\"abc_shareactionprovider_share_with\" : \"Compartilhar com\"", "lines.isContinuous()", "H\\MFKPMNPMSMVNXPYSYUXXVZS[P[MZLYKWKVLUMUNVNWMXLX WPXRXVWX SMUNVOWRWVVYUZS[ LVLWMWMVLV MFWF MGUG MHQHUGWF", "inputs.size() != 0", "log_softmax", "v0_layer_connection_ != NULL", "../../../../modules/dnn/include/opencv2/dnn/shape_utils.hpp", "equalizeHist", "../../../../modules/core/include/opencv2/core.hpp", "LXRHLRR\\XRRH", "coeff", "Sharpness", "maxpkts", "no rotated images", "photo::createTonemap_10()", "N2cv3dnn14dnn4_v2019012214BatchNormLayerE", "N2cv15OcvDftBasicImplE", "video::getComplexityReductionThreshold_10()", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi4EEElm7DistAbsiE", "\"abc_searchview_description_search\" : \"Cari\"", "\"abc_action_bar_home_description\" : \"Ir a la pantalla de inicio\"", "layer_id.find(permName) == layer_id.end()", "depth == 8 || depth == 16", "separateVerticalLines", "construction vtable for ", "imgproc::putText_10()", "cvInitTreeNodeIterator", "\"abc_shareactionprovider_share_with\" : \"Zdie\u013ea\u0165 pomocou\"", "c >= 0", "G]JEJL ZEZL OMOT UMUT JUJ\\ ZUZ\\ JGZG JHZH JIZI OPUP OQUQ JXZX JYZY JZZZ JFMH ZFWH KIJK LIJJ XIZJ YIZK ONPP OOQP UNTP UOSP PQOS QQOR SQUR TQUS JVKX JWLX ZWXX ZVYX MYJ[ WYZ[", "KYVOTVSYR[ WOUVTYR[P\\M\\L[M[N\\ USUQSOQOOPNQMSMUNWPXRXTV QOOQNSNVPX", "setActivationFunction", "png_image_finish_read: damaged PNG_IMAGE_VERSION", "NSt6__ndk114default_deleteIN2cv3dnn18BatchNormLayerImplEEE", "void cv::hal::cpu_baseline::cvtHSVtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool, bool, bool)", "imgproc::findContours_10()", "!it->second.empty()", "collate_byname<char>::collate_byname failed to construct for ", "void cv::hal::opt_AVX2::div64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, const double *)", "TLS init function for ", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_114MorphRowFilterINS3_5MinOpItEENS3_11MorphRowVecINS3_4VMinINS1_8hal_AVX211v_uint16x16EEEEEEENS_9allocatorISD_EEEE", "diffusivity", "_nmsThreshold > 0.", "calib3d::stereoRectify_12()", "NSt6__ndk120__shared_ptr_pointerIPN2cv13RHO_HEST_REFCENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "N6google8protobuf2io16ArrayInputStreamE", "MWPHP\\ QHQ\\ PHUH P\\U\\", "MWMMWW WMMW", "CPPTYPE_UINT32", "RRR>Rf", "ImageUniqueID", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_110RGB5x52RGBEEE", "FilterEngine__proceed", "LogLuvInitState", "(params.marginType == SOFT_MARGIN || params.marginType == HARD_MARGIN) && (extendedWeights.type() == CV_32FC1)", "WITHIN_CHANNEL", "objdetect::getWinSigma_10()", "\"abc_searchview_description_voice\" : \"S\u0259sli axtar\u0131\u015f\"", "F^UGTHSJQOOUNWLZJ[ THSKQSPVOXMZJ[H[GZGXHWIXHY OLNNMOKOJNJLKJMHOGRFWFZG[I[KZMYNVORO WFYGZIZKYMXNVO ROUPVRWYX[ ROTPURVYX[Y[[Z]X", "calib3d::undistortPoints_10()", "HZMMM[ NMN[ JMXMXRWM J[Q[", "H\\KFW[ LFX[ MFY[ XGLZ IFPF UF[F I[O[ T[[[ JFMH NFMH OFMG VFXG ZFXG LZJ[ LZN[ WZU[ WYV[ WYZ[", "CHECK failed: IsInitialized(): ", "non-positive height", "blobFromProto", "dnn::readNetFromTensorflow_11()", "N3Imf14TypedAttributeINS_12PreviewImageEEE", "\"abc_action_mode_done\" : \"\u062a\u0645\u0627\u0645\"", "addRowBottom", "\"abc_searchview_description_search\" : \"Rechercher\"", "MXSFRGSHTGSF TMT_SaQbObNaN`O_P`Oa SMS_RaQb PMTM", "!omc.empty() && omc.type() == CV_64FC3", "Field number $0 has already been used in \"$1\" by field \"$2\".", "cv::SumSqrFunc cv::opt_AVX2::getSumSqrFunc(int)", "out.isContinuous()", "\"abc_searchview_description_submit\" : \"\u0915\u094d\u0935\u0947\u0930\u0940 \u0938\u092c\u092e\u093f\u091f \u0915\u0930\u0947\u0902\"", "MWNVVV", "DateTimeOriginal", "MWRKQMOPMR RKSMUPWR", "ExtraSamples", "virtual void cv::FastFeatureDetector_Impl::detect(cv::InputArray, std::vector<KeyPoint> &, cv::InputArray)", "_src1.sameSize(_src2) && _src1.type() == _src2.type()", "fabs(nw) > 0", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_19ColumnSumIidEENS_9allocatorIS5_EEEE", "void cv::hal::mul16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, void *)", "channels() == CV_MAT_CN(dtype)", "cross", "features2d::knnMatch_13()", "estimateAffine3D", "No space for Group 3/4 reference line", "clrused >= 0 && clrused <= 256", "): failed TIFFSetField(tif, TIFFTAG_COMPRESSION, COMPRESSION_SGILOG)", "uchar4", "void cv::hal::cvtLabtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool, bool, bool)", "parseDims", "Error reading tile data from image file \"", "N2cv10opt_SSE4_112_GLOBAL__N_114MorphRowFilterINS1_5MaxOpIhEENS1_11MorphRowVecINS1_4VMaxINS_10hal_SSE4_110v_uint8x16EEEEEEE", "z]z@zzz z", "virtual void cv::opt_AVX2::RowFilter<float, double, cv::opt_AVX2::RowNoVec>::operator()(const uchar *, uchar *, int, int) [ST = float, DT = double, VecOp = cv::opt_AVX2::RowNoVec]", "png_image_write_to_stdio: invalid argument", "MWONQMSMUNUPSQ RQSQURUUSVQVOU", "N2cv19connectedcomponents21LabelingGranaParallelIihNS0_4NoOpEE10SecondScanE", "N2cv12cpu_baseline12_GLOBAL__N_114MorphRowFilterINS1_5MinOpIfEENS1_11MorphRowVecINS1_4VMinINS_12hal_baseline11v_float32x4EEEEEEE", "IZMFM[ WMMW QSX[", "): failed TIFFSetField(tif, TIFFTAG_ROWSPERSTRIP, rowsPerStrip)", "cHRM White Y", "sample.type() == CV_32F", "void cv::opt_AVX2::cvt8s8u(const schar *, size_t, uchar *, size_t, uchar *, size_t, cv::Size, void *)", "H\\LML[M[ LMMMM[ MQPNRMUMWNXQX[ MQPORNTNVOWQW[X[", "N17opencv_tensorflow35FunctionDef_Node_AttrEntry_DoNotUseE", "goodFeaturesToTrack", "/home/vagrant/build/srclib/opencv/modules/photo/src/hdr_common.cpp", "GetBool", "Mat::n_1copySize()", "void cv::pm_g2(cv::InputArray, cv::InputArray, cv::OutputArray, float)", "N2cv8colormap3HSVE", "virtual void cv::opt_SSE4_1::RowFilter<unsigned short, float, cv::opt_SSE4_1::RowNoVec>::operator()(const uchar *, uchar *, int, int) [ST = unsigned short, DT = float, VecOp = cv::opt_SSE4_1::RowNoVec]", "map<$0, $1>", "\"abc_action_bar_up_description\" : \"\u5411\u4e0a\u700f\u89bd\"", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/lsd.cpp", "Bogus Huffman table definition", "descriptors must be vector<Mat> or vector<UMat>", "void cv::mixChannels(cv::InputArrayOfArrays, cv::InputOutputArrayOfArrays, const std::vector<int> &)", "\"abc_action_mode_done\" : \"Tapos na\"", "src and dst must have the same type", "MessageOptions", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn22NormalizeBBoxLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "NULL or empty filename", "ChromaBlurRadius", "virtual void cv::dnn::PermuteLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "\"search_menu_title\" : \"\u041f\u0440\u0435\u0442\u0440\u0430\u0436\u0438\"", "TIFFReadDirectory", "void cv::hal::opt_SSE4_1::mul32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, const double *)", "cvSobel", "removeQuadFromGroup", "outputs[k].total() == inputs[k].total()", "L[UUTSRRPRNSMTLVLXMZO[Q[SZTY VRTYPdOfMgLfLdMaP^S\\U[XY[V", "int cv::opt_AVX2::(anonymous namespace)::MorphVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_float32x8> >::operator()(uchar **, int, uchar *, int) const [VecUpdate = cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_float32x8>]", "Unknown parameter pad for layer type ", "%s: Invalid %stag \"%s\" (not supported by codec)", "SensingMethod", "deallocate_", "arithm_ipp_mul16u", "MWOMOV OMSMUNUQSROR", "\"abc_searchview_description_query\" : \"S\u00f8keord\"", "CV_MAT_DEPTH(ctype) >= CV_32F && CV_MAT_CN(ctype) <= 2", "AVX512BW", "\"abc_capital_on\" : \"AKTIBATUTA\"", "H\\LMLWMZO[R[TZWW LMMMMWNYPZRZTYWW WMW[X[ WMXMX[", "TIFFFetchSubjectDistance", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_117MorphColumnFilterINS3_5MaxOpIdEENS3_16MorphColumnNoVecEEENS_9allocatorIS8_EEEE", "nvars == (int)rowvals.size()", "(int)tile_height0 > 0 && (int)tile_height0 < std::numeric_limits<int>::max()", "V1LayerParameter: ", "imgproc::edgeOrg_11()", "Invalid ", "F^HOJKOU JMOWRPWPZO[M[KZIXHWHUITKTMUPVRWUWXUZ WHVIUKUMWQXTXWWYUZ", "fabs(norm_u2) > 0", "N2cv12cpu_baseline12_GLOBAL__N_114MorphRowFilterINS1_5MaxOpIsEENS1_11MorphRowVecINS1_4VMaxINS_12hal_baseline9v_int16x8EEEEEEE", "videoio::fourcc_10()", "ml::setClustersNumber_10()", "void cv::hal::sub16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, void *)", "inputs[2][1] == 1 + (int)(!_varianceEncodedInTarget)", "\"abc_capital_on\" : \"IESL\u0112GTS\"", "w->wnodes[w_pidx].right == w_nidx", "nbits <= ssz && \"Descriptor size can't be bigger than full descriptor (486 = 162*3 - 3 channels)\"", "dnn::readNetFromDarknet_11()", "ml::getRegularization_10()", "/home/vagrant/build/srclib/opencv/modules/imgcodecs/src/grfmt_base.cpp", "completeSymm", "\"abc_shareactionprovider_share_with_application\" : \"Shiriki na %s\"", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::YCrCb2RGB_f<float> >::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::YCrCb2RGB_f<float>]", "expTime", "Batch normalization in training mode with batch size > 1", "G]JMKNLPL[ KMLNMPMZ HPINJMLMMNNPN[ SOUNWNXOXPZPZNXMVMTNQQOTNW XNYOYP PSQSWYYYZX TWWZYZ RTUZV[X[YZZX L[N[", "squeeze_dims", "src.size == dst.size && src.type() == dst.type() && src.isContinuous() && dst.isContinuous() && src.type() == CV_32F", "N6google8protobuf8internal22MessageSetFieldSkipperE", "calcOrientation", "png_image_finish_read: row_stride too large", "image_jacobian_affine_ECC", "N2cv32AffinePartial2DEstimatorCallbackE", "virtual void cv::(anonymous namespace)::FarnebackOpticalFlowImpl::calc(cv::InputArray, cv::InputArray, cv::InputOutputArray)", "N17opencv_tensorflow10VersionDefE", "virtual void cv::opt_SSE4_1::ColumnFilter<cv::opt_SSE4_1::FixedPtCastEx<int, unsigned char>, cv::opt_SSE4_1::SymmColumnVec_32s8u>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::FixedPtCastEx<int, unsigned char>, VecOp = cv::opt_SSE4_1::SymmColumnVec_32s8u]", "output_dim", "Reorg-name", "/home/vagrant/build/srclib/opencv/modules/calib3d/src/fundam.cpp", "H\\H[JZLXOTQQSMTJTGSFRFQGPIPKQMSOVQXSYUYWXYWZT[P[MZKXJVJT", "virtual void cv::dnn::ResizeLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "imgcodecs::imread_11()", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/normalize_bbox_layer.cpp", "png_image_write_to_memory: PNG too big", "Bogus JPEGTables field", "LightSource", "GetDouble", "' is ", "shuffleTrainTest", " Outdent() without matching Indent().", "I\\UFSGQIOMNPMTLZKb UFWFYHYKXMWNUORO ROTPVRWTWWVYUZS[Q[OZNYMV", "virtual void cv::cpu_baseline::SymmColumnSmallFilter<cv::cpu_baseline::FixedPtCastEx<int, unsigned char>, cv::cpu_baseline::SymmColumnVec_32s8u>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::FixedPtCastEx<int, unsigned char>, VecOp = cv::cpu_baseline::SymmColumnVec_32s8u]", "thresh", "%s: Bad field type %d for \"%s\"", "textureThreshold", "SoftmaxWithLoss", "bn_%d", "F^IGJKKMMOPPTPWOYMZK[G IGJJKLMNPOTOWNYLZJ[G PONPMQLSLVMXOZQ[S[UZWXXVXSWQVPTO PPNQMSMVNY VYWVWSVQTP", "Bad code word at line %u of %s %u (x %u)", "output.isContinuous()", "I\\XMXb XPVNTMQMONMPLSLUMXOZQ[T[VZXX", "total() == 0 || data != NULL", "sizes[j]", "G]PFNGLIKKJNJSKVLXNZP[T[VZXXYVZSZNYKXIVGTFPF QGNHLKKNKSLVNYQZSZVYXVYSYNXKVHSGQG SXX]Y] SXTXY]", "!fixedSize() || ((cuda::HostMem*)obj)->size() == _sz", "labelsmat.isContinuous()", "distType == CV_DIST_C || distType == CV_DIST_L1 || distType == CV_DIST_L2", "Unknown kernel type", "H\\RFJ[ RFZ[ RIY[ KZYZ J[Z[", "F^RJR[ JRZR J[Z[", "video::buildOpticalFlowPyramid_12()", "NSt6__ndk114default_deleteIN2cv3dnn14ReorgLayerImplEEE", "moments", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn18BatchNormLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "\"abc_action_bar_home_description\" : \"Navigate home\"", "N12opencv_caffe18DummyDataParameterE", "long long", "int cv::getNearestPoint(const std::vector<Point2f> &, float)", "/home/vagrant/build/srclib/opencv/modules/imgcodecs/src/loadsave.cpp", "k == STD_VECTOR_MAT || k == STD_ARRAY_MAT", "TIFFFillStrip", "virtual void cv::MatOp_AddEx::abs(const cv::MatExpr &, cv::MatExpr &) const", "Rotation must be represented by 1x3 or 3x1 floating-point rotation vector, or 3x3 rotation matrix", "NSt6__ndk120__codecvt_utf8_utf16IDsEE", "FATAL", "Mat::n_1reshape__JII()", "Power", " is NULL", "inputs[0].dims", "Files with optimize_for = LITE_RUNTIME cannot define services unless you set both options cc_generic_services and java_generic_sevices to false.", "void cv::dnn::dnn4_v20190122::Net::connect(cv::String, cv::String)", "invalid ICC profile color space", "cvGoodFeaturesToTrack", "tensor.has_shape()", "virtual void cv::opt_AVX2::(anonymous namespace)::ColumnSum<int, short>::operator()(const uchar **, uchar *, int, int, int)", "imgproc::ellipse_16()", "AddBool", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_19SqrRowSumIddEENS_9allocatorIS5_EEEE", "E_MFK[ NFLY UFK[ UFS[ VFTY ]FS[ JFQF ZF`F", "\"abc_action_mode_done\" : \"\u0414\u0430\u0439\u044b\u043d\"", "std::basic_string", "core::batchDistance_15()", "setLayerSizes", "NSt6__ndk120__shared_ptr_emplaceIN2cv17GFTTDetector_ImplENS_9allocatorIS2_EEEE", "imgproc::detect_13()", "gray-alpha color-map: too few entries", "void cv::hal::cpu_baseline::max64f(const double *, size_t, const double *, size_t, double *, size_t, int, int)", "video::getVariationalRefinementDelta_10()", "cvGraphRemoveEdgeByPtr", "OpenCV(%s) %s:%d: error: (%d:%s) %s%s", "  path: ", "scalarParams.has(\"k\")", "\"abc_action_menu_overflow_description\" : \"\u06af\u0632\u06cc\u0646\u0647\u200c\u0647\u0627\u06cc \u0628\u06cc\u0634\u062a\u0631\"", "outputs[0].size[1] % ngroups == 0", "\" to image attribute \"", "Arguments not in valid range.", "type == B.type()", "?m1type == CV_16SC2 || m1type == CV_32FC1 || m1type == CV_32FC2", "J[XPXOWOWQYQYOXNUMRMONNONQOSQTTUVVWX ONNQ ORQSTTVU WVVZ NOOQQRTSVTWVWXVZS[P[MZLYLWNWNYMYMX", "MXRMPNOPOSPURVSVUUVSVPUNSMRM QQTR TQQR", "PredictorDecodeTile", "void cv::hal::cpu_baseline::recip16s(const short *, size_t, short *, size_t, int, int, const double *)", "src0_z", "multinomial_logistic_loss", "G]LML[ MMM[ WMW[ XMX[ IMPM TM[M I[[[[`Z[", "F^RBR[ I[[[", ": out of range", "-Y %d +X %d", "virtual void cv::cpu_baseline::SymmColumnFilter<cv::cpu_baseline::Cast<double, double>, cv::cpu_baseline::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::Cast<double, double>, VecOp = cv::cpu_baseline::ColumnNoVec]", "dnn::blobFromImages_16()", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphFilter<cv::cpu_baseline::(anonymous namespace)::MinOp<unsigned char>, cv::cpu_baseline::(anonymous namespace)::MorphVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_uint8x16> > >::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MinOp<unsigned char>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_uint8x16> >]", "J[NKNUOWQXTXVWWUWK OKOUPWQX LKQK UKYK", "Copyright", "void cv::hal::cmp8s(const schar *, size_t, const schar *, size_t, uchar *, size_t, int, int, void *)", "transform", "decomposeEssentialMat", "virtual void cv::opt_AVX2::ColumnFilter<cv::opt_AVX2::Cast<double, short>, cv::opt_AVX2::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::Cast<double, short>, VecOp = cv::opt_AVX2::ColumnNoVec]", "int cv::predictOrderedStump(cv::CascadeClassifierImpl &, Ptr<cv::FeatureEvaluator> &, double &) [FEval = cv::HaarEvaluator]", "\"search_menu_title\" : \"\u641c\u7d22\"", "SubjectArea", "val > 0", "F]NMNQMWLZK[ WMW[ XMX[ KM[M I[H`H[[[[`Z[", "features2d::match_11()", "JZTFRGQHQIRJUKXK UKRLPMOOOQQSTTVT TTPUNVMXMZO\\S^T_TaRbPb", "png_image_read: out of memory", "NSt6__ndk123__future_error_categoryE", "merge", "G\\HQIOKMNMONOQMWMYO[ MMNNNQLWLYMZO[Q[SZUXWT ZMV[U^SaPbMbKaJ`J_K^L_K` YMU[T^RaPb", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_8RGB2GrayIfEEEE", "\"abc_activity_chooser_view_see_all\" : \"\u0b8e\u0bb2\u0bcd\u0bb2\u0bbe\u0bae\u0bcd \u0b95\u0bbe\u0b9f\u0bcd\u0b9f\u0bc1\"", "Non-positive or too large number of dimensions", "index", "Type appears to be in generated pool but wasn't ", "brow0", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphColumnFilter<cv::opt_AVX2::(anonymous namespace)::MinOp<short>, cv::opt_AVX2::(anonymous namespace)::MorphColumnVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_int16x16> > >::operator()(const uchar **, uchar *, int, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MinOp<short>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphColumnVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_int16x16> >]", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12ColumnFilterINS2_4CastIfhEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "Internal error, unknown tag %s", "NSt6__ndk120__shared_ptr_emplaceIN2cv9BFMatcherENS_9allocatorIS2_EEEE", "N3Iex11El2nsyncExcE", "features2d::getScaleFactor_10()", "var_all", "N2cv10opt_SSE4_18Filter2DIhNS0_4CastIddEENS0_11FilterNoVecEEE", "N2cv3dnn14dnn4_v2019012212PoolingLayerE", "N3Imf14TypedAttributeIN5Imath4Vec3IiEEEE", "E_RIR[ IR[R", "mulTransposed", "TIFFTileSize", "virtual int cv::flann::Index::radiusSearch(cv::InputArray, cv::OutputArray, cv::OutputArray, double, int, const cv::flann::SearchParams &)", "minEnclosingCircle", "void cv::hal::add32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, void *)", "core::completeSymm_11()", "edge != 0", "img.cols == imgLabels.cols", "calib3d::stereoRectify_14()", "weightsBlob.isContinuous()", "void cv::FAST(cv::InputArray, std::vector<KeyPoint> &, int, bool, FastFeatureDetector::DetectorType)", "ml::getTestSampleWeights_10()", "maxval", "N2cv8opt_AVX212ColumnFilterINS0_4CastIffEENS0_17SymmColumnVec_32fEEE", "imgproc::getStructuringElement_10()", "calib3d::fisheye_1stereoCalibrate_12()", "void cv::hal::recip64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, void *)", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_11Gray2RGB5x5EEE", "\"abc_capital_off\" : \"ISKLJU\u010cI\"", "\"abc_searchview_description_query\" : \"S\u00f8geforesp\u00f8rgsel\"", "\"abc_capital_on\" : \"ZAPNUTO\"", "\"abc_capital_on\" : \"\u0544\u053b\u0531\u0551\u054e\u0531\u053e\"", "unsigned", "ml::train_10()", "cvCalcBayesianProb", "_contours.empty() || (_contours.channels() == 2 && _contours.depth() == CV_32S)", "VDcn::contains(dcn)", "degenerate basis", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_9HSV2RGB_fEEE", "Odd-size DCT's are not implemented", "core::add_12()", "nsrc > 0 && ndst > 0", "N2cv3hal10opt_SSE4_112_GLOBAL__N_119YUV422toRGB8InvokerILi0ELi0ELi0ELi3EEE", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/color_yuv.dispatch.cpp", "varianceParameterRetrieved", "\"abc_font_family_caption_material\" : \"sans-serif\"", "H\\NRMQLRMSNR VRWQXRWSVR", "LogLuvEncode32", "NSt6__ndk117__assoc_sub_stateE", "height_scale", "MXWFUGTHSJSLTMUMVLVKUJTJ UGTITJ TKTLULUKTK", "void cv::divide(cv::InputArray, cv::InputArray, cv::OutputArray, double, int)", "Invalid filter method in IHDR", "readFromModelOptimizer", "N2cv8opt_AVX212_GLOBAL__N_111MorphFilterINS1_5MinOpIfEENS1_8MorphVecINS1_4VMinINS_8hal_AVX211v_float32x8EEEEEEE", "EstimateUncertainties", "globalDescIdx < size()", "photo::stylization_10()", "%s: Can not read TIFF directory count", "PUSMRORQSQSPRP", "ReadNetParamsFromBinaryBufferOrDie", "void cv::opt_SSE4_1::(anonymous namespace)::medianBlur_SortNet(const cv::Mat &, cv::Mat &, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MinMax16s, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MinMaxVec16s]", "/home/vagrant/build/srclib/opencv/modules/features2d/src/gftt.cpp", "\"abc_shareactionprovider_share_with\" : \"\u12a8\u121a\u12a8\u1270\u1208\u12cd \u130b\u122d \u12eb\u130b\u1229\"", "virtual void cv::cpu_baseline::(anonymous namespace)::ColumnSum<double, short>::operator()(const uchar **, uchar *, int, int, int) [ST = double, T = short]", "LSH index does not support radiusSearch operation", "\"abc_toolbar_collapse_description\" : \"\u0c15\u0c41\u0c26\u0c3f\u0c02\u0c1a\u0c02\u0c21\u0c3f\"", "KZRKRX SKSX NKMOMKXKXOWK PXUX", "/home/vagrant/build/srclib/opencv/modules/ml/src/em.cpp", "NOT_FOUND", "RGBE write error", "objdetect::detectAndDecode_12()", "\"abc_searchview_description_clear\" : \"Garbitu kontsulta\"", "Options could not be fully parsed using the proto descriptors compiled into this binary. Missing required fields: ", "int cv::opt_SSE4_1::(anonymous namespace)::MorphVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_uint8x16> >::operator()(uchar **, int, uchar *, int) const [VecUpdate = cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_uint8x16>]", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX216SymmColumnFilterINS2_4CastIftEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "!_objectPoints.empty() && _objectPoints.type() == CV_64FC3", "cvSmooth", "cv::Mat cv::internal::ComputeHomography(cv::Mat, cv::Mat)", "invalid unit", "void cv::hal::opt_AVX2::mul16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, const double *)", "src.isContinuous() && dst.isContinuous()", "__itt_thr_name_set", "writeRawData", "isString()", "/usr/local/google/buildbot/src/android/ndk-release-r16/external/libcxx/../../external/libcxxabi/src/abort_message.cpp", "NVRVQWRXSWRV", "\"abc_action_menu_overflow_description\" : \"Izinketho eziningi\"", "bool cv::clipLine(cv::Size2l, cv::Point2l &, cv::Point2l &)", "LIBTIFF_JPEG_MAX_ALLOWED_SCAN_NUMBER", "u != 0 && v != 0", "\"abc_action_bar_home_description\" : \"Navigasi skrin utama\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline16SymmColumnFilterINS2_4CastIisEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "cvSum", "void cv::hal::opt_SSE4_1::add16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int)", "total(outTailShape) == numOut", "imgproc::boxPoints_10()", "calib3d::correctMatches_10()", " obj=NULL", "!lmap.empty()", "weights upgrade this and any other net protos to the new format.", "png_image_finish_read: image too large", "StridedSlice", "MVOMOV OMUM OQSQ", "svm_type", "N2cv8opt_AVX28Filter2DIfNS0_4CastIffEENS0_13FilterVec_32fEEE", "photo::setCut_10()", "N6google8protobuf8internal33RandomAccessRepeatedFieldAccessorE", "Ptr<cv::BaseColumnFilter> cv::opt_AVX2::getLinearColumnFilter(int, int, const cv::Mat &, int, int, double, int)", "data.rows <= evects.rows", "TIFFPredictorInit", "images[j].size() == imsize && images[j].depth() == depth", "K[YOQOOPNQMSMUNWPXRXTWUVVTVRUPYP QOOQNSNVPX RXTVUTUQSO", "N2cv8opt_AVX28Filter2DIsNS0_4CastIddEENS0_11FilterNoVecEEE", "core::addWeighted_11()", "cvCreateFileCaptureWithPreference doesn't support legacy API anymore.", "F^RRR[Q\\ RVQ\\ RIQHOHNINKONRR RISHUHVIVKUNRR RRNOLNJNIOIQJR RRVOXNZN[O[QZR RRNULVJVIUISJR RRVUXVZV[U[SZR", "z4I5z", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphFilter<cv::opt_SSE4_1::(anonymous namespace)::MinOp<unsigned short>, cv::opt_SSE4_1::(anonymous namespace)::MorphVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_uint16x8> > >::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MinOp<unsigned short>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_uint16x8> >]", "Default value for an enum field must be an identifier.", "pixels.", "vector<cv::Vec3d> cv::QRDetect::searchHorizontalLines()", "L[LVNRMWMZN[O[RZTXUUUR URVVWWYW[V", "unmap", "Unsupported number of channels! Only 1, 2, 3, and 4 are supported", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_116SymmColumnFilterINS2_4CastIdsEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "src.type() == CV_8UC1", "descriptors[0].type() == _descriptors.type()", "Video I/O: Can't release writer by plugin '", "/home/vagrant/build/srclib/opencv/modules/core/src/utils/filesystem.cpp", "Attempting to upgrade input file specified using deprecated ", "BaseConvolutionLayerImpl", "Extension numbers cannot be greater than $0.", "\"abc_activity_chooser_view_see_all\" : \"\uc804\uccb4 \ubcf4\uae30\"", "right_val", "cannot retrieve contour", "Huffman code size table overflow", "void cv::bitwise_not(cv::InputArray, cv::OutputArray, cv::InputArray)", "cvCloneGraph", "\"abc_activitychooserview_choose_application\" : \"Selecione um app\"", "Unsupported color conversion request", "CbHFH[ IFI[ EFLF E[L[ VFSGQIPKOOORPVQXSZV[X[[Z]X^V_R_O^K]I[GXFVF VFTGRIQKPOPRQVRXTZV[ X[ZZ\\X]V^R^O]K\\IZGXF IPOP", "photo::getIntensity_10()", "N2cv8opt_AVX212ColumnFilterINS0_4CastIftEENS0_11ColumnNoVecEEE", "~`~B~~~!~", "\"abc_activity_chooser_view_see_all\" : \"\u0938\u0930\u094d\u0935 \u092a\u0939\u093e\"", "MWRORU OPUT UPOT", "borderType != BORDER_CONSTANT", "OpenCV TIFF: failed TIFFSetField(tif, TIFFTAG_SGILOGDATAFMT, SGILOGDATAFMT_FLOAT)", "CL_MEM_OBJECT_ALLOCATION_FAILURE", "\"abc_capital_off\" : \"O\u2018CHIQ\"", "The arrays must have equal number of columns (which is number of dimensions but 1)", "PriorBoxClustered", "LEAKYRELU", "RGB2Lab_b", "] not found", "cv::Point2d cv::phaseCorrelate(cv::InputArray, cv::InputArray, cv::InputArray, double *)", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphRowFilter<cv::opt_AVX2::(anonymous namespace)::MinOp<unsigned char>, cv::opt_AVX2::(anonymous namespace)::MorphRowVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_uint8x32> > >::operator()(const uchar *, uchar *, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MinOp<unsigned char>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphRowVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_uint8x32> >]", "N3Imf14TypedAttributeIfEE", "void cv::hal::opt_AVX::sqrt64f(const double *, double *, int)", "F_\\MZMXNWPUVTXSYQZMZKYJWJUKSLRQOSMTKTISGQFPFNGMIMKNNPQUWXZZ[\\[ \\M\\NZNWP ZMXPVVUXSZQ[M[KZJYIWIUJSLQQNRMSKSIRG SHQGPGNH OGNINKONQQVWXYZZ\\Z\\[", "OpenCV(%s) Error: %s (%s) in %s, file %s, line %d", "preferableBackend != DNN_BACKEND_INFERENCE_ENGINE || preferableTarget == DNN_TARGET_CPU || preferableTarget == DNN_TARGET_OPENCL || preferableTarget == DNN_TARGET_OPENCL_FP16 || preferableTarget == DNN_TARGET_MYRIAD || preferableTarget == DNN_TARGET_FPGA", "Map element should have a name", "__itt_frame_create", "cvChangeSeqBlock", "N2cv3hal8opt_AVX212_GLOBAL__N_119YUV422toRGB8InvokerILi2ELi0ELi0ELi4EEE", "0 < cn && cn <= CV_CN_MAX", "photo::fastNlMeansDenoisingColoredMulti_12()", "NSt6__ndk114default_deleteIN2cv3dnn24DetectionOutputLayerImplEEE", "use_peephole", "COI set is not allowed here", "total > 0", "void cv::hal::cpu_baseline::min16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int)", "writeComponent16u", "indices.type() == CV_32SC1", "Instrinsic parameters must be 3x3 floating-point matrix", "convertToD3D10Texture2D", "1.6.36", "blobs[0].dims == 4 && blobs[0].size[3] == kernel.width && blobs[0].size[2] == kernel.height", "func != 0", "trees", "F_OFIZ OFV[ PFVX QFWX \\GWXV[ LFQF YF_F F[L[ MFPG NFPH ZF\\G ^F\\G IZG[ IZK[", "cvGetDiag", "imgproc::pyrUp_11()", "mini_batch_gradient_descent", "Tried to write more scan lines than specified by the data window.", "N2cv8opt_AVX216SymmColumnFilterINS0_4CastIdtEENS0_11ColumnNoVecEEE", "imgcodecs::imdecode_10()", "makeOffsets", "F^JFN[ KFNV RFN[ RFV[ SFVV ZFV[ GFNF WF]F", "no object", "N6google8protobuf8internal20RepeatedFieldWrapperIjEE", "KYVSUPSOQOOPNQMSMUNWPXRXTWUVVTWQWNVLTKQKPLQLRK QOOQNSNVPX RXTVUTVQVNULTK", "core::max_11()", "\"abc_searchview_description_query\" : \"Upit za pretragu\"", "writer", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::RGB2Gray<ushort> >::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::RGB2Gray<ushort>]", "PURQRRSRSQRQ", "cvNextTreeNode", "cvCalcMatMulDeriv", "Expected input, scale, bias, mean and var", "SymmColumnSmallVec_32s16s", "ZIPVSetField", "imgproc::spatialGradient_12()", "recursive_timed_mutex lock limit reached", "H\\JFR[ KFRX LFSX JFZFR[ LGYG LHYH", "double", "unsupported type", "stereoRectify", "std::iostream", "CL_INVALID_DEVICE", "\"abc_shareactionprovider_share_with_application\" : \"%s ile payla\u015f\"", "OUT_OF_RANGE", "run8Point", "vdSinCos", "void cv::hal::opt_AVX2::sub16s(const short *, size_t, const short *, size_t, short *, size_t, int, int)", "void cv::hal::opt_AVX2::addWeighted32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, const double *)", "srcA.size() == dst.size() && srcA.type() == dst.type()", "void cv::dnn::dnn4_v20190122::initializeLayerFactory()", "N2cv3dnn14dnn4_v2019012223UpsamplingKerasSubgraphE", "false", "estimatePose", "Ignoring attempt to write 16-bit tRNS chunk when bit_depth is 8", "N2cv10opt_SSE4_112_GLOBAL__N_114MorphRowFilterINS1_5MinOpItEENS1_11MorphRowVecINS1_4VMinINS_10hal_SSE4_110v_uint16x8EEEEEEE", "queryIdx == (int)i", "OUPKQLRNROQQSRQSRURVQXPY", "JFIF extension marker: palette thumbnail image, length %u", "H]OKOJPJPLNLNJOHPGSFVFYGZIZKYMWOMUKWI[ XGYIYKXMVOSQ VFWGXIXKWMUOMU JYKXMXRYWYXX MXRZWZ MXR[U[WZXXXW", "Ptr<cv::BaseFilter> cv::cpu_baseline::getMorphologyFilter(int, int, const cv::Mat &, cv::Point)", "N2cv8opt_AVX212_GLOBAL__N_114MorphRowFilterINS1_5MinOpItEENS1_11MorphRowVecINS1_4VMinINS_8hal_AVX211v_uint16x16EEEEEEE", "    Component %d: dc=%d ac=%d", "G]_BEb", "\"abc_activity_chooser_view_see_all\" : \"\u1021\u102c\u1038\u101c\u102f\u1036\u1038\u1000\u102d\u102f \u1000\u103c\u100a\u1037\u103a\u101b\u1014\u103a\"", "tree pruning using cross-validation is not implemented.Set CVFolds to 1", "imgproc::drawContours_15()", "convertMatches", "void cv::randu(cv::InputOutputArray, cv::InputArray, cv::InputArray)", "calib3d::compute_10()", "phaseCorrelate", "readNet", "\"abc_searchview_description_clear\" : \"Izbri\u0161i upit\"", "group", "dnn::getParam_11()", "INPUT ", "net.node(maximumLayerIdx).input_size() == 2", "N2cv12cpu_baseline16SymmColumnFilterINS0_4CastIddEENS0_11ColumnNoVecEEE", "F]OFI[ PFJ[ LFUFXGYHZKZOYSWWUYSZO[F[ UFWGXHYKYOXSVWTYRZO[", "operator&=", "NSt6__ndk114collate_bynameIcEE", "calc_rho_func != 0", "searchParams", "G]IFPPQQ JFQP KFRPI[ IFYFZLYIWF VFYH TFYG KYYY JZYZ I[Y[ZUYXWY", "Sorry, can not handle images with IEEE floating-point samples", "medianPartition", "ml::getSupportVectors_10()", "PFvPN2cv13Jpeg2KDecoderEE", "variance", "N6google8protobuf2io17ArrayOutputStreamE", "void cv::hal::cvt32f16f(const float *, cv::float16_t *, int)", "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", "N6google8protobuf8internal16FunctionClosure1IPKNS0_20FileDescriptorTablesEEE", "I[KFRPK[ KFYF K[Y[", "sAmTb", " [default = $0", "Scan number %d exceeds maximum scans (%d). This limit can be raised through the LIBTIFF_JPEG_MAX_ALLOWED_SCAN_NUMBER environment variable.", "void cv::cpu_baseline::(anonymous namespace)::medianBlur_SortNet(const cv::Mat &, cv::Mat &, int) [Op = cv::cpu_baseline::(anonymous namespace)::MinMax16u, VecOp = cv::cpu_baseline::(anonymous namespace)::MinMaxVec16u]", "core::getIppVersion_10()", ".AgastFeatureDetector", "G\\LMLb MMMb MPONQMSMVNXPYSYUXXVZS[Q[OZMX SMUNWPXSXUWXUZS[ IMMM IbPb", "params.has(\"paddings\")", "LXNPVP NTVT", "qMin.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "imgproc::Laplacian_12()", "BruteForce-L1", "\"abc_action_bar_home_description\" : \"Navegar a la p\u00e1gina principal\"", "clusterTrainSamples", "blendLinear", "D`D``D", "H[LMLb LPNNPMSMUNWPXSXUWXUZS[P[NZLX", "offset_y", "imread_('", "32TegraCvtColor_bgrx2ycrcb_Invoker", "N2cv12cpu_baseline12_GLOBAL__N_114MorphRowFilterINS1_5MaxOpItEENS1_11MorphRowVecINS1_4VMaxINS_12hal_baseline10v_uint16x8EEEEEEE", "wrong submessage type", "F^KFK[ LFL[ XFX[ YFY[ HF\\F H[O[ U[\\[", "calib3d::projectPoints_11()", "NSt6__ndk120__shared_ptr_pointerIP11AMediaCodecPFvS2_ENS_9allocatorIS1_EEEE", "Reshape", "N2cv10JSONParserE", "createSeparableLinearFilter", "void cv::calcHist(cv::InputArrayOfArrays, const std::vector<int> &, cv::InputArray, cv::OutputArray, const std::vector<int> &, const std::vector<float> &, bool)", "__itt_sync_destroy", "top_count", "/usr/local/google/buildbot/src/android/ndk-release-r16/external/libcxx/../../external/libunwind_llvm/src/Registers.hpp", "Input sequence must be polygon (closed 2d curve)", "N6google8protobuf7ClosureE", "unmapGLBuffer", "decodeFormat", "KZMVNXQXMRMONMOLQKTKVLWMXOXRTXWXXV OUNRNOOMQK TKVMWOWRVU NWPW UWWW", "/home/vagrant/build/srclib/opencv/modules/calib3d/src/homography_decomp.cpp", "IPP:ippFilter2D(stype, dtype, kernel_type, src_data, src_step, dst_data, dst_step, width, height, full_width, full_height, offset_x, offset_y, kernel_data, kernel_step, kernel_width, kernel_height, anchor_x, anchor_y, delta, borderType, isSubmatrix)", "Saving unknown chunk:", "N2cv8opt_AVX212_GLOBAL__N_111MorphFilterINS1_5MaxOpIhEENS1_8MorphVecINS1_4VMaxINS_8hal_AVX210v_uint8x32EEEEEEE", "N2cv8opt_AVX212_GLOBAL__N_117MorphColumnFilterINS1_5MaxOpIhEENS1_14MorphColumnVecINS1_4VMaxINS_8hal_AVX210v_uint8x32EEEEEEE", "Constructor of backend wrapper must be implemented", "=N2cv12cpu_baseline12_GLOBAL__N_118fixedSmoothInvokerIhNS_12_GLOBAL__N_113ufixedpoint16EEE", "Bad type of mask argument", "getLinearColumnFilter", "J[VFVVUYSZQZOYNVMV VFWFWVVYUZS[Q[OZNYMV", "I\\MMM[ MQPNRMUMWNXQX[", "ml::setIterations_10()", "F^SKTLTM ULSKPKNLMMLOIYH[G\\ PKNMMOJYI[G\\E\\E[F\\ ZK[L\\L\\KWKUL TMSOPYO[N\\ WKUMTOQYP[N\\L\\L[M\\ ZOXVXWYX[X\\W]U [OYVYWZX IO[O", "void cv::hal::cpu_baseline::cvtMultipliedRGBAtoRGBA(const uchar *, size_t, uchar *, size_t, int, int)", "LYUFTGUHVGUF MQNOPMSMTNTQRWRZS[ RMSNSQQWQZR[U[WYXW", "node_proto.input_size() == 2 || layerParams.has(\"shape\")", "outBlob=", "void cv::compare(cv::InputArray, cv::InputArray, cv::OutputArray, int)", "N6google8protobuf16RepeatedPtrFieldINSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE", "\"abc_action_bar_home_description_format\" : \"\u201e%1$s\u201c \u2013 %2$s\"", "src.dims == 2 && info.height == (uint32_t)src.rows && info.width == (uint32_t)src.cols", "N7cvflann7anyimpl14big_any_policyINS_20flann_centers_init_tEEE", "ThunderDecodeRow", "PXM: Unexpected code in ReadNumber(): 0x%x (%d)", "KYK^YF", "ignoring out of range rgb_to_gray coefficients", "gamma parameter of the kernel must be positive", "~int cv::Subdiv2D::locate(cv::Point2f, int &, int &)", "\"dummy_button\" : \"Dummy Button\"", "core::norm_10()", "Mat::n_1colRange()", "ml::shuffleTrainTest_10()", "JZMNMQ WNWQ MNWN MOWO MPWP MQWQ", "LogLuvVSetField", "videoio::open_10()", "LZWSetupDecode", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/recurrent_layers.cpp", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_114MorphRowFilterINS3_5MaxOpIfEENS3_11MorphRowVecINS3_4VMaxINS1_8hal_AVX211v_float32x8EEEEEEENS_9allocatorISD_EEEE", "N6google8protobuf8internal8MapEntryIN17opencv_tensorflow31NameAttrList_AttrEntry_DoNotUseENSt6__ndk112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSE_11ELi0EEE", "Radiance HDR (*.hdr;*.pic)", "'}' - right-brace of map is missing", "calib3d::solvePnPRansac_11()", "An attempt to add element without a key to a map, or add element with key to sequence", "Expected 1 or 3 channel image.", "N2cv12cpu_baseline8Filter2DIhNS0_4CastIftEENS0_11FilterNoVecEEE", "ReadTFNetParamsFromBinaryBufferOrDie", "plugin_api->Capture_release", "structure", "^@virtual void cv::detail::LKTrackerInvoker::operator()(const cv::Range &) const", "__itt_counter_create_typed", "N3Iex11EmsgsizeExcE", "N2cv23HomographyDecomposition21HomographyDecompInriaE", "void cv::dnn::dnn4_v20190122::Net::getMemoryConsumption(const std::vector<MatShape> &, std::vector<int> &, std::vector<size_t> &, std::vector<size_t> &) const", "fabs(norm_u1) > 0", "int cv::opt_SSE4_1::FilterEngine__start(cv::FilterEngine &, const cv::Size &, const cv::Size &, const cv::Point &)", "void cv::cpu_baseline::cvt32f8s(const float *, size_t, uchar *, size_t, schar *, size_t, cv::Size, void *)", "MWSMSV SMNSVS", "F^QFQ[ RGRZ SFS[ NFVF N[V[ OFQG PFQH TFSH UFSG QZO[ QYP[ SYT[ SZU[ HMIMJNKQLSMTPUTUWTXSYQZN[M\\M LRKNJLILKN HMIKJKKLLPMSNTPU YN[LZLYNXR TUVTWSXPYLZK[K\\M", "Premature end-of-partition0 encountered.", "N2cv8RHO_HESTE", "The number of points in the view #%d is < 4", "STRIDE_H", "MXVPUSTURVPUOSPQRPTQUUVV", "\"abc_shareactionprovider_share_with_application\" : \"\u0410\u0431\u0430\u0433\u0443\u043b\u0456\u0446\u044c \u0437 %s\"", "Bogus DAC index %d", "imgproc::intersectConvexConvex_11()", "operator new", "\"search_menu_title\" : \"\u0936\u094b\u0927\u093e\"", "Unrecognized method id", "TIFFWriteRawStrip", "Number of proj points coordinates must be == 2", "Value must be number for float option \"", "MWOMOV OMSMUNUPSQ OQSQURUUSVOV", "findInliers", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphFilter<cv::opt_SSE4_1::(anonymous namespace)::MinOp<short>, cv::opt_SSE4_1::(anonymous namespace)::MorphVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_int16x8> > >::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MinOp<short>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_int16x8> >]", "\"abc_action_bar_up_description\" : \"Krmarjenje navzgor\"", "int(feature_maps.size())", "_flow0.size() == prev0.size() && _flow0.channels() == 2 && _flow0.depth() == CV_32F", "p && d < (int)p->devices.size()", "KZUFUWTZR[P[NZMXMVNUOVNW TFTWSZR[ QFXF", "imgproc::fitLine_10()", "input_buffer", "m_buf.total()", "H\\MFLO NGMN MFWFWG NGWG MNPMSMVNXPYSYUXXVZS[P[MZLYKWLW LOMOONSNVOXR TNWPXSXUWXTZ XVVYSZPZMYLW OZLX", "void cv::hal::cpu_baseline::absdiff64f(const double *, size_t, const double *, size_t, double *, size_t, int, int)", "void cv::rectangle(cv::InputOutputArray, cv::Point, cv::Point, const cv::Scalar &, int, int, int)", "photo::textureFlattening_12()", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_117MorphColumnFilterINS3_5MinOpIsEENS3_14MorphColumnVecINS3_4VMinINS1_10hal_SSE4_19v_int16x8EEEEEEENS_9allocatorISD_EEEE", "indices.size=", "typeSymbol", "dnn::getUnconnectedOutLayersNames_10()", "../../../../modules/core/include/opencv2/core/persistence.hpp", "LYNKNO VMRTPX WKTQQX NMPKRKUM NMPLRLUMVM", " conflicts with an existing nested message type.", "scale must be positive", "Yolo9000 is not implemented", "src4.isMat() || src4.isUMat()", "D`DOGQKSPTTTYS]Q`O", "void cv::opt_SSE4_1::medianBlur(const cv::Mat &, cv::Mat &, int)", "cv::impl::(anonymous namespace)::CvtHelper<cv::impl::(anonymous namespace)::Set<3, 4, -1>, cv::impl::(anonymous namespace)::Set<1, -1, -1>, cv::impl::(anonymous namespace)::Set<0, -1, -1>, cv::impl::(anonymous namespace)::SizePolicy::TO_YUV>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::impl::(anonymous namespace)::Set<3, 4, -1>, VDcn = cv::impl::(anonymous namespace)::Set<1, -1, -1>, VDepth = cv::impl::(anonymous namespace)::Set<0, -1, -1>, sizePolicy = cv::impl::(anonymous namespace)::SizePolicy::TO_YUV]", "ippIP AVX-512F/CD/BW/DQ/VL (k0)", "N2cv8opt_AVX212_GLOBAL__N_19ColumnSumIihEE", "F^NMLNJPISIWJYKZM[O[QZRYSWSTRSQTQWRYSZU[W[YZZY[W[SZPXNVM KPJSJWKY RTRX YYZWZSYP NMLOKRKWLZM[ W[XZYWYRXOVM", "ml::getTrainResponses_10()", "ippIP SSE4.2 (y8)", "LYRQQPOPNQNSOTQTRSSQTPVPWQWSVTTTSSRQ", "JYNKNX OKOX LKSKVLWNWOVQSROR SKULVNVOUQSR LXVXVUUX", "\"abc_action_bar_home_description_format\" : \"%1$s\uff1a%2$s\"", "basic_string::erase", "void cv::cpu_baseline::cvt16s8s(const short *, size_t, uchar *, size_t, schar *, size_t, cv::Size, void *)", "Layer \"", "objdetect::setEpsX_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv11JpegDecoderENS_9allocatorIS2_EEEE", "void cv::opt_AVX2::cvt64f32s(const double *, size_t, uchar *, size_t, int *, size_t, cv::Size, void *)", "E_IR[R", "fabs(scale) > DBL_EPSILON", "N2cv12cpu_baseline12_GLOBAL__N_19ColumnSumIdhEE", "/home/vagrant/build/srclib/opencv/modules/core/src/arithm_ipp.hpp", "Unknown approximation method", "thread-local wrapper routine for ", "Merging Predictor codec-specific tags failed", "MergeRobertson", "IPP:ipp_insertChannel(src, dst, coi)", "unable to remove temporary file:", "virtual void cv::dnn::NormalizeBBoxLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "sse42", " empty()=true", "NSt13__future_base12_Result_baseE", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::XYZ2RGB_i<ushort> >::operator()(const cv::Range &) const [Cvt = cv::XYZ2RGB_i<ushort>]", "OpenCV TIFF: failed TIFFSetField(tif, TIFFTAG_IMAGELENGTH, height)", "calib3d::getMode_10()", "void cv::batchDistance(cv::InputArray, cv::InputArray, cv::OutputArray, int, cv::OutputArray, int, int, cv::InputArray, int, bool)", "@evolution_.size() > 0", "photo::fastNlMeansDenoising_13()", "H\\NMJ[ OMK[ XMYNZNYMWMUNQROSMS OSQTSZT[ OSPTRZS[U[WZYW", "slice_point", "sortIdx_", "calib3d::fisheye_1distortPoints_11()", "N6google8protobuf8internal30RepeatedPtrFieldStringAccessorE", "currpos > 4", "AddFloat", "!locPredTransposed", "read_img.type()", "imgproc::accumulate_11()", "N2cv2ml9BoostImplE", "N3Iex8ErofsExcE", "operation", "endAxis >= startAxis && endAxis < (int)numAxes", "ml::getVarType_10()", "JPEG strip/tile size exceeds expected dimensions, expected %dx%d, got %dx%d", "__itt_model_clear_uses", "length does not match profile", "virtual void cv::cpu_baseline::RowFilter<float, float, cv::cpu_baseline::RowVec_32f>::operator()(const uchar *, uchar *, int, int) [ST = float, DT = float, VecOp = cv::cpu_baseline::RowVec_32f]", "strips", "Invalid key for map field.", "sp.type() == FileNode::SEQ", "PNG_TRANSFORM_STRIP_FILLER: BEFORE+AFTER not supported", "photo::fastNlMeansDenoisingMulti_10()", "CHECK failed: !name_: ", "\"abc_capital_off\" : \"\u0418\u0414\u042d\u0412\u0425\u0413\u04ae\u0419\"", "\"abc_shareactionprovider_share_with\" : \"\u10d2\u10d0\u10d6\u10d8\u10d0\u10e0\u10d4\u10d1\u10d0:\"", "GLSL.std.450", "_prepareImage", "\" is not a proto3 enum, but is used in \"", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_19ColumnSumIiiEENS_9allocatorIS5_EEEE", "MXVNTMRMPNOPOSPURVTVVUVR SRVR", "output buffers changed", "virtual void cv::opt_AVX2::(anonymous namespace)::BilateralFilter_8u_Invoker::operator()(const cv::Range &) const", "Unknown interpolation method", "Image too wide for this implementation", "Failed to initialize CIE L*a*b*->RGB conversion state.", "Argument not in valid range.", "Warning: unknown JFIF revision number %d.%02d", "\"abc_action_menu_overflow_description\" : \"\u03a0\u03b5\u03c1\u03b9\u03c3\u03c3\u03cc\u03c4\u03b5\u03c1\u03b5\u03c2 \u03b5\u03c0\u03b9\u03bb\u03bf\u03b3\u03ad\u03c2\"", "ml::setClassWeights_10()", "..Too many IDATs found", "void cv::BOWImgDescriptorExtractor::compute(cv::InputArray, std::vector<KeyPoint> &, cv::OutputArray, std::vector<std::vector<int> > *, cv::Mat *)", "ReadDirEntryArray", "biasvec.size() == (size_t)output.size[1]+2", "cHRM Green Z", "idx < scores.size()", "MWRHQGRFSGSIRKQL", "HoughLinesPointSet", "\"abc_shareactionprovider_share_with_application\" : \"Yabelana no-%s\"", "features2d::getVocabulary_10()", " !\"#$%&'()*+,-./0123", "Bogus \"StripByteCounts\" field, ignoring and calculating from imagelength", "Padding Layer takes a single blob as input.", "too many sPLT chunks", "H]ZH[H\\F[L[JZHYGWFTFQGOIMLLOKSKVLYMZP[S[UZWXXV TFRGPINLMOLSLVMYNZP[", "DetectionBasedTracker", "Image is too high to process with png_read_png()", "\"abc_action_bar_home_description\" : \"Ugr\u00e1s a f\u0151oldalra\"", "ConsecutiveBadFaxLines", "src1.size() == src4.size()", "photo::fastNlMeansDenoisingColored_12()", "photo::pencilSketch_13()", "virtual void cv::MergeRobertsonImpl::process(cv::InputArrayOfArrays, cv::OutputArray, cv::InputArray, cv::InputArray)", "Unknown array type", "Key should start with a letter or _", "N6google8protobuf8internal20RepeatedFieldWrapperIlEE", "OpenCV TIFF: failed TIFFSetField(tif, TIFFTAG_RESOLUTIONUNIT, resUnit)", "basic_shader_group_idx", "H[LVMYNZP[R[UZWWXTXQWOVNTMRMONMQLTHb R[TZVWWTWPVN RMPNNQMTIb", "void cv::hal::opt_AVX2::and8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "ml::trainE_10()", "cvReadChainPoint", "Unknown operation", "core::cartToPolar_11()", "virtual void cv::opt_AVX2::RowFilter<short, float, cv::opt_AVX2::RowVec_16s32f>::operator()(const uchar *, uchar *, int, int) [ST = short, DT = float, VecOp = cv::opt_AVX2::RowVec_16s32f]", "n >= 0 && (depth == CV_32F || depth == CV_32S)", "ml::trainE_14()", "N2cv16SunRasterDecoderE", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_17RGB2RGBIfEEEE", "/home/vagrant/build/srclib/opencv/modules/core/src/parallel.cpp", "N2cv16ReplacementDCT2DE", "MWOPOV OSPQRPTQUSUV", "\"abc_action_menu_overflow_description\" : \"\u010eal\u0161ie mo\u017enosti\"", "rgbe_error", "No space to register compression scheme %s", "N2cv8opt_AVX29RowFilterIhiNS0_21SymmRowSmallVec_8u32sEEE", "\" was already set.", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/io/tokenizer.cc", "\"search_menu_title\" : \"Ricerca\"", "features2d::radiusMatch_10()", "convertMaps", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2019012219L2NormalizeSubgraphEEE", "E_HIHL \\I\\L HI\\I HJ\\J HK\\K HL\\L", "(idx == -1 && ps->size() == 1) || (idx >= 0 && idx < (int)ps->size())", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphRowFilter<cv::opt_SSE4_1::(anonymous namespace)::MinOp<unsigned char>, cv::opt_SSE4_1::(anonymous namespace)::MorphRowVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_uint8x16> > >::operator()(const uchar *, uchar *, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MinOp<unsigned char>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphRowVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_uint8x16> >]", "Unknown parameter new_height for layer type ", "reduce", "PoolingLayerImpl", "void cv::SVBackSubst(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray)", "kernel_size (or kernel_h and kernel_w) not specified", "../../../../3rdparty/protobuf/src/google/protobuf/dynamic_message.h", "int cv::opt_SSE4_1::(anonymous namespace)::MorphRowVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_uint8x16> >::operator()(const uchar *, uchar *, int, int) const [VecUpdate = cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_uint8x16>]", "Cannot open image file \"", "imgproc::createLineSegmentDetector_16()", "int cv::cpu_baseline::(anonymous namespace)::MorphVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_uint8x16> >::operator()(uchar **, int, uchar *, int) const [VecUpdate = cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_uint8x16>]", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::YCrCb2RGB_i<uchar> >::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::YCrCb2RGB_i<uchar>]", "(depth == CV_32F || depth == CV_64F) && (src1.empty() || src1.type() == type)", "GetRepeatedInt64", "int cv::opt_AVX2::(anonymous namespace)::MorphRowVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_float32x8> >::operator()(const uchar *, uchar *, int, int) const [VecUpdate = cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_float32x8>]", "cv::Mat cv::findEssentialMat(cv::InputArray, cv::InputArray, cv::InputArray, int, double, double, cv::OutputArray)", "CL_INVALID_IMAGE_DESCRIPTOR", "\"search_menu_title\" : \"\u691c\u7d22\"", " size(-1)=%dx%d", "const cv::Mat &cv::KalmanFilter::predict(const cv::Mat &)", "RGB color space not permitted on grayscale PNG", "m_bpp is not supported", "__itt_model_reduction_uses", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14ConstLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "CV_16U", "/home/vagrant/build/srclib/opencv/modules/core/src/persistence.cpp", "video::create_15()", "\"abc_searchview_description_clear\" : \"\u0995\u09cd\u09af\u09cb\u09af\u09bc\u09be\u09b0\u09c0 \u09b8\u09be\u09ab \u0995\u09b0\u09c1\u09a8\"", "opencv_tensorflow.NodeDef.AttrEntry.key", "\"abc_searchview_description_voice\" : \"Hlasov\u00e9 vyh\u013ead\u00e1vanie\"", "dp/df must be 2Nx14, 2Nx12, 2Nx8, 2Nx5, 2Nx4 or 2Nx2 floating-point matrix", "\"abc_action_bar_up_description\" : \"Mag-navigate pataas\"", "void cv::opt_SSE4_1::GaussianBlurFixedPoint(const cv::Mat &, cv::Mat &, const uint16_t *, int, const uint16_t *, int, int)", "F]GQHOJMMMNNNPMTK[ LMMNMPLTJ[ MTOPQNSMUMWNXOXQVWVZW[ UMWOWQUWUZV[Y[[Y\\W", "src.size() == dst.size() && src.type() == dst.type()", "features2d::getMaxArea_10()", "std::vector<cv::KeyPoint> cv::details::Chessboard::getInitialPoints(cv::flann::Index &, const cv::Mat &, const cv::KeyPoint &, float, float, float) const", "params.empty() || params[0] == HDR_NONE || params[0] == HDR_RLE", ".GFTTDetector", "D.empty() || ((D.total() == 4) && (D.depth() == CV_32F || D.depth() == CV_64F))", "descriptors[i].cols == dim && descriptors[i].type() == type", "InkSet", "imgproc::distanceTransformWithLabels_10()", "ml::load_11()", "N2cv3dnn14ScaleLayerImplE", "27FastNlMeansDenoisingInvokerIhij7DistAbsiE", "\"abc_searchview_description_clear\" : \"\u0627\u0633\u062a\u0641\u0633\u0627\u0631 \u0635\u0627\u0641 \u06a9\u0631\u06cc\u06ba\"", "Negative value is illegal", "virtual void cv::cpu_baseline::SymmRowSmallFilter<unsigned char, int, cv::cpu_baseline::SymmRowSmallVec_8u32s>::operator()(const uchar *, uchar *, int, int) [ST = unsigned char, DT = int, VecOp = cv::cpu_baseline::SymmRowSmallVec_8u32s]", "virtual void cv::MergeDebevecImpl::process(cv::InputArrayOfArrays, cv::OutputArray, cv::InputArray)", "cHRM Green Y", "H\\VGWIXIWGTFRFOGMJLOLTMXOZR[S[VZXXYUYTXQVOSNRNOOMQ WHTGRGOH PGNJMOMTNXQZ MVOYRZSZVYXV TZWXXUXTWQTO XSVPSOROOPMS QONQMT", "virtual void cv::AlignMTBImpl::process(cv::InputArrayOfArrays, std::vector<Mat> &, cv::InputArray, cv::InputArray)", "wta_k == 2 || wta_k == 3 || wta_k == 4", "Number of points must be the same", "circle", "getMorphologyFilter", "int cv::Subdiv2D::insert(cv::Point2f)", "dnn::forward_12()", "\"abc_searchview_description_clear\" : \"\u0a95\u0acd\u0ab5\u0ac7\u0ab0\u0ac0 \u0ab8\u0abe\u0aab \u0a95\u0ab0\u0acb\"", "Number of elements in the original and reshaped array is different", "lo_diff and up_diff must be non-negative", "NSt6__ndk110__stdinbufIcEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_111MorphFilterINS3_5MaxOpIdEENS3_10MorphNoVecEEENS_9allocatorIS8_EEEE", "KYUARBPCNELHKLKRLUNWQXSXVWXUYR KPLMNKQJSJVKXMYPYVXZV]T_R`Oa", "calib3d::estimateAffine3D_11()", "bool cv::checkRange(cv::InputArray, bool, cv::Point *, double, double)", "N2cv3dnn14dnn4_v2019012213PriorBoxLayerE", "cvErode", "outPin.valid() && inpPin.valid()", "scalarParams.has(\"size\")", "int cv::predictCategoricalStump(cv::CascadeClassifierImpl &, Ptr<cv::FeatureEvaluator> &, double &) [FEval = cv::LBPEvaluator]", "cvSaveMemStoragePos", "MWOMUM PQTR TQPR OVUV", "The function supports dense histograms only", "<tag:yaml.org,2002:", "\"abc_capital_on\" : \"IMEWASHWA\"", "double cv::sampsonDistance(cv::InputArray, cv::InputArray, cv::InputArray)", "void cv::fillConvexPoly(cv::InputOutputArray, const cv::Point *, int, const cv::Scalar &, int, int)", "initUndistortRectifyMap", "cvSet1D", "cvCreateTrackbar2", "G]JTROZT JTRPZT", "/home/vagrant/build/srclib/opencv/modules/features2d/src/fast.cpp", "Compression scheme %u %s encoding is not implemented", "N2cv10opt_SSE4_18Filter2DIhNS0_4CastIfsEENS0_15FilterVec_8u16sEEE", "void cv::hal::opt_AVX2::cvtOnePlaneYUVtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int, int)", "Output file write error --- out of disk space?", "void cv::hal::opt_AVX2::or8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "\"abc_action_mode_done\" : \"Valmis\"", "k == CUDA_GPU_MAT", "N12opencv_caffe18ImageDataParameterE", "Can't set read-only property", "pCAL: invalid keyword", "FlannBased", "NSt6__ndk117__widen_from_utf8ILm32EEE", "Mat::nGet()", "max_theta must be greater than min_theta", "\"Predictor\" value %d not supported", "F^MJMV NKNU VKVU WJWV IGKIMJPKTKWJYI[G IYKWMVPUTUWVYW[Y", "getCornerSegments", "\"abc_activitychooserview_choose_application\" : \"\u090f\u0915 \u0905\u200d\u0945\u092a \u0928\u093f\u0935\u0921\u093e\"", "m1f != NULL && m2f != NULL", "ml::getVarImportance_10()", "arithm_ipp_max32f", "max_iter", "N2cv8opt_AVX212_GLOBAL__N_16RowSumIddEE", "\"abc_font_family_body_2_material\" : \"sans-serif-medium\"", "The parameter C must be positive", "Cannot copy pixels from image file \"", "saturation", "rho, theta and threshold must be positive", "MethodOptions", "calib3d::stereoRectify_10()", "MXSMRNROSPTPUOUNTMSM SNSOTOTNSN PXOYOZP[Q[RZRYQXPX PYPZQZQYPY", "\"abc_shareactionprovider_share_with\" : \"\u0627\u0634\u062a\u0631\u0627\u06a9 \u06a9\u0631\u06cc\u06ba \u0645\u0639\"", "shortcut_%d", "calib3d::drawChessboardCorners_10()", "filteredSamples is empty", "graph.proto", "virtual void cv::cpu_baseline::RowFilter<float, float, cv::cpu_baseline::SymmRowSmallVec_32f>::operator()(const uchar *, uchar *, int, int) [ST = float, DT = float, VecOp = cv::cpu_baseline::SymmRowSmallVec_32f]", "imgproc::getRectSubPix_10()", "\"abc_searchview_description_voice\" : \"\u10ee\u10db\u10dd\u10d5\u10d0\u10dc\u10d8 \u10eb\u10d8\u10d4\u10d1\u10d0\"", "ReleaseMessage", "\"abc_action_bar_home_description\" : \"\u179a\u1780\u1798\u17be\u179b\u200b\u1791\u17c5\u200b\u178a\u17be\u1798\"", "Not enough", "t.rows == 4 && t.cols == 1", "features2d::clone_11()", "N2cv12MergeMertensE", "NSt6__ndk114default_deleteIN2cv3dnn16ElementWiseLayerINS2_12PowerFunctorEEEEE", "getSqrRowSumFilter", "\"abc_searchview_description_search\" : \"Mekl\u0113t\"", "nelems <= size_t(INT_MAX)*size_t(INT_MAX)", "Unsupported Torch class \"", "N2cv8opt_AVX212_GLOBAL__N_19ColumnSumIidEE", "counter", "MVQMNV VMOS RQTV", "cvCopyMakeBorder", "void cv::hal::cpu_baseline::log64f(const double *, double *, int)", "parseTag", "Blob ", "\" is already defined.", "png_set_gAMA", "invalid length", "2019.0.0 Gold (-)", "N6google8protobuf8internal23RepeatedPtrFieldWrapperINSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE", "Auto-corrected former TIFF subsampling values [%d,%d] to match subsampling values inside JPEG compressed data [%d,%d]", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_19RGB2HLS_fEEE", "void cv::add(cv::InputArray, cv::InputArray, cv::OutputArray, cv::InputArray, int)", "map_matrix.rows == 2 && update.rows == 2", "MXRFR[ SFS[ OFVF O[V[", "nms_thresh", "layerInternals.empty()", "MXRMQNQORPSPTOTNSMRM RNROSOSNRN TZS[R[QZQYRXSXTYT\\S^Q_ RYRZSZSYRY S[T\\ TZS^", "cvPyrUp", "CV_64F", "__itt_suppress_push", "N12_GLOBAL__N_122resize_bitExactInvokerIiNS_12fixedpoint64ELi2EEE", "__itt_frame_begin_v3", ">f>RfR", "features2d::drawMatchesKnn_11()", "N6google8protobuf11MessageLiteE", "internal sequential row size calculation error", "\"abc_searchview_description_query\" : \"Consulta de busca\"", "N2cv2ml22LogisticRegressionImplE", "NSt6__ndk114default_deleteIN2cv3dnn16FlattenLayerImplEEE", "N6google8protobuf15DescriptorProtoE", "processDetections_", "clear", "Mask size should be 3 or 5 or 0 (precise)", "probs", "populateNet", "Unknown Adobe color transform code %d", "R.empty() || R.size() == Size(3, 3) || R.total() * R.channels() == 3", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/generated_message_util.cc", "ml::trainEM_12()", "NSt6__ndk120__shared_ptr_emplaceIN2cv8ORB_ImplENS_9allocatorIS2_EEEE", "__cxa_guard_acquire failed to acquire mutex", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_9XYZ2RGB_fIfEEEE", "H\\IR[R IQ[Q", "void cv::hal::cpu_baseline::merge16u(const ushort **, ushort *, int, int)", "photo::calculateShift_10()", "normalize", "N2cv3hal10opt_SSE4_112_GLOBAL__N_119YUV420p2RGB8InvokerILi2ELi3EEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline8Filter2DItNS2_4CastIffEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "\"abc_action_bar_home_description\" : \"Eiti \u012f pagrindin\u012f puslap\u012f\"", "cvPreCornerDetect", "void cv::cpu_baseline::cvt16f32s(const cv::float16_t *, size_t, uchar *, size_t, int *, size_t, cv::Size, void *)", "magnitude", "node_proto.input_size() == 1", "calib3d::drawFrameAxes_11()", "void cv::hal::split16u(const ushort *, ushort **, int, int)", "CHECK failed: file && file->pool_: ", "Logistic Regression Classifier", "ml::setDefaultK_10()", "\" of torch class \"", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX29RowFilterIsfNS2_13RowVec_16s32fEEENS_9allocatorIS5_EEEE", "PUTMQV", "NSt8ios_base7failureE", "allocator", "KYRJKVYVRJ RZYNKNRZ", "KZMHX\\", "InputOutputArrayOfArrays: noArray()", "__itt_task_group", "threshold", "\"abc_shareactionprovider_share_with\" : \"Megoszt\u00e1s a k\u00f6vetkez\u0151vel:\"", "float cv::EMD(cv::InputArray, cv::InputArray, int, cv::InputArray, float *, cv::OutputArray)", "N2cv13RHO_HEST_REFCE", "__itt_model_site_beginA", "Either ranges, either uniform ranges should be provided", "NSt6__ndk120__shared_ptr_emplaceIN2cv5mjpeg16MotionJpegWriterENS_9allocatorIS3_EEEE", "bool cv::findChessboardCorners(cv::InputArray, cv::Size, cv::OutputArray, int)", "void cv::hal::cpu_baseline::sub32f(const float *, size_t, const float *, size_t, float *, size_t, int, int)", "Invalid escape character", "(!varTypesSet && vtypes[i] == rowtypes[i]) || (varTypesSet && (vtypes[i] == rowtypes[i] || rowtypes[i] == VAR_ORDERED))", "I\\MKMJNJNLLLLJMHNGPFTFWGXHYJYLXNWOSQ WHXIXMWN TFVGWIWMVOUP RQRTSTSQRQ RXQYQZR[S[TZTYSXRX RYRZSZSYRY", "pthread_key_create(&tlsKey, NULL) == 0", "photo::createCalibrateDebevec_11()", "data and labels must be a floating point matrix", "The number of extra layers must be non negative", "F^GQHOJMLMMNNPNSLX MNMRLVLZ MPKUKXLZN[P[RZTXVU XMVUVXWZX[Z[\\Y]W YMWUWZ XMZMXTWX", "runLayer", "CHECK failed: (buffer_size) >= (0): ", "\"abc_searchview_description_voice\" : \"Ukusesha ngezwi\"", "virtual void cv::opt_AVX2::(anonymous namespace)::ColumnSum<double, short>::operator()(const uchar **, uchar *, int, int, int) [ST = double, T = short]", "png_image_read: opaque pointer not NULL", "N2cv18ConjGradSolverImplE", "_input", "Squeeze", "cv::Mat cv::dnn::dnn4_v20190122::blobFromImage(cv::InputArray, double, const cv::Size &, const cv::Scalar &, bool, bool, int)", "objdetect::getFeatureType_10()", "CV_ARE_TYPES_EQ(A, B) && (CV_MAT_TYPE(A->type) == CV_32F || CV_MAT_TYPE(A->type) == CV_64F)", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi4EEEij11DistSquaredNS1_IiLi4EEEE", "cvConvexHull2", "getSubMatrix", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX216SymmColumnFilterINS2_4CastIddEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "solve_nu_svr", "N2cv27BackgroundSubtractorKNNImplE", "calib3d::findFundamentalMat_14()", "Unimplemented Map Reflection API.", "begin", "int cv::recoverPose(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, double, cv::InputOutputArray, cv::OutputArray)", "\"abc_searchview_description_query\" : \"\u179f\u17d2\u179c\u17c2\u1784\u179a\u1780\u200b\u179f\u17c6\u178e\u17bd\u179a\"", "imgproc::rectangle_13()", "Unsupported ksize", "filterByConvexity", "MXVNTMRMPNOPOSPURVTVVU", "dst.size() == dst0.size()", "imgproc::rectangle_11()", "N7cvflann7anyimpl21typed_base_any_policyIPKcEE", "src1.type() == window.type()", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/color.cpp", "Number of dimensions is out of range", "arithm_ipp_add16s", "Reading this strip would require libjpeg to allocate at least %u bytes. This is disabled since above the %u threshold. You may override this restriction by defining the LIBTIFF_ALLOW_LARGE_LIBJPEG_MEM_ALLOC environment variable, or recompile libtiff by defining the TIFF_LIBJPEG_LARGEST_MEM_ALLOC macro to a value greater than %u", "N2cv12cpu_baseline12_GLOBAL__N_111MorphFilterINS1_5MinOpIdEENS1_10MorphNoVecEEE", "CHECK failed: generated_database_->Add(encoded_file_descriptor, size): ", "depth == CV_8U", "IDCT output block size %d not supported", "photo::createTonemapReinhard_11()", "setUpNet", "N2cv3dnn14dnn4_v201901228SubgraphE", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphRowFilter<cv::cpu_baseline::(anonymous namespace)::MaxOp<unsigned char>, cv::cpu_baseline::(anonymous namespace)::MorphRowVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_uint8x16> > >::operator()(const uchar *, uchar *, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MaxOp<unsigned char>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphRowVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_uint8x16> >]", "scaleMat.type() == CV_32FC1", "update", "__itt_counter_dec_delta", "png_set_eXIf does not work; use png_set_eXIf_1", "void cv::hal::cmp8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "\"abc_toolbar_collapse_description\" : \"Kutista\"", "cmap != NULL", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/moments.cpp", "\"abc_capital_on\" : \"\u0412\u041a\u041b\u0423\u0427\u0415\u041d\u041e\"", "window_data", "Interlace handling should be turned on when using png_read_image", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/../nms.inl.hpp", "\" is not a field or extension of message \"", "cvRestoreMemStoragePos", "L[LVNSPO QLHg RLIg OUQSSRTRVSVUUXUZV[ TRUSUUTXTZV[XZYY[V", "N2cv8opt_AVX212_GLOBAL__N_19ColumnSumIdsEE", "src.depth() == dst.depth()", "Unknown shape of input tensor", "cvSampleLine", "int cv::cpu_baseline::RowVec_8u32s::operator()(const uchar *, uchar *, int, int) const", "N17opencv_tensorflow12NameAttrListE", "ushort", "G]LML[ MMM[ WMW[ XMX[ IMPM TM[M I[P[ T[[[ WNMZ OGOFNFNGOIQJSJUIVG", "photo::createCalibrateRobertson_12()", "virtual void cv::cpu_baseline::ColumnFilter<cv::cpu_baseline::Cast<float, float>, cv::cpu_baseline::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::Cast<float, float>, VecOp = cv::cpu_baseline::ColumnNoVec]", "MXSMRNSOTNSM P[OZPYQZQ[P]N_", "hidden alias for ", "__itt_module_load", "void cv::hal::xor8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "objdetect::isOldFormatCascade_10()", "decimal16", "!sample.empty()", "dnn::getLayerNames_10()", "nimages > 0 && nimages == (int)imagePoints1.total() && (!imgPtMat2 || nimages == (int)imagePoints2.total())", "src.cols > 0 && src.rows > 0", "core::solve_10()", "NSt6__ndk115time_get_bynameIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE", "N12_GLOBAL__N_127GeneralizedHoughBallardImplE", "void cv::hal::opt_AVX2::magnitude32f(const float *, const float *, float *, int)", "dnn::getParam_10()", "photo::getExcludeRange_10()", "MWOMOV UMOS QQUV", "LYSMSX TKTX TKMTXT QXVX", "N10__cxxabiv117__class_type_infoE", "N2cv27HomographyEstimatorCallbackE", "dst.size() == src.size() && (smooth_type == CV_BLUR_NO_SCALE || dst.type() == src.type())", "N2cv10opt_SSE4_112_GLOBAL__N_19ColumnSumIdhEE", "/home/vagrant/build/srclib/opencv/modules/dnn/misc/tensorflow/op_def.pb.cc", "N2cv8opt_AVX212_GLOBAL__N_19ColumnSumIdfEE", "KWNURTTSURUPSOQOOPNQMSMUNWPXRXTWUV QOOQNSNVPX", "'): can't write data: unknown exception", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/imgwarp.cpp", "!params.has(\"step\")", "NSt6__ndk114collate_bynameIwEE", "DEPTH", "Ignoring invalid time value", "NSt6__ndk120__shared_ptr_emplaceIN2cv10HdrDecoderENS_9allocatorIS2_EEEE", "Aperture size should be odd between 3 and 7", "Unexpected file type (expected P)", "Interp", "proceed", "CTX = %d, ", "core::SVDecomp_10()", "srcImgs.size() > 0", "NSt6__ndk115__time_get_tempIwEE", "void cv::opt_AVX2::bilateralFilterInvoker_8u(cv::Mat &, const cv::Mat &, int, int, int *, float *, float *)", "solvePnP", "Const", "signature1 must not contain negative weights", "UpgradeV0LayerParameter", "inputs[3].dims == 4", "G\\JMKNLPLUMXOZQ[S[UZWXXVYRYNXMWMXPXSWWUZ KMLNMPMUNX WMXNXO HPINJMLMMNNPNVOYQ[", "tif->tif_dir.td_stripbytecount is already allocated. Likely duplicated StripByteCounts/TileByteCounts tag", "NULL pointer to array or destination header", "Unknown/unsupported norm type", "ERROR: IPP cannot detect CPU features, IPP was disabled ", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_19ColumnSumIddEENS_9allocatorIS5_EEEE", "compute_diffusivity", "outputs[i].type()", "ZIPSetupDecode", "F^JFJ[ KKK[J[ KKR[ JFRX ZFRX YKR[ YKY[Z[ ZFZ[", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_116SymmColumnFilterINS2_4CastIftEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "fatal", "Field \"$0\" uses reserved number $1.", "\"abc_activity_chooser_view_see_all\" : \"\u0412\u0438\u0436\u0442\u0435 \u0432\u0441\u0438\u0447\u043a\u0438\"", "po[%d] = %d; ", "const_cast<", "tensor.dtype() == tensorflow::DT_INT32", "qMax.type() == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3))", "operator||", "__itt_task_begin_ex", "src.data != dst.data", "throwOnEror", "\"abc_action_bar_up_description\" : \"\u041f\u0440\u0438\u0434\u0432\u0438\u0436\u0432\u0430\u043d\u0435 \u043d\u0430\u0433\u043e\u0440\u0435\"", "Resultant image must have 32fC1 type", "values.type() == CV_32SC1", "MWRMNV RMVV NVVV", "features2d::getWTA_1K_10()", "void cv::updateWindow(const cv::String &)", "k == STD_VECTOR_CUDA_GPU_MAT", "NSt6__ndk120__shared_ptr_emplaceIN2cv22SimpleBlobDetectorImplENS_9allocatorIS2_EEEE", "TileOffsets", "parse", "\"search_menu_title\" : \"Maghanap\"", "calib3d::fisheye_1undistortImage_10()", "\"abc_action_bar_up_description\" : \"\u0627\u0648\u067e\u0631 \u0646\u06cc\u0648\u06cc\u06af\u06cc\u0679 \u06a9\u0631\u06cc\u06ba\"", "../../../../modules/core/include/opencv2/core/core_c.h", "virtual void cv::opt_SSE4_1::RowFilter<float, double, cv::opt_SSE4_1::RowNoVec>::operator()(const uchar *, uchar *, int, int) [ST = float, DT = double, VecOp = cv::opt_SSE4_1::RowNoVec]", "N2cv10opt_SSE4_18Filter2DItNS0_4CastIftEENS0_11FilterNoVecEEE", "PWSMSNTNTMSM PVRRLdKfIgHfHdIaL^O\\Q[TYWV", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112ColumnFilterINS2_4CastIfsEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "G]LFL[ MFM[ MPONRMTMWNXPX[ TMVNWPW[ IFMF I[P[ T[[[", "\"abc_searchview_description_query\" : \"Vyh\u013ead\u00e1vac\u00ed dopyt\"", "_K.size() == Size(3,3) && (_K.type() == CV_32F || _K.type() == CV_64F) && _D.type() == _K.type() && _D.total() == 4", "'): can't read header: unknown exception", "IPP:ipp_matchTemplate(img, templ, result, method)", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2RGB<unsigned short> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2RGB<unsigned short>]", "void cv::opt_AVX2::cvt16f16u(const cv::float16_t *, size_t, uchar *, size_t, ushort *, size_t, cv::Size, void *)", "void cv::opt_AVX2::cvt16u64f(const ushort *, size_t, uchar *, size_t, double *, size_t, cv::Size, void *)", "LYLVNSPRRRTSTVSXPZN[ RRSSSVRXPZ N[P\\Q^QaPdNfLgKfKdLaO^R\\VYYV N[O\\P^PaOdNf", "void cv::hal::cvtTwoPlaneYUVtoBGR(const uchar *, const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "readTorchTensor", "dilation.size() == 2", "\"abc_toolbar_collapse_description\" : \"\u0eab\u0e8d\u0ecd\u0ec9\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline8Filter2DIsNS2_4CastIffEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "MWQQQSSSSQQQ RQRS QRSR", "entry.capacity_ != 0", "virtual void cv::opt_SSE4_1::ColumnFilter<cv::opt_SSE4_1::Cast<float, unsigned char>, cv::opt_SSE4_1::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::Cast<float, unsigned char>, VecOp = cv::opt_SSE4_1::ColumnNoVec]", "NSt6__ndk110moneypunctIcLb1EEE", "Tried to merge messages of different types ", "Old-style JPEG", "layerParams.blobs.size() == 1", "video::getVarMin_10()", "flow_u.sameSize(flow_v)", "shadowValue", "\"abc_shareactionprovider_share_with_application\" : \"%s \u0c9c\u0cca\u0ca4\u0cc6\u0c97\u0cc6 \u0cb9\u0c82\u0c9a\u0cbf\u0c95\u0cca\u0cb3\u0ccd\u0cb3\u0cbf\"", "Null graph scanner", "Missing ':' between key and value", "Closing tag should not contain any attributes", "N2cv12cpu_baseline9RowFilterIddNS0_8RowNoVecEEE", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphFilter<cv::cpu_baseline::(anonymous namespace)::MaxOp<unsigned char>, cv::cpu_baseline::(anonymous namespace)::MorphVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_uint8x16> > >::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MaxOp<unsigned char>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_uint8x16> >]", "varType.checkVector(1, CV_8U, true) == nvars && checkRange(varType, true, 0, VAR_ORDERED, VAR_CATEGORICAL+1)", "cum[nkeys] == n", "More than one input is Const op", "N12opencv_caffe15FillerParameterE", "outbuf", "setWindowTitle", "float4", "/home/vagrant/build/srclib/opencv/modules/core/src/lut.cpp", "N2cv11MatOp_SolveE", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIsffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearIsffNS_4CastIfsEENS_23VResizeLinearVec_32f16sEEEEE", "Extension range end number must be greater than start number.", "!covs || (!covs->empty() && static_cast<int>(covs->size()) == nclusters)", "Not enough data at scanline %lu (short %lu bytes)", "features2d::setOctaves_10()", "The flow matrix must be 32fC1", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_9XYZ2RGB_iItEEEE", "typeProto.has_tensor_type()", "(m1type == CV_16SC2 && (nninterpolate || m2type == CV_16UC1 || m2type == CV_16SC1)) || (m2type == CV_16SC2 && (nninterpolate || m1type == CV_16UC1 || m1type == CV_16SC1)) || (m1type == CV_32FC1 && m2type == CV_32FC1) || (m1type == CV_32FC2 && m2->empty())", "Unknown comparison method", "norm_region", "BaselineExposure", "aoB>\"", "cv::samples::findFile('%s', %s)", "num_bboxes == 0 || prior_variances[0].size() == 4", "zoom_factor_y", "Permute", "imgproc::findContours_11()", "cvResetImageROI", "NSt6__ndk120__shared_ptr_pointerIP5CvMatN2cv14DefaultDeleterIS1_EENS_9allocatorIS1_EEEE", "CL_INVALID_PROGRAM", "key not found: ", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline16SymmColumnFilterINS2_4CastIddEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "arithm_ipp_add8u", "N2cv3dnn14dnn4_v2019012214MaxUnpoolLayerE", "createInitialSimplex", "?hiP.", "Invalid palette length", "NSt6__ndk120__shared_ptr_emplaceIN2cv20StaticBackendFactoryENS_9allocatorIS2_EEEE", "cv::ColorMap only supports source images of type CV_8UC1 or CV_8UC3", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/softmax_layer.cpp", "imgproc::cvtColorTwoPlane_10()", "\"abc_toolbar_collapse_description\" : \"Goqa\"", "\"abc_capital_on\" : \"\u049a\u041e\u0421\u0423\u041b\u042b\"", "N2cv3dnn14dnn4_v201901228AbsLayerE", "preprocess2DKernel", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_19RowFilterIhfNS2_8RowNoVecEEENS_9allocatorIS5_EEEE", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphFilter<cv::cpu_baseline::(anonymous namespace)::MaxOp<unsigned short>, cv::cpu_baseline::(anonymous namespace)::MorphVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_uint16x8> > >::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MaxOp<unsigned short>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_uint16x8> >]", "CV_16S", "_w.data == (uchar*)&w.val[0] && _u.data == (uchar*)&u.val[0] && _vt.data == (uchar*)&vt.val[0]", "collectCalibrationData", "void cv::PCACompute(cv::InputArray, cv::InputOutputArray, cv::OutputArray, cv::OutputArray, double)", "The second set of points must contain two channels; one for x and one for y", "core::multiply_12()", "\"abc_capital_on\" : \"\u1794\u17be\u1780\"", " of the Protocol Buffer runtime library, which is not compatible with the installed version (", "norm_by_size", "\"abc_action_bar_up_description\" : \"\u0627\u0644\u062a\u0646\u0642\u0644 \u0625\u0644\u0649 \u0623\u0639\u0644\u0649\"", "ml::getBackpropMomentumScale_10()", "): failed TIFFGetField(tif, TIFFTAG_TILEWIDTH, &tile_width0)", "N2cv8colormap8ColorMapE", "N2cv16CvCapture_ImagesE", "Unknown V1LayerParameter layer type: ", "dilationH", "background_label_id", "N2cv8opt_AVX212_GLOBAL__N_117MorphColumnFilterINS1_5MinOpIfEENS1_14MorphColumnVecINS1_4VMinINS_8hal_AVX211v_float32x8EEEEEEE", "virtual void cv::cpu_baseline::ColumnFilter<cv::cpu_baseline::Cast<float, unsigned short>, cv::cpu_baseline::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::Cast<float, unsigned short>, VecOp = cv::cpu_baseline::ColumnNoVec]", "Cannot set seconds field in time code. New value is out of range.", "core::getBuildInformation_10()", "H[YUWUUTTSRPQOONNNLOKQKRLTNUOUQTRSTPUOWNYN", "void cv::hal::cpu_baseline::cvtBGRtoBGR5x5(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "ImageBaseColor", "video::get_1statePre_10()", "bool cv::utils::fs::createDirectory(const cv::String &)", "dtrm > std::numeric_limits<double>::epsilon()", "num_classes", "void cv::hal::opt_SSE4_1::cvtMultipliedRGBAtoRGBA(const uchar *, size_t, uchar *, size_t, int, int)", "DefaultScale", "pixels", "half2", "\"abc_activity_chooser_view_see_all\" : \"Sj\u00e1 allt\"", "H\\JGKFMFOGQIXXYZZ[ OHPIWXXY MFNGOIVXXZZ[[[ RMJZJ[K[RM", "trainResponses.rows == trainSamples.rows", "!Tc.empty() && Tc.type() == CV_64FC3", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12ColumnFilterINS2_4CastIddEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "distorted.type() == CV_32FC2 || distorted.type() == CV_64FC2", "ml::setActivationFunction_12()", "__itt_notify_sync_acquired", "SVM kernel tag is not found", "J[WOXMXQWOVNTMPMNNMOMQNSPTUUWVXY NNMQ NRPSUTWU XVWZ MONQPRUSWTXVXYWZU[Q[OZNYMWM[NY", "J[RKRX SKSX LPMONOOSQU TUVSWOXOYP MONROTQUTUVTWRXO PKUK PXUX", "color map overflow (BAD internal error)", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX28Filter2DIhNS2_4CastIfhEENS2_12FilterVec_8uEEENS_9allocatorIS7_EEEE", "termcrit.type == (TermCriteria::MAX_ITER + TermCriteria::EPS) && termcrit.epsilon > 0 && termcrit.maxCount > 0", "non-positive or too large number of dimensions", "cvGraphAddEdge", "N2cv3dnn23FullyConnectedLayerImpl14FullyConnectedE", "OXOVQSSO VFPXPZQ[S[UZVYXV PNWN", "void cv::findContours(cv::InputArray, cv::OutputArrayOfArrays, int, int, cv::Point)", "origWinSize.height > 0 && origWinSize.width > 0", "TIFFFieldWithName", "memory buffer", "N6google8protobuf8internal30RepeatedFieldPrimitiveAccessorImEE", "arcLength", "JXKRLPMOOOPPPROUOWPX NOOPORNUNWPXQXSWUUVRVOUOVP", "projectPoints", "inputs[0][0] == inputs[1][0]", "D2.empty() || (D1.total() == 4)", "void cv::opt_AVX2::cvt16s32f(const short *, size_t, uchar *, size_t, float *, size_t, cv::Size, void *)", "N3Iex15EhostunreachExcE", "CL_INVALID_QUEUE_PROPERTIES", "cv::Mat cv::getOptimalNewCameraMatrix(cv::InputArray, cv::InputArray, cv::Size, double, cv::Size, cv::Rect *, bool)", "Unsupported combination of input and output array formats", "N2cv11VideoWriterE", "output.isContinuous() && (output.type() == CV_32F || output.type() == CV_16S)", "objdetect::CascadeClassifier_10()", "sqsum.u == u && sqsum.size() == s.szi && sqsum.type()==CV_32S", "void cv::hal::cpu_baseline::addWeighted64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, const double *)", "repeat", "__itt_heap_record_memory_growth_end", "\"abc_capital_on\" : \"\u091a\u093e\u0932\u0942\"", "CV_8U", "(stype == CV_32F || stype == CV_64F) && (ptype == CV_32F || ptype == CV_64F)", "MutableRawRepeatedField", "void cv::hal::opt_AVX2::cmp16u(const ushort *, size_t, const ushort *, size_t, uchar *, size_t, int, int, int)", "core::absdiff_11()", "ml::setCVFolds_10()", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_19RGB2HLS_bEEE", "GrayResponseCurve", "F]OFI[ PFJ[ LFXF[G\\I\\K[NYPUQMQ XFZG[I[KZNXPUQ F[M[", "nodes[root][PARENT] < 0", "__itt_mark_create", "ReferenceBlackWhite", "N2cv22CalibrateRobertsonImplE", "ml::getAlgorithmType_10()", "N2cv12cpu_baseline12_GLOBAL__N_16RowSumIsiEE", ".  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"", "0 <= vi && vi < nallvars && vi > prevIdx", "N2cv16TonemapDragoImplE", ";void cv::colormap::ColorMap::operator()(cv::InputArray, cv::OutputArray) const", "sequential row overflow", "All objectPoints[i].size() should be equal when object-releasing method is requested.", "getFirstCorner", "finalPass", "getLayerInstance", "noexcept (", "opencv_tensorflow.FunctionDef.Node.op", "@cAQBODMFMGNHPHSF[ GNGSE[ GPFTD[F[ HSJPLNNMPMRNSPSSQ[ RNRSP[ RPQTO[Q[ SSUPWNYM[M]N^P^S\\X ]N]R\\V\\Z ]P[U[X\\Z][_[aYbW", "photo::shiftMat_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv9KAZE_ImplENS_9allocatorIS2_EEEE", "unable to seek at position %ld", "incorrect count for field \"%s\" (%lu, expecting %u); tag trimmed", "virtual void cv::opt_SSE4_1::SymmColumnSmallFilter<cv::opt_SSE4_1::FixedPtCastEx<int, unsigned char>, cv::opt_SSE4_1::SymmColumnVec_32s8u>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::FixedPtCastEx<int, unsigned char>, VecOp = cv::opt_SSE4_1::SymmColumnVec_32s8u]", "Cannot set hours field in time code. New value is out of range.", "\"abc_searchview_description_clear\" : \"Suchanfrage l\u00f6schen\"", "KYQFOGNINKOMQNSNUMVKVIUGSFQF QFNIOMSNVKUGQF SFOGNKQNUMVISF", "NSt6__ndk120__shared_ptr_emplaceIN2cv10PxMEncoderENS_9allocatorIS2_EEEE", "release", "forwardInfEngine", "\"abc_searchview_description_query\" : \"\u0417\u0430\u044f\u0432\u043a\u0430 \u0437\u0430 \u0442\u044a\u0440\u0441\u0435\u043d\u0435\"", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2019012224BatchNormNoGammaSubgraphEEE", "tensor.proto", "HOST_ALLOC", "core::dft_10()", ", sorted by priority): ", "gl_NumWorkGroups", "Unexpected data block y coordinate.", "__itt_event_start", "\"abc_activity_chooser_view_see_all\" : \"Mostra'ls tots\"", "blobs.size() == 1", "i < (int)v.size()", "N6google8protobuf10TextFormat17FieldValuePrinterE", "\"abc_shareactionprovider_share_with_application\" : \"Ibahagi sa/kay %s\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_117MorphColumnFilterINS3_5MaxOpItEENS3_14MorphColumnVecINS3_4VMaxINS1_12hal_baseline10v_uint16x8EEEEEEENS_9allocatorISD_EEEE", "utils::findDataFile(): trying ", "N3Imf14TypedAttributeIN5Imath4Vec3IfEEEE", "getMahalanobisImplFunc", "Upgrade of input layer ", "calib3d::composeRT_15()", "int cv::cpu_baseline::sum64f(const double *, const uchar *, double *, int, int)", "ml::getTrainSampleWeights_10()", "imgproc::moments_11()", "NSt6__ndk114default_deleteIN2cv3dnn23FullyConnectedLayerImplEEE", "ml::setRpropDWMinus_10()", "/home/vagrant/build/srclib/opencv/modules/dnn/src/dnn.cpp", "video::setDist2Threshold_10()", "predictOrderedStump", "*56e?", "tensorflow", "Lower bound of the grid must be positive", " (was ", "__itt_heap_free_begin", "void cv::hal::cpu_baseline::cvtBGRtoYUV(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool, bool)", "memHosts.find(lp) == memHosts.end()", "OUPKSKSYPY", "Inconsistent shape for ConcatLayer", "divSpectrums", "CHECK failed: field->cpp_type() == cpp_type || (field->cpp_type() == FieldDescriptor::CPPTYPE_ENUM && cpp_type == FieldDescriptor::CPPTYPE_INT32): ", "(evals0.cols == 1 || evals0.rows == 1)", "dy.type() == dx.type() && dy.size == edges.size", "\"abc_capital_on\" : \"VKLOPLJENO\"", "imgproc::Scharr_13()", "signature2 must contain at least one non-zero value", "dnn::getMemoryConsumption_10()", "core::divide_17()", "sz.width % 2 == 0 && sz.height % 2 == 0", "\"abc_search_hint\" : \"\u10eb\u10d8\u10d4\u10d1\u10d0...\"", "Mat::n_1eye__DDI()", "allowed in proto3.", "N2cv2ml7SVMImplE", "o\"eBo\"eBo\"eBo\"eB", "inv_eigen_values", "JPEGPreEncode", "terminating with %s exception of type %s", "max_theta", "_src.channels() <= 4", "data should have atleast 2 classes", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/blend.cpp", "void cv::HoughLines(cv::InputArray, cv::OutputArray, double, double, int, double, double, double, double)", "/home/vagrant/build/srclib/opencv/modules/dnn/misc/caffe/opencv-caffe.pb.cc", "GetRepeatedUInt32", "__itt_model_site_end_2", "\"abc_searchview_description_voice\" : \"Glasovno iskanje\"", "\"search_menu_title\" : \"\u0c36\u0c4b\u0c27\u0c3f\u0c02\u0c1a\u0c41\"", "output_y", "core::checkRange_10()", "N3Iex10EdeadlkExcE", "FillOrder", "static cv::MatExpr cv::Mat::zeros(int, int, int)", "calib3d::setPreFilterType_10()", "sfixed64", "The number of channels must be 1, 2, 3 or 4", "\"abc_action_bar_home_description\" : \"\u0a39\u0a4b\u0a2e \u0a28\u0a48\u0a35\u0a40\u0a17\u0a47\u0a1f \u0a15\u0a30\u0a4b\"", "File not open for writing", "core::transform_10()", "N2cv3dnn14dnn4_v201901228MVNLayerE", "N7cvflann5IndexINS_7HammingIhEEEE", "N10__cxxabiv120__si_class_type_infoE", "initializeContextFromDirect3DDevice9Ex", "\"abc_action_bar_up_description\" : \"\u041f\u0435\u0440\u0430\u0439\u0441\u0446\u0456 \u045e\u0432\u0435\u0440\u0445\"", "gray[16] color-map: too few entries", "Unknown distance", "N3Iex18EsocktnosupportExcE", "imgproc::cvtColor_11()", "Extension range $0 to $1 overlaps with already-defined range $2 to $3.", "video::setMaxLevel_10()", "calib3d::findHomography_11()", "cvSeqElemIdx", "YClipPathUnits", "photo::fastNlMeansDenoisingColoredMulti_11()", "Input NetParameter to be upgraded already specifies 'layer' ", "cHRM Blue Z", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::XYZ2RGB_f<float> >::operator()(const cv::Range &) const [Cvt = cv::XYZ2RGB_f<float>]", "imgproc::warpAffine_13()", "HuMoments", "dst.elemSize() <= 32", "all given points are identical", "_searchParams", "N2cv22SparsePyrLKOpticalFlowE", "Double", "\"search_menu_title\" : \"\u05d7\u05e4\u05e9\"", "virtual void cv::HOGConfInvoker::operator()(const cv::Range &) const", "dnn::blobFromImages_10()", "N2cv10BmpDecoderE", "Unsupported attribute type", "G]WMUTUXVZW[Y[[Y\\W XMVTVZ WMYMWTVX UTUQTNRMPMMNKQJTJVKYLZN[P[RZSYTWUT NNLQKTKWLY PMNOMQLTLWMZN[", "N2cv8opt_AVX29RowFilterIhiNS0_12RowVec_8u32sEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv28BackgroundSubtractorMOG2ImplENS_9allocatorIS2_EEEE", "imgproc::integral2_12()", "setColorArray", "global_size", "N2cv14TonemapMantiukE", "Bin ranges should go in ascenting order", "ANNEAL", "void cv::hal::opt_AVX2::recip32f(const float *, size_t, float *, size_t, int, int, const double *)", "void cv::opt_AVX2::medianBlur_8u_Om(const cv::Mat &, cv::Mat &, int)", "/usr/local/google/buildbot/src/android/ndk-release-r16/external/libcxx/../../external/libunwind_llvm/src/Unwind-EHABI.cpp", "\"status_bar_notification_info_overflow\" : \"\u02c3999\"", "N11opencv_onnx16TypeProto_TensorE", "\"abc_action_menu_overflow_description\" : \"\u0414\u0430\u0434\u0430\u0442\u043a\u043e\u0432\u044b\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\"", "dnn::readTorchBlob_11()", "\"search_menu_title\" : \"Zoeken\"", "Chessboard::Board cv::details::Chessboard::detectImpl(const cv::Mat &, std::vector<cv::Mat> &, const cv::Mat &) const", "CFALayout", "video::setOmega_10()", "'getSubVector(const Mat& vec, const Mat& idx)' call with non-1D input is deprecated. It is not designed to work with 2D matrixes (especially with 'cv::ml::COL_SAMPLE' layout).", "LogSoftMax", "param_maxFileSize", "NSt6__ndk114__shared_countE", "cvSeqPush", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/padding_layer.cpp", "core::eigen_11()", "dst.data != src.data", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_116SymmColumnFilterINS2_4CastIfhEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "JZRRPQOQMRLTLUMWOXPXRWSUSTRR SLQQ WMRR XQSS", "gl_GlobalInvocationID", "{lambda(", "addColumnLeft", "pthread_mutex_init", "N17opencv_tensorflow31NameAttrList_AttrEntry_DoNotUseE", "\"abc_searchview_description_voice\" : \"\u8a9e\u97f3\u641c\u5c0b\"", "observations[i].rows==rows && observations[i].cols==cols", "N2cv12LegacyWriterE", "std::abs(dsize.width - ssize.width*2) == dsize.width % 2 && std::abs(dsize.height - ssize.height*2) == dsize.height % 2", "LXPFUL PFOGUL", "ReadTFNetParamsFromBinaryFileOrDie", "SymmColumnSmallFilter", "Softmax from Darknet with groups != 1", "imgproc::fitEllipse_10()", "N2cv5AKAZEE", "photo::denoise_1TVL1_11()", "void cv::hal::opt_SSE4_1::addWeighted64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, const double *)", "Ptr<cv::FilterEngine> cv::opt_AVX2::createBoxFilter(int, int, cv::Size, cv::Point, bool, int)", "Attempt to reset field on directory not already on disk.", "MVOMOV OMUM", "knn > 0", "addTermWeights", "NormalizePixels", "objdetect::get_1cellSize_10()", "cartToPolar", "imgproc::remap_12()", "decomposeHomographyMat", "N2cv10opt_SSE4_112_GLOBAL__N_19SqrRowSumIddEE", "SubjectDistance", "void cv::hal::cpu_baseline::cmp8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, int)", "Only TensorFlow models support export to text file", "npoints is not a valid matrix", "int cv::opt_SSE4_1::(anonymous namespace)::MorphRowVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_float32x4> >::operator()(const uchar *, uchar *, int, int) const [VecUpdate = cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_float32x4>]", "cvCvtColor", "\"abc_capital_off\" : \"\u04e8\u0427\u04ae\u041a\"", "arithm_ipp_mul8u", "void cv::idct(cv::InputArray, cv::OutputArray, int)", "\"abc_searchview_description_query\" : \"Interogare de c\u0103utare\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_19ColumnSumIifEENS_9allocatorIS5_EEEE", "int cv::hal::LU64f(double *, size_t, int, double *, size_t, int)", "dimension", "disabled", "G`PMMNKPJSJTKWMYPZQZTYVWWTWSVPTNQMPM ]GWG[HUN ]G]M\\IVO \\HVN", "unsigned int", "x^j=|", "Key in map fields cannot be float/double, bytes or message types.", "Reshaping of n-dimensional non-continuous matrices is not supported yet", "pSrc != NULL", "25TegraRowOp_split3_InvokerIKxxE", "\"abc_searchview_description_search\" : \"\u134d\u1208\u130b\"", "G\\QMNNLPKTKb MPLTLa QMONNOMSMb MWNYOZQ[S[VZXXYUYSXPVNSMQM WXXVXRWP S[UZVYWVWRVOUNSM KbMb", "core::setUseIPP_1NotExact_10()", "N7cvflann20flann_centers_init_tE", "D`F^^^^FFFF^", "video::set_1errorCovPost_10()", "reductionIndices.at<int>(i) * reductionIndices.at<int>(i - 1) >= 0", "virtual void cv::MatAllocator::copy(cv::UMatData *, cv::UMatData *, int, const size_t *, const size_t *, const size_t *, const size_t *, const size_t *, bool) const", "!params.has(\"max_size\")", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_19ColumnSumIdfEENS_9allocatorIS5_EEEE", "OpenCL: Kernel(%s)::set(arg_index=%d): negative arg_index", "Mat::n_1zeros__III()", "video::setTermCriteria_10()", "Invalid progressive parameters Ss=%d Se=%d Ah=%d Al=%d", "imgproc::filter2D_12()", "void cv::hal::add32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, void *)", "JYPKLX QKMX SORS NKXKWNWK OQRQ JXTXUUSX", "__itt_mark_off", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2019012213TorchImporter6ModuleENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "AvgPool", "cvCalcCovarMatrix", "CL_INVALID_PROPERTY", "convertFromD3D11Texture2D", "\"abc_searchview_description_voice\" : \"Paie\u0161ka balsu\"", "N2cv8colormap4PinkE", "demosaicing", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112ColumnFilterINS2_4CastIffEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "q.corners[j]", "NSt6__ndk118__time_get_storageIwEE", "F^[FYGVHSHPGNFLFJGIIIKKMMMOLPJPHNF [FI[ YTWTUUTWTYV[X[ZZ[X[VYT", "cvCreateGraph", "png_image_begin_read_from_file: incorrect PNG_IMAGE_VERSION", "kernelShape.dim_size() == 4", "Incorrect element name %s; should start with a letter or '_'", "outLayerId < inLayerId", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ElementWiseLayerINS2_12PowerFunctorEEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "__itt_sync_set_name", "NULL double CvSeq pointer", "N2cv10BRISK_ImplE", "imgproc::fillPoly_13()", "Invalid histogram type", "\"abc_action_menu_overflow_description\" : \"Meer opties\"", "Input is out of OpenCV 32S range", "_map2.empty() || (_map2.size() == _map1.size())", "N2cv12WMByteStreamE", "TIFFRasterScanlineSize64", "N7cvflann7anyimpl12bad_any_castE", "SVM::getDefaultGrid", ": Can't create thread mutex: res = ", "my_object", "N12opencv_caffe19ROIPoolingParameterE", "IPP:((ippicvsExp_64f_A50)(src, dst, n)) >= 0", "(I)Ljava/lang/Object;", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphColumnFilter<cv::opt_SSE4_1::(anonymous namespace)::MinOp<unsigned short>, cv::opt_SSE4_1::(anonymous namespace)::MorphColumnVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_uint16x8> > >::operator()(const uchar **, uchar *, int, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MinOp<unsigned short>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphColumnVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_uint16x8> >]", "GetRepeatedUInt64", "G]WGVHWIXHWGUFRFOGMILLL[ RFPGNIMLM[ WMW[ XMX[ IMXM I[P[ T[[[", "scalarParams.has(\"ceil_mode\")", "Adobe APP14 marker: version %d, flags 0x%04x 0x%04x, transform %d", "num_axes", "core::perspectiveTransform_10()", "\"abc_shareactionprovider_share_with_application\" : \"\u200f%s \u06a9\u06d2 \u0633\u0627\u062a\u06be \u0627\u0634\u062a\u0631\u0627\u06a9 \u06a9\u0631\u06cc\u06ba\"", "\"search_menu_title\" : \"C\u0103uta\u021bi\"", "Flash", "N11opencv_onnx9NodeProtoE", "virtual void cv::BackgroundSubtractorMOG2Impl::apply(cv::InputArray, cv::OutputArray, double)", "\" which is a proto3 message type.", "Invalid bit depth for grayscale image", "videoio::open_12()", "NSt6__ndk120__shared_ptr_pointerIPNS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS5_IS7_EEEENS_14default_deleteIS9_EENS5_IS9_EEEE", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2019012220FlattenShapeSubgraphEEE", "opencv_ml_em", "cvClone", "imgproc::calcHist_10()", "imwrite_", "double cv::pointPolygonTest(cv::InputArray, cv::Point2f, bool)", "Unsupported image type", "q.ptr()", "GetRepeatedInt32", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_19ColumnSumIdtEENS_9allocatorIS5_EEEE", " vector[", "  Actual   : ", "H\\PFMGLILLMNPOTOWNXLXIWGTFPF NGMIMLNN VNWLWIVG PFOGNINLONPO TOUNVLVIUGTF POMPLQKSKWLYMZP[T[WZXYYWYSXQWPTO MQLSLWMY WYXWXSWQ PONPMSMWNZP[ T[VZWWWSVPTO", "H^ZH[H\\F[L[JZHYGWFTFQGOIMLLOKSKVLYMZP[R[UZWXYT QHOJNLMOLSLWMY VXWWXT TFRGPJOLNOMSMXNZP[ R[TZVWWT TT\\T UTWU VTWW ZTXV [TXU", "void cv::hal::addRNGBias64f(double *, const double *, int)", "brow6", "N6google8protobuf19EnumDescriptorProtoE", "%08x:", "\"abc_searchview_description_clear\" : \"\u6e05\u9664\u67e5\u8a62\"", "void cv::EigenvalueDecomposition::compute(cv::InputArray, bool)", "too many text chunks", "virtual void cv::AlignMTBImpl::process(cv::InputArrayOfArrays, std::vector<Mat> &)", "Extension number $0 has already been used in \"$1\" by extension \"$2\" defined in $3.", "src && dst && count > 0", "void cv::hal::merge32s(const int **, int *, int, int)", "F]OFI[ PFJ[ QFK[ \\GMR QOU[ ROV[ SNWZ LFTF YF_F F[N[ R[Y[ MFPG NFOH RFPH SFPG ZF\\G ^F\\G JZG[ JYH[ KYL[ JZM[ UZS[ UYT[ VYX[", "F]UGTHSJQOOUNWLZJ[ THSKQSPVOXMZJ[H[GZGXHWJWLXNZP[S[UZWXYTZOZLYIWGUFPFMGKIJKJMKNMNNMOK", "N2cv3hal8opt_AVX212_GLOBAL__N_120YUV420sp2RGB8InvokerILi0ELi0ELi4EEE", "G]]R]P\\MZJWHTGPGMHJJHMGPGR", "_arrays && (_ptrs || _planes)", "_TIFFSetupFields", "virtual int cv::FilterEngine::proceed(const uchar *, int, int, uchar *, int)", "\"abc_toolbar_collapse_description\" : \"\u0417\u0433\u0430\u0440\u043d\u0443\u0446\u044c\"", ": Can't create thread condition variable: res = ", "virtual void cv::AlignMTBImpl::shiftMat(cv::InputArray, cv::OutputArray, const cv::Point)", "St11regex_error", "Invalid palette", "N2cv3dnn12MVNLayerImplE", "basic_string::copy", "src0_x", "Memory allocation failed while processing sCAL", "inputs.size() == 1 && outputs.size() == 1", "dnn::blobFromImages_12()", "dnn::forward_11()", "FILTER_W", "The reduced dimensionality index is out of range", "K.size() == Size(3, 3) && (D.empty() || D.total() == 4)", "sPLT chunk has bad length", "bad_function_call", "JYRRPQOQMRLTLUMWOXPXRWSUSTRR WMRR RMWMWR RMVNWR", "M.size() == M0.size()", "\"abc_capital_on\" : \"\u0938\u0915\u094d\u0930\u093f\u092f \u0917\u0930\u094d\u0928\u0941\u0939\u094b\u0938\u094d\"", "N12opencv_caffe16SoftmaxParameterE", "features2d::match_12()", "Not a TIFF file, bad BigTIFF unused %d (0x%x)", "@blockSize.width % cellSize.width == 0 && blockSize.height % cellSize.height == 0", "\"abc_activitychooserview_choose_application\" : \"\u090f\u0909\u091f\u093e \u0905\u0928\u0941\u092a\u094d\u0930\u092f\u094b\u0917 \u091b\u093e\u0928\u094d\u0928\u0941\u0939\u094b\u0938\u094d\"", "Incompatible type for \"%s\"", "/home/vagrant/build/srclib/opencv/modules/imgcodecs/src/grfmt_bmp.cpp", "inp.isContinuous()", "core::compare_11()", "N2cv8colormap6PlasmaE", "thresh_32f", "'\"' - right-quote of string is missing", "virtual void cv::dnn::PriorBoxLayerImpl::finalize(cv::InputArrayOfArrays, cv::OutputArrayOfArrays)", "SGILog compression supported only for %s, or raw data", "centers.type() == CV_32FC1", "CL_MAP_FAILURE", "displayWindow", "\"abc_activity_chooser_view_see_all\" : \"\u1201\u1209\u1295\u121d \u12ed\u1218\u120d\u12a8\u1271\"", "google.protobuf.ServiceOptions", "photo::getCut_10()", "void cv::dnn::dnn4_v20190122::Net::Impl::allocateLayers(const std::vector<LayerPin> &)", "features2d::radiusMatch_14()", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi3EEExy7DistAbsiE", "!write_stack.empty()", "CL_IMAGE_FORMAT_NOT_SUPPORTED", "setTo", "/home/vagrant/build/srclib/opencv/modules/calib3d/src/ptsetreg.cpp", "StringPrintfVector currently only supports up to ", "calib3d::RQDecomp3x3_12()", "AVX512DQ", "core::bitwise_1xor_11()", "double4", "cvtThreePlaneYUVtoBGR", "layer != impl->layers.end()", "I[UMWNXOYOXNUMRMONMPLSLUMXOZR[U[XZYYXYWZU[ NPMSMUNX RMPNOONRNVOYPZR[ NTTUUTTSNT NTTT", "Multi-line text literals are not supported", "max_categories", "\" is not a message type.", "reserveSlot", "minDistBetweenBlobs", "void cv::hal::mul8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "H]LFL[ MGMZ LFSFVGXIYKZNZSYVXXVZS[L[ MGSGVHWIXKYNYSXVWXVYSZMZ", "imgproc::getClipLimit_10()", "Unknown parameter det_fg_threshold for layer type ", "void cv::drawFrameAxes(cv::InputOutputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, float, int)", "0 <= _colRange.start && _colRange.start <= _colRange.end && _colRange.end <= m.cols", "MWRMNV RMVV", "imgproc::arrowedLine_11()", "image.getMat().total() > 0", "NSt6__ndk120__shared_ptr_emplaceIN2cv12FilterEngineENS_9allocatorIS2_EEEE", ": no conversion", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_116SymmColumnFilterINS2_4CastIddEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "N2cv10PAMDecoderE", "getMatFromTensor", "Sizes of input arguments do not match", "GAUSSIAN", "0 <= coi && coi < dcn && scn == 1", "src.size == dst.size", "imgToDenoiseIndex and temporalWindowSize should be chosen corresponding srcImgs size!", "imageGray.type()==CV_8UC1", "calib3d::findEssentialMat_12()", "A.size() == Size(3,3) && A.size() == R.size()", "\"abc_toolbar_collapse_description\" : \"Minnka\"", "vector::_M_emplace_back_aux", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline16SymmColumnFilterINS2_13FixedPtCastExIihEENS2_19SymmColumnVec_32s8uEEENS_9allocatorIS7_EEEE", "Cannot assign a value of type \"", "photo::fastNlMeansDenoisingColored_13()", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14ScaleLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "JZNKNX OKOX WOOU RSVX SSWX LKOK TOYO LXQX TXYX", "virtual void cv::opt_SSE4_1::ColumnFilter<cv::opt_SSE4_1::Cast<float, float>, cv::opt_SSE4_1::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::Cast<float, float>, VecOp = cv::opt_SSE4_1::ColumnNoVec]", "Invalid bit depth for paletted image", "void cv::opt_AVX2::gemmImpl(cv::Mat, cv::Mat, double, cv::Mat, double, cv::Mat, int)", "void cv::cpu_baseline::cvt32s16u(const int *, size_t, uchar *, size_t, ushort *, size_t, cv::Size, void *)", "N2cv13FormattedImplE", "NSt6__ndk115time_put_bynameIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE", "cvCalcEMD2", "N3Iex10ElibaccExcE", "N2cv8opt_AVX28Filter2DItNS0_4CastIffEENS0_11FilterNoVecEEE", "N2cv3dnn16ElementWiseLayerINS0_11BNLLFunctorEEE", "JZPLRITL MORJWO RJR[", "features2d::create_11()", "N2cv12cpu_baseline12_GLOBAL__N_111MorphFilterINS1_5MinOpItEENS1_8MorphVecINS1_4VMinINS_12hal_baseline10v_uint16x8EEEEEEE", "arithm_op", "Key is empty", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphColumnFilter<cv::opt_SSE4_1::(anonymous namespace)::MaxOp<unsigned short>, cv::opt_SSE4_1::(anonymous namespace)::MorphColumnVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_uint16x8> > >::operator()(const uchar **, uchar *, int, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MaxOp<unsigned short>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphColumnVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_uint16x8> >]", "virtual void cv::cpu_baseline::(anonymous namespace)::SqrRowSum<unsigned char, double>::operator()(const uchar *, uchar *, int, int) [T = unsigned char, ST = double]", "imgproc::Laplacian_11()", "virtual void cv::MatOp_GEMM::multiply(const cv::MatExpr &, double, cv::MatExpr &) const", "TUPLTYPE", "The first output matrix must have two channels; one for x and one for y", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ElementWiseLayerINS2_13AbsValFunctorEEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "BlackLevelRepeatDim", "Bad parameter of type CvPoint", "PUUDSGQKPPPTQYS]U`", "std::istream", "F^RHNLKPJSJUKWMXOXQWRU RHVLYPZSZUYWWXUXSWRU RUQYP\\ RUSYT\\ P\\T\\", "HYLFL[ LFXF", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/region_layer.cpp", "double2", "Bogus message code %d", "size == _src2.size() && size == _weights1.size() && size == _weights2.size()", "imgproc::matchTemplate_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv10PAMDecoderENS_9allocatorIS2_EEEE", "Invalid time specified for tIME chunk", "calcHistLookupTables_8u", "m.dims == d", "N2cv11MatOp_AddExE", "$0rpc $1($4.$2) returns ($5.$3)", "core::getTickCount_10()", "core::solveCubic_10()", "imgproc::distanceTransform_11()", "setCovarianceMatrixType", "THDiskFile_new", "vsInvSqrt", "cv::Rect cv::getWindowImageRect(const cv::String &)", "Unsupported method, see #DecompTypes", "void cv::cpu_baseline::FilterEngine__apply(cv::FilterEngine &, const cv::Mat &, cv::Mat &, const cv::Size &, const cv::Point &)", "MWOMUV UMOV", "F_JOJX KOKX KRLPNOPORPSRSX POQPRRRX SRTPVOXOZP[R[X XOYPZRZX HOKO HXMX PXUX XX]X", "LXRKQLRMSLRK RMRQ RQQSRVSSRQ RVR\\ POONNOOPPOTOUNVOUPTO", "void cv::hal::opt_AVX::log64f(const double *, double *, int)", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphRowFilter<cv::opt_SSE4_1::(anonymous namespace)::MinOp<unsigned short>, cv::opt_SSE4_1::(anonymous namespace)::MorphRowVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_uint16x8> > >::operator()(const uchar *, uchar *, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MinOp<unsigned short>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphRowVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_uint16x8> >]", "undistortPoints", "field.type() == google::protobuf::UnknownField::TYPE_GROUP", "Region", "InkNames", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_114MorphRowFilterINS3_5MaxOpIdEENS3_13MorphRowNoVecEEENS_9allocatorIS8_EEEE", "sizeof (", "for strip array", "ml::getShift_10()", "dnn::NMSBoxesRotated_11()", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_9HLS2RGB_fEEE", "JZPXR[TX MURZWU RIRZ", "H\\LMV[ MMW[ NMX[ WNMZ JMQM TMZM J[P[ S[Z[ KMMN PMNN UMWN YMWN MZK[ MZO[ VZT[ WZY[", "nsamples > 0", "com.intel.itt.collector_lib_32", "InputArrayOfArrays: noArray()", "virtual void cv::cpu_baseline::RowFilter<double, double, cv::cpu_baseline::RowNoVec>::operator()(const uchar *, uchar *, int, int) [ST = double, DT = double, VecOp = cv::cpu_baseline::RowNoVec]", "void cv::setTrackbarMax(const cv::String &, const cv::String &, int)", "cvGraphVtxDegreeByPtr", "0 <= scaleIdx && scaleIdx < (int)scaleData->size()", "float cv::intersectConvexConvex(cv::InputArray, cv::InputArray, cv::OutputArray, bool)", "par_info != 0", "cv::Size cv::getContinuousSize2D(cv::Mat &, cv::Mat &, cv::Mat &, int)", "FieldOptions", "static void cv::SVD::compute(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, int)", "K[MKRQ NKSQMX MKWKXOVK NWWW MXWXXTVX", "Overflow for imageSize", "CANCELLED", "std::basic_istream<char, std::char_traits<char> >", "dims <= 2 && step[0] > 0", "video::KalmanFilter_11()", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212ColumnFilterINS2_4CastIfhEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "%s(%d): %s", "void cv::details::FastX::reconfigure(const cv::details::FastX::Parameters &)", "core::LUT_10()", "LXOPNRNTOVQVRTRR UPVRVTUVSVRT", " [@W:[", "IPP:ipp_GaussianBlur(src, dst, ksize, sigma1, sigma2, borderType)", "features2d::setWTA_1K_10()", "cvCreateTrackbar", "virtual void cv::opt_SSE4_1::SymmColumnSmallFilter<cv::opt_SSE4_1::Cast<int, short>, cv::opt_SSE4_1::SymmColumnSmallVec_32s16s>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::Cast<int, short>, VecOp = cv::opt_SSE4_1::SymmColumnSmallVec_32s16s]", "SetInt32", "cascade", "\"abc_shareactionprovider_share_with\" : \"Jakaminen:\"", "one of input categorical variable is not an integer", "\"abc_searchview_description_query\" : \"\u641c\u5c0b\u67e5\u8a62\"", "N2cv3hal8opt_AVX212_GLOBAL__N_119YUV420p2RGB8InvokerILi0ELi4EEE", "IYJRKPLONOOPORNUNWOX MONPNRMUMWOXQXSWTV VOTVSYR[ WOUVTYR[P\\M\\L[M[N\\", "void cv::setOpenGlContext(const cv::String &)", "../../../../modules/core/include/opencv2/core/operations.hpp", "optimize_linear", "inputs.size() >= 1", "N2cv8opt_AVX212_GLOBAL__N_19SqrRowSumItdEE", "NeXTPreDecode", "getBase64Row", "arithm_ipp_min8u", "H\\WIVJWKXJXIWGUFRFOGMILKKOKULXNZQ[S[VZXXYUYTXQVOSNRNOOMQLT RFPGNIMKLOLUMXOZQ[ S[UZWXXUXTWQUOSN", "Corrupt JPEG data: premature end of data segment", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_19SqrRowSumIfdEENS_9allocatorIS5_EEEE", "\"abc_capital_on\" : \"ATIVADO\"", "Unknown estimation method", "zoom_factor", "!inarr.empty()", "int cv::opt_SSE4_1::(anonymous namespace)::MorphRowVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_int16x8> >::operator()(const uchar *, uchar *, int, int) const [VecUpdate = cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_int16x8>]", "Unknown training method (should be BACKPROP or RPROP)", "MXUHTGUFVGVHUJSL", "int cv::opt_AVX2::sum32s(const int *, const uchar *, double *, int, int)", "numpositions > 0", "Field is repeated; the method requires a singular field.", "cvContourArea", "H\\KFY[ YFK[", "core::eigenNonSymmetric_10()", "calib3d::create_13()", "\"abc_action_bar_home_description\" : \"Siirry etusivulle\"", "SamplesPerPixel tag is missing, assuming correct SamplesPerPixel value is 3", "/home/vagrant/build/srclib/opencv/modules/ml/src/data.cpp", "layer_type_size < line.size()", "im2col", "imgproc::nextEdge_10()", "virtual void cv::opt_SSE4_1::RowFilter<unsigned short, double, cv::opt_SSE4_1::RowNoVec>::operator()(const uchar *, uchar *, int, int) [ST = unsigned short, DT = double, VecOp = cv::opt_SSE4_1::RowNoVec]", "\"abc_shareactionprovider_share_with\" : \"Deljenje z\"", "imgproc::threshold_10()", ",skip=%d", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_8RGB2GrayIhEEEE", "void cv::fillPoly(cv::InputOutputArray, const cv::Point **, const int *, int, const cv::Scalar &, int, int, cv::Point)", "virtual void cv::dnn::BatchNormLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "dst0.data == dst.data", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi2EEEij7DistAbsNS1_IiLi2EEEE", "dst.cols == (src1.cols*8)", "G^RFQJOPMULWJZH[F[EZEXFWGXFY RFRKSVT[ RFSKTVT[ `G_H`IaHaG`F^F\\GZJYLWQUWT[", "NVQNOONQNSOUQVSVUUVSVQUOSNQN OQOS PPPT QOQU RORU SOSU TPTT UQUS", "inputs.size() >= 2", "n == 1", "ml::trainAuto_18()", "\"abc_activitychooserview_choose_application\" : \"Seleccionar una aplicaci\u00f3n\"", "calib3d::calibrateHandEye_11()", "/data/local/tmp/", "PTRKRY", "N2cv2ml18DTreesImplForBoostE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16TonemapDragoImplENS_9allocatorIS2_EEEE", "transB", "F^YXWZU[R[PZMXKWIWHXHZI[K[MZOWPURQTKWGYFZF[G\\H[IZH[G[FZFYFWGVHTLRPPVNZMZ OPUP", "virtual void cv::cpu_baseline::(anonymous namespace)::ColumnSum<double, double>::operator()(const uchar **, uchar *, int, int, int) [ST = double, T = double]", "imgproc::getFontScaleFromHeight_11()", "MapKey::GetUInt64Value", "Input argument is not a valid matrix", "\"abc_searchview_description_query\" : \"Suchanfrage\"", "N12opencv_caffe14PowerParameterE", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/color.simd_helpers.hpp", "\"abc_capital_on\" : \"\u0423\u0412\u0406\u041c\u041a.\"", "(size_t)valueInt == sz", "OpenCV TIFF: failed TIFFSetField(tif, TIFFTAG_ROWSPERSTRIP, 1)", "_GLOBAL_", "imgproc::getEdge_10()", "void cv::opt_AVX2::cvt8s64f(const schar *, size_t, uchar *, size_t, double *, size_t, cv::Size, void *)", "27FastNlMeansDenoisingInvokerIhij11DistSquarediE", "N2cv12cpu_baseline12_GLOBAL__N_111MorphFilterINS1_5MinOpIhEENS1_8MorphVecINS1_4VMinINS_12hal_baseline10v_uint8x16EEEEEEE", "Image width is too large for this architecture", "N2cv25VariationalRefinementImpl37ComputeSmoothnessTermVertPass_ParBodyE", "tEXt: text too long", "img0.channels() == 1 && img0.type() == img1.type()", "N2cv8opt_AVX212ColumnFilterINS0_4CastIdhEENS0_11ColumnNoVecEEE", "OpenCV: Can't find required data file: %s", "Invalid sBIT depth specified", "void cv::hal::mul32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, void *)", "CHECK failed: !descriptor_: ", "JZMKWOMS MTWT MXWX", "Type of input image should be CV_8UC3 or CV_8UC4!", "\"abc_action_mode_done\" : \"\u10d3\u10d0\u10e1\u10e0\u10e3\u10da\u10d3\u10d0\"", "Input curves are not polygonal. Use cvApproxChains first", "\"abc_searchview_description_voice\" : \"\u0ca7\u0ccd\u0cb5\u0ca8\u0cbf \u0cb9\u0cc1\u0ca1\u0cc1\u0c95\u0cbe\u0c9f\"", "capDate", "30TegraCvtColor_bgrx2hsv_Invoker", "indexMat.type() == 4", "Broken promise", "b->size() == n", "Nonzero offset is not supported in CV_LINK_RUNS yet", "cvCalcProbDensity", "numWeights % 4 == 0", "virtual void cv::dnn::ReshapeLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "\"search_menu_title\" : \"\u0ab6\u0acb\u0aa7\u0acb\"", "NVQQQSSSSQQQ QQSS SQQS", "%lu: Strip out of range, max %lu", "nelems >= 0", "uchar8", "void cv::hal::magnitude64f(const double *, const double *, double *, int)", "N2cv13Jpeg2KEncoderE", "Invalid strip byte count %llu, strip %lu", "virtual void cv::cpu_baseline::ColumnFilter<cv::cpu_baseline::Cast<double, unsigned short>, cv::cpu_baseline::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::Cast<double, unsigned short>, VecOp = cv::cpu_baseline::ColumnNoVec]", "\"abc_toolbar_collapse_description\" : \"Zbali\u0165\"", "bool cv::find4QuadCornerSubpix(cv::InputArray, cv::InputOutputArray, cv::Size)", "Failed to seek in AVI buffer: value is out of range", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphFilter<cv::opt_AVX2::(anonymous namespace)::MaxOp<short>, cv::opt_AVX2::(anonymous namespace)::MorphVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_int16x16> > >::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MaxOp<short>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_int16x16> >]", "Unsupported norm type! Only NORM_L2 and NORM_L1 are supported", "\"abc_action_bar_home_description\" : \"\u09b9\u09cb\u09ae \u098f \u09a8\u09c7\u09ad\u09bf\u0997\u09c7\u099f \u0995\u09b0\u09c1\u09a8\"", "A single _ is a reserved tag name", "N2cv15LUTParallelBodyE", "Cvirtual void cv::BackgroundSubtractorKNNImpl::apply(cv::InputArray, cv::OutputArray, double)", "TonemapReinhard", "\"abc_searchview_description_search\" : \"\u10eb\u10d8\u10d4\u10d1\u10d0\"", "H]OKOJPJPLNLNJOHPGSFVFYGZIZKYMXNVOSP XGYIYKXMWN VFWGXIXKWMUOSP QPSPVQWRXTXWWYUZR[O[LZKYJWJULULWKWKV VRWTWWVY SPUQVSVWUYTZR[", "h != NULL", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_11YCrCb2RGB_fIfEEEE", "pixel && offsets", "(size_t)iCntMaxima <= piMaxPos.size()", "\"abc_action_bar_up_description\" : \"Zulazulela phezulu\"", "void cv::boxPoints(cv::RotatedRect, cv::OutputArray)", "cvCreateSeqBlock", "inShapes.size() == outShapes.size()", "\"abc_capital_off\" : \"OFF\"", "int cv::cpu_baseline::sqsum16u(const ushort *, const uchar *, int *, double *, int, int)", "/home/vagrant/build/srclib/opencv/modules/core/src/persistence_yml.cpp", "cvReleaseHist", "NWPNRMSMUNUPRQRRSRSQUP RURVSVSURU", "N2cv12cpu_baseline8Filter2DIsNS0_4CastIddEENS0_11FilterNoVecEEE", "CHECK failed: (type) != (WireFormatLite::TYPE_MESSAGE): ", "N12opencv_caffe15ArgMaxParameterE", "non-virtual thunk to ", "core::findFileOrKeep_11()", "\"abc_searchview_description_search\" : \"\u041f\u043e\u0438\u0441\u043a\"", "OutOfMemoryError", "Cannot initialize mutex (%T).", "N2cv10opt_SSE4_112_GLOBAL__N_16RowSumIhdEE", "\"abc_action_bar_up_description\" : \"Navigeer op\"", "int16", "disp12MaxDiff", "Attribute name should be followed by '='", "N12_GLOBAL__N_118CLAHE_CalcLut_BodyItLi65536ELi0EEE", "imgproc::HoughLines_13()", "(rsize == Size(1, 3) || rsize == Size(3, 1)) && (tsize == Size(1, 3) || tsize == Size(3, 1))", "KZZBVESHQKOONTNXO]P`Qb VESIQMPPOUOZP_Qb", "For non-planar calibration rigs the initial intrinsic matrix must be specified", "image.depth() == blob_.depth()", "bool cv::imwrite(const cv::String &, cv::InputArray, const std::vector<int> &)", "#?RADIANCE", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14BlankLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "void cv::AGAST(cv::InputArray, std::vector<KeyPoint> &, int, bool)", "project", "\"abc_action_bar_up_description\" : \"Idi gore\"", "imgproc::arrowedLine_10()", "dnn::DictValue_11()", "!fail", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_19SqrRowSumIsdEENS_9allocatorIS5_EEEE", " ERROR: exception occurred, dump is non-complete", "NSt6__ndk114default_deleteIN2cv25RANSACPointSetRegistratorEEE", "\" is not a valid identifier.", "fsync", "Invalid number of colors in palette", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_10RGB2RGB5x5EEE", "Ptr<cv::BaseRowFilter> cv::opt_AVX2::getLinearRowFilter(int, int, const cv::Mat &, int, int)", "(channels & 1) == 0", "__itt_task_end_overlapped", "virtual void cv::flann::Index::knnSearch(cv::InputArray, cv::OutputArray, cv::OutputArray, int, const cv::flann::SearchParams &)", "N2cv3dnn14dnn4_v2019012215FlattenSubgraphE", "KXPKLX QKMX VPUQVQVPUOTORQPROR ORPSQWRXTXUWVU ORQSRWSX NKQK", "OPENCV_THREAD_POOL_ACTIVE_WAIT_THREADS_LIMIT", "calib3d::reprojectImageTo3D_11()", "void cv::accumulateSquare(cv::InputArray, cv::InputOutputArray, cv::InputArray)", "F^KFKULXNZQ[S[VZXXYUYF LFLUMXOZQ[ HFOF VF\\F", "Invalid matrix initializer type", "imgproc::getTriangleList_10()", "imgproc::createLineSegmentDetector_17()", "\"abc_action_menu_overflow_description\" : \"Chaguo zaidi\"", "s >= 0", "GPSIFDOffset", "!objectPoints.empty() && !imagePoints.empty() && objectPoints.total() == imagePoints.total()", "prevPyr[level * lvlStep1].size() == nextPyr[level * lvlStep2].size()", "Can't write sCAL (buffer too small)", "void cv::hal::opt_AVX2::fastAtan32f(const float *, const float *, float *, int, bool)", "K.size() == Size(3,3) && (K.type() == CV_32F || K.type() == CV_64F) && D.total() == 4", "EltwiseLayerImpl", "imgproc::getVotesThreshold_10()", "core::normalize_13()", "\"abc_shareactionprovider_share_with_application\" : \"\u0ec1\u0e9a\u0ec8\u0e87\u200b\u0e9b\u0eb1\u0e99\u200b\u0e81\u0eb1\u0e9a\u200b %s\"", "p->kind_ == Impl::PROGRAM_SOURCE_CODE", "MapValueRef::GetEnumValue", "covMatType == COV_MAT_SPHERICAL || covMatType == COV_MAT_DIAGONAL || covMatType == COV_MAT_GENERIC", "invalid signature", "\"abc_toolbar_collapse_description\" : \"Kunja\"", "N2cv8opt_AVX212_GLOBAL__N_114MorphRowFilterINS1_5MinOpIsEENS1_11MorphRowVecINS1_4VMinINS_8hal_AVX210v_int16x16EEEEEEE", "rot2quat", "int cv::predictCategorical(cv::CascadeClassifierImpl &, Ptr<cv::FeatureEvaluator> &, double &) [FEval = cv::LBPEvaluator]", "detect", "N2cv3dnn14dnn4_v201901228ELULayerE", "imgproc::goodFeaturesToTrack_10()", "Missing or invalid margin type", "ISOSpeedRatings", "videoio::VideoWriter_12()", "coords", "\"abc_shareactionprovider_share_with\" : \"Condividi con\"", "N2cv11JSONEmitterE", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::XYZ2RGB_i<unsigned char> >::operator()(const cv::Range &) const [Cvt = cv::XYZ2RGB_i<unsigned char>]", "KYPBSETHTJSMQOQPURQTQUSWTZT\\S_Pb", "\" is resolved to \"(", "ml::getIterations_10()", "N6google8protobuf23SourceCodeInfo_LocationE", "\"abc_action_bar_up_description\" : \"\u0414\u044d\u044d\u0448 \u0448\u0438\u043b\u0436\u0438\u0445\"", "N3Iex11EnotsockExcE", "I[MVQUTTWRXPWNUMRMONMQLTLWMYNZP[R[UZWX RMPNNQMTMXNZ", "LYOCNI OCVC ODSDVC NIOHQGTGVHWJWMVOTPQPOONNNMOMON TGUHVJVMUOTP MRXR QTOUNWOYQZTZVYWWVUTTQT QTPUOWPYQZ TZUYVWUUTT QZO[N]N^O`QaTaV`W^W]V[TZ QZP[O]O^P`Qa TaU`V^V]U[TZ", "\"abc_activity_chooser_view_see_all\" : \"\u041f\u0440\u0430\u0433\u043b\u0435\u0434\u0437\u0435\u0446\u044c \u0443\u0441\u0451\"", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2019012222ResizeBilinearSubgraphEEE", "RealAdaboost", "N6google8protobuf11FileOptionsE", "Option field \"", "for fields array", "THDiskFile_position", "\"abc_searchview_description_search\" : \"\u0425\u0430\u0439\u0445\"", "void cv::grabCut(cv::InputArray, cv::InputOutputArray, cv::Rect, cv::InputOutputArray, cv::InputOutputArray, int, int)", "33TegraCvtColor_rgbx2rgb565_Invoker", "readTorchStorage", "void cv::hal::mul8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, void *)", "normals[i].total() == 3", "Mat::nPutB()", "utils::findDataFile(): the current directory is source sub-directory: ", "trueDistTrans", "F^ZJSJOKMLKNJQJSKVMXOYSZZZ JRVR", "'{' - left-brace of map is missing", "Accuracy flag is set and epsilon is < 0", "virtual void cv::cpu_baseline::(anonymous namespace)::SqrRowSum<float, double>::operator()(const uchar *, uchar *, int, int) [T = float, ST = double]", "\" is not defined.", "\"abc_searchview_description_search\" : \"\uac80\uc0c9\"", "strlen(encoding) < 1000", "void cv::hal::cpu_baseline::cvtYUVtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool, bool)", "png_set_sPLT: invalid sPLT", "F^ZJSJOKMLKNJQJSKVMXOYSZZZ SFS^", "THDiskFile_seek", ", from: ", "zCIS_HA", "=int cv::hal::LU32f(float *, size_t, int, float *, size_t, int)", "H]ZFVTUXUZV[Y[[Y\\W [FWTVXVZW[ VTVQUNSMQMNNLQKTKWLYMZO[Q[SZUWVT QMONMQLTLXMZ WF[F", "photo::fastNlMeansDenoisingMulti_15()", "\"abc_searchview_description_search\" : \"Otsing\"", "_mask.size()", "type == CV_32FC1 || type == CV_64FC1", "src.size() == dst.size()", "virtual void cv::CalibrateDebevecImpl::process(cv::InputArrayOfArrays, cv::OutputArray, cv::InputArray)", "solveP3P", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2019012217BatchNormSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "void cv::dnn::dnn4_v20190122::shrinkCaffeModel(const cv::String &, const cv::String &, const std::vector<String> &)", "input buffer %zd", "\"abc_shareactionprovider_share_with_application\" : \"%s \u0b89\u0b9f\u0ba9\u0bcd \u0baa\u0b95\u0bbf\u0bb0\u0bcd\"", "I[L+O1R8T=UAVFWNWVV^UcTgRlOsLy O1Q6S<T@UFVNVVU^TdShQnOs", "cvMaxS", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/shuffle_channel_layer.cpp", "bool cv::stereoRectifyUncalibrated(cv::InputArray, cv::InputArray, cv::InputArray, cv::Size, cv::OutputArray, cv::OutputArray, double)", "KYRRPRNSMTLVLXMZO[Q[SZTYUWUUTSRRQSQURWTXVXXWYV PRNTMVMYO[", "dilations", "int cv::opt_AVX2::(anonymous namespace)::MorphRowVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_int16x16> >::operator()(const uchar *, uchar *, int, int) const [VecUpdate = cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_int16x16>]", "dnn::NMSBoxesRotated_12()", "ml::empty_10()", "G]PGMHJJHMGPGTHWJZM\\P]T]W\\ZZ\\W]T]P\\MZJWHTGPG", "G\\QFNGMHLJKNKb NHMJLNLa QFOGNIMNMb QFSFVGWHXJXLWNVOSP PPTPWQXRYTYWXYWZT[Q[OZNYMW VHWJWLVN WRXTXWWY SFUGVIVMUOSP TPVQWSWXVZT[ KbMb", "N2cv22WarpPerspectiveInvokerE", "depth == 0 || depth == depth_i", "virtual bool cv::VideoWriter::set(int, double)", "N2cv12cpu_baseline12_GLOBAL__N_16RowSumIhiEE", "!allocated || total(outTailShape) == total(outTailShape_)", "video::apply_11()", " \"#%&()+,./124578:;=>???????????????????", "Mat::n_1release()", "SamplesPerPixel tag value is changing, but SMaxSampleValue tag was read with a different value. Cancelling it", "virtual void cv::cpu_baseline::(anonymous namespace)::ColumnSum<int, unsigned char>::operator()(const uchar **, uchar *, int, int, int)", "ml::setP_10()", "\"abc_toolbar_collapse_description\" : \"Replega\"", "ml::setWeakCount_10()", "Invalid image height in IHDR", "sample.size() == Size(means.cols, 1)", "Unsupported BitsPerSample = %d", "_Function->getDims() == ndim", "void cv::hal::opt_AVX2::cvtHSVtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool, bool, bool)", "_src.sameSize(_dst) && dcn == scn", "dnn::readNet_13()", "30TegraCvtColor_rgb2rgbx_Invoker", "Invalid sCAL width", "JZWMQMONNOMQMSNUOVQWWW", "mask.empty() || (mask.depth() == CV_8U && (mcn == 1 || mcn == cn) && size == mask.size)", "net->width > 0 && net->height > 0 && net->channels > 0", "PaddingLayerImpl", "dims > 0 && !hist.empty()", "N7cvflann11LinearIndexINS_7HammingIhEEEE", "u->origdata == data", "(CV_MAT_DEPTH(tvec->type) == CV_64F || CV_MAT_DEPTH(tvec->type) == CV_32F) && (tvec->rows == 1 || tvec->cols == 1) && tvec->rows*tvec->cols*CV_MAT_CN(tvec->type) == 3", "LYPMMV PMQV XMQV XMUV", "std::future_error", "NSt6__ndk114default_deleteIN2cv3dnn16SoftMaxLayerImplEEE", "[VERB", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_11RGB2YCrCb_iIhEEEE", "Mat::n_1zeros__DDI()", "\"abc_searchview_description_clear\" : \"Lek\u00e9rdez\u00e9s t\u00f6rl\u00e9se\"", "static float cv::details::Chessboard::Board::findMaxPoint(cv::flann::Index &, const cv::Mat &, const cv::details::Ellipse &, float, float, cv::Point2f &)", "ni1 > 0 && ni1 == ni3", "dst.cols <= evects.rows", "\"abc_searchview_description_voice\" : \"Stemsoektog\"", "E`WMTKQKOLNMMOMRNTOUQVTVWT WMTLQLOMNONROTQUTUWT VKVSWUYVZV\\U]S]O\\L[JYHWGTFQFNGLHJJILHOHRIUJWLYNZQ[U[YZ VKWKWSXUZV YV[U\\S\\O[LZJYIWHTGQGNHLIKJJLIOIRJUKWLXNYQZUZYYYZ", "can not convert: [%s] to [%s]", "Mat::n_1clone()", "void cv::setTrackbarMin(const cv::String &, const cv::String &, int)", "imgproc::sepFilter2D_10()", "TIFFWriteScanline", "void cv::minMaxLoc(cv::InputArray, double *, double *, cv::Point *, cv::Point *, cv::InputArray)", "Requested and source matrices have different count of elements", "MWSKSLTLTKSK NROPPOROSPSRRURWSX QORPRRQUQWRXTXUWVU", "double cv::Mahalanobis(cv::InputArray, cv::InputArray, cv::InputArray)", "NSt6__ndk114codecvt_bynameIwc9mbstate_tEE", "KZZGYHZI[H[GZFXFVGUHTJSMP[O_Na XFVHUJTNRWQ[P^O`NaLbJbIaI`J_K`Ja OMYM", "\"abc_searchview_description_query\" : \"\u0caa\u0ccd\u0cb0\u0cb6\u0ccd\u0ca8\u0cc6\u0caf\u0ca8\u0ccd\u0ca8\u0cc1 \u0cb9\u0cc1\u0ca1\u0cc1\u0c95\u0cbf\"", "N12opencv_caffe22NormalizeBBoxParameterE", "cblkheight", "\"abc_toolbar_collapse_description\" : \"Sak\u013caut\"", "NSt6__ndk116__narrow_to_utf8ILm16EEE", "KYRJYNKVRZ", "virtual void cv::StereoSGBMImpl::compute(cv::InputArray, cv::InputArray, cv::OutputArray)", "Read error at scanline %lu; got %llu bytes, expected %llu", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphRowFilter<cv::cpu_baseline::(anonymous namespace)::MaxOp<short>, cv::cpu_baseline::(anonymous namespace)::MorphRowVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_int16x8> > >::operator()(const uchar *, uchar *, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MaxOp<short>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphRowVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_int16x8> >]", "25TegraRowOp_split2_InvokerIKllE", "void cv::hal::opt_AVX2::cvtYUVtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool, bool)", "solveLP", "cvGetSpatialMoment", "\"abc_searchview_description_search\" : \"\u0ab6\u0acb\u0aa7\u0acb\"", "CL_INVALID_PLATFORM", "void cv::hal::cpu_baseline::min8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int)", "N7cvflann7anyimpl21typed_base_any_policyINS_20flann_centers_init_tEEE", "MXRFR[S[ RFSFS[ OMVMVN OMONVN", "getTypeFromD3DFORMAT", "virtual void cv::opt_SSE4_1::ColumnFilter<cv::opt_SSE4_1::FixedPtCastEx<int, unsigned char>, cv::opt_SSE4_1::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::FixedPtCastEx<int, unsigned char>, VecOp = cv::opt_SSE4_1::ColumnNoVec]", "1111111111111111", " !#$&')*,-/0235689;<>???????????????????", "O|M%>", "video::get_1transitionMatrix_10()", "libprotobuf-native", "/home/vagrant/build/srclib/opencv/modules/dnn/misc/tensorflow/function.pb.cc", "imgproc::logPolar_10()", "MWOMQV WMQV", "\"%s\": Bad mode", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_19SqrRowSumItdEENS_9allocatorIS5_EEEE", "total >= 0 && (depth == CV_32S || depth == CV_32F)", "No support for converting user data format to LogL", "N12opencv_caffe18BatchNormParameterE", "N2cv3dnn16EltwiseLayerImplE", "??N2cv8colormap5OceanE", "NSt6__ndk120__shared_ptr_pointerIP14_IplConvKernelN2cv14DefaultDeleterIS1_EENS_9allocatorIS1_EEEE", "out_w", "ml::setOptimalParameters_10()", "Unknown object type", "void cv::hal::cpu_baseline::sub8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int)", "virtual void cv::opt_AVX2::ColumnFilter<cv::opt_AVX2::Cast<int, short>, cv::opt_AVX2::SymmColumnSmallVec_32s16s>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::Cast<int, short>, VecOp = cv::opt_AVX2::SymmColumnSmallVec_32s16s]", "KYOMO[P[ OMPMP[ PSQPSNUMXM PSQQSOUNXNXM", "27FastNlMeansDenoisingInvokerIN2cv3VecItLi2EEExy7DistAbsNS1_IiLi2EEEE", "invalid background gamma type", "N2cv3hal8opt_AVX212_GLOBAL__N_120RGB8toYUV420pInvokerE", "video::getDelta_10()", "N2cv3hal12cpu_baseline12_GLOBAL__N_119YUV422toRGB8InvokerILi0ELi1ELi0ELi4EEE", "NSt6__ndk114default_deleteIN2cv3dnn14ConstLayerImplEEE", "NSt6__ndk114__num_put_baseE", "\"abc_action_bar_home_description\" : \"\u700f\u89bd\u4e3b\u9801\"", "cvCreatePOSITObject", "virtual void cv::KMeansDistanceComputer<true>::operator()(const cv::Range &) const [onlyDistance = true]", "\"search_menu_title\" : \"\u0418\u0437\u0434\u04e9\u04e9\"", "anchors", "CL_INVALID_D3D10_RESOURCE_KHR", "Not enough data for scanline %lu, expected a request for at most %lld bytes, got a request for %lld bytes", "\"abc_searchview_description_clear\" : \"Sorguyu temizle\"", "AVX512F", "\"abc_toolbar_collapse_description\" : \"\u0e22\u0e38\u0e1a\"", "max_bits", "imgproc::cornerEigenValsAndVecs_10()", "Predictor", "core::split_10()", "double cv::norm(cv::InputArray, int, cv::InputArray)", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_9RGB2Lab_bEEE", "N3Iex11EnotconnExcE", "_src1.sameSize(_src2) && stype == _src2.type()", "P.empty() || P.size() == Size(3, 3) || P.size() == Size(4, 3)", "N2cv2ml14BruteForceImpl19findKNearestInvokerE", "\"abc_shareactionprovider_share_with_application\" : \"%s \u0dc3\u0db8\u0d9f \u0db6\u0dd9\u0daf\u0dcf\u0d9c\u0db1\u0dca\u0db1\"", "void cv::hal::cpu_baseline::merge8u(const uchar **, uchar *, int, int)", "Bogus DQT index %d", "Error in header for PIZ-compressed data (invalid bitmap size).", "double cv::calibrateCameraRO(cv::InputArrayOfArrays, cv::InputArrayOfArrays, cv::Size, int, cv::InputOutputArray, cv::InputOutputArray, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, int, cv::TermCriteria)", "CameraCalibration1", "getConstBlob", "video::get_1measurementNoiseCov_10()", "channel_size", "MaxApertureValue", "Maximum TIFF file size exceeded", "Datatype of saved index is different than of the one to be created.", "scaleAdd", "NWRFQGQHRISITHTGSFRF RGRHSHSGRG RMR[S[ RMSMS[", "imgproc::connectedComponentsWithStatsWithAlgorithm_10()", "31TegraCvtColor_bgr2ycrcb_Invoker", "N2cv12cpu_baseline9RowFilterIhfNS0_8RowNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX29RowFilterIsdNS2_8RowNoVecEEENS_9allocatorIS5_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv22Affine2DRefineCallbackENS_9allocatorIS2_EEEE", "N2cv10opt_SSE4_112_GLOBAL__N_111MorphFilterINS1_5MaxOpIdEENS1_10MorphNoVecEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16DefaultFormatterENS_9allocatorIS2_EEEE", "N2cv12cpu_baseline12ColumnFilterINS0_13FixedPtCastExIihEENS0_11ColumnNoVecEEE", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_18Gray2RGBItEEEE", "TargetPrinter", "virtual void cv::cpu_baseline::ColumnFilter<cv::cpu_baseline::FixedPtCastEx<int, unsigned char>, cv::cpu_baseline::SymmColumnVec_32s8u>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::FixedPtCastEx<int, unsigned char>, VecOp = cv::cpu_baseline::SymmColumnVec_32s8u]", "imgproc::grabCut_11()", "\"abc_action_bar_up_description\" : \"\u0d89\u0dc4\u0dbd\u0da7 \u0dc3\u0d82\u0da0\u0dcf\u0dbd\u0db1\u0dba \u0d9a\u0dbb\u0db1\u0dca\u0db1\"", "Conv2DBackpropInput", "ml::setCovarianceMatrixType_10()", "/home/vagrant/build/srclib/opencv/modules/dnn/src/tensorflow/tf_graph_simplifier.cpp", "N2cv16MinProblemSolverE", "top_k", "N2cv2ml13SVMKernelImplE", "core::PCACompute2_11()", "\"abc_action_mode_done\" : \"\u0a39\u0a4b \u0a17\u0a3f\u0a06\"", "Cannot handle different values per sample for \"%s\"; tag ignored", "features2d::knnMatch_15()", "cvGetAffineTransform", "VIDEOIO(%s): trying capture filename='%s' ...", "*N12_GLOBAL__N_121system_error_categoryE", "void cv::hal::opt_AVX2::magnitude64f(const double *, const double *, double *, int)", "Truncated header.", "SubSecTime", "\" must be unique within ", "\"abc_searchview_description_voice\" : \"\u97f3\u58f0\u691c\u7d22\"", "N12opencv_caffe16V0LayerParameterE", "BcGFG[ HFH[ RFR[ SFS[ ]F][ ^F^[ DFKF OFVF ZFaF D[a[ `[ab a[ab", "NSt6__ndk120__shared_ptr_emplaceIN2cv16MergeDebevecImplENS_9allocatorIS2_EEEE", "Proto file starts with 0xEF but not UTF-8 BOM. Only UTF-8 is accepted for proto file.", "void cv::hal::cpu_baseline::absdiff8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int)", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2019012223UpsamplingKerasSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "operator\"\" ", "St12domain_error", "minThreshold", "core::batchDistance_13()", "photo::denoise_1TVL1_10()", "): failed TIFFSetField(tif, TIFFTAG_SAMPLEFORMAT, SAMPLEFORMAT_IEEEFP)", "photo::pencilSketch_10()", "cvCreateSeq", "maxval=", "\"abc_capital_off\" : \"IZKLOPLJENO\"", "npoints >= 0 && (depth == CV_32F || depth == CV_32S)", "\" channel.", "int cv::opt_AVX2::SymmColumnSmallVec_32s16s::operator()(const uchar **, uchar *, int) const", "__itt_sync_prepare", "\"abc_activity_chooser_view_see_all\" : \"T\u00fcm\u00fcn\u00fc g\u00f6ster\"", "imencode", "\", but only ", "\"abc_searchview_description_clear\" : \"Effacer la requ\u00eate\"", "NMSBoxes", "cvGetHuMoments", "prototxt", "\"abc_action_mode_done\" : \"\u054a\u0561\u057f\u0580\u0561\u057d\u057f \u0567\"", "N2cv12cpu_baseline12_GLOBAL__N_114MorphRowFilterINS1_5MinOpItEENS1_11MorphRowVecINS1_4VMinINS_12hal_baseline10v_uint16x8EEEEEEE", "cv::dnn::BatchNormLayerImpl::BatchNormLayerImpl(const cv::dnn::dnn4_v20190122::LayerParams &)", "JZWKVMTOPQMR SPMS UFVGWIWKVNTPQRMT", "MWQKPLPNQOSOTNTLSKQK", "H[MSXSXQWOVNSMQMNNLPKSKULXNZQ[S[VZXX WRWQVO MPLRLVMX VSVPUNSM QMONNOMRMVNYOZQ[", "imgproc::accumulateProduct_10()", "N2cv8AlignMTBE", "int cv::opt_AVX2::(anonymous namespace)::MorphRowVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_float32x8> >::operator()(const uchar *, uchar *, int, int) const [VecUpdate = cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_float32x8>]", "Value must be non-negative integer for uint64 option \"", "image0.dims == 2", "30TegraCvtColor_bgr2gray_Invoker", "N2cv10opt_SSE4_112_GLOBAL__N_111MorphFilterINS1_5MinOpIhEENS1_8MorphVecINS1_4VMinINS_10hal_SSE4_110v_uint8x16EEEEEEE", "\"abc_searchview_description_clear\" : \"Borrar consulta\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_111MorphFilterINS3_5MinOpIsEENS3_8MorphVecINS3_4VMinINS1_10hal_SSE4_19v_int16x8EEEEEEENS_9allocatorISD_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212ColumnFilterINS2_4CastIfsEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "\"abc_search_hint\" : \"\u0e04\u0e49\u0e19\u0e2b\u0e32\u2026\"", "Unrecognized or unsupported array type", "/factor_y", "repeated", "I^LRJTIWIYJ[L[NZPX RRPXPZQ[S[UZWXXUXR XRYVZW\\W^V", "OPENCV_IPP", "SetRepeatedEnumValue accepts only valid integer values: ", "Files that do not use optimize_for = LITE_RUNTIME cannot import files which do use this option.  This file is not lite, but it imports \"", "locateROI", "Bits/sample must be 1 for Group 3/4 encoding/decoding", "CsortedIndices.type() == CV_32SC1", "The YAML streams must start with '---', except the first one", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_17RGB2RGBIhEEEE", "static Ptr<cv::ml::TrainData> cv::ml::TrainData::loadFromCSV(const cv::String &, int, int, int, const cv::String &, char, char)", "N2cv10opt_SSE4_112ColumnFilterINS0_4CastIfsEENS0_11ColumnNoVecEEE", "moments != 0", "\"abc_action_mode_done\" : \"\u0c2a\u0c42\u0c30\u0c4d\u0c24\u0c2f\u0c3f\u0c02\u0c26\u0c3f\"", "idx_k >= 0", "detectAndDecode", "sz <= sizeof(scalar)", "imgproc::floodFill_14()", "org.opencv.videoio", "J\\K[NZQXSVUSWOXKXIWGUFSGRHQJPOPTQXRZT[V[XZYY", "insertChannel", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearItffLi1ENS_12HResizeNoVecEEENS_13VResizeLinearItffNS_4CastIftEENS_23VResizeLinearVec_32f16uEEEEE", "void cv::eigenNonSymmetric(cv::InputArray, cv::OutputArray, cv::OutputArray)", "getPlane", "fabs(max_response) > 0", "ml::setRpropDW0_10()", "H\\WFMFLOMNPMSMVNXPYSYUXXVZS[P[MZLYKW", "objdetect::detectAndDecode_11()", "text compression mode is out of range", "N2cv19PointSetRegistratorE", "features2d::clone_10()", "/home/vagrant/build/srclib/opencv/modules/calib3d/src/checkchessboard.cpp", "\"abc_searchview_description_clear\" : \"Smazat dotaz\"", "MWRLRX OOUO MUOWQXSXUWWU", "rotated images must have at least four channels", "log_response.rows == LDR_SIZE && log_response.cols == 1 && log_response.channels() == channels", "/home/vagrant/build/srclib/opencv/modules/dnn/src/nms.inl.hpp", "Invalid key code film manufacturer code (must be between 0 and 99).", "  what():  ", "void cv::hal::cpu_baseline::mul16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, const double *)", "blob.type() == 5", "J[WOXMXQWOVNTMPMNNMOMQNRPSUUWVXW MPNQPRUTWUXVXYWZU[Q[OZNYMWM[NY", "NSt6__ndk17codecvtIDic9mbstate_tEE", "0 < thickness && thickness <= MAX_THICKNESS", "!outputs.empty()", "\"abc_searchview_description_submit\" : \"\u63d0\u4ea4\u67e5\u8be2\"", "_gradient.rows == _theta.rows && _gradient.cols == _theta.cols", "imgproc::rotatedRectangleIntersection_10()", "video::get_1gain_10()", "too short", "video::calcOpticalFlowPyrLK_12()", "THDiskFile_readFloat", "attribute_proto.ints_size() == 4", "void cv::hal::opt_SSE4_1::mul32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, const double *)", "total(inputs[i]) == total(shapeAfter)", "video::setPyrScale_10()", "\"abc_action_bar_up_description\" : \"\u092e\u093e\u0925\u093f \u0916\u094b\u091c\u094d\u0928\u0941\u0939\u094b\u0938\u094d\"", "Invalid interlace type specified", "The output header should be CvMatND", "E]JMHLGJGIHGJFKFMGNINKMOLRKVKXLZN[P[RZSYUUXMZF XMWQVWVZW[X[ZZ[Y]V", "dnn::enableFusion_10()", "H\\RUJPRTZPRU", "\"abc_action_mode_done\" : \"\u0ec1\u0ea5\u0ec9\u0ea7\u0ec6\"", "/home/vagrant/build/srclib/opencv/modules/video/src/optflowgf.cpp", " empty()=false", "no space in chunk cache", "N2cv3ocl24OpenCLBufferPoolBaseImplINS0_20OpenCLBufferPoolImplENS0_13CLBufferEntryEP7_cl_memEE", "Floating point \"Predictor\" not supported with %d data format", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_19ColumnSumIidEENS_9allocatorIS5_EEEE", "void cv::hal::opt_AVX::fastAtan64f(const double *, const double *, double *, int, bool)", "KYUBNRUb", "UTF-16", "cv::CountNonZeroFunc cv::getCountNonZeroTab(int)", "I[MSMVNYOZQ[S[UZWXXUXRWOVNTMRMPNNPMSIb", "G^LML[ MNMZ IMNMN[ NQOOPNRMUMWNXOYRY[ WOXRXZ UMVNWQW[ I[Q[ T[\\[ JMLN KMLO LZJ[ LYK[ NYO[ NZP[ WZU[ WYV[ YYZ[ YZ[[", "\" is a message. To set the entire message, use syntax like \"", "N3Iex8EpermExcE", "Input", "setUseOpenVX", "i3 != NULL", "Unknown/unsupported threshold type", "\"abc_activitychooserview_choose_application\" : \"App ausw\u00e4hlen\"", "p2.depth() == CV_32S || p2.depth() == CV_32F", "png_read_image: unsupported transformation", "N2cv28BackgroundSubtractorMOG2ImplE", "imwrite_('", "hpoints > 0", "I[NFMGMM NGMM NFOGMM WFVGVM WGVM WFXGVM", "void cv::AGAST(cv::InputArray, std::vector<KeyPoint> &, int, bool, AgastFeatureDetector::DetectorType)", "dnn::getLayersCount_10()", "!I1.empty() && I1.depth() == CV_8U && I1.channels() == 1", "unknown/unsupported parameter type", "invalid", "SetRepeatedInt64", "<ZZ<ZZZZZZZ", "samples/data", "void cv::stylization(cv::InputArray, cv::OutputArray, float, float)", "arithm_ipp_absdiff32f", "\"abc_action_menu_overflow_description\" : \"\u0645\u0632\u06cc\u062f \u0627\u062e\u062a\u06cc\u0627\u0631\u0627\u062a\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_16RowSumIsdEENS_9allocatorIS5_EEEE", "calib3d::setPreFilterSize_10()", "N7cvflann11KMeansIndexINS_2L1IfEEE22KMeansDistanceComputerE", "fastNlMeansDenoising", "The first output argument is not a valid matrix", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX29RowFilterIddNS2_8RowNoVecEEENS_9allocatorIS5_EEEE", "imgproc::dilate_13()", "type or int32).", "NSt6__ndk120__shared_ptr_emplaceIN2cv17FlannBasedMatcherENS_9allocatorIS2_EEEE", "Bogus virtual array access", "cvSolvePoly", "void cv::hal::opt_AVX2::min8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "int cv::dnn::dnn4_v20190122::Net::addLayer(const cv::String &, const cv::String &, cv::dnn::dnn4_v20190122::LayerParams &)", "it.planes[0].isContinuous() && it.planes[1].isContinuous()", "mask.rows == size.height+2 && mask.cols == size.width+2", "Video I/O: exception during plugin loading: ", "Arithmetic table 0x%02x was not defined", "G]NFT[ OFU[ PFV[ [GIZ LFSF XF^F F[L[ Q[X[ MFOH QFPH RFPG YF[G ]F[G IZG[ IZK[ TZR[ TYS[ UYW[", "Invalid color type/bit depth combination in IHDR", "addRowTop", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_16RowSumIfdEENS_9allocatorIS5_EEEE", "N12opencv_caffe16V1LayerParameterE", "cvCalibrateCamera4", "\"abc_search_hint\" : \"Cerca\u2026\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_19ColumnSumIthEENS_9allocatorIS5_EEEE", "isSeq()", "string_view::substr", "bad height format", "_src.sameSize(_dst) && sdepth == ddepth", "/home/vagrant/build/srclib/opencv/modules/features2d/src/kaze/nldiffusion_functions.cpp", "\"abc_action_menu_overflow_description\" : \"Fler alternativ\"", " but running with ", "videoio::isOpened_10()", "N3Iex10EtxtbsyExcE", "\"abc_action_menu_overflow_description\" : \"\u66f4\u591a\u9078\u9805\"", ".SimpleBlobDetector", "void cv::hal::opt_AVX2::cvtRGBAtoMultipliedRGBA(const uchar *, size_t, uchar *, size_t, int, int)", "row.type() == CV_64FC1", "CalibrateRobertson", "map.rows ==3", "N2cv3hal12cpu_baseline12_GLOBAL__N_120YUV420sp2RGB8InvokerILi0ELi0ELi3EEE", "undefined", "void cv::cpu_baseline::cvt32s(const int *, size_t, uchar *, size_t, int *, size_t, cv::Size, void *)", "G]IIJKKOKUJYI[ [IZKYOYUZY[[ IIKJOKUKYJ[I I[KZOYUYYZ[[", "core::SVDecomp_11()", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi4EEEij7DistAbsiE", "img.type()", "size == (int)dstBlob.total()", "H\\MFXFRNUNWOXPYSYUXXVZS[P[MZLYKW", "N2cv12cpu_baseline8Filter2DIsNS0_4CastIfsEENS0_11FilterNoVecEEE", "/flatten", "(CV_MAT_DEPTH(_imagePoints1->type) == CV_32F || CV_MAT_DEPTH(_imagePoints1->type) == CV_64F) && ((_imagePoints1->rows == pointsTotal && _imagePoints1->cols*cn == 2) || (_imagePoints1->rows == 1 && _imagePoints1->cols == pointsTotal && cn == 2))", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml10RTreesImplENS_9allocatorIS3_EEEE", "TIFFLinkDirectory", "core::gemm_11()", "(esz1 % sizeof(int)) == 0 && (esz2 % sizeof(int)) == 0", "N12opencv_caffe17PriorBoxParameterE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi3EEElm7DistAbsiE", "int cv::cpu_baseline::(anonymous namespace)::MorphColumnVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_int16x8> >::operator()(const uchar **, uchar *, int, int, int) const [VecUpdate = cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_int16x8>]", "\"abc_search_hint\" : \"\u101b\u103e\u102c\u1016\u103d\u1031\u1015\u102b...\"", "JZMMSMUNVOWQWSVUUVSWMW", "hasLayerAttr(layer, \"squeeze_dims\")", "CompressedBitsPerPixel", "\") is not compatible with this reflection object (which is for type \"", "score_threshold >= 0", "Post operation on semaphore failed (%T).", "MapValueRef::GetBoolValue", "gamma value out of range", "infogain_loss", "Invalid key code number of perforations per frame (must be between 1 and 15).", "core::mulTransposed_13()", "N6google8protobuf8internal23TypeDefinedMapFieldBaseINSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN17opencv_tensorflow9AttrValueEEE", "getName", "SAME_LOWER", "minValue.type()", "FormattedImpl", "virtual void cv::cpu_baseline::SymmColumnFilter<cv::cpu_baseline::Cast<int, short>, cv::cpu_baseline::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::Cast<int, short>, VecOp = cv::cpu_baseline::ColumnNoVec]", "NSt6__ndk16locale5__impE", "warpAffine", "sz.width % 2 == 0 && sz.height % 3 == 0", "yend == m_height", "typeToStr", "signed char", "H\\PFMGLILLMNPOTOWNXLXIWGTFPF PFNGMIMLNNPO TOVNWLWIVGTF POMPLQKSKWLYMZP[T[WZXYYWYSXQWPTO PONPMQLSLWMYNZP[ T[VZWYXWXSWQVPTO", "J[PFNGOIQJ PFOGOI UFWGVITJ UFVGVI QJOKNLMNMQNSOTQUTUVTWSXQXNWLVKTJQJ RUR[ SUS[ NXWX", "G]LML[ MMM[ WMW[ XMX[ IM[M I[P[ T[[[", "levels1 >= 0", "N2cv10opt_SSE4_112_GLOBAL__N_117MorphColumnFilterINS1_5MinOpIsEENS1_14MorphColumnVecINS1_4VMinINS_10hal_SSE4_19v_int16x8EEEEEEE", "Messages can't have default values.", "OpenCV TIFF: failed TIFFReadRGBAStrip(tif, y, (uint32*)buffer)", "J[RMPNNPMSMVNYOZQ[S[UZWXXUXRWOVNTMRM", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphRowFilter<cv::opt_SSE4_1::(anonymous namespace)::MaxOp<float>, cv::opt_SSE4_1::(anonymous namespace)::MorphRowVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_float32x4> > >::operator()(const uchar *, uchar *, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MaxOp<float>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphRowVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_float32x4> >]", "Unknown target identifier", "MXUFTGRS UGRS UFVGRS PYOZP[QZPY", "MXRFQGRHSGRF RMR[ SMS[ OMSM O[V[", "cvGetReal1D", "findQuadNeighbors", ">N2cv8colormap8TwilightE", "void cv::opt_AVX2::bilateralFilterInvoker_32f(int, int, int, int *, const cv::Mat &, cv::Mat &, float, float *, float *)", "MWOPRV UPRVQXPYOY", "Merging SGILog codec-specific tags failed", "patchSize >= 2", "dnn::readNet_12()", "calib3d::calibrateCamera_10()", "%s-%03d.txt", "compare", "calib3d::setBlockSize_10()", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2HSV_b>::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2HSV_b]", "_R.needed() && _t.needed()", "Unexpected end of string.", "int cv::opt_AVX2::sqsum64f(const double *, const uchar *, double *, double *, int, int)", "Cannot get a TiledInputFile pointer from an InputFile that is not tiled.", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_18Filter2DIsNS2_4CastIfsEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "scn == m.cols || scn + 1 == m.cols", "padBottom", "imgproc::setDp_10()", "TIFFReadRawTile", "\" not found", "/home/vagrant/build/srclib/opencv/modules/calib3d/src/posit.cpp", "Input array is not a valid matrix", "core::scaleAdd_10()", "fpAcc", "photo::illuminationChange_11()", "N2cv12cpu_baseline16SymmColumnFilterINS0_4CastIdsEENS0_11ColumnNoVecEEE", "cn == 1 || cn == 3 || cn == 4", "updateWeightsAndTrim", "double cv::fisheye::calibrate(cv::InputArrayOfArrays, cv::InputArrayOfArrays, const cv::Size &, cv::InputOutputArray, cv::InputOutputArray, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays, int, cv::TermCriteria)", "\"abc_searchview_description_clear\" : \"\u0915\u094d\u200d\u0935\u0947\u0930\u0940 \u0938\u094d\u200d\u092a\u0937\u094d\u200d\u091f \u0915\u0930\u093e\"", "void cv::hal::opt_AVX::fastAtan32f(const float *, const float *, float *, int, bool)", "\"abc_action_mode_done\" : \"\u09b8\u09ae\u09cd\u09aa\u09a8\u09cd\u09a8 \u09b9\u09af\u09bc\u09c7\u099b\u09c7\"", "I*z7Azv", "cvtColorTwoPlaneYUV2BGRpair", "HOG cascade is not supported in 3.0", "ml::getSample_10()", "N2cv11WebPDecoderE", "N2cv10opt_SSE4_112_GLOBAL__N_114MorphRowFilterINS1_5MaxOpItEENS1_11MorphRowVecINS1_4VMaxINS_10hal_SSE4_110v_uint16x8EEEEEEE", "scalarParams.has(\"pad_r\")", "thresh_64f", "upsample", "objdetect::detectMultiScale2_12()", "across_channels", "mask element value must be equal GC_BGD or GC_FGD or GC_PR_BGD or GC_PR_FGD", "/home/vagrant/build/srclib/opencv/modules/core/src/algorithm.cpp", "virtual void cv::dnn::ElementWiseLayer<cv::dnn::ChannelsPReLUFunctor>::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays) [Func = cv::dnn::ChannelsPReLUFunctor]", "OPENCV_TRACE_MAX_CHILDREN", "ImageDescription", "cvCreateSparseMat", "\"abc_action_bar_up_description\" : \"\u0414\u0432\u0438\u0436\u0438 \u0441\u0435 \u043d\u0430\u0433\u043e\u0440\u0435\"", "error writing ancillary chunked compressed data", "N2cv10opt_SSE4_18Filter2DIsNS0_4CastIffEENS0_11FilterNoVecEEE", "hysteresis", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_16RowSumIhdEENS_9allocatorIS5_EEEE", "H]OKOJPJPLNLNJOHPGSFWFZG[I[KZMYNWOSPQQQSSTTT UFZG YGZIZKYMXNVO WFXGYIYKXMWNSPRQRSST PXOYOZP[Q[RZRYQXPX PYPZQZQYPY", "TIFFVStripSize", "\"abc_action_mode_done\" : \"Nimemaliza\"", "JZWMQMONNOMQMSNUOVQWWW MRUR", "N2cv2ml6DTreesE", "imgproc::boxFilter_10()", "calib3d::setROI2_10()", "N3Iex9EmfileExcE", "video::getNumLevels_10()", "\"abc_searchview_description_voice\" : \"\u0d36\u0d2c\u0d4d\u0d26\u0d24\u0d3f\u0d30\u0d2f\u0d7d\"", "distortPoints", "void cv::hal::opt_AVX2::div32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, const double *)", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_19SqrRowSumIsdEENS_9allocatorIS5_EEEE", "N2cv15StdMatAllocatorE", "double cv::dotProd_64f(const double *, const double *, int)", "NSt6__ndk120__shared_ptr_emplaceIN2cv23LineSegmentDetectorImplENS_9allocatorIS2_EEEE", "Value must be integer for int64 option \"", "/home/vagrant/build/srclib/opencv/modules/core/src/lpsolver.cpp", "Terminating PackBitsDecode due to lack of data.", "core::countNonZero_10()", "N7cvflann7anyimpl16small_any_policyIbEE", "N11opencv_onnx19TensorProto_SegmentE", "CALIB_USE_INTRINSIC_GUESS flag is set, but the camera matrix is not 3x3", "OpenCL: Kernel(%s)::set(arg_index=%d, flags=%d): can't create cl_mem handle for passed UMat buffer (addr=%p)", "\"abc_capital_on\" : \"\u10e9\u10d0\u10e0\u10d7\u10e3\u10da\u10d8\u10d0\"", "N12opencv_caffe19SaveOutputParameterE", "palette color-map: too few entries", "(!K1.empty() && !K2.empty() && !D1.empty() && !D2.empty()) || !(flags & CALIB_FIX_INTRINSIC)", "(anonymous namespace)", "Expected \"", "\"abc_searchview_description_search\" : \"\u0628\u062d\u062b\"", "30TegraCvtColor_bgr2hsvf_Invoker", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/phasecorr.cpp", "\"abc_action_menu_overflow_description\" : \"Daugiau parink\u010di\u0173\"", "H^ZH[H\\F[L[JZHYGWFTFQGOIMLLOKSKVLYMZP[R[UZWXYT TFRGPINLMOLSLVMYNZP[ R[TZVXXT UT\\T", "H]ZH[H\\F[L[JZHYGWFTFQGOIMLLOKSKVLYMZP[S[UZWXXV QHOJNLMOLSLWMY TFRGPJOLNOMSMXNZP[", "void cv::edgePreservingFilter(cv::InputArray, cv::OutputArray, int, float, float)", "objdetect::detect_13()", "scaleStep_ > 0.0", "core::flip_10()", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2HLS_f>::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2HLS_f]", "/home/vagrant/build/srclib/opencv/modules/photo/src/fast_nlmeans_multi_denoising_invoker.hpp", "_tvec.total() * _tvec.channels() == 3 && (_tvec.depth() == CV_32F || _tvec.depth() == CV_64F)", "J[XOXPYPYOXNUMRMONNONQORVVWW NPOQVUWVWYVZS[P[MZLYLXMXMY", "LYOCNI OCVC ODSDVC NIOHQGTGVHWJWMVOTPQPOONNNMOMON TGUHVJVMUOTP MRXR VVVWWWWVVUTTRTPUOVNYN^O`QaTaV`W^W\\VZTYQYN[ RTPVOYO^P`Qa TaU`V^V\\UZTY", "imgproc::ellipse_12()", "writeTextGraph", "String literals cannot cross line boundaries.", "factorWidth.total()", "imgproc::circle_13()", "calibrationMatrixValues", "preFilterType", "__itt_notify_sync_name", "/home/vagrant/build/srclib/opencv/modules/photo/src/tonemap.cpp", "range.start", "CHECK failed: options->ParsePartialFromString(buf): ", "The associated promise has been destructed prior to the associated state becoming ready.", "imgcodecs::imread_10()", "N2cv10opt_SSE4_112_GLOBAL__N_114MorphRowFilterINS1_5MaxOpIfEENS1_11MorphRowVecINS1_4VMaxINS_10hal_SSE4_111v_float32x4EEEEEEE", "TIFFVTileSize", "KYOBOb UBUb", "31TegraCvtColor_gray2rgbx_Invoker", "cvNamedWindow", "__itt_relation_add_to_current_ex", "\"abc_shareactionprovider_share_with_application\" : \"%s\uc640(\uacfc) \uacf5\uc720\"", "/home/vagrant/build/srclib/opencv/modules/core/src/channels.cpp", "N3Iex10EbadrqcExcE", "ml::findNearest_10()", "video::getUseSpatialPropagation_10()", "growHistory", "N6google8protobuf2io19CopyingOutputStreamE", "\" to image file \"", "\"abc_action_bar_home_subtitle_description_format\" : \"%1$s, %2$s: %3$s\"", "map::at:  key not found", "blob_.depth() == CV_32F", "\"abc_toolbar_collapse_description\" : \"\u0dc4\u0d9a\u0dd4\u0dc5\u0db1\u0dca\u0db1\"", "ld.outputBlobsWrappers.size() == 1", "RealDFT", ".across_spatial", "virtual void cv::opt_SSE4_1::SymmColumnFilter<cv::opt_SSE4_1::Cast<int, short>, cv::opt_SSE4_1::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::Cast<int, short>, VecOp = cv::opt_SSE4_1::ColumnNoVec]", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_8RGB2GrayIhEEEE", "Message missing required fields: ", "runKnnSearch_", "Copy dim[%d] (which has zero size) is out of the source shape bounds", "H]YJYIXIXKZKZIYGWFTFQGOIMLLOKSKVLYMZO[R[UZWXXVXSWQVPTOQOOPNQMS PINLMOLSLWMY VXWVWSVQ TFRGPJOLNOMSMXNZO[ R[TZUYVVVRUPTO", "haveVulkan()", "int cv::cpu_baseline::(anonymous namespace)::MorphVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_int16x8> >::operator()(uchar **, int, uchar *, int) const [VecUpdate = cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_int16x8>]", "cvApproxPoly", "\"abc_searchview_description_clear\" : \"\u0d05\u0d28\u0d4d\u0d35\u0d47\u0d37\u0d23\u0d02 \u0d2e\u0d3e\u0d2f\u0d4d\u200c\u0d15\u0d4d\u0d15\u0d41\u0d15\"", "_detector", "\"abc_shareactionprovider_share_with_application\" : \"Deila me\u00f0 %s\"", "halfsample", "\"abc_action_mode_done\" : \"Atlikta\"", "%lu: Row out of range, max %lu", "void cv::hal::cpu_baseline::addRNGBias64f(double *, const double *, int)", "Invalid number of transparent colors specified", "flipped", " kind=0x%08llx", "mask must have CV_8UC1 type", "H\\KFYFO[ KFKGXG XFN[O[", "Incorrect keyframe parameters.", "N2cv21resizeGeneric_InvokerINS_13HResizeLinearIhisLi2048ENS_12HResizeNoVecEEENS_13VResizeLinearIhisNS_11FixedPtCastIihLi22EEENS_22VResizeLinearVec_32s8uEEEEE", "N2cv4MSERE", "TIFFReadDirEntryArray", "H\\JFR[ JFKFRX ZFYFRX ZFR[", "features2d::match_10()", "cvFindGraphEdge", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::RGB2Gray<uchar> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::RGB2Gray<uchar>]", "Application built with libpng-", "_pt1.type() == CV_64F && _pt2.type() == CV_64F && _F.type() == CV_64F", "radiusList.size() != 0 && radiusList.size() == numberList.size()", "\"search_menu_title\" : \"\u101b\u103e\u102c\u1016\u103d\u1031\u1015\u102b\"", "source", "void cv::Laplacian(cv::InputArray, cv::OutputArray, int, int, double, double, int)", "cn >= 1 && cn <= 4", "EPS_SVR", "cols >= 0", "(!K.empty() && !D.empty()) || !(flags & CALIB_USE_INTRINSIC_GUESS)", "CHECK failed: (buffer_used_) == (buffer_size_): ", "__itt_detach", "_gray_image.type()", "imgproc::polylines_10()", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi2EEEij11DistSquaredNS1_IiLi2EEEE", "params.size() % 2 == 0", "iter->i < points_ && iter->j < points_", "Both input images must have CV_8UC1", "weight_data", "virtual void cv::opt_SSE4_1::(anonymous namespace)::ColumnSum<int, unsigned char>::operator()(const uchar **, uchar *, int, int, int)", "\"abc_searchview_description_submit\" : \"Submit query\"", "png_set_keep_unknown_chunks: too many chunks", "void cv::opt_AVX2::cvt32s8u(const int *, size_t, uchar *, size_t, uchar *, size_t, cv::Size, void *)", "void cv::sort(cv::InputArray, cv::OutputArray, int)", "stateThread==STATE_THREAD_WORKING_SLEEPING", "virtual void cv::Feature2D::detectAndCompute(cv::InputArray, cv::InputArray, std::vector<KeyPoint> &, cv::OutputArray, bool)", "N2cv8opt_AVX29RowFilterIsfNS0_13RowVec_16s32fEEE", "N2cv10opt_SSE4_116SymmColumnFilterINS0_4CastIfsEENS0_20SymmColumnVec_32f16sEEE", "__itt_stack_callee_enter", "For portable bitmap(.pbm) type must be CV_8UC1", "Ptr<cv::BaseFilter> cv::opt_SSE4_1::getMorphologyFilter(int, int, const cv::Mat &, cv::Point)", "src.size == dst.size && src.depth() == CV_8U && dst.type() == CV_8U", "\"abc_action_bar_up_description\" : \"Kretanje nagore\"", "void cv::hal::opt_SSE4_1::absdiff64f(const double *, size_t, const double *, size_t, double *, size_t, int, int)", "_mean.size() == size", "N2cv10opt_SSE4_112_GLOBAL__N_16RowSumIfdEE", "Mat::n_1Mat__IIILByteBuffer()", "PVRMUQ", "cvSeqPopFront", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_111MorphFilterINS3_5MaxOpIfEENS3_8MorphVecINS3_4VMaxINS1_12hal_baseline11v_float32x4EEEEEEENS_9allocatorISD_EEEE", "_releaseBufferEntry", "_image.channels() == 3", "/home/vagrant/build/srclib/opencv/modules/core/src/mathfuncs.cpp", "size.height > 0", "__itt_suppress_clear_range", "pool_stride_h", "objdetect::detectMultiScale_16()", "!ssize.empty()", "MWOMPMQNRPUV RPOV", "N7cvflann14CompositeIndexINS_2L1IfEEEE", "void cv::hal::cvtBGRtoLab(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool, bool, bool)", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_11YCrCb2RGB_iIhEEEE", "\"abc_searchview_description_clear\" : \"\u0544\u0561\u0584\u0580\u0565\u056c \u0570\u0561\u0580\u0581\u0578\u0582\u0574\u0568\"", "unknown", "Padding Layer produces a single blob as output.", "pyrMeanShiftFiltering", "features2d::getBlockSize_10()", "H]QFLP QF[F QGVG[F LPMOPNSNVOWPXRXUWXUZR[O[LZKYJWJVKULVKW SNUOVPWRWUVXTZR[", "alpha", "KYOBOb OBVB ObVb", "cc%(2*stride))!=0", "x%02x", "/home/vagrant/build/srclib/opencv/modules/core/src/persistence_types.cpp", "D`DR`R", "N3Iex9ExfullExcE", "Sorry, can not handle images with %d-bit samples", "getSobelKernels", "condition_variable timed_wait failed", "layer + 1 < layers_", ">void cv::hal::cpu_baseline::fastAtan32f(const float *, const float *, float *, int, bool)", "F^UGTHSJQOOUNWLZJ[ THSKQSPVOXMZJ[H[GZGXHWIXHY OLNNMOKOJNJLKJMHOGRFXFZG[I[KZMXNTORO XFYGZIZKYMXN TOWPXQYSYVXYWZU[S[RZRXSU TOVPWQXSXVWYU[", "D`DR`R DRRb `RRb", "Ptr<cv::FilterEngine> cv::opt_SSE4_1::createBoxFilter(int, int, cv::Size, cv::Point, bool, int)", "Mat::n_1Mat__III()", "FastHexToBuffer() wants non-negative integers, not ", "vectors", "4.1.0", "G\\KFK[ KFRFUGWIXKYNYSXVWXUZR[K[", "virtual void cv::opt_AVX2::SymmColumnSmallFilter<cv::opt_AVX2::Cast<float, float>, cv::opt_AVX2::SymmColumnSmallVec_32f>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::Cast<float, float>, VecOp = cv::opt_AVX2::SymmColumnSmallVec_32f]", "void cv::fastNlMeansDenoisingColoredMulti(cv::InputArrayOfArrays, cv::OutputArray, int, int, float, float, int, int)", "sint32", "inputs[0][3] == (1 + coords + classes)*anchors", "/home/vagrant/build/srclib/opencv/modules/core/src/umatrix.cpp", "Identity", "N2cv11YAMLEmitterE", "center_y", "N3Iex10EbadsltExcE", "F^JFN[ KFNVN[ LFOV RFOVN[ RFV[ SFVVV[ TFWV ZGWVV[ GFOF RFTF WF]F HFKG IFKH MFLH NFLG XFZG \\FZG", "LXRNRV NRVR", "cvGetRawData", "\"search_menu_title\" : \"S\u00f8k\"", "Message of type \"", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::Gray2RGB<unsigned short> >::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::Gray2RGB<unsigned short>]", "\"abc_activitychooserview_choose_application\" : \"\u0915\u094b\u0908 \u090f\u092a\u094d\u200d\u0932\u093f\u0915\u0947\u0936\u0928 \u091a\u0941\u0928\u0947\u0902\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_111MorphFilterINS3_5MaxOpIhEENS3_8MorphVecINS3_4VMaxINS1_10hal_SSE4_110v_uint8x16EEEEEEENS_9allocatorISD_EEEE", "JPEG datastream contains no image", "opencv_tensorflow.NodeDef.name", "N3Iex9EnomemExcE", "(src.type() == CV_8UC1 || src.type() == CV_8UC3) && src.data != dst.data", "NSt6__ndk19basic_iosIwNS_11char_traitsIwEEEE", "N12opencv_caffe18ParameterParameterE", "ilyrrates", "G\\LMLb MNMa IMNMNb NPONQMSMVNXPYSYUXXVZS[Q[OZNX WPXRXVWX SMUNVOWRWVVYUZS[ IbQb JMLN KMLO LaJb L`Kb N`Ob NaPb", "channels <= 4", "invalid sRGB rendering intent", "JZSFSWRZQ[ TGTWSZ UFUWTZQ[O[MZLXLVMUNUOVOWNXMX MVMWNWNVMV PFXF QFSG RFSH VFUH WFUG", "nbins", "void cv::cpu_baseline::cvt16s32f(const short *, size_t, uchar *, size_t, float *, size_t, cv::Size, void *)", "photo::fastNlMeansDenoising_16()", "features2d::detect_11()", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12ColumnFilterINS2_4CastIffEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "void cv::Compute_Determinant_Hessian_Response(cv::Pyramid &)", "invalid data", "unexpected_handler unexpectedly returned", "Invalid image color type specified", "Unsupported JPEG process: SOF type 0x%02x", "virtual void cv::opt_AVX2::(anonymous namespace)::RowSum<double, double>::operator()(const uchar *, uchar *, int, int) [T = double, ST = double]", "\" is not a type.", "NVRFQM SFQM", "NSt6__ndk114default_deleteIN2cv17MotionJpegCaptureEEE", "\" (Argument is not in valid range).", "N3Iex13EopnotsuppExcE", "padRight", "N2cv24FastFeatureDetector_ImplE", "data.isSeq()", "Invalid/unsupported mode", "virtual void cv::opt_SSE4_1::RowFilter<float, float, cv::opt_SSE4_1::SymmRowSmallVec_32f>::operator()(const uchar *, uchar *, int, int) [ST = float, DT = float, VecOp = cv::opt_SSE4_1::SymmRowSmallVec_32f]", "objdetect::compute_12()", "imgproc::fitEllipseAMS_10()", "N2cv20CvVideoWriter_ImagesE", "N3Imf14TypedAttributeINSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEE", "N3Imf11StdOFStreamE", "mask.type() == CV_8U", "initInterTab1D", "JPEGLib", "void cv::hal::recip16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, void *)", "below.size() == belowSeeds.size()", "f_param2", "cvReleasePyramid", "\"abc_capital_off\" : \"\u0625\u064a\u0642\u0627\u0641\"", "text != 0 && _font != 0", "The input and output images must have the same size", "Input COI is not supported", "\"abc_searchview_description_query\" : \"Consulta de cerca\"", "void cv::hal::opt_SSE4_1::add8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "\"abc_activity_chooser_view_see_all\" : \"Ver todo\"", "Invalid sparse matrix header", "void cv::pyrMeanShiftFiltering(cv::InputArray, cv::OutputArray, double, double, int, cv::TermCriteria)", "A.type() == CV_64F && A.rows == lx", "int cv::opt_AVX2::SymmColumnVec_32f16s::operator()(const uchar **, uchar *, int) const", "\"abc_activitychooserview_choose_application\" : \"Alege\u021bi o aplica\u021bie\"", "insertImageCOI", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_18Filter2DIhNS2_4CastIfhEENS2_12FilterVec_8uEEENS_9allocatorIS7_EEEE", "updateCoordSum", "imgproc::dilate_11()", "N3Iex10EnobufsExcE", "filterMinDist", "void cv::hal::opt_SSE4_1::cvtRGBAtoMultipliedRGBA(const uchar *, size_t, uchar *, size_t, int, int)", "core::sortIdx_10()", "-i.D/!0", "\" to an attribute of type \"", "ml::getDegree_10()", "total(inpShape, axis, endAxis) == numWeights", "NSt6__ndk114default_deleteIN2cv12WorkerThreadEEE", "\"abc_searchview_description_clear\" : \"\u0412\u044b\u0434\u0430\u043bi\u0446\u044c \u0437\u0430\u043f\u044b\u0442\"", "H\\KFX[Y[ KFLFY[ YFXFK[ YFL[K[", "cvKMeans2", "void cv::dilate(cv::InputArray, cv::OutputArray, cv::InputArray, cv::Point, int, int, const cv::Scalar &)", "padTop", "core::PCACompute_12()", "H\\XMWPURRSQSNRLPKMKLLINGQFRFUGWIXMXRWWUZR[P[MZLX", "maxCatCount", "features2d::getNLevels_10()", "void cv::hal::opt_AVX2::fastAtan2(const float *, const float *, float *, int, bool)", "worldToCamera", "Cannot handle zero number of %s", "MVOPPPQQQSPV UQTPSPRQQS", "extractImageCOI", "cvCopyHist", "video::getVarInit_10()", "\"abc_search_hint\" : \"Pesquisar...\"", "calcHist_", "\"abc_activity_chooser_view_see_all\" : \"\u0c05\u0c28\u0c4d\u0c28\u0c40 \u0c1a\u0c42\u0c21\u0c02\u0c21\u0c3f\"", "void cv::cpu_baseline::cvt16u16f(const ushort *, size_t, uchar *, size_t, cv::float16_t *, size_t, cv::Size, void *)", "FaxSubAddress", "paddings[i].second >= 0", "(src1.cols % src2.cols) == 0", "\"search_menu_title\" : \"Haku\"", "count >= 0 && count2 == count", "The y subsampling factor for the \"", "N2cv10opt_SSE4_121SymmColumnSmallFilterINS0_4CastIisEENS0_25SymmColumnSmallVec_32s16sEEE", "Writing zero-length unknown chunk", "KXOOOX POPX PRQPSOUOVPVQUQUPVP MOPO MXRX", "src.type()", "Define Huffman Table 0x%02x", "calib3d::create_14()", "CV_MAT_CN(sumType) == CV_MAT_CN(dstType)", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/morph.simd.hpp", "type == FileNode::SEQ || type == FileNode::MAP", "owner", "N9IlmThread6ThreadE", "video::calcOpticalFlowPyrLK_11()", "I[TMVNXPXOWNTMQMNNMOLQLSMUOWSZ QMONNOMQMSNUSZT\\T^S_Q_", "Unknown distance type", "src.type() == dst.type() && src.rows == dst.cols && src.cols == dst.rows", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::RGB2Gray<uchar> >::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::RGB2Gray<uchar>]", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/lrn_layer.cpp", "dp/do must be 2Nx3N floating-point matrix", "Invalid number of channels in input image", "void cv::hal::max32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, void *)", "Not enough data for scanline %lu", "\"abc_action_bar_home_description\" : \"Orientohu p\u00ebr n\u00eb sht\u00ebpi\"", "inputs.size() == 3", "dilation_h", "OPENCV_OPENCL_FORCE", "N2cv12cpu_baseline12ColumnFilterINS0_4CastIftEENS0_11ColumnNoVecEEE", "/home/vagrant/build/srclib/opencv/modules/highgui/src/window.cpp", "/home/vagrant/build/srclib/opencv/modules/ml/src/lr.cpp", "N12opencv_caffe18ThresholdParameterE", "N3Iex11EalreadyExcE", "N7cvflann5IndexINS_2L1IfEEEE", "\"abc_toolbar_collapse_description\" : \"Sutraukti\"", "\"abc_toolbar_collapse_description\" : \"\u05db\u05d5\u05d5\u05e5\"", "coeffs.empty() || coeffs.size() == (size_t)nsrcs", "THDiskFile_mode(mode, &isReadable, &isWritable)", "Mat::n_1copyTo__JJ()", "\"abc_shareactionprovider_share_with\" : \"\u0411\u04e9\u043b\u04af\u0448\u04af\u04af\"", "32TegraCvtColor_rgb2rgb565_Invoker", "N3Iex9EmlinkExcE", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/box_filter.simd.hpp", "type.googleapis.com/", "N2cv21BaseCascadeClassifierE", "Mat::n_1copyTo__JJJ()", "I[WPWQXQXPWNUMRMONMQLTLWMYNZP[R[UZWW RMPNNQMTMXNZ", "\"abc_action_mode_done\" : \"Gereed\"", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::RGB2Lab_f>::operator()(const cv::Range &) const [Cvt = cv::RGB2Lab_f]", "workcycleObjectDetector", "virtual void cv::opt_AVX2::RowFilter<unsigned char, int, cv::opt_AVX2::RowVec_8u32s>::operator()(const uchar *, uchar *, int, int) [ST = unsigned char, DT = int, VecOp = cv::opt_AVX2::RowVec_8u32s]", "video::getPatchStride_10()", "virtual void cv::opt_SSE4_1::SymmColumnFilter<cv::opt_SSE4_1::Cast<float, short>, cv::opt_SSE4_1::SymmColumnVec_32f16s>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::Cast<float, short>, VecOp = cv::opt_SSE4_1::SymmColumnVec_32f16s]", "Literal ' or > are not allowed. Use &apos; or &gt;", "uniquenessRatio", "virtual float cv::ml::StatModel::calcError(const Ptr<cv::ml::TrainData> &, bool, cv::OutputArray) const", "\"abc_action_menu_overflow_description\" : \"\u062e\u064a\u0627\u0631\u0627\u062a \u0625\u0636\u0627\u0641\u064a\u0629\"", "solve", "cls_labels", "ml::getLearningRate_10()", "void cv::mixChannels(const cv::Mat *, size_t, cv::Mat *, size_t, const int *, size_t)", "MaxSampleValue", "depth == CV_8U || depth == CV_16U || depth == CV_32F || depth == CV_64F", "params.class_weights must be 1d floating-point vector containing as many elements as the number of classes", "ml::setNu_10()", "F^KFKZ KFY[ LFXX MFYX YGY[ HFMF VF\\F H[N[ IFKG WFYG [FYG KZI[ KZM[", "maxInertiaRatio", "SVMSGD model data is invalid", "Mahalanobis", "\"abc_activity_chooser_view_see_all\" : \"Vidi sve\"", "for IFD list", "photo::getSamples_10()", "void cv::blendLinear(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray)", "imgproc::GaussianBlur_12()", "Improper JPEG component count", "arithm_ipp_mul32f", "erase", "imgproc::polylines_11()", "void cv::opt_AVX2::cvt8u16u(const uchar *, size_t, uchar *, size_t, ushort *, size_t, cv::Size, void *)", "getBlock", "N2cv3dnn14dnn4_v2019012220BaseConvolutionLayerE", "IPP:(((ippicvsMagnitude_32f)(x, y, mag, len)) >= 0)", "IPP:ipp_integral(depth, sdepth, sqdepth, src, srcstep, sum, sumstep, sqsum, sqsumstep, tilted, tstep, width, height, cn)", "\"abc_action_menu_overflow_description\" : \"\u10db\u10d4\u10e2\u10d8 \u10d5\u10d0\u10e0\u10d8\u10d0\u10dc\u10e2\u10d4\u10d1\u10d8\"", "\"abc_searchview_description_voice\" : \"Tales\u00f8gning\"", "lines.size() == lines0.size()", "Can't create OpenCV cache sub-directory: ", "no mime type", "void cv::cpu_baseline::cvt8u16u(const uchar *, size_t, uchar *, size_t, ushort *, size_t, cv::Size, void *)", " args were given.  Full format string was: \"", "Invalid public dependency index.", "H\\WMW[X[ WMXMX[ WPUNSMPMNNLPKSKULXNZP[S[UZWX WPSNPNNOMPLSLUMXNYPZSZWX", "objdetect::computeGradient_12()", "raw_data.size() / 4 == (int)dstBlob.total()", "\"abc_action_menu_overflow_description\" : \"\u0ab5\u0aa7\u0ac1 \u0ab5\u0abf\u0a95\u0ab2\u0acd\u0aaa\u0acb\"", "getDescriptor", "void cv::opt_AVX2::gemm32f(const float *, size_t, const float *, size_t, float, const float *, size_t, float, float *, size_t, int, int, int, int)", "photo::fastNlMeansDenoising_10()", "SymmColumnVec_32f", "virtual void cv::dnn::ProposalLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "createButton", "N2cv8opt_AVX29RowFilterIffNS0_19SymmRowSmallVec_32fEEE", "N2cv10opt_SSE4_116SymmColumnFilterINS0_4CastIdsEENS0_11ColumnNoVecEEE", "void cv::hal::opt_AVX2::mul8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, const double *)", "Corrupt JPEG data: bad Huffman code", "\"search_menu_title\" : \"\u0cb9\u0cc1\u0ca1\u0cc1\u0c95\u0cbf\"", "random", "N2cv14ConjGradSolverE", "Too big buffer is allocated", "\"abc_action_mode_done\" : \"Fine\"", "N2cv19connectedcomponents21LabelingGranaParallelIihNS0_9CCStatsOpEE9FirstScanE", "JZPOOMOKMKMMNNPOSOUNWL NKNN MLOL MMSO POUN WLSY", "\"abc_toolbar_collapse_description\" : \"Reduzir\"", "void cv::calcBackProject(const cv::Mat *, int, const int *, const cv::SparseMat &, cv::OutputArray, const float **, double, bool)", "src.checkVector(2) == dst.checkVector(2)", "NSt6__ndk120__shared_ptr_emplaceIN2cv18ConjGradSolverImplENS_9allocatorIS2_EEEE", "clamped.start < clamped.end", "imgproc::isContourConvex_10()", "\"abc_searchview_description_search\" : \"Hledat\"", "N2cv3dnn13CropLayerImplE", "OPENCV_OPENCL_BUFFERPOOL_LIMIT", "LYPFSCSP RDRP OPVP MRXR VVVWWWWVVUTTRTPUOVNYN^O`QaTaV`W^W\\VZTYQYN[ RTPVOYO^P`Qa TaU`V^V\\UZTY", "imgproc::grabCut_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv9XMLParserENS_9allocatorIS2_EEEE", "Can't use TIFFReadRGBATile() with stripped file.", "\"abc_searchview_description_submit\" : \"Utf\u00f8r s\u00f8ket\"", "virtual void cv::dnn::ReorgLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_18RGB2GrayIfEEEE", "\"abc_searchview_description_submit\" : \"\u0410\u0441\u0443\u0443\u043b\u0433\u044b\u0433 \u0438\u043b\u0433\u044d\u044d\u0445\"", "Wrong shapes for given matrices. Was size(src) = (%d,%d), size(W) = (%d,%d).", "NSt6__ndk120__shared_ptr_emplaceIN2cv18DownhillSolverImplENS_9allocatorIS2_EEEE", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_7RGB2RGBItEEEE", "m1.cols == m2.cols && m1.rows == m2.rows", "_dst.fixedType()", "left_node", "Number of dimensions can be 0 only if a user-defined metric is used", "fracpart == 0.0", "core::multiply_11()", "MWOMOV OMSMUNUQSROR RRUV", "IZPPMX PPNX TPSX TPTX KQMOXO KQMPXP", "\"abc_search_hint\" : \"K\u00ebrko...\"", "expDiffSum > 0", "MWPHP\\ THT\\", "SLONG8 not allowed for ClassicTIFF", "\"abc_searchview_description_voice\" : \"Paghahanap gamit ang boses\"", "download", "N2cv24FindStereoCorrespInvokerE", "%s: Invalid InkNames value; expecting %d names, found %d", "Get_Upright_MLDB_Descriptor_Subset", "N2cv3dnn14dnn4_v2019012217InnerProductLayerE", "png_image_write_to_stdio: incorrect PNG_IMAGE_VERSION", "static_cast<size_t>(size.height) <= CV_IO_MAX_IMAGE_HEIGHT", "SampleFormat", "Unexpected marker 0x%02x", "Closed temporary file %s", "void cv::opt_AVX2::cvt8s32s(const schar *, size_t, uchar *, size_t, int *, size_t, cv::Size, void *)", "Unsupported format", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_16RowSumIfdEENS_9allocatorIS5_EEEE", "imgproc::morphologyEx_13()", "NVRMRUSVTVUU PPTP", "calib3d::getP1_10()", "N12opencv_caffe16ReshapeParameterE", "K.size()", "ml::trainAuto_13()", "terminate_handler unexpectedly returned", "totalSampleCount > 0", "levels_ > 0", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphFilter<cv::opt_SSE4_1::(anonymous namespace)::MaxOp<double>, cv::opt_SSE4_1::(anonymous namespace)::MorphNoVec>::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MaxOp<double>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphNoVec]", "-.Inf", "TIFFReadDirectoryCheckOrder", "Bad idx or layout", "NSt6__ndk120__shared_ptr_pointerIPN2cv8opt_AVX230FAST_t_patternSize16_AVX2_ImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "N12opencv_caffe21InfogainLossParameterE", "outputs.size() == sliceRanges.size()", "PWSMSNTNTMSM PVRRPXPZQ[R[TZUYWV", "\"abc_searchview_description_query\" : \"\u0637\u0644\u0628 \u0627\u0644\u0628\u062d\u062b\"", "\"abc_capital_off\" : \"VYPNUTO\"", "\"abc_searchview_description_search\" : \"Leita\"", "core::divide_10()", "@UUU@void cv::pm_g2(cv::InputArray, cv::InputArray, cv::OutputArray, float)", "cvCreateStructuringElementEx", "cv::samples::findFile('", "calib3d::findChessboardCornersSB_10()", "scaleFactor > 1 && image.depth() == CV_8U", "sv_count != 0", "FM0.cols == 3 && FM0.rows % 3 == 0 && FM.cols == 3 && FM.rows % 3 == 0 && FM.channels() == 1", "core::Mahalanobis_10()", "src_i < total", "Portable arbitrary format (*.pam)", "\"abc_capital_off\" : \"POIS K\u00c4YT\u00d6ST\u00c4\"", "dm.type() == CV_32SC1", "NSt6__ndk114codecvt_bynameIDic9mbstate_tEE", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphRowFilter<cv::cpu_baseline::(anonymous namespace)::MinOp<unsigned char>, cv::cpu_baseline::(anonymous namespace)::MorphRowVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_uint8x16> > >::operator()(const uchar *, uchar *, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MinOp<unsigned char>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphRowVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_uint8x16> >]", "N2cv25VariationalRefinementImpl19RedBlackSOR_ParBodyE", "imgproc::integral3_12()", "ml::trainAuto_14()", "void cv::hal::max64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, void *)", "png_set_filler: inappropriate color type", "calib3d::filterHomographyDecompByVisibleRefpoints_11()", "PxMEncoder", "CL_INVALID_CONTEXT", "/home/vagrant/build/srclib/opencv/modules/video/src/dis_flow.cpp", "void cv::accumulateProduct(cv::InputArray, cv::InputArray, cv::InputOutputArray, cv::InputArray)", "dnn::blobFromImages_15()", "N2cv3dnn14dnn4_v2019012219SoftMaxSlimSubgraphE", "\"abc_action_bar_up_description\" : \"\u05e0\u05d5\u05d5\u05d8 \u05dc\u05de\u05e2\u05dc\u05d4\"", "\"search_menu_title\" : \"Cerca\"", "XResolution", "N3Imf14TypedAttributeINS_11CompressionEEE", "0 <= shift && shift <= XY_SHIFT", "ktype == CV_8U || ktype == CV_32S || ktype == CV_32F || ktype == CV_64F", "qMin.total() == 1", "int cv::opt_SSE4_1::FilterVec_8u16s::operator()(const uchar **, uchar *, int) const", "_src1.type() == _src2.type()", "\"abc_action_menu_overflow_description\" : \"Opsione t\u00eb tjera\"", "void cv::hal::opt_AVX2::xor8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "H[WQWPVPVRXRXPVNTMQMNNLPKSKULXNZQ[S[VZXX MPLRLVMX QMONNOMRMVNYOZQ[", "\"abc_search_hint\" : \"\u1348\u120d\u130d\u2026\"", "\"abc_action_bar_up_description\" : \"Fara upp\"", "gray+alpha color-map: too few entries", "step[dims-1] == (size_t)CV_ELEM_SIZE(flags)", "!params.has(\"min_size\")", "core::getTickFrequency_10()", "/home/vagrant/build/srclib/opencv/modules/core/src/downhill_simplex.cpp", "void cv::convexityDefects(cv::InputArray, cv::InputArray, cv::OutputArray)", "photo::getBias_10()", "photo::fastNlMeansDenoisingMulti_12()", "N2cv12cpu_baseline12_GLOBAL__N_117MorphColumnFilterINS1_5MinOpItEENS1_14MorphColumnVecINS1_4VMinINS_12hal_baseline10v_uint16x8EEEEEEE", "int cv::opt_SSE4_1::(anonymous namespace)::MorphColumnVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_int16x8> >::operator()(const uchar **, uchar *, int, int, int) const [VecUpdate = cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_int16x8>]", "H]WFW[ XFX[ WPUNSMQMNNLPKSKULXNZQ[S[UZWX QMONMPLSLUMXOZQ[ TFXF W[[[", "NWUFSM VFSM", "calib3d::initCameraMatrix2D_10()", "$0$1 = $2", "bool cv::details::Chessboard::Board::estimatePose(const cv::Size2f &, cv::InputArray, cv::OutputArray, cv::OutputArray) const", "JZRIRK RNRP RSRU RYQ\\ RYS\\ Q\\S\\ RGQIPJ RGSITJ PJRITJ RKPNNOMN RKTNVOWN NOPORNTOVO RPPSNTLTKRKSLT RPTSVTXTYRYSXT NTPTRSTTVT RUPXOYMZLZKYJWJYLZ RUTXUYWZXZYYZWZYXZ MZOZRYUZWZ", "N3Iex9El3rstExcE", "computeDisparitySGBM", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_19ColumnSumIitEENS_9allocatorIS5_EEEE", "image width and height must be positive", "BUG! Job: ", "cvGetWindowName", "Future already retrieved", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi4EEEij11DistSquarediE", "N6google8protobuf10TextFormat6FinderE", "`0_tL", "NSt6__ndk120__shared_ptr_pointerIPN2cv13Jpeg2KDecoderEPFvS3_ENS_9allocatorIS2_EEEE", "confidence_threshold", "\"abc_capital_on\" : \"UKLJU\u010cI\"", "void cv::hal::max16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, void *)", "ignored in grayscale PNG", "void cv::morphOp(int, cv::InputArray, cv::OutputArray, cv::InputArray, cv::Point, int, int, const cv::Scalar &)", "AndroidBitmap_lockPixels(env, bitmap, &pixels) >= 0", "edges.type() == CV_8UC1", "\"search_menu_title\" : \"\u1348\u120d\u130d\"", "depth == tdepth || tdepth == CV_32F", "dp_ > 0.0", "H]ULTNSOQPOPNNNLOIQGTFWFYGZIZMYPWTTWPZN[K[JZJXKWNWPXQYR[R^QaPcNfLgKfKdLaN^Q[TYZV", "\"abc_action_menu_overflow_description\" : \"M\u00e1s opciones\"", "growBottom", "edgeOrg(e) == edgeOrg(o_next)", "30TegraCvtColor_rgbx2bgr_Invoker", "OpenCV build without OpenCL support", "OPENCV_OPENCL_PERF_CHECK_BYPASS", "Failed to write AVI file: chunk size is out of bounds", "G]IWHVGTGQHOINKMMMONPOTUUVWWYW[V\\U]S]P\\N[M", "Mag.size() == X.size() && Mag.type() == X.type()", "dnn::shrinkCaffeModel_11()", "imgproc::clipLine_10()", "void cv::opt_SSE4_1::medianBlur_8u_Om(const cv::Mat &, cv::Mat &, int)", "Accuracy", "bool cv::solve(cv::InputArray, cv::InputArray, cv::OutputArray, int)", "N2cv18Bayer2Gray_InvokerItNS_26SIMDBayerStubInterpolator_ItEEEE", "OPENCV_DNN_BACKEND_DEFAULT", "N6google8protobuf8internal23TypeDefinedMapFieldBaseINS0_6MapKeyENS0_11MapValueRefEEE", "void cv::hal::cpu_baseline::add64f(const double *, size_t, const double *, size_t, double *, size_t, int, int)", "points.isVector()", "Fax3DecodeRLE", "__cxa_guard_acquire condition variable wait failed", "\"abc_activitychooserview_choose_application\" : \"\u0418\u0437\u0431\u0435\u0440\u0435\u0442\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\"", "FaxRecvTime", "ExposureBiasValue", "virtual void cv::cpu_baseline::ColumnFilter<cv::cpu_baseline::Cast<double, double>, cv::cpu_baseline::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::Cast<double, double>, VecOp = cv::cpu_baseline::ColumnNoVec]", "H\\VNVb WOWa UNWNXMXb VPUNSMQMNNLPKSKULXNZQ[S[UZVX MPLRLVMX QMONNOMRMVNYOZQ[ Sb[b VaTb V`Ub X`Yb XaZb", "JZKFMFOGPHX[ RML[", "f != 0", "src1.size()==src3.size()", "Ptr<cv::BaseRowFilter> cv::opt_SSE4_1::getLinearRowFilter(int, int, const cv::Mat &, int, int)", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX28Filter2DIdNS2_4CastIddEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "RGB2Gray", "convertFromBuffer", "InitCCITTFax3", "Enum value \"$0\" is reserved multiple times.", "src1_read0_offset", "N2cv3hal5DFT1DE", "Missing field: FileDescriptorProto.name.", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_7RGB2RGBItEEEE", "LWTSSQQPOQNSOUQVSUTS UPTSTUUVVV", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline9RowFilterIhiNS2_12RowVec_8u32sEEENS_9allocatorIS5_EEEE", "(cannot determine missing fields for lite message)", "cvInitMatHeader", "NeXTDecode", "I[V+VRVy W+WRWy L+W+ LyWy", "arr != 0 && contour_header != 0 && block != 0", "N2cv8LMSolver8CallbackE", "void cv::LUT(cv::InputArray, cv::InputArray, cv::OutputArray)", "virtual void cv::opt_AVX2::RowFilter<unsigned char, double, cv::opt_AVX2::RowNoVec>::operator()(const uchar *, uchar *, int, int) [ST = unsigned char, DT = double, VecOp = cv::opt_AVX2::RowNoVec]", "AbsVal", "void cv::hal::opt_SSE4_1::cmp64f(const double *, size_t, const double *, size_t, uchar *, size_t, int, int, int)", "LXMRNPOOQORPRQPX POQPQQOX RQSPUOVOWPWQVQWP", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphFilter<cv::opt_SSE4_1::(anonymous namespace)::MaxOp<float>, cv::opt_SSE4_1::(anonymous namespace)::MorphVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_float32x4> > >::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MaxOp<float>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_float32x4> >]", "GetRepeatedMessage", "N2cv10opt_SSE4_112_GLOBAL__N_19ColumnSumIisEE", "\"abc_action_menu_overflow_description\" : \"More options\"", "virtual void cv::dnn::DetectionOutputLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "dnn::getFLOPS_10()", "RegionLayerImpl", "First argument to SwapFields() (of type \"", "nodeIdx < netTxt.node_size()", "I[RFJ[ RFZ[ J[Z[", "vertex pointers coincide (or set to NULL)", "video::create_11()", "operator%=", " conflicts with an existing field.", "NSt6__ndk112system_errorE", ", lo=", "H\\MMM[ NMN[ JMUMXNYPYQXSUT UMWNXPXQWSUT NTUTXUYWYXXZU[J[ UTWUXWXXWZU[", "q.type() == CV_64FC1 && q.rows == 4 && q.cols == 1", "ml::getResponseType_10()", "Bad new number of rows", "\"abc_searchview_description_submit\" : \"\u691c\u7d22\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u9001\u4fe1\"", "SMinSampleValue", "N2cv3hal8opt_AVX212_GLOBAL__N_119YUV422toRGB8InvokerILi0ELi1ELi0ELi3EEE", "_src1.empty() == _src2.empty()", "Unsupported input depth", "Failed to parse GraphDef buffer", "CL_INVALID_ARG_INDEX", "undeclared key '%s' requested", "int cv::cpu_baseline::SymmColumnSmallVec_32s16s::operator()(const uchar **, uchar *, int) const", "calcBackProject", "cudnn.", "/home/vagrant/build/srclib/opencv/modules/imgcodecs/src/grfmt_exr.cpp", "stageNum", "video::setUseSpatialPropagation_10()", "virtual void cv::opt_AVX2::SymmColumnFilter<cv::opt_AVX2::Cast<double, unsigned short>, cv::opt_AVX2::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::Cast<double, unsigned short>, VecOp = cv::opt_AVX2::ColumnNoVec]", "G]JQLNNMPMRNSPSR PMQNQRPVOXMZK[I[HZHXJXJZIZIY RORRQVQY ZOZNYNYP[P[NZMXMVNTPSRRVRZS[ PVPXQZS[U[WZYW", "cHRM Blue Y", "!params.has(\"zoom_factor_x\") && !params.has(\"zoom_factor_y\")", "N3Imf13B44CompressorE", "N6google8protobuf8internal27UnknownFieldSetFieldSkipperE", "descriptors[0].cols == _descriptors.cols", "calib3d::stereoCalibrateExtended_10()", "src.type() == CV_32F", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi3EEEij11DistSquaredNS1_IiLi3EEEE", "invalid values", "arithm_ipp_absdiff8u", "3)a>3)a>3)a>3)a>3)a>3)a>3)a>3)a>", "\"abc_action_bar_up_description\" : \"\u090a\u092a\u0930 \u0928\u0947\u0935\u093f\u0917\u0947\u091f \u0915\u0930\u0947\u0902\"", "ncorners >= 0", "ml::getInitialStepSize_10()", "!inpName.empty()", "/home/vagrant/build/srclib/opencv/modules/calib3d/src/ap3p.cpp", "std::basic_string<char, std::char_traits<char>, std::allocator<char> >", "channels", "cvMakeSeqHeaderForArray", "void cv::opt_AVX2::cvt8u16s(const uchar *, size_t, uchar *, size_t, short *, size_t, cv::Size, void *)", "N3Imf10OutputFile4DataE", "Empty type name", "mat.size == size", "imgproc::connectedComponents_12()", "void cv::BOWImgDescriptorExtractor::compute(cv::InputArray, cv::OutputArray, std::vector<std::vector<int> > *)", "video::getFinestScale_10()", "K[QOOPNQMSMUNWPXQXSWUUWRXO QOOQNSNUOWPX QOSOUPWWXX SOTPVWXXYX", "(size_t)knn <= index_->size()", "N2cv12GFTTDetectorE", "IPP:((ippicviCopy_32s_C3MR)((const Ipp32s *)src, (int)sstep, (Ipp32s *)dst, (int)dstep, ippiSize(size), (const Ipp8u *)mask, (int)mstep)) >= 0", "cvGetQuadrangleSubPix", "St11logic_error", "cvCmp", "opencv-caffe.proto", "H]TJO[ VFP[ VFSIPKNL UIQKNL", "ConstLayerImpl", "Mat::n_1setTo__JDDDD()", "ml::setMarginRegularization_10()", "imgproc::setTemplate_12()", "void cv::opt_AVX2::cvt64f16f(const double *, size_t, uchar *, size_t, cv::float16_t *, size_t, cv::Size, void *)", "Data decompression (zlib) failed.", "imgproc::Laplacian_14()", "/home/vagrant/build/srclib/opencv/modules/core/src/pca.cpp", "applyColorMap", "cat_ofs", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_19ColumnSumIdhEENS_9allocatorIS5_EEEE", "isDetectionCorrect", "failed to write image data to temporary file", "\"abc_searchview_description_voice\" : \"\u04ae\u043d \u0430\u0440\u043a\u044b\u043b\u0443\u0443 \u0438\u0437\u0434\u04e9\u04e9\"", "index < node_proto.input_size()", "virtual void cv::TonemapImpl::process(cv::InputArray, cv::OutputArray)", "pbBlob.data_size() == (int)dstBlob.total()", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/stubs/int128.cc", "N2cv10opt_SSE4_112_GLOBAL__N_111MorphFilterINS1_5MaxOpIfEENS1_8MorphVecINS1_4VMaxINS_10hal_SSE4_111v_float32x4EEEEEEE", "unknown exception", "N2cv12cpu_baseline16SymmColumnFilterINS0_4CastIisEENS0_11ColumnNoVecEEE", "H\\RFR[ PKMLLMKOKRLTMUPVTVWUXTYRYOXMWLTKPK", " (expected: '", "imshow", "int cv::opt_AVX2::sum16u(const ushort *, const uchar *, int *, int, int)", "/home/vagrant/build/srclib/opencv/modules/calib3d/src/compat_ptsetreg.cpp", "F^JMN[ KMNX RMN[ RMV[ SMVX ZMV[ GMNM WM]M", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2019012222ReshapeAsShapeSubgraphEEE", "linesMax > 0", "r == Range::all() || (0 <= r.start && r.start < r.end && r.end <= m.size[i])", "void cv::hal::opt_AVX2::exp32f(const float *, float *, int)", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/reflection_ops.cc", "votesThreshold_ > 0", "imgproc::remap_10()", "F^ZIJRZ[ ZIZJLRZZZ[", "int cv::opt_SSE4_1::FilterVec_8u::operator()(const uchar **, uchar *, int) const", "Insufficient memory for pCAL params", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi4EEEij7DistAbsNS1_IiLi4EEEE", "\"abc_searchview_description_voice\" : \"Sprachsuche\"", "org/opencv/dnn/Layer", "a < ntest", "Wrong type of output lines", "filterHomographyDecompByVisibleRefpoints", "void cv::dnn::dnn4_v20190122::Net::setPreferableBackend(int)", "arithm_ipp_sub16u", "2&.opencv_tensorflow.AttrValue.ListValueH", "Wrong number of elements in matrix #%d! Expected %d was %d.", "Must set \"PlanarConfiguration\" before writing data", "N2cv10opt_SSE4_18Filter2DIhNS0_4CastIftEENS0_11FilterNoVecEEE", "preprocessCategorical", "NUSMSTRVPVOTOS", "video::getAlpha_10()", "N2cv9AlgorithmE", " receiver regenerated", "N2cv8colormap5OceanE", "N12opencv_caffe13LossParameterE", "getRef", "invalid chunk type", "condition_variable wait failed", "HEIGHT", "N2cv8ORB_ImplE", "terminating with %s foreign exception", "OTIFFRewriteDirectory", "csz == 0 || csz == dims", "calib3d::decomposeProjectionMatrix_14()", "virtual void (anonymous namespace)::CLAHE_Impl::apply(cv::InputArray, cv::OutputArray)", "No space for LZW code table", "FaxRecvParams", "parseValue", "\"abc_action_bar_up_description\" : \"\u0cae\u0cc7\u0cb2\u0c95\u0ccd\u0c95\u0cc6 \u0ca8\u0ccd\u0caf\u0cbe\u0cb5\u0cbf\u0c97\u0cc7\u0c9f\u0ccd \u0cae\u0cbe\u0ca1\u0cbf\"", "imgproc::convexHull_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_117MorphColumnFilterINS3_5MinOpIfEENS3_14MorphColumnVecINS3_4VMinINS1_12hal_baseline11v_float32x4EEEEEEENS_9allocatorISD_EEEE", "void cv::hal::opt_SSE4_1::recip8s(const schar *, size_t, schar *, size_t, int, int, const double *)", "Inference Engine pipeline of ", "LineSegmentDetectorImpl", "NSt6__ndk120__shared_ptr_pointerIPN2cv14StereoSGBMImplENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "\"abc_action_bar_home_description\" : \"\u092e\u0941\u0916\u094d\u200d\u092f\u092a\u0943\u0937\u094d\u200d\u0920 \u0928\u0947\u0935\u094d\u200d\u0939\u093f\u0917\u0947\u091f \u0915\u0930\u093e\"", "Disparity image must have CV_16SC1 or CV_32FC1 format", "virtual void cv::MatOp_GEMM::transpose(const cv::MatExpr &, cv::MatExpr &) const", "H[LFL[ LPNNPMSMUNWPXSXUWXUZS[P[NZLX", "\"abc_toolbar_collapse_description\" : \"\u1794\u1784\u17d2\u179a\u17bd\u1798\"", "IO error writing tag data", "invocation function for block in ", "i!\"4i!\"4i!\"4i!\"4i!\"4i!\"4i!\"4i!\"4", "void cv::opt_AVX2::cvt16f8s(const cv::float16_t *, size_t, uchar *, size_t, schar *, size_t, cv::Size, void *)", "virtual void cv::LineSegmentDetectorImpl::detect(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray)", "roisData[0] < src->size[0]", "N2cv5flann5IndexE", "void cv::hal::opt_AVX2::mul32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, const double *)", "Too large memory block is requested", "__itt_model_task_beginA", "H\\YFKFKL WFK[ XFL[ YFM[ K[Y[YU LFKL MFKI NFKH PFKG T[YZ V[YY W[YX X[YU", "invalid memory read", "ml::setType_10()", "Mat::n_1Mat__JIIII()", "OpenCV TIFF: failed TIFFReadRGBATile(tif, x, y, (uint32*)buffer)", "w.empty() || numOutput == w.total()", "ml::getPriors_10()", "insufficient memory to read chunk", "imgproc::cornerMinEigenVal_12()", "height (track): %d", "reinterpret_cast", "F\\KFK[ LFL[ YFLS QOY[ POX[ HFOF UF[F H[O[ U[[[", "lp.blobs[0].type() == 5", "Expected four hex digits for \\u escape sequence.", "\"abc_activitychooserview_choose_application\" : \"\uc571 \uc120\ud0dd\"", "G][FH[ \\FI[ OFLLNF\\F H[V[XUU[", "Image height exceeds user limit in IHDR", "!dt.empty()", "lb.type() == ub.type()", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphFilter<cv::opt_AVX2::(anonymous namespace)::MaxOp<unsigned char>, cv::opt_AVX2::(anonymous namespace)::MorphVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_uint8x32> > >::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MaxOp<unsigned char>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_uint8x32> >]", "D`PFMGJIHLGOGSHVJYM[P\\T\\W[ZY\\V]S]O\\LZIWGTFPF RFR\\ GQ]Q", "Transpose the convolutional weights is not implemented", "\"abc_shareactionprovider_share_with\" : \"Partager\"", "IZTFRGQHQIRJUKXK UKQLOMNONQPSSTVT UKRLPMOOOQQSST STOUMVLXLZN\\S^T_TaRbPb STPUNVMXMZO\\S^", "cv::impl::(anonymous namespace)::CvtHelper<cv::impl::(anonymous namespace)::Set<4, -1, -1>, cv::impl::(anonymous namespace)::Set<4, -1, -1>, cv::impl::(anonymous namespace)::Set<0, -1, -1>, cv::impl::(anonymous namespace)::SizePolicy::NONE>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::impl::(anonymous namespace)::Set<4, -1, -1>, VDcn = cv::impl::(anonymous namespace)::Set<4, -1, -1>, VDepth = cv::impl::(anonymous namespace)::Set<0, -1, -1>, sizePolicy = cv::impl::(anonymous namespace)::SizePolicy::NONE]", "no memory during frame initialization.", "numDisparities", "edgeOrg( edge, &t ) > 0", "!covs.empty()", "k_fold >= 2", "guard variable for ", "(!usePeephole && blobs.size() == 3) || (usePeephole && blobs.size() == 6)", "N3Iex13EprototypeExcE", "operator^=", "\"abc_searchview_description_search\" : \"\u0916\u094b\u091c\u0947\u0902\"", "bool cv::hal::Cholesky32f(float *, size_t, int, float *, size_t, int)", "outputShapeVec.size() <= 4", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_9HSV2RGB_bEEE", "features2d::drawMatches_10()", "c[0] >= 0 && c[1] >= 0 && c[2] >= 0 && c[0] + c[1] + c[2] < softfloat((int)LAB_CBRT_TAB_SIZE)", "capture", "/proc/self/auxv", "Fields in the same oneof must be defined consecutively. \"$0\" cannot be defined before the completion of the \"$1\" oneof definition.", "\"abc_searchview_description_query\" : \"Vyhled\u00e1vac\u00ed dotaz\"", "N2cv3hal12cpu_baseline12_GLOBAL__N_119YUV422toRGB8InvokerILi2ELi0ELi1ELi3EEE", "video::setVariationalRefinementIterations_10()", "MWQMWMNVTV", "virtual void cv::MergeDebevecImpl::process(cv::InputArrayOfArrays, cv::OutputArray, cv::InputArray, cv::InputArray)", "Status messages are not supported", "Unsupported: type mismatch", "\"abc_searchview_description_search\" : \"\u0e04\u0e49\u0e19\u0e2b\u0e32\"", "cv::SumSqrFunc cv::getSumSqrFunc(int)", "ksize > order", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphRowFilter<cv::cpu_baseline::(anonymous namespace)::MinOp<double>, cv::cpu_baseline::(anonymous namespace)::MorphRowNoVec>::operator()(const uchar *, uchar *, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MinOp<double>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphRowNoVec]", "N6google8protobuf2io19ZeroCopyInputStreamE", "H\\QFK[ RFL[ NFUF H[W[YUV[", "NSt6__ndk120__shared_ptr_emplaceIN2cv17PnPRansacCallbackENS_9allocatorIS2_EEEE", "startLoop", "\"abc_capital_off\" : \"WY\u0141.\"", "September", "\"abc_capital_off\" : \"I\u0160JUNGTA\"", "void cv::hal::cpu_baseline::or8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphFilter<cv::cpu_baseline::(anonymous namespace)::MinOp<unsigned short>, cv::cpu_baseline::(anonymous namespace)::MorphVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_uint16x8> > >::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MinOp<unsigned short>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_uint16x8> >]", "N2cv11FileStorage4ImplE", "\"abc_search_hint\" : \"\u691c\u7d22\u2026\"", "int cv::cpu_baseline::(anonymous namespace)::MorphColumnVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_uint16x8> >::operator()(const uchar **, uchar *, int, int, int) const [VecUpdate = cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_uint16x8>]", "\"abc_action_bar_home_description_format\" : \"%1$s\u060c %2$s\"", "pImpl->unlock()", "\"abc_activitychooserview_choose_application\" : \"\u041a\u043e\u043b\u0434\u043e\u043d\u043c\u043e \u0442\u0430\u043d\u0434\u043e\u043e\"", "\"abc_searchview_description_query\" : \"Hoja ya utafutaji\"", "Missing IHDR before IDAT", "cvSetReal1D", "JZMPQRTTVVWYW[V]U^ MQST MRPSTUVWWY", "_scale > 0 && _sigma_scale > 0 && _quant >= 0 && _ang_th > 0 && _ang_th < 180 && _density_th >= 0 && _density_th < 1 && _n_bins > 0", "void cv::hal::sub16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, void *)", "bboxes.size() == scores.size()", "Tiled image has no tile description attribute.", "execute once failure in __cxa_get_globals_fast()", "/home/vagrant/build/srclib/opencv/modules/photo/src/inpaint.cpp", "NSt6__ndk111__stdoutbufIwEE", "N2cv16MergeMertensImplE", "F]SHTITLSPRSQUOXMZK[J[IZIWJRKOLMNJPHRGUFXFZG[I[KZMYNWOTP SPTPWQXRYTYWXYWZU[R[PZOX", "N2cv12cpu_baseline12_GLOBAL__N_117MorphColumnFilterINS1_5MinOpIfEENS1_14MorphColumnVecINS1_4VMinINS_12hal_baseline11v_float32x4EEEEEEE", "\"abc_searchview_description_query\" : \"\u0639\u0628\u0627\u0631\u062a \u062c\u0633\u062a\u062c\u0648\"", "photo::getLightAdaptation_10()", "%s: Cannot modify tag \"%s\" while writing", "H\\KFR[ LFRX YFR[ IFOF UF[F", ".opencv_onnx.TypeProto.TensorH", "\"abc_toolbar_collapse_description\" : \"Shpalos\"", "H\\IR[R", "\"abc_searchview_description_clear\" : \"Obri\u0161i upit\"", "0 <= contourIdx && contourIdx < (int)last", "collate_byname<wchar_t>::collate_byname(size_t refs) failed to construct for ", "NSt6__ndk114default_deleteIN2cv3dnn17ProposalLayerImplEEE", "Mat::n_1diag__J()", "max_val", "images[i].type() == type", "virtual void cv::opt_SSE4_1::SymmColumnSmallFilter<cv::opt_SSE4_1::Cast<float, float>, cv::opt_SSE4_1::SymmColumnSmallVec_32f>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::Cast<float, float>, VecOp = cv::opt_SSE4_1::SymmColumnSmallVec_32f]", "void cv::hal::opt_SSE4_1::recip16u(const ushort *, size_t, ushort *, size_t, int, int, const double *)", "colorchannels", "\"abc_searchview_description_query\" : \"Umbuzo wosesho\"", "void cv::cpu_baseline::cvt32s8u(const int *, size_t, uchar *, size_t, uchar *, size_t, cv::Size, void *)", "cvGetReal3D", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline8Filter2DIfNS2_4CastIffEENS2_13FilterVec_32fEEENS_9allocatorIS7_EEEE", "void cv::hal::cpu_baseline::addWeighted8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, const double *)", "I[SMUNVOWOVNSMQMMNLOLQMRQS SSQSMTKVKXMZP[S[VZXXWXVZ NNMOMQNR MULVLXMY QMONNONQORQS QSNTMVMXNZP[", "N2cv3dnn14dnn4_v201901229TanHLayerE", "virtual void cv::opt_AVX2::ColumnFilter<cv::opt_AVX2::Cast<float, short>, cv::opt_AVX2::SymmColumnVec_32f16s>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::Cast<float, short>, VecOp = cv::opt_AVX2::SymmColumnVec_32f16s]", "next_layers.size() == 1", "../../../../modules/flann/include/opencv2/flann/lsh_table.h", "/home/vagrant/build/srclib/opencv/modules/photo/src/contrast_preserve.cpp", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_16RowSumIhiEENS_9allocatorIS5_EEEE", "void cv::remap(cv::InputArray, cv::OutputArray, cv::InputArray, cv::InputArray, int, int, const cv::Scalar &)", "/home/vagrant/build/srclib/opencv/modules/calib3d/src/calibration.cpp", "ml::setRpropDWMin_10()", "NSt6__ndk18ios_base7failureE", "E\\XFVHTKQPOSLWIZG[E[DZDXEWFXEY XFWJUTT[ XFU[ T[TYSVRTPRNQLQKRKTLWOZR[V[XZ", "NSt6__ndk120__shared_ptr_emplaceIN2cv13Jpeg2KDecoderENS_9allocatorIS2_EEEE", "Error calling dataWindowForLevel() on image file \"", "N2cv4impl13PluginCaptureE", "Value must be non-negative integer for uint32 option \"", "NSt6__ndk112bad_weak_ptrE", "N2cv12cpu_baseline16SymmColumnFilterINS0_13FixedPtCastExIihEENS0_19SymmColumnVec_32s8uEEE", "?void cv::minEnclosingCircle(cv::InputArray, cv::Point2f &, float &)", "NSt6__ndk120__shared_ptr_emplaceIN2cv10HdrEncoderENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv16CvCapture_ImagesENS_9allocatorIS2_EEEE", "\"abc_searchview_description_query\" : \"Consulta de b\u00fasqueda\"", "dSinCos_HA", "N2cv20AgastFeatureDetectorE", "void cv::integral(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, int, int)", "H\\OKUY UKOY KOYU YOKU", "N2cv10opt_SSE4_124WarpPerspectiveLine_SSE4E", "\"abc_action_mode_done\" : \"\u06c1\u0648 \u06af\u06cc\u0627\"", "\"abc_action_mode_done\" : \"Zavr\u0161eno\"", "torch_index", "Blob depth should be CV_32F or CV_8U", "dims == 1", "Index must be -1 for singular fields.", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112ColumnFilterINS2_4CastIdhEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "OpenCV TIFF: failed TIFFSetField(tif, TIFFTAG_SAMPLESPERPIXEL, 3)", "Mat::n_1cross()", "_distCoeffs.needed()", "num_classes parameter must be positive", "calib3d::composeRT_17()", "photo::fastNlMeansDenoising_15()", "upload", "CHECK failed: (v.size()) <= (kStringPrintfVectorMaxArgs): ", "W_hh.size[0] == W_xh.size[0] && W_hh.size[0] == W_hh.size[1] && (int)b_h.total() == W_xh.size[0]", "__cxa_guard_abort failed to broadcast condition variable", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_114MorphRowFilterINS3_5MinOpIdEENS3_13MorphRowNoVecEEENS_9allocatorIS8_EEEE", "H\\KFX[ LFY[ YFK[ IFOF UF[F I[O[ U[[[", "tileheight", "Invalid histogram pointer[s]", "cvOrS", "LogLuvSetupDecode", "filterByArea", "N2cv12cpu_baseline12_GLOBAL__N_114MorphRowFilterINS1_5MinOpIdEENS1_13MorphRowNoVecEEE", "isJasperEnabled()", "__itt_sync_releasing", "void cv::bilateralFilter(cv::InputArray, cv::OutputArray, int, double, double, int)", "sum.data != NULL", "npoints >= 0 && points2.checkVector(2) == npoints && points1.type() == points2.type()", "_TIFFMergeFields", "core::add_15()", "calib3d::findFundamentalMat_11()", "GetStringReference", "ServiceOptions", "imgproc::GaussianBlur_11()", "fbcunn.", "KXMONOPPS[T\\ NOOPR[T\\U\\ VOTRNYL\\", "void cv::hal::max8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "Image height is zero in IHDR", "Bayer->RGB demosaicing only supports 8u and 16u types", "\"abc_searchview_description_search\" : \"Iskanje\"", "void cv::minEnclosingCircle(cv::InputArray, cv::Point2f &, float &)", "ml::getMarginRegularization_10()", "\"abc_searchview_description_search\" : \"C\u0103uta\u021bi\"", "CustomRendered", "JYNKNX OKOX ORPPROTOVPWRWUVWTXRXPWOU TOUPVRVUUWTX LKOK", "check training parameters for the classifier", "auto_pad", "N2cv8opt_AVX212_GLOBAL__N_117MorphColumnFilterINS1_5MinOpItEENS1_14MorphColumnVecINS1_4VMinINS_8hal_AVX211v_uint16x16EEEEEEE", "\"search_menu_title\" : \"Sesha\"", "Ptr<cv::BaseRowFilter> cv::getMorphologyRowFilter(int, int, int, int)", "!bottom_layer.empty()", "initializeContextFromDirect3DDevice9", "imgproc::pyrDown_10()", "numOutputs == 1 || (numOutputs == 2 && type == MAX)", "int cv::ap3p::solve(std::vector<cv::Mat> &, std::vector<cv::Mat> &, const cv::Mat &, const cv::Mat &)", "KYOBVROb", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_9HLS2RGB_fEEE", "Video I/O: wrong OpenCV version used by plugin '", "N2cv10opt_SSE4_112_GLOBAL__N_16RowSumIddEE", "\"abc_searchview_description_clear\" : \"Eliminar la consulta\"", "H\\XMWPURRSQSNRLPKMKLLINGQFSFVGXIYLYRXVWXUZR[O[MZLXLWMVNWMX QSORMPLMLLMIOGQF SFUGWIXLXRWVVXTZR[", "num_features parameter must be positive", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn23FullyConnectedLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "nodes", "virtual void cv::dnn::dnn4_v20190122::Layer::finalize(cv::InputArrayOfArrays, cv::OutputArrayOfArrays)", "\"abc_shareactionprovider_share_with_application\" : \"Kongsi dengan %s\"", "CalibrationIlluminant1", "KZXHM\\", "to read TIFF directory", "__thread_specific_ptr construction failed", "void cv::hal::opt_AVX2::cmp8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, int)", "OpenCV was build without VA support (libva)", "Potential overflow in png_zalloc()", "void cv::pyrDown(cv::InputArray, cv::OutputArray, const cv::Size &, int)", "(x.cols == 1 && x.rows == ndim) || (x.cols == ndim && x.rows == 1)", "getLinearFilter", "AcFMF[ GNGZ CMHMH[ HQIOJNLMOMQNROSRS[ QORRRZ OMPNQQQ[ SQTOUNWMZM\\N]O^R^[ \\O]R]Z ZM[N\\Q\\[ C[K[ N[V[ Y[a[ DMFN EMFO FZD[ FYE[ HYI[ HZJ[ QZO[ QYP[ SYT[ SZU[ \\ZZ[ \\Y[[ ^Y_[ ^Z`[", "Failed to write pixel data to image file \"", "graph->storage != 0", "video::set_1transitionMatrix_10()", "calib3d::fisheye_1estimateNewCameraMatrixForUndistortRectify_12()", "convexHull", "\" is an atomic type, not a message.", "findCirclesGrid", "bool cv::findChessboardCornersSB(cv::InputArray, cv::Size, cv::OutputArray, int)", "St16invalid_argument", "total_concat_size", "DotRange", "NSt6__ndk120__shared_ptr_emplaceIN2cv19FMEstimatorCallbackENS_9allocatorIS2_EEEE", "GetRepeatedString", "max > 0", "N2cv7TLSDataINS_11CoreTLSDataEEE", "samples.cols == var_count && samples.type() == CV_32F", "CV_16F", "undistorted.type() == CV_32FC2 || undistorted.type() == CV_64FC2", "F^KFK[ LFL[ XFX[ YFY[ HFOF UF\\F XHLY H[O[ U[\\[", "N2cv3hal10opt_SSE4_112_GLOBAL__N_119YUV422toRGB8InvokerILi0ELi0ELi1ELi4EEE", "N2cv3dnn14dnn4_v2019012210ConstLayerE", "\"abc_searchview_description_clear\" : \"\u6e05\u9664\u67e5\u8be2\"", "imgproc::ellipse_13()", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi3EEEij11DistSquarediE", "N12opencv_caffe16SigmoidParameterE", "video::CamShift_10()", "core::copyMakeBorder_11()", "\"abc_activity_chooser_view_see_all\" : \"Barchasini ko\u2018rish\"", "smoothedIntensity", "calib3d::setROI1_10()", "MWOOUU UOOU", "CL_SUCCESS", "type == srcB.type() && srcA.size() == srcB.size()", "void cv::opt_AVX2::cvt32s16s(const int *, size_t, uchar *, size_t, short *, size_t, cv::Size, void *)", "I[RLQMRNSMRL LRXR RVQWRXSWRV", "N2cv3dnn16ElementWiseLayerINS0_13AbsValFunctorEE5PBodyE", "opencv_tensorflow.NodeDef.device", "void cv::hal::opt_AVX2::merge16u(const ushort **, ushort *, int, int)", "ml::getSvmsgdType_10()", "getBufferPoolController", "Promise already satisfied", "Compression", "dnn::readNetFromTorch_11()", "photo::fastNlMeansDenoisingMulti_11()", "H\\KFMFOGPHQJWXXZY[ MFOHPJVXWZY[Z[ RMJ[ RMK[", "layerParams.blobs[0].dims == 2", "Failed to read custom directory at offset %lu", "N2cv3dnn14dnn4_v2019012224BatchNormNoGammaSubgraphE", "\"abc_activitychooserview_choose_application\" : \"Pasirinkti program\u0105\"", "vfpv3", "Accuracy must be non-negative", "calcPosition", "cHRM chunk does not match sRGB", "none ", "poolingType == PSROI || src.size[1] == dst.size[1]", "N2cv12IVideoWriterE", "local_size", "core::randu_10()", "speckleWindowSize", "nativeObj", "\"abc_searchview_description_voice\" : \"\u0935\u094d\u0939\u0949\u0907\u0938 \u0936\u094b\u0927\"", "I[RGRV MJWP WJMP IVL\\ [VX\\ IV[V L\\X\\", "Quick pixel copy from image file \"", "void cv::hal::add16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, void *)", "int cv::opt_SSE4_1::FilterVec_32f::operator()(const uchar **, uchar *, int) const", "dnn::NMSBoxes_11()", "\"abc_searchview_description_search\" : \"\u0dc3\u0dd9\u0dc0\u0dd3\u0db8\"", "N12opencv_caffe12NetStateRuleE", "N2cv12cpu_baseline12_GLOBAL__N_117MorphColumnFilterINS1_5MinOpIhEENS1_14MorphColumnVecINS1_4VMinINS_12hal_baseline10v_uint8x16EEEEEEE", "OPENCV_LOG_LEVEL", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphColumnFilter<cv::opt_SSE4_1::(anonymous namespace)::MaxOp<short>, cv::opt_SSE4_1::(anonymous namespace)::MorphColumnVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_int16x8> > >::operator()(const uchar **, uchar *, int, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MaxOp<short>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphColumnVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_int16x8> >]", "int cv::opt_AVX2::(anonymous namespace)::MorphColumnVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_uint8x32> >::operator()(const uchar **, uchar *, int, int, int) const [VecUpdate = cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_uint8x32>]", " clean", "void cv::hal::opt_AVX2::log64f(const double *, double *, int)", "N2cv8opt_AVX212_GLOBAL__N_127BilateralFilter_32f_InvokerE", "FaxMode", "JZLXJPZTXL", "Input NetParameter has V0 layer -- ignoring.", "Oneof must have at least one field.", "N2cv3dnn16EltwiseLayerImpl14EltwiseInvokerE", "void cv::hal::opt_SSE4_1::addWeighted8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, const double *)", "N2cv3dnn14dnn4_v2019012212PermuteLayerE", "NSt6__ndk120__shared_ptr_emplaceIN12_GLOBAL__N_110CLAHE_ImplENS_9allocatorIS2_EEEE", "NSt6__ndk113messages_baseE", "addNode", "growLeft: Board is empty", "utils::findDataFile(): trying install path: ", "void cv::hal::cpu_baseline::min32f(const float *, size_t, const float *, size_t, float *, size_t, int, int)", "calib3d::computeCorrespondEpilines_10()", "bad scanline data", "ICC profile tag outside profile", "ml::getIsClassifier_10()", "virtual void cv::dnn::dnn4_v20190122::Layer::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "N2cv10opt_SSE4_112_GLOBAL__N_19ColumnSumIthEE", "core::normalize_15()", "LYNKRRRX OKSR WKSRSX LKQK TKYK PXUX", "video::setVarThreshold_10()", "ml::setActivationFunction_10()", "coord_sum.cols == n && coord_sum.rows == 1", "torchSplit", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/canny.cpp", "frame node could not be deleted", "!hasBias() || blobs[1].total() == (size_t)blobs[0].size[0]", "transpose", "scalarParams.has(\"scale_factor\")", "mask_buffer", "gradient", "void cv::cornerSubPix(cv::InputArray, cv::InputOutputArray, cv::Size, cv::Size, cv::TermCriteria)", "WindowData", "void cv::hal::opt_AVX2::absdiff8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int)", "mini_batch_size", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::mRGBA2RGBA<uchar> >::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::mRGBA2RGBA<uchar>]", "gather", "video::getNSamples_10()", "icvTriangulatePoints", "TIFFTileRowSize", "\"abc_action_bar_home_description_format\" : \"%1$s \u2013 %2$s\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_117MorphColumnFilterINS3_5MinOpIfEENS3_14MorphColumnVecINS3_4VMinINS1_10hal_SSE4_111v_float32x4EEEEEEENS_9allocatorISD_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv14NumpyFormatterENS_9allocatorIS2_EEEE", "dst.rows <= evects.rows", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi2EEEij11DistSquarediE", "LWRKQLQMSNVNVMSNPOOPNRNTOVPWRXSYS[R\\P\\O[ SNQOPPOROTPVRX", "/home/vagrant/build/srclib/opencv/modules/core/src/convert.dispatch.cpp", "RemoveLast", "calib3d::estimateAffinePartial2D_14()", "MWRLMUWURL ROOT ROUT RRQT RRST", "opencv_tensorflow.OpDef.AttrDef.type", "svmType", "cvGetRealND", "convert_%s", "dnn::readNetFromCaffe_10()", "N2cv12AlignMTBImplE", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphRowFilter<cv::cpu_baseline::(anonymous namespace)::MinOp<float>, cv::cpu_baseline::(anonymous namespace)::MorphRowVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_float32x4> > >::operator()(const uchar *, uchar *, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MinOp<float>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphRowVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_float32x4> >]", "N7cvflann11LinearIndexINS_2L2IfEEEE", "Call set methods to initialize MapKey.", "F^[FYGVHSHPGNFLFJGIIIKKMMMOLPJPHNF [FH[I[ [F\\FI[ YTWTUUTWTYV[X[ZZ[X[VYT NFJGIKMMPJNF LFIIKMOLPHLF YTUUTYX[[XYT WTTWV[ZZ[VWT", "features2d::BOWKMeansTrainer_10()", "_nidx.needed() == (K > 0)", " out of ", "\"search_menu_title\" : \"Bilatu\"", "\"abc_activity_chooser_view_see_all\" : \"Ver todas\"", "vector", "Data buffer too small to hold part of strip %lu", "_src.depth() == CV_8U", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/dynamic_message.cc", "N7cvflann7anyimpl21typed_base_any_policyIPPNS_11KDTreeIndexINS_2L1IfEEE4NodeEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10AKAZE_ImplENS_9allocatorIS2_EEEE", "Wrong JPEG library version: library is %d, caller expects %d", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::RGB2XYZ_f<float> >::operator()(const cv::Range &) const [Cvt = cv::RGB2XYZ_f<float>]", "/home/vagrant/build/srclib/opencv/modules/core/src/mean.simd.hpp", "inputs[0].size() == 4", "outPlaneTotal=", "CHECK failed: !out.HadError(): ", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_19RowFilterIddNS2_8RowNoVecEEENS_9allocatorIS5_EEEE", "photo::seamlessClone_10()", "data.channels() == 1", "getBinary", "N2cv8opt_AVX212ColumnFilterINS0_13FixedPtCastExIihEENS0_11ColumnNoVecEEE", "inputs_arr.total() == outputs_arr.total()", "(size_t)biasBlobIndex < blobs.size()", "GrayResponseUnit", "cv::Size cv::getContinuousSize2D(cv::Mat &, int)", "LYTOUPUQVQVPTOQOOPORQSTTVU OQQRTSVTVWTXQXOWOVPVPWQX", "POPCNT", "0 <= layerIdx && layerIdx < (int)weights.size()", "operator==", "computeError", "\"abc_searchview_description_submit\" : \"Zoekopdracht verzenden\"", "photo::fastNlMeansDenoisingColoredMulti_10()", "cvCreateButton", "I[RMONMQLTLWMYNZP[R[UZWWXTXQWOVNTMRM RMPNNQMTMXNZ R[TZVWWTWPVN", "Boolean default must be true or false.", "\"abc_searchview_description_submit\" : \"\u041d\u0430\u0434\u0456\u0441\u043b\u0430\u0442\u0438 \u0437\u0430\u043f\u0438\u0442\"", "\"abc_font_family_display_4_material\" : \"sans-serif-light\"", "virtual void cv::opt_SSE4_1::RowFilter<unsigned char, int, cv::opt_SSE4_1::SymmRowSmallVec_8u32s>::operator()(const uchar *, uchar *, int, int) [ST = unsigned char, DT = int, VecOp = cv::opt_SSE4_1::SymmRowSmallVec_8u32s]", "CCITT Group 4", "N3Iex9EprotoExcE", "intersectConvexConvex", "\"abc_searchview_description_voice\" : \"Mekl\u0113\u0161ana ar balsi\"", "Backing store not supported", "\"abc_searchview_description_query\" : \"Mekl\u0113\u0161anas vaic\u0101jums\"", "(int)distCoeffs0.total() <= outputSize", "virtual void cv::HOGDescriptor::detect(cv::InputArray, std::vector<Point> &, double, cv::Size, cv::Size, const std::vector<Point> &) const", "regex_error", "libpng warning: %s", "\"abc_capital_off\" : \"\u0418\u0421\u041a\u0409\u0423\u0427\u0418\"", "CurrentPreProfileMatrix", "mask must have as many rows and cols as img", "N2cv9MatOp_CmpE", "XXXXXXXXXXXXXXXX", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecIhLi2EEEij11DistSquaredNS1_IiLi2EEEE", "u && u->handle", "virtual void cv::dnn::ScaleLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "!info.backendFactory.empty()", "Cannot determine pooling type", "CL_COMPILER_NOT_AVAILABLE", "E_JMJ[ KMK[ GMNM KTOTRUSWSXRZO[G[ OTQURWRXQZO[ YMY[ ZMZ[ VM]M V[][", "SpatialUpSamplingNearest", "\"abc_searchview_description_query\" : \"\u0417\u0430\u043f\u044b\u0442 \u043d\u0430 \u043f\u043e\u0448\u0443\u043a\"", "core::add_10()", "dnn::resetMyriadDevice_10()", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_11RGB2YCrCb_fIfEEEE", "virtual void cv::Feature2D::compute(cv::InputArray, std::vector<KeyPoint> &, cv::OutputArray)", "void cv::subtract(cv::InputArray, cv::InputArray, cv::OutputArray, cv::InputArray, int)", "cvCvtSeqToArray", "The parameter nu must be between 0 and 1", "m1 != NULL && m2 != NULL", "^>N2cv8colormap4CoolE", "MatMul", "N6google8protobuf8internal12MapEntryImplIN17opencv_tensorflow35FunctionDef_Node_AttrEntry_DoNotUseENS0_7MessageENSt6__ndk112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSF_11ELi0EE15MapEntryWrapperE", "OpenCV TIFF: failed TIFFSetField(tif, TIFFTAG_SAMPLESPERPIXEL, channels)", "Error reading pixel data from image file \"", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/segmentation.cpp", "src.rows", "channel_off", "pthread_mutex_unlock: ", "  Group 3 Options:", "Failed to allocate memory", "Failed to read AVI file: requested chunk size is too large", "Floating point \"Predictor\" not supported with %d-bit samples", "Expected identifier, got: ", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::HSV2RGB_f>::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::HSV2RGB_f]", "H\\IQJOLMOMPNPQNWNYP[ NMONOQMWMYNZP[Q[TZVXXUYQYMXMYO", "static cv::Mat cv::ml::TrainData::getSubMatrix(const cv::Mat &, const cv::Mat &, int)", "/home/vagrant/build/srclib/opencv/modules/dnn/src/darknet/darknet_io.cpp", "getMemoryConsumption", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/crop_layer.cpp", "Depth is not the same for all arrays", "template_window_size_ <= 46340", "dp/dT must be 2Nx3 floating-point matrix", "Mat::n_1col()", "imgproc::compareSegments_11()", "total(outputs[0]) == total(inputs[0])", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::RGB2Gray<float> >::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::RGB2Gray<float>]", "core::getNumThreads_10()", "TileByteCounts", "index inlined table detected but pr function requires extra words", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX216SymmColumnFilterINS2_4CastIfsEENS2_20SymmColumnVec_32f16sEEENS_9allocatorIS7_EEEE", "void cv::hal::merge16u(const ushort **, ushort *, int, int)", "bool cv::ap3p::solve(cv::Mat &, cv::Mat &, const cv::Mat &, const cv::Mat &)", "\"abc_shareactionprovider_share_with\" : \"Shiriki na:\"", "H[LMR[ MMRY NMSY XNSYP_NaLbJbIaI_K_KaJaJ` JMQM TMZM KMNO PMNN VMXN YMXN", "Invalid fs.state", "N2cv12cpu_baseline12_GLOBAL__N_114MorphRowFilterINS1_5MinOpIhEENS1_11MorphRowVecINS1_4VMinINS_12hal_baseline10v_uint8x16EEEEEEE", "\"abc_searchview_description_query\" : \"\u0425\u0430\u0439\u0445 \u0430\u0441\u0443\u0443\u043b\u0433\u0430\"", "INVALID_CPPTYPE", "features2d::setFirstLevel_10()", "f@static void cv::KeyPoint::convert(const std::vector<KeyPoint> &, std::vector<Point2f> &, const std::vector<int> &)", "from.valid()", "getCacheDirectory", "NSt6__ndk18messagesIwEE", "arithm_ipp_max64f", "normalizeNodeOfs", "N2cv8opt_AVX212_GLOBAL__N_111MorphFilterINS1_5MaxOpIsEENS1_8MorphVecINS1_4VMaxINS_8hal_AVX210v_int16x16EEEEEEE", "%YAML", "kernelX.type() == kernelY.type() && (kernelX.cols == 1 || kernelX.rows == 1) && (kernelY.cols == 1 || kernelY.rows == 1)", "NSt6__ndk114default_deleteIN2cv3dnn20ConvolutionLayerImplEEE", "The network has not been created. Use method create or the appropriate constructor", "void cv::copyMakeBorder(cv::InputArray, cv::OutputArray, int, int, int, int, int, const cv::Scalar &)", "readRaw", "features2d::clear_10()", "\"MapBegin\"", "int cv::opt_SSE4_1::SymmRowSmallVec_8u32s::operator()(const uchar *, uchar *, int, int) const", "void cv::opt_AVX2::cvt64f8u(const double *, size_t, uchar *, size_t, uchar *, size_t, cv::Size, void *)", "depth", "getNames", "N12opencv_caffe13ReLUParameterE", "TIFFjpeg_progress_monitor", "\"abc_action_menu_overflow_description\" : \"\u0411\u0430\u0441\u049b\u0430 \u043e\u043f\u0446\u0438\u044f\u043b\u0430\u0440\"", "features2d::empty_10()", "G]LFL[ MFM[ IFUFXGYHZJZMYOXPUQMQ UFWGXHYJYMXOWPUQ I[P[", "CPU variant", "\"abc_action_bar_home_description_format\" : \"%1$s, %2$s\"", "I1.isContinuous()", "TLS wrapper function for ", "Cannot copy json_name to a proto of a different size.", "void cv::dnn::dnn4_v20190122::Net::Impl::initBackend()", ") is missing.", "use_global_stats", "CV_IS_MAT(matR) && matR->rows == 3 && matR->cols == 3", "grabCut", "Unexpected tile y coordinate.", "void cv::hal::opt_SSE4_1::mul64f(const double *, size_t, const double *, size_t, double *, size_t, int, int, const double *)", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_9RGB2HLS_fEEE", "_src.channels() == 2 && _src.depth() == CV_8U", "operator->", "addOutput", "NSt6__ndk115numpunct_bynameIcEE", "virtual void cv::SimpleBlobDetectorImpl::findBlobs(cv::InputArray, cv::InputArray, std::vector<Center> &) const", "fitLine2D", "void cv::hal::cpu_baseline::exp32f(const float *, float *, int)", "Unsupported", "dnn::getIntValue_10()", "H\\LJLKMKMJLJ LIMINJNKMLLLKKKJLHMGPFTFWGXHYJYLXNUPPRNSLUKXK[ WHXJXLWN TFVGWJWLVNTPPR KYLXNXSYWYYX NXSZWZXY NXS[W[XZYXYV", "N2cv16SunRasterEncoderE", "cc%(4*stride))!=0", "void cv::hal::opt_AVX2::sqrt64f(const double *, double *, int)", "OpenCV TIFF: TIFFRGBAImageOK: ", "JZUITJUKVJVIUGSFQFOGNINKOMQOVR OMTPVRWTWVVXTZ PNNPMRMTNVPXU[ NVSYU[V]V_UaSbQbOaN_N^O]P^O_", "NSt6__ndk18ios_baseE", "int cv::opt_AVX2::sum16s(const short *, const uchar *, int *, int, int)", "NVOPRV UPRV", "Define Quantization Table %d  precision %d", "layer_w", "\"search_menu_title\" : \"\u041f\u043e\u0448\u0443\u043a\"", "SGILog", "Output aborted.", "descriptor_size", "cv::dnn::dnn4_v20190122::(anonymous namespace)::DarknetImporter::DarknetImporter(std::istream &)", "motionType == MOTION_TRANSLATION || motionType == MOTION_EUCLIDEAN || motionType == MOTION_AFFINE || motionType == MOTION_HOMOGRAPHY", "Requested layer \"%s\" was not initialized", "N2cv8colormap8TwilightE", "nSamples == 1", "N3Iex8EidrmExcE", "JZPKLX QKMX YKOR RPTX SPUX NKSK VK[K JXOX RXWX", "uint16", "%lu: Col out of range, max %lu", "NSt6__ndk117moneypunct_bynameIcLb1EEE", ">.KAZE", "\"abc_toolbar_collapse_description\" : \"\uc811\uae30\"", "int cv::startWindowThread()", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_10RGBA2mRGBAIhEEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_19ColumnSumIitEENS_9allocatorIS5_EEEE", "ZLib cannot deal with buffers this size", "__itt_frame_end", "\"abc_shareactionprovider_share_with_application\" : \"Bendrinti naudojant \u201e%s\u201c\"", "sv_count", "Frame not displayable.", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::Gray2RGB5x5>::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::Gray2RGB5x5]", "\"abc_shareactionprovider_share_with\" : \"\u0938\u093e\u091d\u0947\u0926\u093e\u0930\u0940 \u0917\u0930\u094d\u0928\u0941\u0939\u094b\u0938\u094d...\"", "elements with keys can not be written to sequence", "readNetFromDarknet", "\"abc_search_hint\" : \"\u0cb9\u0cc1\u0ca1\u0cc1\u0c95\u0cbf\u2026\"", "/home/vagrant/build/srclib/opencv/modules/imgcodecs/src/grfmt_pam.cpp", "\"abc_action_mode_done\" : \"\u179a\u17bd\u1785\u179a\u17b6\u179b\u17cb\"", "I[J[Z[ZZJZJ[", "ReleaseLast", "num_components", "GlobalAveragePool", "void cv::hal::opt_AVX::magnitude32f(const float *, const float *, float *, int)", "F_PKQLQMRMRLPKMKKLJNJX MKLLKNKX YKZL[L[KUKSLRNRX UKTLSNSX ZOZX [O[X HO[O HXMX PXUX XX]X", "YCbCrPositioning", "locale constructed with null", "J[OUMULVLXMYOYPXPVNTMRMONMOLQKTKVLWMXOXRWTUVUXVYXYYXYVXUVU NMPLULWM", "TIFFWriteBufferSetup", "MWUMOV OMUM OVUV", "horAcc8", "'7void cv::blendLinear(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray)", "imgproc::erode_13()", "\"abc_action_menu_overflow_description\" : \"Mai multe op\u021biuni\"", "features2d::BOWKMeansTrainer_11()", "cvDisplayStatusBar", "\"abc_action_bar_up_description\" : \"\u0a09\u0a71\u0a2a\u0a30 \u0a28\u0a48\u0a35\u0a40\u0a17\u0a47\u0a1f \u0a15\u0a30\u0a4b\"", "OpenCV TIFF: failed TIFFSetField(tif, TIFFTAG_PAGENUMBER, page, img_vec.size())", "N3Iex9EfaultExcE", "No space for state block", "void cv::GaussianBlur(cv::InputArray, cv::OutputArray, cv::Size, double, double, int)", "core::convertScaleAbs_12()", "core::convertFp16_10()", "Padding", "method", "void cv::Subdiv2D::insert(const std::vector<Point2f> &)", "\"abc_shareactionprovider_share_with_application\" : \"Compartilhar com %s\"", "NSt6__ndk120__shared_ptr_pointerIPN2cv12WorkerThreadENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "N12opencv_caffe13TileParameterE", "SetEnumValue", "void cv::hal::opt_SSE4_1::cvtBGRtoThreePlaneYUV(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "\"abc_action_menu_overflow_description\" : \"\u0414\u0440\u0443\u0433\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\"", "\"abc_searchview_description_voice\" : \"K\u00ebrkim me z\u00eb\"", "N3Iex7EadvExcE", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/max_unpooling_layer.cpp", "\"abc_action_mode_done\" : \"\u0bae\u0bc1\u0b9f\u0bbf\u0ba8\u0bcd\u0ba4\u0ba4\u0bc1\"", "dualq.type() == CV_64FC1 && dualq.rows == 8 && dualq.cols == 1", "CPPTYPE_STRING", "cv::SumSqrFunc cv::cpu_baseline::getSumSqrFunc(int)", "!parser.empty() && ptr", "?NSt6__ndk120__shared_ptr_emplaceIN2cv16MergeDebevecImplENS_9allocatorIS2_EEEE", "virtual void cv::Algorithm::save(const cv::String &) const", "m.isContinuous()", "N9__gnu_cxx20recursive_init_errorE", "The cost matrix must be 32fC1", "N2cv8opt_AVX216SymmColumnFilterINS0_13FixedPtCastExIihEENS0_19SymmColumnVec_32s8uEEE", "setUseTimstampsDim", "unexpected 8-bit transformation", "Discarding %lu bytes to avoid buffer overrun", "H\\QMNNLPKSKULXNZQ[S[VZXXYUYSXPVNSMQM QMONMPLSLUMXOZQ[ S[UZWXXUXSWPUNSM", "OldSubfileType", "N2cv10ExrDecoderE", "logsoftmax", "complex ", "Application transferred too many scanlines", "Quantization table 0x%02x was not defined", "Cholesky", "Diffusivity is not supported: %d", "iostream", "double cv::UMat::dot(cv::InputArray) const", "\"abc_searchview_description_query\" : \"Axtar\u0131\u015f sor\u011fusu\"", "cvInitSystem", "N2cv10opt_SSE4_112_GLOBAL__N_111MorphFilterINS1_5MaxOpIsEENS1_8MorphVecINS1_4VMaxINS_10hal_SSE4_19v_int16x8EEEEEEE", "unknown chunk exceeds memory limits", "belowSeeds.size() == aboveSeeds.size()", "H[PFLSLVMYNZ QFMS MSNPPNRMTMVNWOXQXTWWUZR[P[NZMWMS VNWPWTVWTZR[ MFQF", "calib3d::solvePnPRansac_13()", "virtual void cv::opt_AVX2::(anonymous namespace)::ColumnSum<double, float>::operator()(const uchar **, uchar *, int, int, int) [ST = double, T = float]", "CCITT Group 3", "Cannot update preview image pixels for file \"", "Mat::n_1submat()", "G]SFPGNILLKOJSJVKYLZN[Q[TZVXXUYRZNZKYHXGVFSF SFQGOIMLLOKSKVLYN[ Q[SZUXWUXRYNYKXHVF LYLXMVOUPURVSXS_T`V`W^W] SXT^U_V_W^", "N2cv8opt_AVX28Filter2DIhNS0_4CastIddEENS0_11FilterNoVecEEE", "mean0.data == mean.data", "The source array must be 1d coninuous vector", "morphologyEx", "(P.empty() || P.depth() == CV_32F || P.depth() == CV_64F) && (R.empty() || R.depth() == CV_32F || R.depth() == CV_64F)", "GetRawRepeatedField", "N2cv10opt_SSE4_112_GLOBAL__N_114MorphRowFilterINS1_5MinOpIfEENS1_11MorphRowVecINS1_4VMinINS_10hal_SSE4_111v_float32x4EEEEEEE", "objc_object<", "N2cv12cpu_baseline12_GLOBAL__N_111MorphFilterINS1_5MaxOpIhEENS1_8MorphVecINS1_4VMaxINS_12hal_baseline10v_uint8x16EEEEEEE", "Output matrix must be 1x3 or 3x1", "(int)sv_node.size() == sv_total", "void cv::hal::opt_SSE4_1::absdiff32f(const float *, size_t, const float *, size_t, float *, size_t, int, int)", "Unexpected status in data stream", "__itt_marker", "void cv::absdiff(cv::InputArray, cv::InputArray, cv::OutputArray)", "\"abc_searchview_description_query\" : \"\u641c\u7d22\u67e5\u8be2\"", "objdetect::HOGDescriptor_10()", "CV_MAT_TYPE(mtype) == m.type()", "void cv::HoughCircles(cv::InputArray, cv::OutputArray, int, double, double, double, double, int, int, int, double)", "\"abc_activitychooserview_choose_application\" : \"Vybrat aplikaci\"", "data must be of floating type", "src.type() == 5", "G]PFNGLIKKJNJSKVLXNZP[T[VZXXYVZSZNYKXIVGTFPF QGNHLKKNKSLVNYQZSZVYXVYSYNXKVHSGQG", "Corrupt JPEG data: bad arithmetic code", "p == evects0.ptr()", "H\\RFKZ QIW[ RIX[ RFY[ MUVU I[O[ T[[[ KZJ[ KZM[ WZU[ WYV[ XYZ[", "E_\\O\\N[MZMYNXPVUTXRZP[L[JZIYHWHUISJRQNRMSKSIRGPFNGMIMKNNPQUXWZY[[[\\Z\\Y", "Unsupportedformat of the input image", "zoom_factor_x", "ICC profile tag start not a multiple of 4", "virtual void cv::opt_AVX2::SymmRowSmallFilter<unsigned char, int, cv::opt_AVX2::SymmRowSmallVec_8u32s>::operator()(const uchar *, uchar *, int, int) [ST = unsigned char, DT = int, VecOp = cv::opt_AVX2::SymmRowSmallVec_8u32s]", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16PermuteLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::RGB2RGB5x5>::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::RGB2RGB5x5]", "/home/vagrant/build/srclib/opencv/modules/core/src/arithm.simd.hpp", "fixed32", "versions.proto", "N10__cxxabiv116__enum_type_infoE", "%s/tmp.XXXXXXXXXX", "F_NFKQJUJXKZN[R[UZWXXU\\F OFLQKUKXLZN[ KFRF YF_F", "virtual void cv::opt_SSE4_1::SymmColumnFilter<cv::opt_SSE4_1::Cast<int, short>, cv::opt_SSE4_1::SymmColumnSmallVec_32s16s>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::Cast<int, short>, VecOp = cv::opt_SSE4_1::SymmColumnSmallVec_32s16s]", "I\\MMMWNZP[S[UZXW XMX[", "calib3d::setSpeckleRange_10()", "imgproc::polylines_12()", "N12_GLOBAL__N_120GeneralizedHoughBaseE", "\"abc_searchview_description_clear\" : \"Clear query\"", "cvCalcArrBackProject", "Im2col", "Not enough image data", "typeinfo for ", "TIFFSetField", "\"abc_activitychooserview_choose_application\" : \"\u0412\u044b\u0431\u0440\u0430\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\"", "\"abc_shareactionprovider_share_with_application\" : \"\u200f\u05e9\u05ea\u05e3 \u05e2\u05dd %s\"", "void cv::cpu_baseline::medianBlur(const cv::Mat &, cv::Mat &, int)", "/home/vagrant/build/srclib/opencv/modules/features2d/src/feature2d.cpp", "FieldDescriptorProto.oneof_index should not be set for extensions.", "\"abc_searchview_description_query\" : \"\u0548\u0580\u0578\u0576\u0574\u0561\u0576 \u0570\u0561\u0580\u0581\u0578\u0582\u0574\"", "Multiple extension registrations for type \"", "\"abc_searchview_description_search\" : \"\u179f\u17d2\u179c\u17c2\u1784\u179a\u1780\"", "\"abc_searchview_description_query\" : \"Keres\u00e9si lek\u00e9rdez\u00e9s\"", "NSt6__ndk114default_deleteIN2cv3dnn14dnn4_v2019012223UpsamplingKerasSubgraphEEE", "fn[\"marginRegularization\"].isReal()", "icvMemCopy", "error: cannot disable buffer", "computeGradient", "Empty JPEG image (DNL not supported)", "findTransformECC", "calib3d::findCirclesGrid_12()", "\"abc_searchview_description_clear\" : \"Wyczy\u015b\u0107 zapytanie\"", "eigenvectors", "N2cv19connectedcomponents21LabelingGranaParallelIihNS0_9CCStatsOpEE10SecondScanE", "contourArea", "bilinear", "N2cv12cpu_baseline12_GLOBAL__N_19ColumnSumIdfEE", "core::idft_11()", "FlashEnergy", "data[i].size() == size", "max_depth should be >= 0", "imgcodecs::imwrite_11()", "lock_shared", "zCIS_A11", "!fixedSize() || ((Mat*)obj)->size.operator()() == _sz", "\"status_bar_notification_info_overflow\" : \"\u096f\u096f\u096f+\"", "core::dct_11()", "N2cv23CvtColorIPPLoop_InvokerINS_17IPPGeneralFunctorEEE", "\"abc_capital_off\" : \"\u0aac\u0a82\u0aa7\"", "virtual void cv::Feature2D::compute(cv::InputArrayOfArrays, std::vector<std::vector<KeyPoint> > &, cv::OutputArrayOfArrays)", "png_do_rgb_to_gray found nongray pixel", "features2d::getDescriptors_10()", "code_type", "gtTileSeparate", "cvConvertScaleAbs", "scaleThresh_ > 0", "\"abc_searchview_description_submit\" : \"Odosla\u0165 dopyt\"", "  Field       : ", "NWRFR[S[ RFSFS[", "(_dst.getObj() != _src.getObj() || _src.type() == CV_8UC1) && \"Inplace parameters are not supported\"", "N2cv3hal10opt_SSE4_112_GLOBAL__N_119YUV422toRGB8InvokerILi2ELi0ELi0ELi3EEE", "void cv::hal::cpu_baseline::magnitude32f(const float *, const float *, float *, int)", "cvAbsDiffS", "cvInitUndistortRectifyMap", "imgproc::boxFilter_12()", "\"abc_activity_chooser_view_see_all\" : \"\u041f\u0440\u0438\u043a\u0430\u0436\u0438 \u0441\u0432\u0435\"", "SigmoidCrossEntropyLoss", "This OpenCV build doesn't include InferenceEngine support", "N7cvflann11LinearIndexINS_2L1IfEEEE", "N2cv12cpu_baseline12_GLOBAL__N_19ColumnSumIthEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_19SqrRowSumIhdEENS_9allocatorIS5_EEEE", "WARNINGS", "Data buffer too small to hold strip %lu", "\"abc_action_bar_home_description\" : \"\u067e\u06cc\u0645\u0627\u06cc\u0634 \u0628\u0647 \u0635\u0641\u062d\u0647 \u0627\u0635\u0644\u06cc\"", "NSt6__ndk113basic_istreamIwNS_11char_traitsIwEEEE", "\"abc_toolbar_collapse_description\" : \"\u0539\u0561\u0584\u0581\u0576\u0565\u056c\"", "parseSeq", "G]PMMNKPJSJUKXMZP[T[WZYXZUZSYPWNTMPM LPKSKULX XXYUYSXP PMNNMOLRLVMYNZP[T[VZWYXVXRWOVNTM QFSb RGRa SFQb QFSF QbSb", "std::abs(more - less) <= 1", "video::setNMixtures_10()", "Invalid wire type for CPPTYPE_UINT32: ", "ml::create_10()", "Expected output shape, weights and input nodes", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphColumnFilter<cv::opt_SSE4_1::(anonymous namespace)::MinOp<double>, cv::opt_SSE4_1::(anonymous namespace)::MorphColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MinOp<double>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphColumnNoVec]", "J[TFTR OIYO YIOO", "select_working_set_func != 0", "fromTo.size()%2 == 0 && nsrc > 0 && ndst > 0", "out of place", "N2cv24RBS_BAD_HEADER_ExceptionE", "N2cv12cpu_baseline9RowFilterIffNS0_19SymmRowSmallVec_32fEEE", "dst.size() == src.size() && src.channels() == dst.channels()", "features2d::create_13()", "getGpuMat", "setBufferPtr", "F^OFI[ PFJ[ QFK[ LFWFZG[I[KZNYOVP YGZIZKYNXO WFXGYIYKXNVP NPVPXQYSYUXXVZR[F[ WQXSXUWXUZ VPWRWUVXTZR[ MFPG NFOH RFPH SFPG JZG[ JYH[ KYL[ JZM[", "LWTKULUMVMVLTKRKPMPX RKQMQX NOSO NXSX", "VDepth::contains(depth)", "approxPolyDP", "DecodeBBoxesAll", "void cv::hal::opt_AVX2::div16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, const double *)", "\"abc_searchview_description_search\" : \"Maghanap\"", "void (anonymous namespace)::GeneralizedHoughBallardImpl::calcHist()", "F_\\Q[OYNWNUOTPQTPUNVLVJUISIQJOLNNNPOQPTTUUWVYV[U\\S\\Q", "adj_h", "N2cv2ml6SVMSGDE", "data && dims <= 2 && (rows == 1 || cols == 1) && rows + cols - 1 == n && channels() == 1", "Enum type \"", "void cv::hal::opt_SSE4_1::mul8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int, const double *)", "LXNMRV VMRV NMVM", "\"abc_action_bar_home_description\" : \"\u12c8\u12f0 \u1218\u1290\u123b \u12ed\u12f3\u1235\u1231\"", "\"status_bar_notification_info_overflow\" : \"\u06f9\u06f9\u06f9+\"", "calib3d::reprojectImageTo3D_10()", "layer_sizes", "double cv::calibrateCamera(cv::InputArrayOfArrays, cv::InputArrayOfArrays, cv::Size, cv::InputOutputArray, cv::InputOutputArray, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArray, cv::OutputArray, cv::OutputArray, int, cv::TermCriteria)", "G]LFL[ MGMZ NFN[ IFUFXGYHZJZLYNXOUP XHYJYLXN UFWGXIXMWOUP NPUPXQYRZTZWYYXZU[I[ XRYTYWXY UPWQXSXXWZU[ JFLG KFLH OFNH PFNG LZJ[ LYK[ NYO[ NZP[", "levels_ > 0 && r_table_.size() == static_cast<size_t>(levels_ + 1)", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/io/zero_copy_stream.cc", "CL_INVALID_GLOBAL_WORK_SIZE", "\"MapSize\"", "(int)df_node.size() == df_count", "TIFFFetchDirectory", "G]PNL[ PNM[ VNV[ VNW[ IPKNNM[M IPKONN[N", "core::add_13()", "video::getWinSize_10()", "linear", "__itt_model_aggregate_task", "data.cols", "activation_function_id", "CV_SEQ_ELTYPE(src_seq) == CV_32SC2 || CV_SEQ_ELTYPE(src_seq) == CV_32FC2", "photo::createMergeRobertson_10()", "\"abc_action_menu_overflow_description\" : \"\u0dad\u0dc0\u0dad\u0dca \u0dc0\u0dd2\u0d9a\u0dbd\u0dca\u0db4\"", "video::calcUV_10()", "30TegraCvtColor_rgbx2rgb_Invoker", "int cv::cpu_baseline::sqsum32f(const float *, const uchar *, double *, double *, int, int)", "skipSpaces", "RGB2RGB", "bool cv::findCirclesGrid(cv::InputArray, cv::Size, cv::OutputArray, int, const Ptr<cv::FeatureDetector> &, const cv::CirclesGridFinderParameters &)", "%d.%d, OpenCV version is '4.1.0'", "virtual void cv::cpu_baseline::(anonymous namespace)::SqrRowSum<unsigned char, int>::operator()(const uchar *, uchar *, int, int) [T = unsigned char, ST = int]", "EuclideanLoss", "N2cv3dnn14dnn4_v2019012218NormalizeBBoxLayerE", "CHECK failed: (byte_size_before_serialization) == (byte_size_after_serialization): ", "ComputeJacobians", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml13TrainDataImplENS_9allocatorIS3_EEEE", "cv::impl::(anonymous namespace)::CvtHelper<cv::impl::(anonymous namespace)::Set<3, -1, -1>, cv::impl::(anonymous namespace)::Set<3, 4, -1>, cv::impl::(anonymous namespace)::Set<0, 2, 5>, cv::impl::(anonymous namespace)::SizePolicy::NONE>::CvtHelper(cv::InputArray, cv::OutputArray, int) [VScn = cv::impl::(anonymous namespace)::Set<3, -1, -1>, VDcn = cv::impl::(anonymous namespace)::Set<3, 4, -1>, VDepth = cv::impl::(anonymous namespace)::Set<0, 2, 5>, sizePolicy = cv::impl::(anonymous namespace)::SizePolicy::NONE]", "N2cv11TiffDecoderE", "virtual void cv::MatOp_GEMM::subtract(const cv::MatExpr &, const cv::MatExpr &, cv::MatExpr &) const", "sPLT chunk requires too much memory", "H\\SIS[ THTZ UFU[ UFJUZU P[X[ SZQ[ SYR[ UYV[ UZW[", "Not a key frame.", "\"abc_searchview_description_voice\" : \"Ricerca vocale\"", "Array of class labels is missing or invalid", "setPos", "getCurrentStruct", "opencv_tensorflow.NodeDef.op", "N2cv3dnn16ElementWiseLayerINS0_13AbsValFunctorEEE", "void cv::hal::opt_SSE4_1::max32f(const float *, size_t, const float *, size_t, float *, size_t, int, int)", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::YCrCb2RGB_i<uchar> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::YCrCb2RGB_i<uchar>]", "I[JFR[ ZFR[ JFZF", "/home/vagrant/build/srclib/opencv/modules/photo/src/denoising.cpp", "\"abc_action_menu_overflow_description\" : \"Mais op\u00e7\u00f5es\"", "G\\KFK[ YFKT POY[", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX29RowFilterItfNS2_8RowNoVecEEENS_9allocatorIS5_EEEE", "(bestMask.cols == 1 || bestMask.rows == 1) && (int)bestMask.total() == count", "int cv::cpu_baseline::sqsum32s(const int *, const uchar *, double *, double *, int, int)", "N3Iex9EusersExcE", "samples.channels() == 1", "virtual bool cv::ml::LogisticRegressionImpl::train(const Ptr<cv::ml::TrainData> &, int)", "N7cvflann11KMeansIndexINS_2L1IfEEEE", "virtual void cv::opt_SSE4_1::ColumnFilter<cv::opt_SSE4_1::Cast<float, short>, cv::opt_SSE4_1::SymmColumnVec_32f16s>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::Cast<float, short>, VecOp = cv::opt_SSE4_1::SymmColumnVec_32f16s]", "JZRFQGSQRR RFRR RFSGQQRR MINIVOWO MIWO MIMJWNWO WIVINOMO WIMO WIWJMNMO", "nameofs < str_hash_data.size()", "NSt6__ndk114default_deleteIN2cv14QRCodeDetector4ImplEEE", "Bogus buffer control mode", "dcn == 3 || dcn == 4", "\"abc_searchview_description_voice\" : \"Puhehaku\"", "photo::createTonemapReinhard_14()", "MWUPUV OPOSPURVTUUS", "video::getPyrScale_10()", "\"abc_searchview_description_query\" : \"\u041f\u0440\u0435\u0431\u0430\u0440\u0430\u0458 \u0431\u0430\u0440\u0430\u045a\u0435\"", "cvWarpAffine", "N2cv10opt_SSE4_112_GLOBAL__N_117MorphColumnFilterINS1_5MinOpItEENS1_14MorphColumnVecINS1_4VMinINS_10hal_SSE4_110v_uint16x8EEEEEEE", "JZLMR[ XMR[P_NaLbKb", "__itt_stack_caller_destroy", "N2cv3dnn16PermuteLayerImplE", "CHECK failed: output->message_prototype != NULL: ", "Null comment", "TIFFInitJPEG", "computeShapeByReshapeMask", "image.dims == 2 && (nch == 3 || nch == 4)", "checkRange", "virtual void cv::opt_AVX2::SymmColumnFilter<cv::opt_AVX2::Cast<double, double>, cv::opt_AVX2::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::Cast<double, double>, VecOp = cv::opt_AVX2::ColumnNoVec]", "F\\OFI[ PFJ[ TLRT LF[FZLZF MPSP F[M[", "G\\HQIOKMMMNNNPMUMXNZO[Q[SZUWVUWRXMXJWGUFSFRHRJSMUPWRZT", "void cv::fastNlMeansDenoising(cv::InputArray, cv::OutputArray, float, int, int)", "!_image.empty() && (_image.channels() == 1 || _image.channels() == 3)", "MWUNSMQMONOOPPTRUSUUSVQVOU", "nodeInputs[i] < (int)nodes.size()", "DateTimeDigitized", "OpenCV TIFF: failed TIFFSetField(tif, TIFFTAG_COMPRESSION, page_compression)", "objdetect::get_1blockSize_10()", "angleStep_ > 0.0 && angleStep_ < 360.0", "IPP:(ipp_Laplacian(_src, _dst, ksize, scale, delta, borderType))", "\"abc_searchview_description_submit\" : \"Indsend foresp\u00f8rgslen\"", "L[UUTSRRPRNSMTLVLXMZO[Q[SZ VRUUSZPaOdOfPgRfScS\\U[XY[V", "T82Options", "idx0.data == idx.data", "Bogus encoding, loop in the code table; scanline %d", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_7RGB2RGBIfEEEE", "\"abc_searchview_description_submit\" : \"\u0995\u09cd\u09af\u09cb\u09af\u09bc\u09be\u09b0\u09c0 \u099c\u09ae\u09be \u09a6\u09bf\u09a8\"", "N2cv21CascadeClassifierImplE", "invalid before the PNG header has been read", "calib3d::solvePnP_10()", "Unknown field with tag %d (0x%x) encountered", "ml::trainAuto_12()", "computeDisparitySGBM_HH4", "project_onto_jacobian_ECC", "startWriteChunk", "learningRate >= 0", "netTxt.node(nodeIdx).name() == kernel_inp.name", "imgWidth == frameWidth && imgHeight == frameHeight", "AbBQCOEMHMINIPHTF[ GMHNHPGTE[ HTJPLNNMPMRNSOSQP[ PMRORQO[ RTTPVNXMZM\\N]O]Q[W[Z\\[ ZM\\O\\QZWZZ[[^[`YaW", "cv::Mat cv::ml::getSubMatrixImpl(const cv::Mat &, const cv::Mat &, int) [T = int]", "imgproc::Canny_13()", "CV_IS_MAT(_cameraMatrix) && _cameraMatrix->rows == 3 && _cameraMatrix->cols == 3", "NVPMPQ TMTQ", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::mRGBA2RGBA<uchar> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::mRGBA2RGBA<uchar>]", "cvSeqRemove", "void cv::hal::opt_AVX2::addWeighted32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, const double *)", "void cv::hal::opt_SSE4_1::min8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int)", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphFilter<cv::opt_AVX2::(anonymous namespace)::MinOp<unsigned char>, cv::opt_AVX2::(anonymous namespace)::MorphVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_uint8x32> > >::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MinOp<unsigned char>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_uint8x32> >]", "NSt6__ndk120__shared_ptr_emplaceI22AndroidMediaNdkCaptureNS_9allocatorIS1_EEEE", "calib3d::calibrateCameraROExtended_10()", "void cv::hal::opt_SSE4_1::sub16s(const short *, size_t, const short *, size_t, short *, size_t, int, int)", "?core::mean_10()", "\"abc_activitychooserview_choose_application\" : \"Bir uygulama se\u00e7in\"", "cv::Scalar cv::sum(cv::InputArray)", "JZNFMM OFMM VFUM WFUM", "void cv::cpu_baseline::cvt32f32s(const float *, size_t, uchar *, size_t, int *, size_t, cv::Size, void *)", "H\\VFNb QMNNLPKSKVLXNZQ[S[VZXXYUYRXPVNSMQM", "virtual int cv::LineSegmentDetectorImpl::compareSegments(const cv::Size &, cv::InputArray, cv::InputArray, cv::InputOutputArray)", "CFARepeatPatternDim", "icvSeqElemsClearFlags", "JPEG strip size exceeds expected dimensions, expected %dx%d, got %dx%d", "imgproc::connectedComponents_10()", "N6google8protobuf8internal12MapEntryImplIN17opencv_tensorflow26NodeDef_AttrEntry_DoNotUseENS0_7MessageENSt6__ndk112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSF_11ELi0EE15MapEntryWrapperE", "void cv::calcOpticalFlowFarneback(cv::InputArray, cv::InputArray, cv::InputOutputArray, double, int, int, int, int, double, int)", "operator delete", "indices_blob_id", "cvSeqSlice", "dnn::setPreferableTarget_10()", "calib3d::getSpeckleWindowSize_10()", "Invalid wire type for CPPTYPE_INT32: ", "\"abc_action_mode_done\" : \"Ferdig\"", "T78|i", "NULL ranges pointer", "!row.empty() && row.rows == 1", "void cv::hal::opt_AVX2::min16s(const short *, size_t, const short *, size_t, short *, size_t, int, int)", "!fixedType() || ((cuda::HostMem*)obj)->type() == mtype", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_18Filter2DIhNS2_4CastIddEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "photo::getThreshold_10()", "sample_size*batch_size == inpBlob.total()", "St20bad_array_new_length", "imgproc::rectangle_15()", "N6google8protobuf8internal20RepeatedFieldWrapperIiEE", "nmsThreshold >= 0.", "!templateImage.empty()", "\"abc_activity_chooser_view_see_all\" : \"Zobacz wszystkie\"", "double cv::invert(cv::InputArray, cv::OutputArray, int)", "AnalogBalance", "cvFindExtrinsicCameraParams2", "rgb-alpha color-map: too few entries", "NSt6__ndk123__system_error_categoryE", "imgproc::createCLAHE_10()", "hu.isContinuous()", "virtual void cv::opt_SSE4_1::ColumnFilter<cv::opt_SSE4_1::Cast<float, unsigned short>, cv::opt_SSE4_1::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::Cast<float, unsigned short>, VecOp = cv::opt_SSE4_1::ColumnNoVec]", "Failed to parse data", "The function is not implemented. Rebuild the library with Windows, GTK+ 2.x or Cocoa support. If you are on Ubuntu or Debian, install libgtk2.0-dev and pkg-config, then re-run cmake or configure script", "bboxDeltas.dims == 4", "virtual void cv::opt_SSE4_1::(anonymous namespace)::ColumnSum<int, double>::operator()(const uchar **, uchar *, int, int, int) [ST = int, T = double]", "DATA_LOSS", "\"abc_action_bar_home_description\" : \"Zulazulela ekhaya\"", "/home/vagrant/build/srclib/opencv/modules/dnn/misc/tensorflow/tensor_shape.pb.cc", "\"abc_capital_on\" : \"\u0d9a\u0dca\u200d\u0dbb\u0dd2\u0dba\u0dcf\u0dad\u0dca\u0db8\u0d9a\u0dba\u0dd2\"", "N2cv3hal10opt_SSE4_112_GLOBAL__N_119YUV422toRGB8InvokerILi0ELi1ELi0ELi3EEE", "void cv::min(const cv::UMat &, const cv::UMat &, cv::UMat &)", "NSt6__ndk120__shared_ptr_emplaceINS_6vectorIN2cv13HaarEvaluator7FeatureENS_9allocatorIS4_EEEENS5_IS7_EEEE", "sizes.type()", "adjustROI", "LYQKOLNONTOWQXTXVWWTWOVLTKQK QKPLOOOTPWQX TXUWVTVOULTK", "N12opencv_caffe15BlobProtoVectorE", "0 <= i && i < (int)decision_func.size()", "March", "void cv::hal::opt_AVX::exp64f(const double *, double *, int)", "N2cv16SGBM3WayMainLoopE", "JZPOOMOKMKMMNNPOSOUNWL NKNN MLOL MMSO POUN WLWY", "NVNVPSRO UFOXOZQ[SZTYVV VFPXPZQ[ PNVN", "/home/vagrant/build/srclib/opencv/modules/core/src/matrix_sparse.cpp", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/deriv.cpp", "/home/vagrant/build/srclib/opencv/modules/ml/src/nbayes.cpp", "allocateBlobsForLayer", "H]XGR[ YFS[ YFJUZU", "cvRQDecomp3x3", "objectPoints is not a valid matrix", "void cv::hal::cpu_baseline::fastAtan64f(const double *, const double *, double *, int, bool)", "N2cv3dnn14dnn4_v201901229CropLayerE", "features2d::setMinArea_10()", "char16_t", "inp.isContinuous() && out.isContinuous()", "calib3d::filterSpeckles_11()", "N6google8protobuf8internal12MapFieldBaseE", "&&&&&", "setFirstLevel", "The minimum x coordinate of the image's data window is not a multiple of the x subsampling factor of the \"", "?cv::Moments cv::moments(cv::InputArray, bool)", "OXXROMOWXR URPO URPU RRPQ RRPS", "N3Imf14TypedAttributeINS_8TimeCodeEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_16RowSumIsdEENS_9allocatorIS5_EEEE", "(distCoeffs0.cols == 1 || distCoeffs0.rows == 1) && (ndcoeffs == 4 || ndcoeffs == 5 || ndcoeffs == 8 || ndcoeffs == 12 || ndcoeffs == 14)", "void cv::hal::cvtBGRtoBGR5x5(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "parseTensor", "stereoCalibrate does not support CALIB_USE_EXTRINSIC_GUESS.", "Entry", "activation", "Mat::n_1checkVector__JI()", "(merge ", "MWOMOV OMUM OQSQ OVUV", "\"abc_search_hint\" : \"Leita\u2026\"", "MWQMNV QMTMVNVPSQPQ SQURUTTURVNV", "opencv_tensorflow.AttrValue.placeholder", "Missing or invalid SVMSGD type", "int cv::floodFill(cv::InputOutputArray, cv::Point, cv::Scalar, cv::Rect *, cv::Scalar, cv::Scalar, int)", "w.type() == type && (w.size() == cv::Size(nm,1) || w.size() == cv::Size(1, nm) || w.size() == cv::Size(nm, nm) || w.size() == cv::Size(n, m))", "throw ", "current_type == NONE || current_type == type", "Input window has non-positive sizes", "empty FileNode object", "The second output matrix must have two channels; one for x and one for y", "I]NPNOOOOQMQMONNPMTMVNWOXQXXYZZ[ VOWQWXXZ TMUNVPVXWZZ[[[ VRUSPTMULWLXMZP[S[UZVX NUMWMXNZ USQTOUNWNXOZP[", "int cv::cpu_baseline::(anonymous namespace)::MorphColumnVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_int16x8> >::operator()(const uchar **, uchar *, int, int, int) const [VecUpdate = cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_int16x8>]", "H\\RFJ[ RIK[J[ RIY[Z[ RFZ[ MUWU LVXV", "type == CV_32FC2 || type == CV_32FC3", "numgbits", "twothirdsample", "NSt6__ndk18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEE", "H\\KFK[ HF[FQP[Z ZV[Y\\[ ZVZY WYZY WYZZ\\[", "Unknown parameter new_width for layer type ", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_111MorphFilterINS3_5MinOpItEENS3_8MorphVecINS3_4VMinINS1_12hal_baseline10v_uint16x8EEEEEEENS_9allocatorISD_EEEE", "N2cv2ml9StatModelE", "core::checkRange_11()", "time_get_byname failed to construct for ", "cvGetReal* support only single-channel arrays", "void cv::drawKeypoints(cv::InputArray, const std::vector<KeyPoint> &, cv::InputOutputArray, const cv::Scalar &, cv::DrawMatchesFlags)", "\"abc_activitychooserview_choose_application\" : \"\u0baa\u0baf\u0ba9\u0bcd\u0baa\u0bbe\u0b9f\u0bcd\u0b9f\u0bc8\u0ba4\u0bcd \u0ba4\u0bc7\u0bb0\u0bcd\u0bb5\u0bc1\u0b9a\u0bc6\u0baf\u0bcd\u0b95\"", "Softmax", "H\\QMNNLQKTKVLYMZP[S[VZXWYTYRXOWNTMQM NOMQLTLWMY VYWWXTXQWO QMOONQMTMWNZP[ S[UYVWWTWQVNTM", "N2cv12cpu_baseline12_GLOBAL__N_114MorphRowFilterINS1_5MaxOpIfEENS1_11MorphRowVecINS1_4VMaxINS_12hal_baseline11v_float32x4EEEEEEE", "N3Imf14TypedAttributeIN5Imath8Matrix33IdEEEE", "MWQPOV UPTPRQPS PSQUSVTV", "void cv::evaluateFeatureDetector(const cv::Mat &, const cv::Mat &, const cv::Mat &, std::vector<KeyPoint> *, std::vector<KeyPoint> *, float &, int &, const Ptr<cv::FeatureDetector> &)", "\"abc_action_bar_up_description\" : \"\u041f\u0435\u0440\u0435\u0439\u0442\u0438 \u0432\u0433\u043e\u0440\u0443\"", "E_NWLTIRLPNM LPJRLT JRZR VWXT[RXPVM XPZRXT", "F^KFK[ LFL[ XFX[ YFY[ HFOF UF\\F XHLY H[O[ U[\\[ N@N?M?M@NBPCTCVBW@", "features2d::drawMatches_13()", "LONG8 not allowed for ClassicTIFF", "CalibrateExtrinsics", "ml::getMarginType_10()", "JZRIPOJOOSMYRUWYUSZOTORI", "!_mat.empty()", "virtual void cv::dnn::ElementWiseLayer<cv::dnn::SigmoidFunctor>::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays) [Func = cv::dnn::SigmoidFunctor]", "imgproc::resize_11()", "!_src.empty()", "\"abc_activity_chooser_view_see_all\" : \"Zobrazi\u0165 v\u0161etko\"", "org.opencv.core", "_circles.isMat() || _circles.isVector()", "cvCheckTermCriteria", "randShuffle_", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX221SymmColumnSmallFilterINS2_13FixedPtCastExIihEENS2_19SymmColumnVec_32s8uEEENS_9allocatorIS7_EEEE", "\"abc_capital_on\" : \"\u5f00\u542f\"", "\"search_menu_title\" : \"\u0916\u094b\u091c\u094d\u0928\u0941\u0939\u094b\u0938\u094d\"", "N7cvflann17flann_algorithm_tE", "Mat::n_1Mat__DDI()", "Cannot handle different values per sample for \"%s\"", "SpatialLPPooling", "Ptr<cv::BaseColumnFilter> cv::opt_SSE4_1::getMorphologyColumnFilter(int, int, int, int)", "K[NRLXLZN[O[QZSXUU ORMXMZN[ VRTXTZV[XZYY[V WRUXUZV[", "Merging JPEG codec-specific tags failed", "\"abc_shareactionprovider_share_with\" : \"Del med\"", "params.CVFolds should be =0 (the tree is not pruned) or n>0 (tree is pruned using n-fold cross-validation)", "N12opencv_caffe15SolverParameterE", "NSt6__ndk120__shared_ptr_pointerIPN2cv21DetectionBasedTracker21SeparateDetectionWorkENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "H\\QFNGLJKOKRLWNZQ[S[VZXWYRYOXJVGSFQF NHMJLNLSMWNY VYWWXSXNWJVH QFOGNIMNMSNXOZQ[ S[UZVXWSWNVIUGSF LPXQ LQXP", "\"dummy_content\" : \"DUMMY\nCONTENT\"", "One of arguments' values is out of range", "NULL histogram array pointer", "layer.bottom_size() == 1", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline8Filter2DIhNS2_4CastIddEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "CameraSerialNumber", "float16", "learnt_thetas", "Contour header size must be >= sizeof(CvContour)", "N2cv23CvtColorIPPLoop_InvokerINS_17IPPReorderFunctorEEE", "delete[] ", "ml::trainAuto_15()", "features2d::getPass2Only_10()", "cvReshapeMatND", "features2d::create_18()", "ml::predictProb_10()", "H]ZKYIWGUFQFOGMILKKNKSLVMXOZQ[U[WZYXZVZRUR ZKYKXIWHUGQGOHNIMKLNLSMVNXOYQZUZWYXXYVYSUSUR", "imagesFromBlob", "operator*=", "N2cv12cpu_baseline9RowFilterItfNS0_8RowNoVecEEE", "void cv::cpu_baseline::cvt16u16s(const ushort *, size_t, uchar *, size_t, short *, size_t, cv::Size, void *)", "void cv::hal::cmp16u(const ushort *, size_t, const ushort *, size_t, uchar *, size_t, int, int, void *)", "J[XMM[ MMXM M[X[", "H]TFQGOIMLLOKSKVLYMZO[Q[TZVXXUYRZNZKYHXGVFTF QHOJNLMOLSLWMY TYVWWUXRYNYJXH TFRGPJOLNOMSMXNZO[ Q[SZUWVUWRXNXIWGVF", "train", "\"abc_searchview_description_voice\" : \"B\u00fasqueda por voz\"", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/min_enclosing_triangle.cpp", "core::bitwise_1and_10()", "ofs.x >= winSize.width && ofs.y >= winSize.height && ofs.x + prevPyr[lvlStep1].cols + winSize.width <= fullSize.width && ofs.y + prevPyr[lvlStep1].rows + winSize.height <= fullSize.height", "void cv::hal::opt_SSE4_1::cvtBGRtoBGR5x5(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "_offsetsX.size() == _offsetsY.size()", "std::string", "NSt6__ndk120__shared_ptr_pointerIPN2cv5utils5trace7details16SyncTraceStorageENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "A.type() == CV_32F", "imgLabels.cols == img.cols", "arithm_ipp_sub32f", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX29RowFilterIfdNS2_8RowNoVecEEENS_9allocatorIS5_EEEE", "the array of point counters must be 1-dimensional integer vector", "start <= (int)shape.size() && end <= (int)shape.size() && start <= end", "calib3d::getDisp12MaxDiff_10()", "Both object points and image points must be 2D", "virtual void cv::opt_AVX2::RowFilter<unsigned char, float, cv::opt_AVX2::RowNoVec>::operator()(const uchar *, uchar *, int, int) [ST = unsigned char, DT = float, VecOp = cv::opt_AVX2::RowNoVec]", "labels should be a column matrix", "scales.size() == 4", "objdetect::detectMultiScale3_16()", "compute_kcontrast", "Unable to allocate memory for auto-correcting of subsampling values; auto-correcting skipped", "void cv::morphologyEx(cv::InputArray, cv::OutputArray, int, cv::InputArray, cv::Point, int, int, const cv::Scalar &)", "imgproc::HoughCircles_12()", "\"abc_activity_chooser_view_see_all\" : \"Lihat semua\"", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/precomp.hpp", "BACKPROP", "core::getNumberOfCPUs_10()", "\"abc_activity_chooser_view_see_all\" : \"\u1798\u17be\u179b\u200b\u1791\u17b6\u17c6\u1784\u17a2\u179f\u17cb\"", "N6google8protobuf4hashINSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE", " (expected)", "JXSOQOOPNQMSJ\\ QOOQNSK\\ SOUPVRVTUVTWRXPXNWMU SOUQUTTVRX", "ResizeBilinear", "calib3d::stereoCalibrateExtended_11()", "marginType", "\" channel is not 1.", "']' - right-brace of seq is missing", "Floating-point coordinates are not supported here", "N2cv3dnn14dnn4_v2019012212SigmoidLayerE", "Dropout", "N2cv8opt_AVX212_GLOBAL__N_111MorphFilterINS1_5MaxOpIdEENS1_10MorphNoVecEEE", "G]LMLTMVPWRWUVWT MMMTNVPW WMW[ XMX[ IMPM TM[M T[[[", "\"abc_searchview_description_voice\" : \"H\u00e4\u00e4lotsing\"", "loadIndex_", "Resize", "N2cv8opt_AVX212_GLOBAL__N_16RowSumIsiEE", "N2cv3dnn16PoolingLayerImpl14PoolingInvokerE", "cvGetImageCOI", "void cv::hal::cvtBGRtoThreePlaneYUV(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "Requested size is too large to fit into size_t.", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::Gray2RGB<float> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::Gray2RGB<float>]", "JZNPPPPONPMQLSLUMWNXPXQWRUSR LUNWPWRU RRRWSXUXWVXTXRWPVOVPWP RUSWUWWV", "\"abc_search_hint\" : \"\u0916\u094b\u091c\u093e \u091c\u093e \u0930\u0939\u093e \u0939\u0948\u2026\"", "attr_value.proto", "N2cv19FastFeatureDetectorE", "sPLT out of memory", "imgproc::goodFeaturesToTrack_11()", "OPENCV_VIDEOWRITER_DEBUG", "unrecognized equation type", "\"abc_searchview_description_clear\" : \"I\u0161valyti u\u017eklaus\u0105\"", "8ccccc/Bcccccccccccccccccccccccccccccccccccccc", "varMin", "G^ZH[H\\F[L[JZHYGVFRFOGMIMKNMONVRXT MKOMVQWRXTXWWYVZS[O[LZKYJWJUI[JYKY", "void cv::hal::opt_AVX2::min64f(const double *, size_t, const double *, size_t, double *, size_t, int, int)", "MWRPPQOSPURVTUUSTQRP", "ResizeNearestNeighbor", "winSize.width > 1 && winSize.height > 1", "void cv::hal::opt_SSE4_1::sub32s(const int *, size_t, const int *, size_t, int *, size_t, int, int)", "Copy dimension (which has zero size) is not present in source matrix", "depth_radius", "ml::getSubMatrix_10()", "N2cv10opt_SSE4_121SymmColumnSmallFilterINS0_13FixedPtCastExIihEENS0_19SymmColumnVec_32s8uEEE", "imgproc::drawMarker_13()", "\"abc_searchview_description_query\" : \"\u691c\u7d22\u30ad\u30fc\u30ef\u30fc\u30c9\"", "\"abc_searchview_description_query\" : \"Paie\u0161kos u\u017eklausa\"", "The image is interleaved and has over CV_CN_MAX channels", "The vertex is not found", "masks.size() == imageCount", "imgproc::getTilesGridSize_10()", "Error post-encoding before directory write", "padT >= 0 && padL >= 0 && padB >= 0 && padR >= 0 && strideH > 0 && strideW > 0", "%.0Lf", "virtual void cv::HOGDescriptor::detectROI(cv::InputArray, const std::vector<cv::Point> &, std::vector<cv::Point> &, std::vector<double> &, double, cv::Size, cv::Size) const", "n.isString() && String(n) == name_", "/home/vagrant/build/srclib/opencv/modules/features2d/src/agast_score.cpp", "NSt6__ndk17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEE", "d == 2 && ((sizes[0] == sz.height && sizes[1] == sz.width) || (allowTransposed && sizes[0] == sz.width && sizes[1] == sz.height))", "torchReshape", "(icvCreatePOSITObject( points, numPoints, &pObject )) >= 0", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/templmatch.cpp", "N12opencv_caffe12ELUParameterE", "\"abc_searchview_description_query\" : \"\u0d24\u0d3f\u0d30\u0d2f\u0d7d \u0d05\u0d28\u0d4d\u0d35\u0d47\u0d37\u0d23\u0d02\"", "cv::Mat cv::initCameraMatrix2D(cv::InputArrayOfArrays, cv::InputArrayOfArrays, cv::Size, double)", "NSt6__ndk117__widen_from_utf8ILj16EEE", "/home/vagrant/build/srclib/opencv/modules/core/src/convert_scale.dispatch.cpp", "basic_string::at: __n (which is %zu) >= this->size() (which is %zu)", "N2cv9FormattedE", "\"abc_shareactionprovider_share_with\" : \"Freigeben f\u00fcr\"", "JZQCVMRTRU ULQS TITKPRRUUY W\\UYSXQXOYN[N]O_Ra W\\UZSYOYO]P_Ra SXPZN]", "imgproc::erode_14()", "void cv::hal::cmp32s(const int *, size_t, const int *, size_t, uchar *, size_t, int, int, void *)", "Complex keys are not supported", "darknet", "void cv::hal::cvtRGBAtoMultipliedRGBA(const uchar *, size_t, uchar *, size_t, int, int)", "Incompatible weights/bias blobs", "core::patchNaNs_10()", "G]JMN[ RMN[ RMV[ ZMV[", "N2cv2ml11ANN_MLPImpl9RPropLoopE", "NSt6__ndk120__shared_ptr_emplaceIN2cv2ml6EMImplENS_9allocatorIS3_EEEE", "        %3d %3d %3d %3d %3d %3d %3d %3d", "video::setBackgroundRatio_10()", "cvCalcArrBackProjectPatch", "Region-name", "inputs[0].total() == outputs[0].total()", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::Lab2RGB_f>::operator()(const cv::Range &) const [Cvt = cv::Lab2RGB_f]", "%s2-d encoding", "\"abc_shareactionprovider_share_with\" : \"\u0e41\u0e0a\u0e23\u0e4c\u0e01\u0e31\u0e1a\"", "rvecs.empty() || (rvecs.channels() == 3)", "imgproc::HoughCircles_13()", "CurrentICCProfile", "ml::trainAuto_17()", "writeFrameData", "KMP_FOR_TCHECK", "mask.size() == imsize && mask.channels() == 1", "dSin_LA", "dst.isContinuous()", "\"abc_shareactionprovider_share_with\" : \"\u0627\u0634\u062a\u0631\u0627\u06a9\u200c\u06af\u0630\u0627\u0631\u06cc \u0628\u0627\"", "leaky", "status", "void cv::convertPointsToHomogeneous(cv::InputArray, cv::OutputArray)", "__itt_domain_create", "N6google8protobuf28GeneratedCodeInfo_AnnotationE", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/resize_layer.cpp", "\"abc_shareactionprovider_share_with_application\" : \"%s \u0938\u0939 \u0938\u093e\u092e\u093e\u092f\u093f\u0915 \u0915\u0930\u093e\"", "H\\IQJOLMNMONOPMVMYO[Q[TZVXXTYPYM", "op == SUM || coeffs.size() == 0", "factorHeight.total()", "N2cv21resizeGeneric_InvokerINS_15HResizeLanczos4IddfEENS_15VResizeLanczos4IddfNS_4CastIddEENS_12VResizeNoVecEEEEE", "void cv::min(const cv::Mat &, const cv::Mat &, cv::Mat &)", "dnn::forward_13()", "\"abc_searchview_description_search\" : \"Keres\u00e9s\"", "        %4u %4u %4u %4u %4u %4u %4u %4u", "CleanFaxData", "uchar16", "G]MFQPN[ NFRPO[ OFSPP[ \\GSP KFRF YF_F K[S[ LFNG PFOH QFNG ZF\\G ^F\\G OZL[ OYM[ PYQ[ OZR[", "E_[O[NZNZP\\P\\N[MZMYNXPVUTXRZP[L[JZIXIUJSPORMSKSIRGPFNGMIMLNOPRTWWZY[[[\\Y\\X KZJXJUKSLR RMSI SKRG NGMK NNPQTVWYYZ N[LZKXKULSPO MINMQQUVXYZZ[Z\\Y", "N2cv3hal10opt_SSE4_112_GLOBAL__N_119YUV422toRGB8InvokerILi2ELi1ELi0ELi4EEE", "pixel vector[", "void cv::hal::opt_AVX2::add64f(const double *, size_t, const double *, size_t, double *, size_t, int, int)", "N2cv8opt_AVX216SymmColumnFilterINS0_4CastIdsEENS0_11ColumnNoVecEEE", "_TIFFVSetField", "N2cv26ComputeKeypointOrientationE", "The output map must be (W-w+1 x H-h+1), where the input images are (W x H) each and the patch is (w x h)", "typeid(", "i1 >= 0 && i1 < static_cast<int>(keypoints1.size())", "void cv::hal::cpu_baseline::cvtGraytoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, int)", "N2cv3dnn14dnn4_v2019012211BackendNodeE", "\"abc_searchview_description_query\" : \"\u12e8\u134d\u1208\u130b \u1325\u12eb\u1244\"", "void cv::PCACompute(cv::InputArray, cv::InputOutputArray, cv::OutputArray, int)", "cvBoundingRect", "void cv::hal::opt_SSE4_1::cvtOnePlaneYUVtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int, int)", "Field name \"$0\" is reserved.", "N10__cxxabiv115__forced_unwindE", "MWONQMSMUNUPTROVUV", "Input sequence is not a sequence of points", "Backtrace", "Unsupported padding mode ", "void cv::hal::opt_SSE4_1::mul16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, const double *)", "/home/vagrant/build/srclib/opencv/modules/features2d/src/kaze/KAZEFeatures.cpp", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::HLS2RGB_b>::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::HLS2RGB_b]", "N2cv8colormap3JetE", "cvFindContours_Impl", "\"search_menu_title\" : \"Iskanje\"", "Maximum", "N2cv3dnn22DeConvolutionLayerImpl13Col2ImInvokerE", "Intrinsic parameters must be 3x3 floating-point matrix", "\"abc_searchview_description_search\" : \"T\u00ecm ki\u1ebfm\"", "IPP:(ippi_DCT_32f(src, src_step, dst, dst_step, width, height, isInverse, isRowTransform))", "checkScalar(value, type(), arr.kind(), _InputArray::CUDA_GPU_MAT)", "void cv::hal::cvtThreePlaneYUVtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "NXOYQXRWSUSSRRQROSNUNXOZQ[S[UZVYXV", "N6google8protobuf8internal8MapFieldIN17opencv_tensorflow26NodeDef_AttrEntry_DoNotUseENSt6__ndk112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSE_11ELi0EEE", "UNAUTHENTICATED", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_3hal12cpu_baseline12_GLOBAL__N_111YCrCb2RGB_iIhEEEE", "HoughLinesSDiv", "allocateLayers", "_GLOBAL__N", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphColumnFilter<cv::cpu_baseline::(anonymous namespace)::MinOp<float>, cv::cpu_baseline::(anonymous namespace)::MorphColumnVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_float32x4> > >::operator()(const uchar **, uchar *, int, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MinOp<float>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphColumnVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_float32x4> >]", "N2cv3hal10opt_SSE4_112_GLOBAL__N_119YUV422toRGB8InvokerILi2ELi0ELi1ELi4EEE", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::Gray2RGB5x5>::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::Gray2RGB5x5]", "basic_string::_M_replace_aux", "void cv::hal::cvtTwoPlaneYUVtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "No space for tile buffer", "Error parsing text-format ", "size.height >= 1", "G]LML[ MMM[ MPONRMTMWNXPX[ TMVNWPW[ IMMM I[P[ T[[[", "\"abc_action_mode_done\" : \"\u062a\u0645\"", "G\\KFK[ KFTFWGXHYJYMXOWPTQKQ", "PERMISSION_DENIED", "imgproc::goodFeaturesToTrack_12()", "CL_INVALID_WORK_DIMENSION", "CbGMG[H[ GMHMH[ HQKNMMPMRNSQS[ HQKOMNONQORQR[S[ SQVNXM[M]N^Q^[ SQVOXNZN\\O]Q][^[", "integral", "N2cv12cpu_baseline16SymmColumnFilterINS0_4CastIftEENS0_11ColumnNoVecEEE", "Mat::n_1diag__JI()", "float3", "Ignoring %s since BitsPerSample tag not found", "CHECK failed: (field->message_type()) == (desc): ", "virtual void cv::BackgroundSubtractorKNNImpl::getBackgroundImage(cv::OutputArray) const", "src.rows / 2 == dst.rows", "values", "LYQOOPNRNUOWQXTXVWWUWRVPTOQO QOPPOROUPWQX TXUWVUVRUPTO", "\" conflicts with the existing symbol \"", "Wrong mean shape for the given data matrix. Expected %d, but was %zu.", "finalTemperature > 0", "fn[\"stepDecreasingPower\"].isReal()", "H\\VIVJWJWIVI WHVHUIUJVKWKXJXIWGUFRFOGMILKKOKULXNZQ[S[VZXXYUYTXQVOSNQNOONPMR NIMKLOLUMXNY WXXVXSWQ RFPGOHNJMNMUNXOZQ[ S[UZVYWVWSVPUOSN", "calib3d::getOptimalNewCameraMatrix_13()", "JZWKMOWS MTWT MXWX", "N2cv3dnn22NormalizeBBoxLayerImplE", "SIGMOID", "core::subtract_14()", "offset_x_size", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_16RowSumItdEENS_9allocatorIS5_EEEE", "varThresholdGen", "wrong mask type or size", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_19RowFilterIfdNS2_8RowNoVecEEENS_9allocatorIS5_EEEE", "core::gemm_10()", "ml::create_12()", "prevPyr[level * lvlStep1].type() == nextPyr[level * lvlStep2].type()", "../../../etc", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/smooth.simd.hpp", "cvSeqPushMulti", "N2cv28NonLinearScalarDiffusionStepE", "calib3d::validateDisparity_10()", "rotatingCalipers", "ios_base::clear", "OPENCV_TEMP_PATH", "NVSKPO SKTLPO", "Image attribute name cannot be an empty string.", "virtual void cv::opt_AVX2::SymmColumnFilter<cv::opt_AVX2::Cast<double, short>, cv::opt_AVX2::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::Cast<double, short>, VecOp = cv::opt_AVX2::ColumnNoVec]", "\"abc_searchview_description_voice\" : \"\u0e8a\u0ead\u0e81\u0eab\u0eb2\u0e94\u0ec9\u0ea7\u0e8d\u0eaa\u0ebd\u0e87\"", "F_OQMQKRJSIUIWJYKZM[O[QZRYSWSURSQROQ SHPQ ZJRR \\QST", "SIGMOID_SYM", "Simultaneous change of shape and number of channels is not supported. Do it by 2 separate calls", "normType == NORM_INF || normType == NORM_L1 || normType == NORM_L2 || normType == NORM_L2SQR || ((normType == NORM_HAMMING || normType == NORM_HAMMING2) && src1.type() == CV_8U)", "weight_off", "maxThreshold", "reinterpret_cast<", "Unknown/unsupported border type", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_9HLS2RGB_bEEE", "N2cv3dnn22CropAndResizeLayerImplE", "<null>", "bool cv::QRDetect::localization()", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi2EEElm7DistAbsiE", "invalid index", "\"abc_searchview_description_voice\" : \"Hlasov\u00e9 vyhled\u00e1v\u00e1n\u00ed\"", "unexpected zlib return", "32FastNlMeansMultiDenoisingInvokerIhxy7DistAbsiE", "features2d::drawKeypoints_10()", "IPP:(ipp_norm(src, normType, mask, _result))", "NULL iterator pointer", "0 < coi && coi <= 4", "IPP:((ippicvsLn_64f_A50)(src, dst, n)) >= 0", "Expected integer, got: ", "write_32FC3_SGILOG", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn23ShuffleChannelLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi4EEExy7DistAbsNS1_IiLi4EEEE", "virtual void cv::opt_AVX2::SymmRowSmallFilter<float, float, cv::opt_AVX2::SymmRowSmallVec_32f>::operator()(const uchar *, uchar *, int, int) [ST = float, DT = float, VecOp = cv::opt_AVX2::SymmRowSmallVec_32f]", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline8Filter2DItNS2_4CastIddEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "Data buffer too small to hold tile %lu", "!H.empty() && H.cols == 3 && H.rows == 3", "virtual void cv::StereoBMImpl::compute(cv::InputArray, cv::InputArray, cv::OutputArray)", "\"abc_toolbar_collapse_description\" : \"\u6536\u8d77\"", "): failed TIFFSetField(tif, TIFFTAG_PREDICTOR, predictor)", "scalarParams.has(\"constant_scalar\")", "I\\QMONNOMQMSNUOVQWSWUVVUWSWQVOUNSMQM ONNPNTOV UVVTVPUN VOWNYMYNWN NUMVLXLYM[P\\U\\X]Y^ LYMZP[U[X\\Y^Y_XaUbObLaK_K^L\\O[", "imgproc::preCornerDetect_11()", "The future has already been retrieved from the promise or packaged_task.", "NSt6__ndk120__shared_ptr_pointerIPN2cv23HomographyDecomposition21HomographyDecompInriaENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "Quantizing to %d colors", "Read error at row %lu, col %lu, tile %lu; got %llu bytes, expected %llu", "PXM::readHeader(): unknown C++ exception", "parsing", "void cv::cpu_baseline::cvt32f8u(const float *, size_t, uchar *, size_t, uchar *, size_t, cv::Size, void *)", "extractCustomParams", "void cv::cpu_baseline::cvt16u64f(const ushort *, size_t, uchar *, size_t, double *, size_t, cv::Size, void *)", "void cv::calcCovarMatrix(cv::InputArray, cv::OutputArray, cv::InputOutputArray, int, int)", "LYOEOFNFNEODQCTCVDWFVHTI TCUDVFUHTI RITIVJWLWMVOTPQPOONNNMOMON TIUJVLVMUOTP MRXR SVSa TTTa TTM]X] QaVa", "unspecified generic_category error", "__itt_id_create_ex", "Invalid numeric value in the string", "Enum value in map must define 0 as the first value.", "batch_normalize", "has_bias", "CL_OUT_OF_HOST_MEMORY", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn16ElementWiseLayerINS2_11BNLLFunctorEEENS_14default_deleteIS5_EENS_9allocatorIS5_EEEE", "TIFFWriteDirectoryTagCheckedRational", "virtual void cv::dnn::ConstLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "AVX512PF", "G]LFL[ MFM[ IFUFXGYHZJZLYNXOUP UFWGXHYJYLXNWOUP MPUPXQYRZTZWYYXZU[I[ UPWQXRYTYWXYWZU[", "IO error during reading of \"%s\"", "imgproc::getLeadingEdgeList_10()", "ml::getAnnealFinalT_10()", "index is out of range", "N2cv17PnPRansacCallbackE", "void cv::dnn::dnn4_v20190122::Layer::finalize(const std::vector<Mat> &, std::vector<Mat> &)", "result", "void cv::cpu_baseline::cvt16s8u(const short *, size_t, uchar *, size_t, uchar *, size_t, cv::Size, void *)", "\"abc_searchview_description_search\" : \"Sesha\"", "void cv::opt_AVX2::cvt16u32s(const ushort *, size_t, uchar *, size_t, int *, size_t, cv::Size, void *)", "static void cv::dnn::dnn4_v20190122::LayerFactory::registerLayer(const cv::String &, cv::dnn::dnn4_v20190122::LayerFactory::Constructor)", "\"search_menu_title\" : \"Search\"", "N2cv19EMEstimatorCallbackE", "ifunc != 0", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi3EEEij7DistAbsiE", "N2cv10opt_SSE4_112_GLOBAL__N_114MorphRowFilterINS1_5MaxOpIdEENS1_13MorphRowNoVecEEE", "%d %d", "N2cv10opt_SSE4_112_GLOBAL__N_19ColumnSumIitEE", "\"abc_activitychooserview_choose_application\" : \"\u1787\u17d2\u179a\u17be\u179f\u200b\u1780\u1798\u17d2\u1798\u179c\u17b7\u1792\u17b8\u200b\u200b\"", "PAD_H", "NWTKPX UKQX RKWK NXSX", "getEdge(getEdge(getEdge(e,NEXT_AROUND_LEFT),NEXT_AROUND_LEFT),NEXT_AROUND_LEFT) == e", "convertPointsHomogeneous", "src[i].dims <= 2 && src[i].cols == src[0].cols && src[i].type() == src[0].type()", "unsigned long", "!samples.empty()", "dw_minus", "void cv::setIdentity(cv::InputOutputArray, const cv::Scalar &)", "core::subtract_15()", "N2cv17MatOp_InitializerE", "bool cv::solvePnP(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray, bool, int)", "calib3d::setP2_10()", "NSt6__ndk17codecvtIwc9mbstate_tEE", "interp1", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_18Filter2DIdNS2_4CastIddEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "N3Imf10CompressorE", "NSt6__ndk120__shared_ptr_emplaceIN2cv5flann12SearchParamsENS_9allocatorIS3_EEEE", "cv::UMat &cv::UMat::setTo(cv::InputArray, cv::InputArray)", "\"abc_searchview_description_submit\" : \"\u041f\u043e\u0434\u043d\u0435\u0441\u0438 \u0431\u0430\u0440\u0430\u045a\u0435\"", "0 <= kpts[i].class_id && kpts[i].class_id < static_cast<int>(evolution_.size())", "StripOffsets", "N2cv14MatOp_IdentityE", "w>=0 && revw>=0", "KZNRMTLWLZN[O[RZTXUUUR ORNTMWMZN[ URVVWWXWZV", "N6google8protobuf8internal16FunctionClosure1IPKNS0_15FieldDescriptorEEE", "`n`lns&", "NSt6__ndk114default_deleteIN2cv3dnn22DeConvolutionLayerImplEEE", "/home/vagrant/build/srclib/opencv/modules/video/src/kalman.cpp", "memory_weight", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_8Gray2RGBItEEEE", "You should explicitly call download method for cuda::GpuMat object", "Error calling numLevels() on image file \"", "N3Imf17ScanLineInputFile4DataE", "St9exception", "\"abc_capital_off\" : \"\u0d13\u0d2b\u0d4d\"", "SSSE3", "virtual void cv::dnn::ConvolutionLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "Image width exceeds user limit in IHDR", "core::repeat_10()", "imgproc::getRotationMatrix2D_10()", "PredictorEncodeTile", "fmt == FileStorage::FORMAT_JSON", "N6google8protobuf8internal8MapFieldIN17opencv_tensorflow31NameAttrList_AttrEntry_DoNotUseENSt6__ndk112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENS3_9AttrValueELNS1_14WireFormatLite9FieldTypeE9ELSE_11ELi0EEE", "MakerNoteSafety", "features2d::detectRegions_10()", "png_image_begin_read_from_memory: invalid argument", "Unsupported data type: ", "png_start_read_image/png_read_update_info: duplicate call", "(_npoints->cols == 1 || _npoints->rows == 1) && CV_MAT_TYPE(_npoints->type) == CV_32SC1", "features2d::getDelta_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX216SymmColumnFilterINS2_4CastIffEENS2_17SymmColumnVec_32fEEENS_9allocatorIS7_EEEE", "abs_max < threshold", "initGMMs", "biasvec.size() == outCn + 2", "sp[i].type() == FileNode::MAP", "core::multiply_13()", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_117MorphColumnFilterINS3_5MinOpIdEENS3_16MorphColumnNoVecEEENS_9allocatorIS8_EEEE", "void cv::opt_AVX2::cvt16s16f(const short *, size_t, uchar *, size_t, cv::float16_t *, size_t, cv::Size, void *)", "\"abc_action_bar_home_description\" : \"\u05e0\u05d5\u05d5\u05d8 \u05dc\u05d3\u05e3 \u05d4\u05d1\u05d9\u05ea\"", "detectShadows", "no OpenCL platform available!", "N3Iex10EnotnamExcE", "width (track): %d", "imgproc::warpAffine_11()", "N2cv10opt_SSE4_19RowFilterIhfNS0_8RowNoVecEEE", "scn == 1 && (dcn == 3 || dcn == 4)", "dst.type() == CV_32FC1", "times.type() == CV_32FC1", "N2cv12cpu_baseline12_GLOBAL__N_111MorphFilterINS1_5MaxOpItEENS1_8MorphVecINS1_4VMaxINS_12hal_baseline10v_uint16x8EEEEEEE", "double cv::dotProd_8u(const uchar *, const uchar *, int)", "NSt6__ndk120__shared_ptr_pointerIPN2cv11ParallelJobENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "0123456789", "objdetect::HOGDescriptor_13()", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_9RGB2HSV_fEEE", "MXRFRTST RFSFST RXQYQZR[S[TZTYSXRX RYRZSZSYRY", "ActiveArea", "IO error writing directory", "N7cvflann9ResultSetIiEE", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::XYZ2RGB_i<uchar> >::operator()(const cv::Range &) const [Cvt = cv::XYZ2RGB_i<uchar>]", "C_HMFLEJEIFGHFIFKGLILLK[ UFK[ UFS[ aF_G\\JYNVTS[", "objdetect::load_11()", "!fixedType() || ((Mat*)obj)->type() == mtype", "N17opencv_tensorflow7NodeDefE", "\"abc_searchview_description_clear\" : \"\u0ea5\u0eb6\u0e9a\u0e82\u0ecd\u0ec9\u0e84\u0ea7\u0eb2\u0ea1\u0e8a\u0ead\u0e81\u0eab\u0eb2\"", "MWUQSPQPOQOSPTRUSVSWRXQX", "subtype mismatch", "!field.empty()", "OPENCV_FOR_THREADS_NUM", "minSize >= 0", "The lower boundary is neither an array of the same size and same type as src, nor a scalar", "__itt_heap_free_end", "(Func_.rows()==1 && (Constr_.cols()-Func_.cols()==1))|| (Func_.cols()==1 && (Constr_.cols()-Func_.rows()==1))", "Samples/pixel", "H\\WPURRSQSNRLPKMKLLINGQFRFUGWIXMXRWWUZR[P[MZLXMXNZ WMVPSR WNUQRRQRNQLN PRMPLMLLMIPG LKNHQGRGUHWK SGVIWMWRVWTZ UYRZPZMY", "\"abc_action_bar_home_description\" : \"Nenda mwanzo\"", "LYVKNX WKOX OKNONKWK NXWXWTVX", "img.depth()", "intc >= -128 && intc < 128", "a.type() == CV_64FC1", "features2d::getK_10()", "TIFF Files (*.tiff;*.tif)", "ImageWidth", "0. <= ratio && ratio <= 1.", "OPENCV_THREAD_POOL_ACTIVE_WAIT_WORKER", "MXPXOYOZP[Q[RZRYQXPX PYPZQZQYPY", "Only 8-bit, 16-bit or floating-point 32-bit images are supported", "(M0.type() == CV_32F || M0.type() == CV_64F) && M0.rows == 3 && M0.cols == 3", "input_img.channels() == 3 || input_img.channels() == 1", "operator--", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/subdivision2d.cpp", "NSt6__ndk120__shared_ptr_emplaceIN2cv12AlignMTBImplENS_9allocatorIS2_EEEE", "] for node [", "N2cv3dnn14dnn4_v2019012211ResizeLayerE", "addParam", "N2cv2ml7SVMImpl13TrainAutoBodyE", "core::kmeans_10()", "ccn == 1 || delta == 0", "brow7", "must be either LogLUV or LogL", "Invalid pCAL parameter count", "\"abc_activity_chooser_view_see_all\" : \"\u0938\u092c\u0948 \u0939\u0947\u0930\u094d\u0928\u0941\u0939\u094b\u0938\u094d\"", "mask.empty() || mask.type() == CV_8UC1", "cvReleaseImageHeader", "Invalid TIFF directory; tags are not sorted in ascending order", "imgproc::getEdgeList_10()", "SubSecTimeDigitized", "FocalPlaneYResolution", "Invalid key code film type (must be between 0 and 99).", "\"abc_search_hint\" : \"Cerca...\"", "inputs.size()", "imgproc::contourArea_10()", "inpBlob.type()", "(cc%stride)!=0", "N2cv2ml7SVMImpl11PredictBodyE", "fs != 0", "video::setDetectShadows_10()", "N2cv12cpu_baseline12_GLOBAL__N_111MorphFilterINS1_5MinOpIsEENS1_8MorphVecINS1_4VMinINS_12hal_baseline9v_int16x8EEEEEEE", "N3Iex10EnodataExcE", "\"abc_activity_chooser_view_see_all\" : \"Tout afficher\"", "OPENCV_IO_MAX_IMAGE_WIDTH", "Second argument to SwapFields() (of type \"", "video::setPolyN_10()", "/proc/%d/cmdline", "IPP:ipp_filterSpeckles(img, maxSpeckleSize, newVal, maxDiff, _buf)", "getConvPoolOutParams", "bias.total()", "Board is empty", "SpatialFrequencyResponse", "KYRKMX RNVX RKWX OTTT KXPX TXYX", "__itt_set_track", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_18Filter2DItNS2_4CastIffEENS2_11FilterNoVecEEENS_9allocatorIS7_EEEE", "OpenCV TIFF: failed TIFFSetField(tif, TIFFTAG_PHOTOMETRIC, colorspace)", "?observations.size()>0 && niters>0 && lambda>0", "void cv::hal::cvtMultipliedRGBAtoRGBA(const uchar *, size_t, uchar *, size_t, int, int)", "void cv::CascadeClassifier::detectMultiScale(cv::InputArray, std::vector<Rect> &, std::vector<int> &, std::vector<double> &, double, int, int, cv::Size, cv::Size, bool)", "ml::setTrainTestSplitRatio_10()", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120YUV420sp2RGB8InvokerILi2ELi0ELi3EEE", "Number of channels must be 1, 3 or 4", "F]GQHOJMMMNNNPMUMXNZO[ LMMNMPLULXMZO[Q[SZUXWUXRYMYIXGVFTFRHRJSMUPWRZT SZUWVUWRXMXIWGVF", "Write failed on temporary file --- out of disk space?", "%bEM4>", "\"abc_capital_off\" : \"\u092c\u0902\u0926\"", "calib3d::findEssentialMat_110()", "video::getUseMeanNormalization_10()", "N2cv3dnn14dnn4_v2019012210ReLU6LayerE", "the value at (%d, %d)=%s is out of range [%f, %f)", "N2cv3dnn16PermuteLayerImpl14PermuteInvokerE", "Too many IDATs found", "imgproc::pyrMeanShiftFiltering_11()", "calib3d::findEssentialMat_18()", "DataType<ElementType>::type == data.type() && data.isContinuous()", "void cv::divide(double, cv::InputArray, cv::OutputArray, int)", "N2cv7TonemapE", "objdetect::detectMultiScale3_10()", "Invalid file descriptor data passed to EncodedDescriptorDatabase::Add().", ": Can't spawn new thread: res = ", "MXNPOPPQPSNY PSQUSVUUVSUQSPQQPS", "I\\QMONMPLSLUMXOZQ[T[VZXXYUYSXPVNTMQM", "png_image_finish_read: invalid argument", "videoio::retrieve_10()", "objdetect::HOGDescriptor_12()", "void cv::hal::opt_AVX2::mul32s(const int *, size_t, const int *, size_t, int *, size_t, int, int, const double *)", "N3Imf10OutputFileE", "N7cvflann7anyimpl16small_any_policyIiEE", "virtual void cv::opt_AVX2::SymmColumnSmallFilter<cv::opt_AVX2::FixedPtCastEx<int, unsigned char>, cv::opt_AVX2::SymmColumnVec_32s8u>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::FixedPtCastEx<int, unsigned char>, VecOp = cv::opt_AVX2::SymmColumnVec_32s8u]", "\" not found into dictionary", "imgareatly", "(paddingsParam.size() & 1) == 0", "Sanity check on directory count failed, zero tag directories not supported", "virtual void cv::opt_AVX2::(anonymous namespace)::ColumnSum<double, unsigned char>::operator()(const uchar **, uchar *, int, int, int) [ST = double, T = unsigned char]", "\"abc_action_bar_up_description\" : \"Naviga\u021bi \u00een sus\"", "the global scope", "\"abc_activitychooserview_choose_application\" : \"\u05d1\u05d7\u05e8 \u05d0\u05e4\u05dc\u05d9\u05e7\u05e6\u05d9\u05d4\"", "/home/vagrant/build/srclib/opencv/modules/core/src/rand.cpp", "INTERNAL ERROR: Unknown SVM type, the SVM structure is probably corrupted", "const_layers.insert(std::make_pair(name, tensorId)).second", "INTEL_LIBITTNOTIFY32", "void cv::opt_AVX2::cvt32f64f(const float *, size_t, uchar *, size_t, double *, size_t, cv::Size, void *)", "update.cols == 1", "src3.isMat() || src3.isUMat()", "out of bound", "runRadiusSearch_", "Constr_.type()==CV_64FC1 || Constr_.type()==CV_32FC1", "NVPOTU TOPU NRVR", "axes.width >= 0 && axes.height >= 0 && thickness <= MAX_THICKNESS && 0 <= shift && shift <= XY_SHIFT", "values.type() == CV_32FC1", "isContourConvex", "float8", "\" already was registered", "safe_int_cast", "The new training data is inconsistent with the original training data; varIdx and the class labels should be the same", "class_weights.checkVector(1, CV_64F) == nclasses", "\" is already defined in file \"", "F_PKQLQMRMRLPKMKKLJNJX MKLLKNKX [KUKSLRNRX UKTLSNSX YKZLZX [K[X HOZO HXMX PXUX XX]X", "\"abc_activitychooserview_choose_application\" : \"\u098f\u0995\u099f\u09bf \u0985\u09cd\u09af\u09be\u09aa\u09cd\u09b2\u09bf\u0995\u09c7\u09b6\u09be\u09a8 \u09ac\u09c7\u099b\u09c7 \u09a8\u09bf\u09a8\"", "AddUInt64", "void cv::hal::opt_SSE4_1::addWeighted16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, const double *)", "H\\KFR[ LFRXR[ MFSX YGR[ IFPF UF[F JFLH NFMH OFMG WFYG ZFYG", "Constant", "November", "imgproc::drawMarker_11()", "PNG input buffer is incomplete", "imgproc::drawMarker_12()", "N7cvflann15UniqueResultSetIiEE", "Cannot create image file attribute of unknown type \"", "29TegraCvtColor_rgb2hsv_Invoker", "The last dimension full size is not divisible by new number of channels", "\"abc_action_menu_overflow_description\" : \"\u0986\u09b0\u09cb \u09ac\u09bf\u0995\u09b2\u09cd\u09aa\"", "\"abc_activitychooserview_choose_application\" : \"\u0c92\u0c82\u0ca6\u0cc1 \u0c85\u0caa\u0ccd\u0cb2\u0cbf\u0c95\u0cc7\u0cb6\u0ca8\u0ccd \u0c86\u0caf\u0ccd\u0c95\u0cc6\u0cae\u0cbe\u0ca1\u0cbf\"", "x_mat.type()==CV_64FC1", "Decoding error at scanline %lu, %s", "core::checkRange_14()", "N12_GLOBAL__N_122resize_bitExactInvokerIhNS_13ufixedpoint16ELi2EEE", "OpenCV TIFF: failed TIFFWriteDirectory(tif)", "AsShotWhiteXY", "NSt6__ndk120__shared_ptr_emplaceIN2cv10PngEncoderENS_9allocatorIS2_EEEE", "iters > 0", "N2cv12cpu_baseline12_GLOBAL__N_19ColumnSumIihEE", "knnMatch", "criteria.type & TermCriteria::COUNT || criteria.type & TermCriteria::EPS", "matchTemplate", "imgproc::getMaxBufferSize_10()", "/home/vagrant/build/srclib/opencv/modules/core/src/arithm.cpp", "ml::setTruncatePrunedTree_10()", "Unknown distribution type", "../../../../3rdparty/protobuf/src/google/protobuf/stubs/logging.h", "/home/vagrant/build/srclib/opencv/modules/objdetect/src/hog.cpp", "Dequantize", "CRC error", "features2d::setDescriptorChannels_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv10PxMDecoderENS_9allocatorIS2_EEEE", "0 <= shift && shift <= XY_SHIFT && thickness >= 0", "MQDEC A = %08lx, C = %08lx, CT=%08lx, ", "N3Iex9ErangeExcE", "N2cv8opt_AVX29RowFilterIfdNS0_8RowNoVecEEE", "G^TFRGQIPMOSNVMXKZI[G[FZFXGWIWKXMZP[S[VZXXZT[O[KZHYGWFTFRHRJSMUPWRZT\\U", "Empty tags are not supported", "below.size() == above.size()", "pool_%d", "ReadTFNetParamsFromTextBufferOrDie", "Removed API", "IPP:((ippicviCopy_8u_C1MR)(_src, (int)sstep, _dst, (int)dstep, ippiSize(size), mask, (int)mstep)) >= 0", "dnn::DictValue_12()", "video::getGradientDescentIterations_10()", "normalize_variance", "ReLU6", "width_scale", "video::meanShift_10()", "MXVPRPPQOSPURVTUUSTQRP", "Out of memory for colormap copy", "displayOverlay", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/corner.cpp", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/gabor.cpp", "virtual void cv::dnn::MaxUnpoolLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "void cv::hal::cpu_baseline::cvtTwoPlaneYUVtoBGR(const uchar *, const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "PKU10__float128", "void cv::cpu_baseline::cvt32s16f(const int *, size_t, uchar *, size_t, cv::float16_t *, size_t, cv::Size, void *)", "stride", "G^QMNNLPKRJUJXKZN[P[RZUWWTYPZM QMONMPLRKUKXLZN[ QMSMUNVPXXYZZ[ SMTNUPWXXZZ[[[", "Implementation has been removed due original code license issues", "getRowSumFilter", "cv::Mat cv::dnn::dnn4_v20190122::Net::forward(const cv::String &)", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120YUV420sp2RGB8InvokerILi0ELi0ELi3EEE", "calib3d::composeRT_11()", "\"abc_capital_off\" : \"I-OFF\"", "SamplesPerPixel tag is missing, applying correct SamplesPerPixel value of 3", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline16SymmColumnFilterINS2_4CastIfsEENS2_20SymmColumnVec_32f16sEEENS_9allocatorIS7_EEEE", "cvEndWriteSeq", "void cv::hal::cpu_baseline::cvtOnePlaneYUVtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int, int)", "tensorParams[\"weight\"].second.total() == outputChannels", "                ", "core::PCACompute2_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv5flann5IndexENS_9allocatorIS3_EEEE", "Hex and octal numbers must be integers.", "SetRepeatedInt32", "virtual void cv::SimpleBlobDetectorImpl::detect(cv::InputArray, std::vector<cv::KeyPoint> &, cv::InputArray)", "void cv::cpu_baseline::cvt16s64f(const short *, size_t, uchar *, size_t, double *, size_t, cv::Size, void *)", "core::polarToCart_11()", "imgproc::morphologyEx_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12ColumnFilterINS2_4CastIdtEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "forget_bias", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_9RGB2HSV_bEEE", "internals.size() == 3", "pointPolygonTest", "): failed TIFFSetField(tif, TIFFTAG_ROWSPERSTRIP, 1)", "N2cv8opt_AVX212_GLOBAL__N_16RowSumIsdEE", "weights.cols == (input.size[1]/ngroups)*kernel.width*kernel.height", "decision_functions", "getUMat", "\"abc_capital_off\" : \"\u0418\u0417\u041a\u041b.\"", "\"abc_searchview_description_clear\" : \"\u05de\u05d7\u05e7 \u05e9\u05d0\u05d9\u05dc\u05ea\u05d4\"", "\"abc_searchview_description_submit\" : \"\u05e9\u05dc\u05d7 \u05e9\u05d0\u05d9\u05dc\u05ea\u05d4\"", "cross_validation_folds", "int cv::opt_SSE4_1::SymmRowSmallVec_32f::operator()(const uchar *, uchar *, int, int) const", "Cvoid cv::hal::cvtBGRtoXYZ(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool)", "void cv::hal::opt_AVX2::add8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int)", "void cv::boxFilter(cv::InputArray, cv::OutputArray, int, cv::Size, cv::Point, bool, int)", "left-brace of top level is missing", "\"abc_action_mode_done\" : \"\u03a4\u03ad\u03bb\u03bf\u03c2\"", "N2cv21Dft_R_IPPLoop_InvokerINS_16IPPDFT_R_FunctorEEE", "__cxa_guard_abort failed to acquire mutex", "0 <= rowRange_.start && rowRange_.start <= rowRange_.end && rowRange_.end <= m.rows", "horizontal differencing ", "W_ho.size[1] == W_hh.size[1]", "photo::createTonemapReinhard_10()", "Extension \"", "operator=", "cvSetTrackbarMax", "\"abc_searchview_description_search\" : \"Pretra\u017eivanje\"", "NSt6__ndk110moneypunctIwLb0EEE", " volatile", "Deflate", "!mean.empty() && !eigenvectors.empty() && ((mean.rows == 1 && mean.cols == data.cols) || (mean.cols == 1 && mean.rows == data.rows))", "ushort8", "\"status_bar_notification_info_overflow\" : \"999 +\"", "H\\SNP[ SNQ[ JPLNOMZM JPLOONZN", "N2cv10OcvDctImplE", "\"GetRawRepeatedField\"", "imreadmulti_('", "LYOEOFNFNEODQCTCVDWFVHTI TCUDVFUHTI RITIVJWLWMVOTPQPOONNNMOMON TIUJVLVMUOTP MRXR QTOUNWOYQZTZVYWWVUTTQT QTPUOWPYQZ TZUYVWUUTT QZO[N]N^O`QaTaV`W^W]V[TZ QZP[O]O^P`Qa TaU`V^V]U[TZ", "__gnu_cxx::__concurrence_lock_error", "int cv::countNonZero(cv::InputArray)", "NVSKPVPWQXSXTWUU TKQVQWRX QKTK", "void cv::hal::opt_AVX2::sub32s(const int *, size_t, const int *, size_t, int *, size_t, int, int)", "void cv::hal::opt_AVX2::max32f(const float *, size_t, const float *, size_t, float *, size_t, int, int)", "ComponentsConfiguration", "N2cv8opt_AVX29RowFilterIhdNS0_8RowNoVecEEE", "void cv::vconcat(cv::InputArray, cv::OutputArray)", "fixed point overflow in ", "void cv::cpu_baseline::cvt8u32s(const uchar *, size_t, uchar *, size_t, int *, size_t, cv::Size, void *)", "int cv::cpu_baseline::FilterVec_32f::operator()(const uchar **, uchar *, int) const", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::RGB5x52RGB>::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::RGB5x52RGB]", "!probs || (!probs->empty() && probs->rows == nsamples && probs->cols == nclusters && (probs->type() == CV_32FC1 || probs->type() == CV_64FC1))", "void cv::demosaicing(cv::InputArray, cv::OutputArray, int, int)", "__gnu_cxx::__concurrence_unlock_error", "Computed scanline size is zero", "/home/vagrant/build/srclib/opencv/modules/core/src/copy.cpp", "JZMLWRMX", "\"abc_searchview_description_submit\" : \"Isumite ang query\"", "calib3d::calibrateHandEye_10()", "N2cv12cpu_baseline9RowFilterIhiNS0_21SymmRowSmallVec_8u32sEEE", "NSt6__ndk114default_deleteIN2cv3dnn16PoolingLayerImplEEE", "virtual void cv::(anonymous namespace)::SparsePyrLKOpticalFlowImpl::calc(cv::InputArray, cv::InputArray, cv::InputArray, cv::InputOutputArray, cv::OutputArray, cv::OutputArray)", "Sequence element should not have name (use <_></_>)", "void cv::hal::opt_AVX2::min16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int)", "static_cast<size_t>(size.width) <= CV_IO_MAX_IMAGE_WIDTH", "__itt_model_task_begin", "void cv::validateDisparity(cv::InputOutputArray, cv::InputArray, int, int, int)", "N2cv3dnn22DeConvolutionLayerImpl13MatMulInvokerE", "(mask.cols == 1 || mask.rows == 1) && (int)mask.total() == npoints", "doTrain", "): failed (int)TIFFReadEncodedTile(tif, tileidx, (uint32*)buffer, buffer_size) >= 0", "int cv::opt_AVX2::(anonymous namespace)::MorphColumnVec<cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_int16x16> >::operator()(const uchar **, uchar *, int, int, int) const [VecUpdate = cv::opt_AVX2::(anonymous namespace)::VMax<cv::hal_AVX2::v_int16x16>]", "void cv::AKAZEFeatures::Compute_Keypoints_Orientation(std::vector<KeyPoint> &) const", "D1.empty() || (D1.total() == 4)", "/home/vagrant/build/srclib/opencv/modules/core/src/utils/samples.cpp", "imgproc::setTemplate_13()", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_19ColumnSumIdsEENS_9allocatorIS5_EEEE", "Unsupported Lua type", "N12opencv_caffe16EltwiseParameterE", "0 <= i && i < (int)vv.size()", "'[' - left-brace of seq is missing", "(M0.type() == CV_32F || M0.type() == CV_64F) && M0.rows == 2 && M0.cols == 3", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::HSV2RGB_f>::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::HSV2RGB_f]", "blobFromImages", "\"abc_searchview_description_voice\" : \"\u0635\u0648\u062a\u06cc \u062a\u0644\u0627\u0634\"", "CHECK failed: file_->finished_building_: ", "U57j9h", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphColumnFilter<cv::cpu_baseline::(anonymous namespace)::MaxOp<short>, cv::cpu_baseline::(anonymous namespace)::MorphColumnVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_int16x8> > >::operator()(const uchar **, uchar *, int, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MaxOp<short>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphColumnVec<cv::cpu_baseline::(anonymous namespace)::VMax<cv::hal_baseline::v_int16x8> >]", "\"abc_searchview_description_submit\" : \"\u0627\u0631\u0633\u0627\u0644 \u0639\u0628\u0627\u0631\u062a \u062c\u0633\u062a\u062c\u0648\"", "allocate", "\"abc_shareactionprovider_share_with_application\" : \"%sga ruxsat berish\"", "\"abc_searchview_description_voice\" : \"Glasovno pretra\u017eivanje\"", "basic_string::basic_string", "KXVLWLXKWNVLTKRKPLOMNOMRMUNWPXRXTWUU RKPMOONRNVPX", "Null compare function", "ave_pool_padded_area", "core::findNonZero_10()", "32FastNlMeansMultiDenoisingInvokerIN2cv3VecItLi4EEElm7DistAbsNS1_IiLi4EEEE", "calib3d::calibrateCameraROExtended_11()", "void cv::exp(cv::InputArray, cv::OutputArray)", "ml::trainAuto_11()", "NSt6__ndk115__codecvt_utf16IwLb1EEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_19SqrRowSumIhiEENS_9allocatorIS5_EEEE", "The output array size is incorrect", "\"abc_action_menu_overflow_description\" : \"Plus d'options\"", "constant", "Formats of input arguments do not match", "void cv::fisheye::estimateNewCameraMatrixForUndistortRectify(cv::InputArray, cv::InputArray, const cv::Size &, cv::InputArray, cv::OutputArray, double, const cv::Size &, double)", "CL_INVALID_BINARY", "ml::getDefaultSubstValues_10()", "features2d::create_17()", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_19ColumnSumIisEENS_9allocatorIS5_EEEE", "cv::Vec3d cv::RQDecomp3x3(cv::InputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray, cv::OutputArray)", "setWindow", "void cv::cpu_baseline::gemm64fc(const double *, size_t, const double *, size_t, double, const double *, size_t, double, double *, size_t, int, int, int, int)", "Could not create an instance of ", "Expected gamma, beta, mean and std", "virtual void cv::cpu_baseline::RowFilter<short, float, cv::cpu_baseline::RowVec_16s32f>::operator()(const uchar *, uchar *, int, int) [ST = short, DT = float, VecOp = cv::cpu_baseline::RowVec_16s32f]", "Ptr<cv::BaseRowFilter> cv::opt_SSE4_1::getMorphologyRowFilter(int, int, int, int)", "src0_y", "N2cv3hal12cpu_baseline12_GLOBAL__N_119YUV422toRGB8InvokerILi2ELi0ELi0ELi3EEE", "N2cv3dnn16ElementWiseLayerINS0_11TanHFunctorEE5PBodyE", "Requested feature was omitted at compile time", "virtual void cv::cpu_baseline::SymmColumnFilter<cv::cpu_baseline::Cast<double, short>, cv::cpu_baseline::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::Cast<double, short>, VecOp = cv::cpu_baseline::ColumnNoVec]", "invalid file gamma in png_set_gamma", "Incorrect number of arrays", "p == evals0.ptr()", "CaHQGRHSIRHQ RQQRRSSRRQ \\Q[R\\S]R\\Q", "void cv::vconcat(const cv::Mat *, size_t, cv::OutputArray)", "\"abc_searchview_description_search\" : \"\u0cb9\u0cc1\u0ca1\u0cc1\u0c95\u0cbf\"", "it != data_layouts.end()", "Row passed to TIFFReadRGBAStrip() must be first in a strip.", "\"abc_action_bar_home_description\" : \"\u30db\u30fc\u30e0\u3078\u79fb\u52d5\"", "void cv::opt_AVX2::cvt64f16s(const double *, size_t, uchar *, size_t, short *, size_t, cv::Size, void *)", "NSt6__ndk110ctype_baseE", "Missing support for required CPU baseline features. Check OpenCV build configuration and required CPU/HW setup.", "TIFFInitLZW", "_beforeRectifiedPoints.type() == CV_32FC2 && _afterRectifiedPoints.type() == CV_32FC2", "\"abc_searchview_description_clear\" : \"Brisanje upita\"", "void cv::calibrationMatrixValues(cv::InputArray, cv::Size, double, double, double &, double &, double &, cv::Point2d &, double &)", "DepthwiseConv2dNative", "core::borderInterpolate_10()", "getStrideAndPadding", "/home/vagrant/build/srclib/opencv/modules/dnn/src/onnx/onnx_importer.cpp", "/home/vagrant/build/srclib/opencv/modules/photo/src/seamless_cloning_impl.cpp", "ModeNumber", "\"abc_searchview_description_voice\" : \"\u0413\u043b\u0430\u0441\u043e\u0432\u043d\u0430 \u043f\u0440\u0435\u0442\u0440\u0430\u0433\u0430\"", "Multidimensional unsqueeze", "\"abc_searchview_description_voice\" : \"Wyszukiwanie g\u0142osowe\"", "G]IQJOKNMM[M KOMNZN IQJPLO[O OONZM[LZMWOO UOVZW[XZWWUO [M[O OOMZ UOWZ", "count >= 0 && to.checkVector(3) == count", "N7cvflann7NNIndexINS_7HammingIhEEEE", "N2cv10HdrEncoderE", "getOGlBufferRef", "( (npoints >= 4) || (npoints == 3 && flags == SOLVEPNP_ITERATIVE && useExtrinsicGuess) ) && npoints == std::max(ipoints.checkVector(2, CV_32F), ipoints.checkVector(2, CV_64F))", "getColumnSumFilter", "Either all the pointers should be null or they all should be non-null", "H\\KFLHNJQKSKVJXHYF KFLINKQLSLVKXIYF", "  Comment started here.", "int cv::opt_SSE4_1::(anonymous namespace)::MorphColumnVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_uint8x16> >::operator()(const uchar **, uchar *, int, int, int) const [VecUpdate = cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_uint8x16>]", "\"abc_shareactionprovider_share_with_application\" : \"%s \u0431\u04e9\u043b\u0456\u0441\u0443\"", "\"abc_shareactionprovider_share_with_application\" : \"%s \u0a28\u0a3e\u0a32 \u0a38\u0a3e\u0a02\u0a1d\u0a3e \u0a15\u0a30\u0a4b\"", "Both input images must have either 8uC1 or 8uC3 type", "prepare_to_train", "N6google8protobuf30DescriptorProto_ExtensionRangeE", "identity_%d", "virtual void cv::ml::RTreesImpl::read(const cv::FileNode &)", "!fixedSize() || len == vv.size()", "numAxes >= -1", "core::TickMeter_10()", "calib3d::Rodrigues_10()", "N12opencv_caffe13CropParameterE", "virtual void cv::opt_SSE4_1::ColumnFilter<cv::opt_SSE4_1::Cast<int, short>, cv::opt_SSE4_1::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_SSE4_1::Cast<int, short>, VecOp = cv::opt_SSE4_1::ColumnNoVec]", "cv::Mat cv::ml::LogisticRegressionImpl::calc_sigmoid(const cv::Mat &) const", "virtual void cv::opt_AVX2::(anonymous namespace)::ColumnSum<double, double>::operator()(const uchar **, uchar *, int, int, int) [ST = double, T = double]", "N6google8protobuf8internal20RepeatedFieldWrapperIxEE", "(idx == -1 && size() == 1) || (idx >= 0 && idx < size())", "void cv::hal::opt_SSE4_1::cvtBGRtoHSV(const uchar *, size_t, uchar *, size_t, int, int, int, int, bool, bool, bool)", "D.type() == A.type()", "N2cv12LBPEvaluatorE", "\"abc_search_hint\" : \"\u641c\u7d22\u2026\"", "imgproc::fillConvexPoly_11()", "bad partition length", "If responses are vector values, not scalars, they must be marked as ordered responses", "Dimension sizes are the same for all arrays", "Scaling is not supported for CV_8U blob depth", "N12opencv_caffe11SolverStateE", "virtual bool cv::ml::DTreesImplForRTrees::train(const Ptr<cv::ml::TrainData> &, int)", "sorted", "virtual void cv::cpu_baseline::(anonymous namespace)::RowSum<double, double>::operator()(const uchar *, uchar *, int, int) [T = double, ST = double]", "void cv::AKAZEFeatures::Compute_Descriptors(std::vector<KeyPoint> &, cv::OutputArray)", "(int)uncompressed_sv_node.size() == uncompressed_sv_total", "OpenCVTrace", "contourArea(src_points)", "Convex hull must represented as a sequence of indices or sequence of pointers", "decoder", "undistort", "(pointsMat.checkVector(2) > 0) && ((pointsMat.depth() == CV_32F) || (pointsMat.depth() == CV_32S))", "void cv::hal::add16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, void *)", "MVSMPV PMVM", "imgproc::connectedComponentsWithStats_12()", "preCornerDetect", "(int)_yf.size() == sample_count", "\"abc_toolbar_collapse_description\" : \"\u0421\u0432\u0438\u0432\u0430\u043d\u0435\"", "y0 - 6 * scale >= 0 && y0 + 6 * scale < Lx.rows", "K1.empty() || (K1.size() == Size(3,3))", "virtual void cv::MatOp::add(const cv::MatExpr &, const cv::Scalar &, cv::MatExpr &) const", "): failed TIFFSetField(tif, TIFFTAG_PAGENUMBER, page, img_vec.size())", "FILTER_H", "This program requires version ", "dst.cols == data.cols", "z_.type() == CV_64FC1 || z_.type() == CV_32FC1 || z_.type() == CV_32SC1", "H0.isContinuous()", "oob_error", "COI is not supported by the function", "numpunct_byname<char>::numpunct_byname failed to construct for ", "readSettings", "channels != 0 || nimages == dims", "J[UKVLWLWKQKOLNNNX QKPLONOX VOVX WOWX LOWO LXQX TXYX", "H\\XIYFYLXIVGSFPFMGKIKLLNOPURWSXUXXWZ LLMNOOUQWRXT MGLILKMMONUPXRYTYWXYWZT[Q[NZLXKUK[LX", "The library is compiled without CUDA support", "Memory block has been corrupted", "void cv::hal::cpu_baseline::split64s(const int64 *, int64 **, int, int)", "operator-", "virtual void cv::opt_SSE4_1::RowFilter<short, float, cv::opt_SSE4_1::RowVec_16s32f>::operator()(const uchar *, uchar *, int, int) [ST = short, DT = float, VecOp = cv::opt_SSE4_1::RowVec_16s32f]", "photo::edgePreservingFilter_10()", "LWPKPVRXTXUWUV QKQVRX NOTO", "(*each).size() == size", "computePredecessorMatrix", "N2cv10opt_SSE4_19RowFilterIhiNS0_12RowVec_8u32sEEE", "?void cv::Sobel(cv::InputArray, cv::OutputArray, int, int, int, int, double, double, int)", "/home/vagrant/build/srclib/opencv/modules/dnn/src/layers/slice_layer.cpp", "video::createBackgroundSubtractorMOG2_12()", "\"abc_action_bar_up_description\" : \"\u0e82\u0eb6\u0ec9\u0e99\u0ec0\u0e97\u0eb4\u0e87\"", "AddMessage", "src.checkVector(2, CV_32F) == 4 && dst.checkVector(2, CV_32F) == 4", "imgproc::boxFilter_11()", "Input file read error", "edgeOrg(e) == edgeOrg(o_prev)", "\"abc_action_menu_overflow_description\" : \"\u041f\u043e\u0432\u0435\u045c\u0435 \u043e\u043f\u0446\u0438\u0438\"", "False", "kmeans", "\"MutableRawRepeatedField\"", "\"abc_action_mode_done\" : \"Gotovo\"", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline8Filter2DIhNS2_4CastIfhEENS2_12FilterVec_8uEEENS_9allocatorIS7_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_117MorphColumnFilterINS3_5MaxOpItEENS3_14MorphColumnVecINS3_4VMaxINS1_10hal_SSE4_110v_uint16x8EEEEEEENS_9allocatorISD_EEEE", "/home/vagrant/build/srclib/opencv/modules/dnn/src/caffe/caffe_shrinker.cpp", "N10__cxxabiv119__foreign_exceptionE", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/linefit.cpp", "OVVMUMTNSPQVPXOYNY QPUP", "operator++", "calib3d::fisheye_1undistortImage_12()", "\"abc_search_hint\" : \"\u0418\u0437\u0434\u04e9\u04e9\u2026\"", "uint32", "N2cv12cpu_baseline12_GLOBAL__N_16RowSumItdEE", "readSplit", "memopTypeToStr", "video::get_1measurementMatrix_10()", "!!binary |", "Libpng jmp_buf still allocated", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/descriptor_database.cc", ". SKIP", "Seek error at row %lu, col %lu, tile %lu", "ystep == 1 && \"not supported\"", "imgproc::integral2_11()", "N3Iex9EstaleExcE", "Mat::n_1push_1back()", "I[KYYK QLULYKXOXS ULXLXO", "/home/vagrant/build/srclib/opencv/modules/dnn/src/nms.cpp", "imgproc::getDp_10()", "N6google8protobuf13RepeatedFieldIiEE", "Trace: Total skipped events: ", "less than", "decodeSimpleFormat", "convertInt64ToInt32", "virtual void cv::cpu_baseline::(anonymous namespace)::ColumnSum<double, unsigned char>::operator()(const uchar **, uchar *, int, int, int) [ST = double, T = unsigned char]", "vector<cv::Point2f> cv::QRDetect::separateVerticalLines(const vector<cv::Vec3d> &)", "dnn::connect_10()", "NumberOfInks", "void cv::hal::cpu_baseline::sub64f(const double *, size_t, const double *, size_t, double *, size_t, int, int)", "MergeMertens", "dnn::readNetFromDarknet_13()", "N6google8protobuf14DynamicMessageE", "initVkCom", "VIDEOIO: Configured priority list (OPENCV_VIDEOIO_PRIORITY_LIST): ", "E[HMLMRY KMR[ [BR[", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::RGB2YCrCb_i<ushort> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::RGB2YCrCb_i<ushort>]", "void cv::hal::opt_SSE4_1::absdiff8s(const schar *, size_t, const schar *, size_t, schar *, size_t, int, int)", "basic_conversion", "int cv::opt_AVX2::(anonymous namespace)::MorphVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_int16x16> >::operator()(uchar **, int, uchar *, int) const [VecUpdate = cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_int16x16>]", "N2cv4impl12_GLOBAL__N_120CvtColorLoop_InvokerINS_9RGB2XYZ_iIhEEEE", "initYCbCrConversion", "bilateralFilter", "node_proto.input_size() >= 2", "/home/vagrant/build/srclib/opencv/platforms/android/build/o4a", "JYTFRGQHQIRJUKXK XKTMQONRMUMWNYP[S]T_TaSbQbP`", "Corrupted LZW table at scanline %d", "imgproc::intersectConvexConvex_10()", "N6google8protobuf16EnumValueOptionsE", "\"abc_searchview_description_clear\" : \"\u0422\u0430\u043b\u0430\u043f\u0442\u0430\u0440\u0434\u044b \u0442\u0430\u0437\u0430\u043b\u043e\u043e\"", "MXQMNV WMTV PQUQ", "N2cv12cpu_baseline12ColumnFilterINS0_4CastIisEENS0_25SymmColumnSmallVec_32s16sEEE", "\"abc_shareactionprovider_share_with\" : \"Podijeli sa\"", "greater than or equal to", "KYU@RCPFOIOLPOSVTYT\\S_Ra RCQEPHPKQNTUUXU[T^RaOd", "\"abc_action_bar_up_description\" : \"Navega cap a dalt\"", "imgproc::Canny_10()", "video::setVarInit_10()", "(params.maxTrackLifetime >= 0) && trackingDetector", "/home/vagrant/build/srclib/opencv/modules/calib3d/src/calibration_handeye.cpp", "JYPKLX QKMX NKUKWLWNVPSQ UKVLVNUPSQ OQRQTRUSUUTWQXJX RQTSTUSWQX", "H[LFL[ LFYF LPTP L[Y[", "SubSecTimeOriginal", "void cv::convertFp16(cv::InputArray, cv::OutputArray)", "ReductionMatrix2", "LZWSetupEncode", "int cv::cpu_baseline::(anonymous namespace)::MorphRowVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_uint16x8> >::operator()(const uchar *, uchar *, int, int) const [VecUpdate = cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_uint16x8>]", "\"abc_toolbar_collapse_description\" : \"\u0938\u0902\u0915\u094d\u0937\u093f\u092a\u094d\u0924 \u0915\u0930\u093e\"", "RESOURCE_EXHAUSTED", "Option must have a name.", "\"abc_search_hint\" : \"Buscar\u2026\"", "No space for JPEGTables", "refIt->second > 0", "NSt6__ndk120__shared_ptr_emplaceIN2cv10PFMEncoderENS_9allocatorIS2_EEEE", "CHECK failed: (temp[0]) == ('1'): ", "!outImage.empty()", "\"abc_searchview_description_submit\" : \"\u0c2a\u0c4d\u0c30\u0c36\u0c4d\u0c28\u0c28\u0c3f \u0c38\u0c2e\u0c30\u0c4d\u0c2a\u0c3f\u0c02\u0c1a\u0c41\"", "virtual void cv::dnn::PoolingLayerImpl::forward(cv::InputArrayOfArrays, cv::OutputArrayOfArrays, cv::OutputArrayOfArrays)", "\"abc_searchview_description_search\" : \"S\u00f8g\"", "ctype_byname<char>::ctype_byname failed to construct for ", "_rvec1->rows == 3 && _rvec1->cols == 1 && CV_ARE_SIZES_EQ(_rvec1, _rvec2)", "cannot find corner", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/box_filter.dispatch.cpp", "virtual void cv::cpu_baseline::RowFilter<unsigned char, int, cv::cpu_baseline::SymmRowSmallVec_8u32s>::operator()(const uchar *, uchar *, int, int) [ST = unsigned char, DT = int, VecOp = cv::cpu_baseline::SymmRowSmallVec_8u32s]", "I[XIXJYJYIXHVHTJSLROQUPYO[ UITKSORUQXPZN\\L\\K[KZLZL[", "\". The input file is tiled, but the output file is not. Try using TiledOutputFile::copyPixels instead.", "\"abc_capital_on\" : \"ON\"", "\"abc_searchview_description_search\" : \"Cerca\"", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/histogram.cpp", "getEdge(getEdge(getEdge(e,NEXT_AROUND_RIGHT),NEXT_AROUND_RIGHT),NEXT_AROUND_RIGHT) == e", "/nchw", "imgproc::goodFeaturesToTrack_13()", "\"abc_activitychooserview_choose_application\" : \"Izbor aplikacije\"", ").  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_16RowSumIsiEENS_9allocatorIS5_EEEE", "nomct", "objdetect::compute_11()", "imgproc::rectangle_17()", "__itt_model_site_begin", "orientation != 0", "void cv::_prepareImage(cv::InputArray, const cv::Mat &)", "COEFF", "LXUPVRVQUPSOQOOPNRNTOVRX QOOQOTPVRXSYS[R\\P\\", "Invalid pixel aspect ratio in image header.", "hn == 1 || hn == cn", "(termcrit.type==(TermCriteria::MAX_ITER+TermCriteria::EPS) && termcrit.epsilon>0 && termcrit.maxCount>0) || ((termcrit.type==TermCriteria::MAX_ITER) && termcrit.maxCount>0)", "cropSize.type()", "Value exceeds 32bit range of output type.", "ml::isClassifier_10()", "N2cv10opt_SSE4_18Filter2DItNS0_4CastIddEENS0_11FilterNoVecEEE", "\\%03o", "not equal to", "N7cvflann7NNIndexINS_10HammingLUTEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_16RowSumIhiEENS_9allocatorIS5_EEEE", "core::multiply_14()", "N3Imf13ZipCompressorE", "K.size() == Size(3, 3) && (K.depth() == CV_32F || K.depth() == CV_64F)", "\"abc_action_menu_overflow_description\" : \"\u0531\u0575\u056c \u0568\u0576\u057f\u0580\u0561\u0576\u0584\u0576\u0565\u0580\"", "cvDiv", "/home/vagrant/build/srclib/opencv/modules/core/src/stat.dispatch.cpp", "video::set_1measurementNoiseCov_10()", "FieldDescriptorProto.extendee not set for extension field.", "Mismatched closing tag", "calib3d::calibrateCamera_11()", "N2cv3hal8opt_AVX212_GLOBAL__N_120YUV420sp2RGB8InvokerILi2ELi1ELi3EEE", "cvGetImageROI", "N2cv8colormap6WinterE", "in_buffer", "%.16e", "OpenCV TIFF: failed TIFFGetField(tif, TIFFTAG_TILEWIDTH, &tile_width0)", "GetLocPredictions", "floydWarshall", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_117MorphColumnFilterINS3_5MaxOpIdEENS3_16MorphColumnNoVecEEENS_9allocatorIS8_EEEE", "ml::getTrainSamples_13()", "Unsupported type", "ofsbuf should be initialized in this mode", "OneofOptions", "N2cv12cpu_baseline12_GLOBAL__N_19ColumnSumIifEE", "Some collection type - FileNode::SEQ or FileNode::MAP, must be specified", "contour != NULL && CV_IS_SEQ_POINT_SET( contour )", "virtual void cv::parallelCanny::operator()(const cv::Range &) const", "void cv::hal::and8u(const uchar *, size_t, const uchar *, size_t, uchar *, size_t, int, int, void *)", "checkDetectorSize()", "TIFFUnlinkDirectory", "Second argument to Swap() (of type \"", "dtype == -1 || dtype == dtype_", "ZNK2cv7details5FastX10detectImplERKNS_3MatERNSt6__ndk16vectorIS2_NS5_9allocatorIS2_EEEESA_S4_E3$_0", "\"abc_capital_on\" : \"\u0622\u0646\"", "source_layer.top_size()=1", "Canny", "Sorry, LogLuv data must have %s=%d or %d", "Null graph pointer", "I[VNL[ XMNZ LMXM LMLNVN NZXZX[ L[X[", "CHECK failed: uninterpreted_options_field != NULL: ", "Invalid filename", "_param1.channels() == 1 && (_param1.rows == 1 || _param1.cols == 1) && (_param1.rows + _param1.cols - 1 == cn || _param1.rows + _param1.cols - 1 == 1 || (_param1.size() == Size(1, 4) && _param1.type() == CV_64F && cn <= 4))", "video::setFixedPointIterations_10()", "VideoIO pluigin (", "N2cv12cpu_baseline8Filter2DIsNS0_4CastIffEENS0_11FilterNoVecEEE", "File can't be opened for writing!", "N12opencv_caffe12SPPParameterE", "features2d::knnMatch_10()", "N7cvflann5IndexINS_2L2IfEEEE", "imgproc::rectangle_12()", "F^ZFJMZT JVZV J[Z[", "N2cv12cpu_baseline12_GLOBAL__N_114MorphRowFilterINS1_5MaxOpIdEENS1_13MorphRowNoVecEEE", "F^JFZMJT JVZV J[Z[", "JZSBUEVHWLWQVUTYR\\O_LaJb VHVPUUSYQ\\ SBTDUGVP VHUQTUSXRZP]M`Jb", "__itt_model_lock_acquire_2", "int cv::opt_SSE4_1::(anonymous namespace)::MorphVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_uint8x16> >::operator()(uchar **, int, uchar *, int) const [VecUpdate = cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_uint8x16>]", "scheduler", "Unknown compression method in IHDR", "int cv::cpu_baseline::SymmColumnSmallVec_32f::operator()(const uchar **, uchar *, int) const", "NSt6__ndk114default_deleteIN2cv3dnn16ElementWiseLayerINS2_11TanHFunctorEEEEE", "current < m_end", "/home/vagrant/build/srclib/opencv/modules/dnn/src/torch/torch_importer.cpp", "The input should be a 2D or 3D point set", "H\\KILKXWYYY[ LLXX KIKKLMXYY[ PPLTKVKXLZK[ KVMZ LTLVMXMZK[ SSXN VIVLWNYNYLWKVI VIWLYN", "G\\LFL[ MFM[ WMMW RSX[ QSW[ IFMF TMZM I[P[ T[Z[", "AbDMIMRY HNR[ b:R[", "[net]", "unique_lock::lock: already locked", "F^JJJQKULWNYQZSZVYXWYUZQZJ", "imgproc::accumulateSquare_11()", "setValue", "key_ != -1 && \"Can't fetch data from terminated TLS container.\"", "opencv_videoio_", "No space for strip buffer", "Read from XMS failed", "Null element pointer", "H\\LKLJMHNGPFTFVGWHXJXLWNUQK[Y[", "max_buffer", "IPP:(ipp_accumulate_square(_src, _dst, _mask))", "findCandidateLine", "N2cv7TLSDataINS_23ipp_calcHistParallelTLSEEE", "H\\IRJPKOMONPNRMUMWNX LOMPMRLULWNXOXQWRV TORVRWTX UOSVSWTXUXWWYUZRZOYOZP", "Finish the selection process by pressing ESC button!", "Invalid number of channels in output image", "features2d::create_15()", "pool_pad_w", "__itt_clock_domain_reset", "void cv::cpu_baseline::cvt8s32f(const schar *, size_t, uchar *, size_t, float *, size_t, cv::Size, void *)", "N3Iex10ElibscnExcE", "imgproc::integral3_11()", "\"abc_activitychooserview_choose_application\" : \"\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e41\u0e2d\u0e1b\"", "void cv::hal::sub32f(const float *, size_t, const float *, size_t, float *, size_t, int, int, void *)", "features2d::drawMatchesKnn_14()", "dst_y", "void cv::hal::opt_SSE4_1::cvtGraytoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, int)", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_19ColumnSumIdhEENS_9allocatorIS5_EEEE", "nms_threshold >= 0", "?456789:;<=", "N2cv3dnn17PriorBoxLayerImplE", "virtual void cv::cpu_baseline::SymmColumnFilter<cv::cpu_baseline::Cast<float, float>, cv::cpu_baseline::SymmColumnVec_32f>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::Cast<float, float>, VecOp = cv::cpu_baseline::SymmColumnVec_32f]", "int cv::cpu_baseline::sum16s(const short *, const uchar *, int *, int, int)", "CHECK failed: iter != extensions_.end(): ", "Double hyphen '--' is not allowed in the comments", "__itt_metadata_add", "ceil_mode", "SGILog24", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2019012215FlattenSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "determinant", "E_UMXP[RXTUW IR[R", "N2cv12cpu_baseline12_GLOBAL__N_19ColumnSumIisEE", "F^OFI[ PFJ[ QFK[ LFWFZG[I[KZNYOVPNP YGZIZKYNXO WFXGYIYKXNVP RPTQURWXXYYYZX WYXZYZ URVZW[Y[ZXZW F[N[ MFPG NFOH RFPH SFPG JZG[ JYH[ KYL[ JZM[", "CHECK failed: (new_size) <= ((std::numeric_limits<size_t>::max() - kRepHeaderSize) / sizeof(old_rep->elements[0])): ", "\"abc_action_bar_home_description_format\" : \"%1$s: %2$s\"", "core::normalize_11()", "ml::getUncompressedSupportVectors_10()", "N2cv11JpegDecoderE", "void cv::hal::opt_SSE4_1::cmp32f(const float *, size_t, const float *, size_t, uchar *, size_t, int, int, int)", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2Gray<uchar> >::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::RGB2Gray<uchar>]", "void cv::cpu_baseline::medianBlur_8u_Om(const cv::Mat &, cv::Mat &, int)", "cvBackProjectPCA", "features2d::FlannBasedMatcher_10()", "EstimateStripByteCounts", "N17opencv_tensorflow11FunctionDefE", "\"abc_shareactionprovider_share_with\" : \"\u0dc3\u0db8\u0d9f \u0db6\u0dd9\u0daf\u0dcf\u0d9c\u0db1\u0dca\u0db1\"", "27FastNlMeansDenoisingInvokerIN2cv3VecIhLi4EEEij7DistAbsiE", "OpenCV TIFF: failed TIFFGetField(tif, TIFFTAG_IMAGEWIDTH, &wdth)", "Cross validation for RTrees is not implemented", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn15InterpLayerImplENS_14default_deleteIS3_EENS_9allocatorIS3_EEEE", "cvMin", "F]OFI[ PFJ[ QFK[ ULST LF[FZL NPTP F[U[WV MFPG NFOH RFPH SFPG WFZG XFZH YFZI ZFZL ULSPST TNRPSR TOQPSQ JZG[ JYH[ KYL[ JZM[ P[UZ R[UY UYWV", "H]LFL[M[ LFMFM[ ZFYFMR ZFMS POY[Z[ QOZ[", "ysz.width == uvs.width * 2 && ysz.height == uvs.height * 2", "PackBits", "CL_INVALID_WORK_GROUP_SIZE", "N7cvflann15UniqueResultSetIfEE", "dst.dims", "\"abc_searchview_description_search\" : \"\u0985\u09a8\u09c1\u09b8\u09a8\u09cd\u09a7\u09be\u09a8 \u0995\u09b0\u09c1\u09a8\"", "sampleWeights.checkVector(1, CV_32F, true) == nsamples", "Insufficient memory to process iCCP chunk", "__itt_counter_inc_delta_v3", "setNormalArray", "December", "N2cv8opt_AVX212_GLOBAL__N_111MorphFilterINS1_5MinOpIhEENS1_8MorphVecINS1_4VMinINS_8hal_AVX210v_uint8x32EEEEEEE", "virtual void cv::hal::opt_AVX2::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_AVX2::(anonymous namespace)::RGB2HLS_f>::operator()(const cv::Range &) const [Cvt = cv::hal::opt_AVX2::(anonymous namespace)::RGB2HLS_f]", "ddepth == CV_16S || ddepth == CV_16F", "\"abc_shareactionprovider_share_with_application\" : \"Deli sa aplikacijom %s\"", "G]HJJGLFMFOHOKNNKVKYL[ MFNHNKKSJVJYL[N[PZSWUTVR ZFVRUVUYW[X[ZZ\\X [FWRVVVYW[", "finalT", "N6google8protobuf13RepeatedFieldImEE", "ml::setTrainTestSplit_10()", "H]MFM[ NFN[ JFQF NPUPXQYRZTZWYYXZU[J[ UPWQXRYTYWXYWZU[", "tag_type == CV_XML_OPENING_TAG", "cvBoxPoints", "void cv::cpu_baseline::cvt64f16f(const double *, size_t, uchar *, size_t, cv::float16_t *, size_t, cv::Size, void *)", "LZWDecode", "DecodeBBoxes", "(int)ranges.size() == d", "PURMRR SMSR RURVSVSURU", "void cv::hal::opt_SSE4_1::div16u(const ushort *, size_t, const ushort *, size_t, ushort *, size_t, int, int, const double *)", "trainResponses.type() == CV_32FC1", "H\\JFR[ KFRY ZFR[ JFZF KGYG", "_dst.size() == images[0].size() && _dst.depth() == images[0].depth()", "radiusMatch", "detectRegions", "\"abc_searchview_description_submit\" : \"Po\u0161alji upit\"", "required", "m1.cols == m2.cols && m1.rows == m2.rows && m1.cols == m3.cols && m1.rows == m3.rows", "_src.type() == CV_8UC1", "Can't set both read_data_fn and write_data_fn in the same structure", "running_var", "samples is empty", "isTrained()", "dims == 4", "features2d::BOWKMeansTrainer_13()", "core::bitwise_1xor_10()", "cvGetRows", " uncorrected errors", "\"abc_action_bar_up_description\" : \"Navigasi naik\"", "virtual void cv::opt_SSE4_1::(anonymous namespace)::ColumnSum<double, float>::operator()(const uchar **, uchar *, int, int, int) [ST = double, T = float]", "initializeContextFromD3D11Device", "readObject", "virtual void cv::opt_AVX2::ColumnFilter<cv::opt_AVX2::Cast<float, float>, cv::opt_AVX2::SymmColumnVec_32f>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::Cast<float, float>, VecOp = cv::opt_AVX2::SymmColumnVec_32f]", "KYNBPDRGTKUPUTTYR]P`Nb PDRHSKTPTTSYR\\P`", "\"abc_searchview_description_clear\" : \"\u1218\u1320\u12ed\u1245 \u12a0\u133d\u12f3\"", "N2cv3dnn14dnn4_v2019012220FlattenShapeSubgraphE", "getScoreMaxBelow", "Warning parsing text-format ", "cn == 4", "evolution.size() > 0", "I[NFN[ OGOZ PFP[ KFZFZL K[S[ LFNG MFNH QFPH RFPG UFZG WFZH XFZI YFZL NYM[ NZL[ PYQ[ PZR[", "NVTQSPQPPQPRQSRSSTSURVPVOU", "St16bad_array_length", "CHECK failed: !is_closed_: ", "BadFaxLines", "Not enough data at scanline %d (short %llu bytes)", "(x.cols == 1) && (x.rows == Y.rows) && (x.cols == Y.cols)", "OBJECT_DETECTOR", "dnn::getMemoryConsumption_11()", "core::findFile_12()", "OPENCV_THREAD_POOL_ACTIVE_WAIT_MAIN", "N2cv2ml7ANN_MLPE", "xstep == 1 && \"not supported\"", "Ptr<cv::FilterEngine> cv::createBoxFilter(int, int, cv::Size, cv::Point, bool, int)", "Pooling-name", "KYWHWGVGVIXIXGWFTFRGQHPKP[ RHQKQZ TFSGRIR[ MMVM M[U[ PZN[ PYO[ RYS[ RZT[", "int cv::opt_SSE4_1::(anonymous namespace)::MorphColumnVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_uint16x8> >::operator()(const uchar **, uchar *, int, int, int) const [VecUpdate = cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_uint16x8>]", "scale.total() == numPlanes", "Tag %d", "N2cv10opt_SSE4_112_GLOBAL__N_117MorphColumnFilterINS1_5MaxOpIfEENS1_14MorphColumnVecINS1_4VMaxINS_10hal_SSE4_111v_float32x4EEEEEEE", "/home/vagrant/build/srclib/opencv/modules/core/src/ocl.cpp", "cn == CV_MAT_CN(bufType) && sdepth >= std::max(ddepth, CV_32S) && kernel.type() == sdepth", "void cv::hal::opt_AVX2::cmp8s(const schar *, size_t, const schar *, size_t, uchar *, size_t, int, int, int)", "arithm_ipp_sub16s", "NSt6__ndk114default_deleteIN2cv3dnn14ScaleLayerImplEEE", "N2cv13StereoMatcherE", "N6google8protobuf2io18CopyingInputStreamE", "ml::getTestSamples_10()", "__itt_model_iteration_taskA", "padding_h", "H\\QFNGLJKOKRLWNZQ[S[VZXWYRYOXJVGSFQF NHMJLNLSMWNY VYWWXSXNWJVH QFOGNIMNMSNXOZQ[ S[UZVXWSWNVIUGSF", "/home/vagrant/build/srclib/opencv/modules/features2d/src/fast_score.cpp", "maxLoc.x >= 0 && maxLoc.y >= 0", "H\\KFKL KJLHNFPFUIWIXHYF LHNGPGUI YFYIXLTQSSRVR[ XLSQRSQVQ[", "Number of dimensions is the same for all arrays", "setOutShape", "/data/data/com.intel.vtune/perfrun/lib32/runtime/libittnotify.so", "N2cv3hal10opt_SSE4_112_GLOBAL__N_119YUV422toRGB8InvokerILi0ELi1ELi0ELi4EEE", "N2cv3dnn14dnn4_v201901229LSTMLayerE", "!tcnode.empty()", "weights[i].size() == Size(n2, n1+1)", "scales", "scn == 1 && dcn == 1", "pool_pad_h", "N2cv7details10ChessboardE", "virtual void cv::opt_AVX2::SymmColumnFilter<cv::opt_AVX2::Cast<int, short>, cv::opt_AVX2::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::Cast<int, short>, VecOp = cv::opt_AVX2::ColumnNoVec]", "virtual void cv::cpu_baseline::(anonymous namespace)::ColumnSum<int, unsigned short>::operator()(const uchar **, uchar *, int, int, int)", "\"abc_capital_on\" : \"HIDUP\"", "virtual void cv::hal::opt_SSE4_1::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::opt_SSE4_1::(anonymous namespace)::HLS2RGB_b>::operator()(const cv::Range &) const [Cvt = cv::hal::opt_SSE4_1::(anonymous namespace)::HLS2RGB_b]", "\"abc_capital_off\" : \"\u1794\u17b7\u1791\"", "\"abc_shareactionprovider_share_with\" : \"\u0414\u0435\u043b\u0438 \u0441\u0430\"", "\" already into net", "\"abc_searchview_description_search\" : \"\u0418\u0437\u0434\u04e9\u04e9\"", "LXVPTOROPPOQNSNUOWQXSXUW ROPQOSOVQX OSSS", "Row pixels integer overflow (rowpixels %u)", "static cv::MatExpr cv::Mat::eye(int, int, int)", "imgproc::fillPoly_11()", "N3Iex8EbadfExcE", "Expected eight hex digits up to 10ffff for \\U escape sequence", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_121SymmColumnSmallFilterINS2_4CastIisEENS2_25SymmColumnSmallVec_32s16sEEENS_9allocatorIS7_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN12_GLOBAL__N_124CLAHE_Interpolation_BodyItLi0EEENS_9allocatorIS3_EEEE", "calib3d::estimateAffine3D_12()", "FileSource", "cvClearGraph", "/home/vagrant/build/srclib/opencv/modules/imgproc/src/demosaicing.cpp", "MWNROPPOROSPSRRURWSX QORPRRQUQWRXTXUWVU", "G]HQIOKMMMNNOPOSNWKb NNNSMWJb NPMTIb OTPQQORNTMVMXNYOZRZTYWWZT[R[PZOWOT XOYQYTXWWY VMWNXQXTWWVYT[ FbNb JaGb J`Hb K`Lb JaMb", "': unexpected backend ID: ", "!_labels_i.empty() && !_data_i.empty()", "Silence", "OpenCV TIFF: failed TIFFGetField(tif, TIFFTAG_TILELENGTH, &tile_height0)", "N6google8protobuf13RepeatedFieldIxEE", "BcGFG[ HFH[ RFR[ SFS[ ]F][ ^F^[ DFKF OFVF ZFaF D[a[", "Missing or invalid SVM type", "cvSolve", "getGaussianKernel", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_121SymmColumnSmallFilterINS2_4CastIffEENS2_22SymmColumnSmallVec_32fEEENS_9allocatorIS7_EEEE", "_Sat ", "G]LML[ MMM[ WMW[ XMX[ IMPM TM[M I[P[ T[[[ WNMZ", "\"abc_activitychooserview_choose_application\" : \"Choose an app\"", "MultinomialLogisticLoss", "qualityLevel > 0 && minDistance >= 0 && maxCorners >= 0", "imgproc::Scharr_11()", "median3d", "NSt6__ndk120__codecvt_utf8_utf16IwEE", "!haveConst || layer.input_size() == 2", "N2cv8opt_AVX212_GLOBAL__N_16RowSumItdEE", "N2cv8opt_AVX212_GLOBAL__N_114MorphRowFilterINS1_5MaxOpIhEENS1_11MorphRowVecINS1_4VMaxINS_8hal_AVX210v_uint8x32EEEEEEE", "cvClearMemStorage", "I[TOUPXRUTTU UPWRUT LRWR", "blobs[2].type()", "int cv::opt_AVX2::sum64f(const double *, const uchar *, double *, int, int)", "\"abc_capital_on\" : \"\u0e40\u0e1b\u0e34\u0e14\"", "void cv::UMat::copyTo(cv::OutputArray, cv::InputArray) const", "MWVLNX", " Tokenizer::ParseFloat() passed text that could not have been tokenized as a float: ", "char32_t", "out_h", "Creator: JasPer Version %s", "virtual bool cv::WebPDecoder::readData(cv::Mat &)", "count == numKept", "virtual void cv::opt_SSE4_1::(anonymous namespace)::ColumnSum<double, short>::operator()(const uchar **, uchar *, int, int, int) [ST = double, T = short]", "MXQMNV QMUMVOVQUTTURVNV", "\"abc_activitychooserview_choose_application\" : \"\u0d12\u0d30\u0d41 \u0d05\u0d2a\u0d4d\u0d32\u0d3f\u0d15\u0d4d\u0d15\u0d47\u0d37\u0d7b \u0d24\u0d3f\u0d30\u0d1e\u0d4d\u0d1e\u0d46\u0d1f\u0d41\u0d15\u0d4d\u0d15\u0d41\u0d15\"", "cvGetDimSize", "CV_MAT_TYPE(mtype)", "\"abc_action_menu_overflow_description\" : \"\uc635\uc158 \ub354\ubcf4\uae30\"", "KYTFQQPUPXQZR[T[VYWW UFRQQUQZ TFVFRTQX NMXM", "options.descriptor_channels <= max_channels", "OPENCV_IO_MAX_IMAGE_PARAMS", "Invalid attempt to read row data", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_19RowFilterItfNS2_8RowNoVecEEENS_9allocatorIS5_EEEE", "size == Lx.size()", "void cv::hal::opt_AVX2::sub32f(const float *, size_t, const float *, size_t, float *, size_t, int, int)", "\"abc_capital_off\" : \"\u0bae\u0bc1\u0b9f\u0b95\u0bcd\u0b95\u0bc1\"", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2019012220OpenCLBackendWrapperENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "virtual void cv::cpu_baseline::(anonymous namespace)::MorphFilter<cv::cpu_baseline::(anonymous namespace)::MinOp<short>, cv::cpu_baseline::(anonymous namespace)::MorphVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_int16x8> > >::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::cpu_baseline::(anonymous namespace)::MinOp<short>, VecOp = cv::cpu_baseline::(anonymous namespace)::MorphVec<cv::cpu_baseline::(anonymous namespace)::VMin<cv::hal_baseline::v_int16x8> >]", "RGB2Lab_f", "N2cv10opt_SSE4_116SymmColumnFilterINS0_4CastIffEENS0_17SymmColumnVec_32fEEE", "N6google8protobuf28UninterpretedOption_NamePartE", "CHECK failed: finished_building_ == true: ", "SymmColumnFilter", "tlsSlotsSize > slotIdx", "NSt6__ndk120__shared_ptr_pointerIPN2cv3dnn14dnn4_v2019012219L2NormalizeSubgraphENS_14default_deleteIS4_EENS_9allocatorIS4_EEEE", "initializeContextFromD3D10Device", "DILATION_W", "char8", " configuration override: ", "KXQOOPNQMSMUNWPXRXTWUVVTVRUPSOQO QOOQNSNVPX RXTVUTUQSO", "JZWLMRWX", "Invalid bit depth for grayscale+alpha image", "Layer with requested id=%d not found", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_114MorphRowFilterINS3_5MaxOpIhEENS3_11MorphRowVecINS3_4VMaxINS1_10hal_SSE4_110v_uint8x16EEEEEEENS_9allocatorISD_EEEE", "ml::getMinSampleCount_10()", "count >= 0 && (depth == CV_32F || depth == CV_32S)", "void cv::decolor(cv::InputArray, cv::OutputArray, cv::OutputArray)", "Field is singular; the method requires a repeated field.", "MWOMOV OMUV UMUV", "buffer size: %zu", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::RGB2XYZ_i<unsigned char> >::operator()(const cv::Range &) const [Cvt = cv::RGB2XYZ_i<unsigned char>]", "void cv::hal::opt_AVX2::cvtMultipliedRGBAtoRGBA(const uchar *, size_t, uchar *, size_t, int, int)", "H\\SMQMNNLPKSKULXNZQ[S[VZXXYUYSXPVNSMPLNKMJMHNGPFSFWH MPLSLUMX WXXUXSWP QMONNOMRMVNYOZQ[ S[UZVYWVWRVOUNOKNJNIOHQGTGWH", "objdetect::groupRectangles_10()", "calc_output_scale", "src.rows >= 3", "layer_id.find(flattenName) == layer_id.end()", "video::getNMixtures_10()", "opencv_tensorflow.OpDeprecation.explanation", "Type of input images should be CV_8UC3!", "((uint64_t)tile_width0 * tile_height0 * ncn * (bpp / bitsPerByte) < (CV_BIG_UINT(1) << 30)) && \"TIFF tile size is too large: >= 1Gb\"", "sz.width", "void cv::hal::opt_SSE4_1::mul16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, const double *)", "wrong K size", "!centers.empty()", "N2cv11WebPEncoderE", "core::dft_11()", "std::bad_typeid", "N2cv15MatlabFormatterE", "constVal != NULL", "void cv::UMat::copyTo(cv::OutputArray) const", "infinity", "video::getPolyN_10()", "cornerSubPix", "int32", "maxlyrs", "N2cv3hal8opt_AVX212_GLOBAL__N_120YUV420sp2RGB8InvokerILi2ELi0ELi3EEE", "Input images vector should not be empty!", "nbins > 2", "void cv::cpu_baseline::cvt32f16s(const float *, size_t, uchar *, size_t, short *, size_t, cv::Size, void *)", "missing.size() == samples.size() && missing.type() == CV_8U", "m3.total()", "St12length_error", "virtual void cv::MatOp_AddEx::transpose(const cv::MatExpr &, cv::MatExpr &) const", "No space for ZIP state block", "_points.getObj() != _hull.getObj()", "\"abc_activity_chooser_view_see_all\" : \"Afi\u0219a\u021bi-le pe toate\"", "\"abc_font_family_subhead_material\" : \"sans-serif\"", "\"abc_activitychooserview_choose_application\" : \"Pilih aplikasi\"", "! img1_32.empty()", "G]JIIKIMJOLPOPROTNWKXHXGWFVFTGRIQKPNPQQSSTUTWSYQZO WFUGSIRKQNQRST ZOYSWWUYSZO[L[JZIXIWJVKWJX YSWVUXRZO[", "NSt6__ndk120__shared_ptr_emplaceIN2cv12cpu_baseline12_GLOBAL__N_114MorphRowFilterINS3_5MaxOpIhEENS3_11MorphRowVecINS3_4VMaxINS1_12hal_baseline10v_uint8x16EEEEEEENS_9allocatorISD_EEEE", "brow4", " is missing.", "objdetect::get_1winSize_10()", "src.channels()", "JPEGFixupTagsSubsampling", "\"abc_searchview_description_submit\" : \"\u0548\u0582\u0572\u0561\u0580\u056f\u0565\u056c \u0570\u0561\u0580\u0581\u0578\u0582\u0574\u0568\"", "sum > 0", "void cv::hal::cpu_baseline::merge32s(const int **, int *, int, int)", "!bottom_layers.empty()", "cvFitLine", "H]QFLP QF[F QGYG PHUHYG[F LPMOPNSNVOWPXRXUWXUZQ[N[LZKYJWJULULWKWKV VPWRWUVXTZ SNUOVQVUUXSZQ[", "N3Imf13PizCompressorE", "format changed to: %s", "cv::error()", "sizeof ", "masks[i].rows == queryDescriptorsCount && masks[i].cols == rows && masks[i].type() == CV_8UC1", "\"abc_searchview_description_clear\" : \"X\u00f3a truy v\u1ea5n\"", "fillConvexPoly", "imgproc::circle_11()", "MapValueRef::GetInt32Value", "cvStopLoop", "\"abc_activitychooserview_choose_application\" : \"Een app selecteren\"", "int cv::opt_AVX2::SymmColumnVec_32s8u::operator()(const uchar **, uchar *, int) const", "\" is already defined (as something other than a package) in file \"", "srcMat.dims == 2 && srcMat.cols == weights.cols && dstMat.rows == srcMat.rows && dstMat.cols == weights.rows && srcMat.type() == weights.type() && weights.type() == dstMat.type() && srcMat.type() == CV_32F && (biasMat.empty() || (biasMat.type() == srcMat.type() && biasMat.isContinuous() && (int)biasMat.total() == dstMat.cols))", "(mtype == CV_8U || mtype == CV_8S) && _mask.sameSize(*psrc1)", "__itt_relation_add_to_current", "proto3", "Bad input roi", "N2cv19connectedcomponents18LabelingWuParallelIihNS0_4NoOpEE10SecondScanE", "N2cv3hal10opt_SSE4_112_GLOBAL__N_119YUV422toRGB8InvokerILi0ELi0ELi1ELi3EEE", "temp_pred.cols==1", "ml::getValues_10()", "void cv::hal::absdiff16s(const short *, size_t, const short *, size_t, short *, size_t, int, int, void *)", "samples.type() == CV_32F || samples.type() == CV_32S", "\"search_menu_title\" : \"S\u00f8g\"", "N7cvflann27HierarchicalClusteringIndexINS_7HammingIhEEEE", "features2d::drawKeypoints_11()", "The written string is too long", "N2cv3hal8opt_AVX212_GLOBAL__N_119YUV422toRGB8InvokerILi2ELi1ELi0ELi4EEE", "int cv::opt_AVX2::sqsum16u(const ushort *, const uchar *, int *, double *, int, int)", "void cv::hal::opt_SSE4_1::absdiff32s(const int *, size_t, const int *, size_t, int *, size_t, int, int)", "length exceeds PNG maximum", "cvStartReadChainPoints", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212ColumnFilterINS2_4CastIdhEENS2_11ColumnNoVecEEENS_9allocatorIS7_EEEE", "This ZeroCopyOutputStream doesn't support aliasing. Reaching here usually means a ZeroCopyOutputStream implementation bug.", "core::dct_10()", "NSt6__ndk120__shared_ptr_emplaceIN2cv10opt_SSE4_112_GLOBAL__N_117MorphColumnFilterINS3_5MaxOpIfEENS3_14MorphColumnVecINS3_4VMaxINS1_10hal_SSE4_111v_float32x4EEEEEEENS_9allocatorISD_EEEE", "photo::createCalibrateRobertson_11()", "calib3d::calibrateCameraExtended_10()", "NSt6__ndk120__shared_ptr_pointerIPN2cv25RANSACPointSetRegistratorENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE", "void cv::hal::opt_AVX2::cvtThreePlaneYUVtoBGR(const uchar *, size_t, uchar *, size_t, int, int, int, bool, int)", "features2d::setDiffusivity_10()", "N12_GLOBAL__N_124GeneralizedHoughGuilImplE", "verbose", "b.empty() || outCn == b.total()", "imgproc::drawContours_11()", "inputs[0] == inputs[i]", "NSt6__ndk120__shared_ptr_emplaceIN2cv20CalibrateDebevecImplENS_9allocatorIS2_EEEE", "NSt6__ndk120__shared_ptr_emplaceIN2cv15PythonFormatterENS_9allocatorIS2_EEEE", "N2cv14HOGConfInvokerE", "D % 16 == 0", "new_samples.cols == samples.cols && new_responses.cols == responses.cols", "\"abc_searchview_description_query\" : \"\uac80\uc0c9\uc5b4\"", "features2d::setPass2Only_10()", "void cv::hal::opt_AVX2::recip32s(const int *, size_t, int *, size_t, int, int, const double *)", "new[]", "Error calling dataWindowForTile() on image file \"", "MWRKRX UNSMQMONOPQQTRUSUUSVQVOU", "imgproc::cvtColor_10()", "void cv::matMulDeriv(cv::InputArray, cv::InputArray, cv::OutputArray, cv::OutputArray)", "update.type() == CV_32FC1", "features2d::setMaxArea_10()", "cvComposeRT", "N2cv8opt_AVX29RowFilterIhfNS0_8RowNoVecEEE", "LogLuvDecode24", "\"abc_searchview_description_query\" : \"\u0ba4\u0bc7\u0b9f\u0bb2\u0bcd \u0bb5\u0bbf\u0ba9\u0bb5\u0bb2\u0bcd\"", "virtual void cv::impl::(anonymous namespace)::CvtColorLoop_Invoker<cv::hal::cpu_baseline::(anonymous namespace)::RGB2HLS_f>::operator()(const cv::Range &) const [Cvt = cv::hal::cpu_baseline::(anonymous namespace)::RGB2HLS_f]", "I[MJNKMLLKLJMHNGPFSFVGWHXJXLWNVORQRT SFUGVHWJWLVNTP RYQZR[SZRY", "KZSFQGPIPKQMSNUNWMXKXIWGUFSF", "H\\SMONLPKRKTLVNWQWUVXTYRYPXNVMSM XNSM VMQNLP ONKR LVQW NWSVXT UVYR", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/generated_message_reflection.cc", "N3Iex12EhostdownExcE", "NSt6__ndk120__shared_ptr_emplaceIN2cv8opt_AVX212_GLOBAL__N_16RowSumIfdEENS_9allocatorIS5_EEEE", "float cv::getRecall(const std::vector<Point2f> &, float)", "\"abc_searchview_description_query\" : \"Wyszukiwane has\u0142o\"", "NWRKRX SKSX PKUK PXUX", "void cv::dnn::dnn4_v20190122::Net::Impl::clear()", "CV_IS_MAT(new_points1)", "NSt6__ndk114__codecvt_utf8IDiEE", "produce_cell_output", "CL_INVALID_EVENT_WAIT_LIST", "message", "(String)fn[\"name\"] == \"PCA\"", "imgproc::putText_11()", "var_count", "H\\THT[ UFU[ UFJUZU Q[X[", "_HINT is specified but it is not a directory: ", "ml::predict_11()", "cvTransform", "covDeterms[ci] > std::numeric_limits<double>::epsilon()", "bad number of dimensions", "LZWDecode: Corrupted LZW table at scanline %d", "imgproc::Sobel_14()", "video::create_14()", "LWSHRIQKQMRORPPRRTRUQWQYR[S\\ RIQM QKRO RUQY QWR[", "!inputs.empty()", "Incorrect type of input image: ", "LXOSVSVRUPSOQOOPNRNUOWQXSXUWVV USUQSO QOPPOROUPWQX", "N3Iex8EbadrExcE", "E_YIK[ IO[O IU[U", "F^[ILIJJILINJPLQNQPPQNQLPJ[J IMJOKPMQ QMPKOJMI IXXXZW[U[SZQXPVPTQSSSUTWIW [TZRYQWP STTVUWWX", "virtual void cv::dnn::dnn4_v20190122::BatchNormNoGammaSubgraph::finalize(tensorflow::GraphDef &, tensorflow::NodeDef *, std::vector<tensorflow::NodeDef *> &)", "0 < y_points && y_points <= rows", "virtual void cv::opt_AVX2::ColumnFilter<cv::opt_AVX2::Cast<float, unsigned short>, cv::opt_AVX2::ColumnNoVec>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::opt_AVX2::Cast<float, unsigned short>, VecOp = cv::opt_AVX2::ColumnNoVec]", "N2cv3dnn14dnn4_v2019012222ReshapeAsShapeSubgraphE", "preFilterSize", "calib3d::matMulDeriv_10()", "void cv::opt_AVX2::cvt8u32s(const uchar *, size_t, uchar *, size_t, int *, size_t, cv::Size, void *)", "core::bitwise_1or_11()", "photo::colorChange_13()", "N3Iex12EshutdownExcE", "N6google8protobuf24EnumValueDescriptorProtoE", "memory image too large", "N2cv8opt_AVX212_GLOBAL__N_16RowSumIhiEE", "half3", "npoints == 3 && npoints == std::max(ipoints.checkVector(2, CV_32F), ipoints.checkVector(2, CV_64F))", "cvSetData", "calib3d::fisheye_1projectPoints_11()", "N3Iex8ExdevExcE", "void cv::cpu_baseline::cvt32s16s(const int *, size_t, uchar *, size_t, short *, size_t, cv::Size, void *)", "N3Imf14TypedAttributeINS_9LineOrderEEE", "normalizeSamples", "virtual void cv::HOGDescriptor::detect(cv::InputArray, std::vector<Point> &, std::vector<double> &, double, cv::Size, cv::Size, const std::vector<Point> &) const", "reorg", "void cv::hal::cpu_baseline::sqrt64f(const double *, double *, int)", "void cv::opt_AVX2::cvt8s32f(const schar *, size_t, uchar *, size_t, float *, size_t, cv::Size, void *)", "AddUInt32", "\"abc_shareactionprovider_share_with_application\" : \"%s \u0938\u0901\u0917 \u0938\u093e\u091d\u0947\u0926\u093e\u0930\u0940 \u0917\u0930\u094d\u0928\u0941\u0939\u094b\u0938\u094d\"", "cvCrossProduct", "getBackendName", "int cv::opt_SSE4_1::(anonymous namespace)::MorphVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_int16x8> >::operator()(uchar **, int, uchar *, int) const [VecUpdate = cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_int16x8>]", "\"abc_capital_off\" : \"DESACTIVAR\"", "new_samples.type() == CV_32F", "fitLine3D_wods", "Out of memory allocating %ld byte temp buffer.", "size() == mask.size()", "virtual void cv::opt_AVX2::(anonymous namespace)::MorphRowFilter<cv::opt_AVX2::(anonymous namespace)::MinOp<float>, cv::opt_AVX2::(anonymous namespace)::MorphRowVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_float32x8> > >::operator()(const uchar *, uchar *, int, int) [Op = cv::opt_AVX2::(anonymous namespace)::MinOp<float>, VecOp = cv::opt_AVX2::(anonymous namespace)::MorphRowVec<cv::opt_AVX2::(anonymous namespace)::VMin<cv::hal_AVX2::v_float32x8> >]", "double cv::compareHist(cv::InputArray, cv::InputArray, int)", "/home/vagrant/build/srclib/opencv/3rdparty/protobuf/src/google/protobuf/extension_set.cc", "\"abc_shareactionprovider_share_with_application\" : \"Dijeljenje sa: %s\"", "spatialGradient", "27TegraRowOp_combine2_InvokerIKxxE", "%suncompressed data", "application buffer not large enough for all data, possible subsampling issue", "virtual void cv::opt_AVX2::(anonymous namespace)::RowSum<float, double>::operator()(const uchar *, uchar *, int, int) [T = float, ST = double]", "ml::get_1learnt_1thetas_10()", "__itt_model_site_beginAL", "TIFFScanlineSize", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_10RGB5x52RGBEEE", "The cost matrix size does not match to the signatures' sizes", "T.rows == 4 && T.cols == 4", "cvInitFont", "borderInterpolate", "std::min(_step.cols, _step.rows) == 1 && std::max(_step.cols, _step.rows) >= 2 && _step.type() == CV_64FC1", "features2d::detectAndCompute_11()", "No space for data buffer at scanline %lu", "__itt_stack_caller_create", "Failed to read custom directory at offset %llu", "G^LML[ LMR[ MMRY XMR[ XMX[ YMY[ IMMM XM\\M I[O[ U[\\[", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphColumnFilter<cv::opt_SSE4_1::(anonymous namespace)::MinOp<short>, cv::opt_SSE4_1::(anonymous namespace)::MorphColumnVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_int16x8> > >::operator()(const uchar **, uchar *, int, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MinOp<short>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphColumnVec<cv::opt_SSE4_1::(anonymous namespace)::VMin<cv::hal_SSE4_1::v_int16x8> >]", "G\\XIYLYFXIVGSFQFNGLIKKJNJSKVLXNZQ[S[VZXXYV QFOGMILKKNKSLVMXOZQ[", "output_slice.isContinuous() && output_slice.size == curr_output.size", "\"abc_searchview_description_search\" : \"Axtar\u0131\u015f\"", "Cannot register image file attribute type \"", "IPP:((ippicviCopy_8u_C3MR)((const Ipp8u *)src, (int)sstep, (Ipp8u *)dst, (int)dstep, ippiSize(size), (const Ipp8u *)mask, (int)mstep)) >= 0", "torchMerge", "core::getDefaultName_10()", "cvApproxChains", "inp.dims == numAxes && inp.size == inputs[0].size", "void cv::opt_AVX2::cvt8u8s(const uchar *, size_t, uchar *, size_t, schar *, size_t, cv::Size, void *)", "Fractional scanlines cannot be written", "I[RLRX LRXR", "J.isContinuous() && J.cols == 8", "\"abc_action_bar_home_subtitle_description_format\" : \"%1$s (%2$s)\uff1a%3$s\"", "nclusters > 0", "Input parameters must be matrices", "void cv::opt_AVX2::cvt32s32f(const int *, size_t, uchar *, size_t, float *, size_t, cv::Size, void *)", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_11RGB2YCrCb_fIfEEEE", "Truncating NumberOfInks from %u to %u", "-+xX0123456789abcdefABCDEF", "accuracy", "no rotated image for requested keypoint octave", "video::getDist2Threshold_10()", "virtual void cv::opt_SSE4_1::(anonymous namespace)::MorphFilter<cv::opt_SSE4_1::(anonymous namespace)::MaxOp<unsigned char>, cv::opt_SSE4_1::(anonymous namespace)::MorphVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_uint8x16> > >::operator()(const uchar **, uchar *, int, int, int, int) [Op = cv::opt_SSE4_1::(anonymous namespace)::MaxOp<unsigned char>, VecOp = cv::opt_SSE4_1::(anonymous namespace)::MorphVec<cv::opt_SSE4_1::(anonymous namespace)::VMax<cv::hal_SSE4_1::v_uint8x16> >]", "findHoles", "nsamples == 1", "could not find encoder for the specified extension", "Invalid format for pCAL parameter", "\"abc_searchview_description_clear\" : \"I-clear ang query\"", "void cv::hal::opt_AVX2::split16u(const ushort *, ushort **, int, int)", "blobs.size() >= 2", "cvReshape", "/home/vagrant/build/srclib/opencv/modules/photo/src/npr.cpp", "\"abc_toolbar_collapse_description\" : \"Collapse\"", "\"abc_action_bar_home_description\" : \"Naviga\u021bi la ecranul de pornire\"", "region", "void cv::distanceTransform_L1_8U(cv::InputArray, cv::OutputArray)", "N7cvflann21RadiusUniqueResultSetIfEE", "The kernel size must be odd and not larger than 31", "\"abc_capital_off\" : \"\uc0ac\uc6a9 \uc548\ud568\"", "text format contains deprecated field \"", "x.type() == CV_32F || x.type() == CV_64F", "virtual void cv::cpu_baseline::SymmColumnFilter<cv::cpu_baseline::Cast<float, short>, cv::cpu_baseline::SymmColumnVec_32f16s>::operator()(const uchar **, uchar *, int, int, int) [CastOp = cv::cpu_baseline::Cast<float, short>, VecOp = cv::cpu_baseline::SymmColumnVec_32f16s]", "layer > 0", "N6google8protobuf21MethodDescriptorProtoE", "static void cv::dnn::EltwiseLayerImpl::EltwiseInvoker::run(const cv::Mat *, int, cv::Mat &, const std::vector<float> &, cv::dnn::EltwiseLayerImpl::EltwiseOp, const cv::dnn::dnn4_v20190122::ActivationLayer *, int)", "computeRecallPrecisionCurve", "dnn::readFromModelOptimizer_10()", "\"abc_shareactionprovider_share_with_application\" : \"%s \u0d0e\u0d28\u0d4d\u0d28\u0d24\u0d41\u0d2e\u0d3e\u0d2f\u0d3f \u0d2a\u0d19\u0d4d\u0d15\u0d3f\u0d1f\u0d41\u0d15\"", "info change after png_start_read_image or png_read_update_info", "Flatten", "coolingRatio", "\"search_menu_title\" : \"Pretra\u017ei\"", "N2cv20BackgroundSubtractorE", "photo::getLambda_10()", "imgproc::EMD_13()", "void cv::hal::fastAtan32f(const float *, const float *, float *, int, bool)", "opencv_tensorflow.NameAttrList.AttrEntry.key", "coeffs.size() == (size_t)nsrcs", "calcShift", "N3Imf9InputFile4DataE", "Field: ", "video::set_1statePost_10()", "\"abc_action_bar_home_description\" : \"\u0e19\u0e33\u0e17\u0e32\u0e07\u0e44\u0e1b\u0e2b\u0e19\u0e49\u0e32\u0e41\u0e23\u0e01\"", "MWUFTGRM UGRM UFVGRM", "\"abc_action_bar_up_description\" : \"\u0a89\u0aaa\u0ab0 \u0aa8\u0ac7\u0ab5\u0abf\u0a97\u0ac7\u0a9f \u0a95\u0ab0\u0acb\"", "sz == v2.size()", "Invalid display window in image header.", "N2cv3dnn17ProposalLayerImplE", "Can't discard critical data on CRC error", "N2cv8opt_AVX212_GLOBAL__N_19ColumnSumIddEE", "\"abc_searchview_description_clear\" : \"\u0394\u03b9\u03b1\u03b3\u03c1\u03b1\u03c6\u03ae \u03b5\u03c1\u03c9\u03c4\u03ae\u03bc\u03b1\u03c4\u03bf\u03c2\"", "\"abc_searchview_description_submit\" : \"\u1218\u1320\u12ed\u1245 \u12eb\u1235\u1228\u12ad\u1261\"", "calib3d::solvePnP_12()", "H\\MPLQLRMSNSOROQNPMP MQMRNRNQMQ WPVQVRWSXSYRYQXPWP WQWRXRXQWQ", "min_sample_count", "cvDCT", "torch", ": Protocol message serialized to a size different from what was originally expected.  Perhaps it was modified by another thread during serialization?", "Index out-of-bounds (field is empty).", "LZLVNSPO SFL[ TFM[ URUSVSURTRRTOU OURVSZT[ OUQVRZT[U[XYZV", "NSt6__ndk124__generic_error_categoryE", "__itt_pause", "N2cv3hal10opt_SSE4_112_GLOBAL__N_120CvtColorLoop_InvokerINS2_8RGB2GrayItEEEE", "N2cv3hal8opt_AVX212_GLOBAL__N_120YUV420sp2RGB8InvokerILi0ELi1ELi4EEE", "horDiff8", "N2cv7TLSDataINS_12_GLOBAL__N_18ThreadIDEEE", "icvContourSecArea", "imgproc::floodFill_10()", "ml::load_10()", "N2cv12cpu_baseline21SymmColumnSmallFilterINS0_4CastIffEENS0_22SymmColumnSmallVec_32fEEE", "k == OPENGL_BUFFER", "it != layers.end()", "virtual void cv::CascadeClassifierImpl::detectMultiScale(cv::InputArray, std::vector<Rect> &, std::vector<int> &, double, int, int, cv::Size, cv::Size)", "\". This appears to be a value from a sibling type.", "Cannot find image channel \"", ">d\\W?d\\W?d\\W?d\\W?", "H\\PBP_ TBT_ XIWJXKYJYIWGTFPFMGKIKKLMMNOOUQWRYT KKMMONUPWQXRYTYXWZT[P[MZKXKWLVMWLX", "30TegraCvtColor_rgbx2hsv_Invoker", "__itt_counter_dec_delta_v3", "Invalid remaining flags %d", "\"abc_shareactionprovider_share_with\" : \"\u0410\u0431\u0430\u0433\u0443\u043b\u0456\u0446\u044c \u0437\"", "input.type() == output.type()", "__int128", "H\\XMWMW\\V_U`SaQaO`N_L_ XMX\\W_UaSbPbNaL_ WPUNSMPMNNLPKSKULXNZP[S[UZWX WPSNPNNOMPLSLUMXNYPZSZWX", "OPENCV_KMEANS_PARALLEL_GRANULARITY", "patchInt", "corrsize.height <= img.rows + templ.rows - 1 && corrsize.width <= img.cols + templ.cols - 1", "\"abc_toolbar_collapse_description\" : \"\u0d1a\u0d41\u0d30\u0d41\u0d15\u0d4d\u0d15\u0d41\u0d15\"", "calib3d::composeRT_14()", "void cv::Subdiv2D::initDelaunay(cv::Rect)", "nextPtsMat.checkVector(2, CV_32F, true) == npoints", "!covsEigenValues.empty()", "N2cv3hal8opt_AVX212_GLOBAL__N_120CvtColorLoop_InvokerINS2_8Gray2RGBIhEEEE", "medianBlur", "SGBM3WayMainLoop", "!mean.empty() && !eigenvectors.empty() && ((mean.rows == 1 && eigenvectors.rows == data.cols) || (mean.cols == 1 && eigenvectors.rows == data.rows))", "N12opencv_caffe18ReductionParameterE", "void cv::bitwise_and(cv::InputArray, cv::InputArray, cv::OutputArray, cv::InputArray)", "imgproc::dilate_14()", "MWUHSJQMPPPTQWSZU\\ SJRLQPQTRXSZ", "H\\PBP_ TBT_ YIWGTFPFMGKIKKLMMNOOUQWRXSYUYXWZT[P[MZKX", "0 <= cn0 && cn0 < cn1 && cn1 <= (int)scale.total()", "NVPPPV PSQQSPTP"], "firebase_urls": [], "files": ["META-INF/MANIFEST.MF", "META-INF/4C030B19.SF", "META-INF/4C030B19.RSA", "AndroidManifest.xml", "classes.dex", "lib/arm64-v8a/libopencv_java4.so", "lib/arm64-v8a/libprocess.so", "lib/armeabi-v7a/libopencv_java4.so", "lib/armeabi-v7a/libprocess.so", "lib/x86/libopencv_java4.so", "lib/x86/libprocess.so", "lib/x86_64/libopencv_java4.so", "lib/x86_64/libprocess.so", "res/anim/abc_fade_in.xml", "res/anim/abc_fade_out.xml", "res/anim/abc_grow_fade_in_from_bottom.xml", "res/anim/abc_popup_enter.xml", "res/anim/abc_popup_exit.xml", "res/anim/abc_shrink_fade_out_from_bottom.xml", "res/anim/abc_slide_in_bottom.xml", "res/anim/abc_slide_in_top.xml", "res/anim/abc_slide_out_bottom.xml", "res/anim/abc_slide_out_top.xml", "res/color-v11/abc_background_cache_hint_selector_material_dark.xml", "res/color-v11/abc_background_cache_hint_selector_material_light.xml", "res/color-v23/abc_btn_colored_borderless_text_material.xml", "res/color-v23/abc_btn_colored_text_material.xml", "res/color-v23/abc_color_highlight_material.xml", "res/color-v23/abc_tint_btn_checkable.xml", "res/color-v23/abc_tint_default.xml", "res/color-v23/abc_tint_edittext.xml", "res/color-v23/abc_tint_seek_thumb.xml", "res/color-v23/abc_tint_spinner.xml", "res/color-v23/abc_tint_switch_thumb.xml", "res/color-v23/abc_tint_switch_track.xml", "res/color/abc_btn_colored_borderless_text_material.xml", "res/color/abc_btn_colored_text_material.xml", "res/color/abc_hint_foreground_material_dark.xml", "res/color/abc_hint_foreground_material_light.xml", "res/color/abc_primary_text_disable_only_material_dark.xml", "res/color/abc_primary_text_disable_only_material_light.xml", "res/color/abc_primary_text_material_dark.xml", "res/color/abc_primary_text_material_light.xml", "res/color/abc_search_url_text.xml", "res/color/abc_secondary_text_material_dark.xml", "res/color/abc_secondary_text_material_light.xml", "res/color/abc_tint_btn_checkable.xml", "res/color/abc_tint_default.xml", "res/color/abc_tint_edittext.xml", "res/color/abc_tint_seek_thumb.xml", "res/color/abc_tint_spinner.xml", "res/color/abc_tint_switch_thumb.xml", "res/color/abc_tint_switch_track.xml", "res/color/switch_thumb_material_dark.xml", "res/color/switch_thumb_material_light.xml", "res/drawable-hdpi-v4/abc_ab_share_pack_mtrl_alpha.9.png", "res/drawable-hdpi-v4/abc_btn_check_to_on_mtrl_000.png", "res/drawable-hdpi-v4/abc_btn_check_to_on_mtrl_015.png", "res/drawable-hdpi-v4/abc_btn_radio_to_on_mtrl_000.png", "res/drawable-hdpi-v4/abc_btn_radio_to_on_mtrl_015.png", "res/drawable-hdpi-v4/abc_btn_switch_to_on_mtrl_00001.9.png", "res/drawable-hdpi-v4/abc_btn_switch_to_on_mtrl_00012.9.png", "res/drawable-hdpi-v4/abc_cab_background_top_mtrl_alpha.9.png", "res/drawable-hdpi-v4/abc_ic_commit_search_api_mtrl_alpha.png", "res/drawable-hdpi-v4/abc_ic_menu_copy_mtrl_am_alpha.png", "res/drawable-hdpi-v4/abc_ic_menu_cut_mtrl_alpha.png", "res/drawable-hdpi-v4/abc_ic_menu_paste_mtrl_am_alpha.png", "res/drawable-hdpi-v4/abc_ic_menu_selectall_mtrl_alpha.png", "res/drawable-hdpi-v4/abc_ic_menu_share_mtrl_alpha.png", "res/drawable-hdpi-v4/abc_ic_star_black_16dp.png", "res/drawable-hdpi-v4/abc_ic_star_black_36dp.png", "res/drawable-hdpi-v4/abc_ic_star_black_48dp.png", "res/drawable-hdpi-v4/abc_ic_star_half_black_16dp.png", "res/drawable-hdpi-v4/abc_ic_star_half_black_36dp.png", "res/drawable-hdpi-v4/abc_ic_star_half_black_48dp.png", "res/drawable-hdpi-v4/abc_list_divider_mtrl_alpha.9.png", "res/drawable-hdpi-v4/abc_list_focused_holo.9.png", "res/drawable-hdpi-v4/abc_list_longpressed_holo.9.png", "res/drawable-hdpi-v4/abc_list_pressed_holo_dark.9.png", "res/drawable-hdpi-v4/abc_list_pressed_holo_light.9.png", "res/drawable-hdpi-v4/abc_list_selector_disabled_holo_dark.9.png", "res/drawable-hdpi-v4/abc_list_selector_disabled_holo_light.9.png", "res/drawable-hdpi-v4/abc_menu_hardkey_panel_mtrl_mult.9.png", "res/drawable-hdpi-v4/abc_popup_background_mtrl_mult.9.png", "res/drawable-hdpi-v4/abc_scrubber_control_off_mtrl_alpha.png", "res/drawable-hdpi-v4/abc_scrubber_control_to_pressed_mtrl_000.png", "res/drawable-hdpi-v4/abc_scrubber_control_to_pressed_mtrl_005.png", "res/drawable-hdpi-v4/abc_scrubber_primary_mtrl_alpha.9.png", "res/drawable-hdpi-v4/abc_scrubber_track_mtrl_alpha.9.png", "res/drawable-hdpi-v4/abc_spinner_mtrl_am_alpha.9.png", "res/drawable-hdpi-v4/abc_switch_track_mtrl_alpha.9.png", "res/drawable-hdpi-v4/abc_tab_indicator_mtrl_alpha.9.png", "res/drawable-hdpi-v4/abc_text_select_handle_left_mtrl_dark.png", "res/drawable-hdpi-v4/abc_text_select_handle_left_mtrl_light.png", "res/drawable-hdpi-v4/abc_text_select_handle_middle_mtrl_dark.png", "res/drawable-hdpi-v4/abc_text_select_handle_middle_mtrl_light.png", "res/drawable-hdpi-v4/abc_text_select_handle_right_mtrl_dark.png", "res/drawable-hdpi-v4/abc_text_select_handle_right_mtrl_light.png", "res/drawable-hdpi-v4/abc_textfield_activated_mtrl_alpha.9.png", "res/drawable-hdpi-v4/abc_textfield_default_mtrl_alpha.9.png", "res/drawable-hdpi-v4/abc_textfield_search_activated_mtrl_alpha.9.png", "res/drawable-hdpi-v4/abc_textfield_search_default_mtrl_alpha.9.png", "res/drawable-hdpi-v4/notification_bg_low_normal.9.png", "res/drawable-hdpi-v4/notification_bg_low_pressed.9.png", "res/drawable-hdpi-v4/notification_bg_normal.9.png", "res/drawable-hdpi-v4/notification_bg_normal_pressed.9.png", "res/drawable-hdpi-v4/notify_panel_notification_icon_bg.png", "res/drawable-ldrtl-hdpi-v17/abc_ic_menu_copy_mtrl_am_alpha.png", "res/drawable-ldrtl-hdpi-v17/abc_ic_menu_cut_mtrl_alpha.png", "res/drawable-ldrtl-hdpi-v17/abc_spinner_mtrl_am_alpha.9.png", "res/drawable-ldrtl-mdpi-v17/abc_ic_menu_copy_mtrl_am_alpha.png", "res/drawable-ldrtl-mdpi-v17/abc_ic_menu_cut_mtrl_alpha.png", "res/drawable-ldrtl-mdpi-v17/abc_spinner_mtrl_am_alpha.9.png", "res/drawable-ldrtl-xhdpi-v17/abc_ic_menu_copy_mtrl_am_alpha.png", "res/drawable-ldrtl-xhdpi-v17/abc_ic_menu_cut_mtrl_alpha.png", "res/drawable-ldrtl-xhdpi-v17/abc_spinner_mtrl_am_alpha.9.png", "res/drawable-ldrtl-xxhdpi-v17/abc_ic_menu_copy_mtrl_am_alpha.png", "res/drawable-ldrtl-xxhdpi-v17/abc_ic_menu_cut_mtrl_alpha.png", "res/drawable-ldrtl-xxhdpi-v17/abc_spinner_mtrl_am_alpha.9.png", "res/drawable-ldrtl-xxxhdpi-v17/abc_ic_menu_copy_mtrl_am_alpha.png", "res/drawable-ldrtl-xxxhdpi-v17/abc_ic_menu_cut_mtrl_alpha.png", "res/drawable-ldrtl-xxxhdpi-v17/abc_spinner_mtrl_am_alpha.9.png", "res/drawable-mdpi-v4/abc_ab_share_pack_mtrl_alpha.9.png", "res/drawable-mdpi-v4/abc_btn_check_to_on_mtrl_000.png", "res/drawable-mdpi-v4/abc_btn_check_to_on_mtrl_015.png", "res/drawable-mdpi-v4/abc_btn_radio_to_on_mtrl_000.png", "res/drawable-mdpi-v4/abc_btn_radio_to_on_mtrl_015.png", "res/drawable-mdpi-v4/abc_btn_switch_to_on_mtrl_00001.9.png", "res/drawable-mdpi-v4/abc_btn_switch_to_on_mtrl_00012.9.png", "res/drawable-mdpi-v4/abc_cab_background_top_mtrl_alpha.9.png", "res/drawable-mdpi-v4/abc_ic_commit_search_api_mtrl_alpha.png", "res/drawable-mdpi-v4/abc_ic_menu_copy_mtrl_am_alpha.png", "res/drawable-mdpi-v4/abc_ic_menu_cut_mtrl_alpha.png", "res/drawable-mdpi-v4/abc_ic_menu_paste_mtrl_am_alpha.png", "res/drawable-mdpi-v4/abc_ic_menu_selectall_mtrl_alpha.png", "res/drawable-mdpi-v4/abc_ic_menu_share_mtrl_alpha.png", "res/drawable-mdpi-v4/abc_ic_star_black_16dp.png", "res/drawable-mdpi-v4/abc_ic_star_black_36dp.png", "res/drawable-mdpi-v4/abc_ic_star_black_48dp.png", "res/drawable-mdpi-v4/abc_ic_star_half_black_16dp.png", "res/drawable-mdpi-v4/abc_ic_star_half_black_36dp.png", "res/drawable-mdpi-v4/abc_ic_star_half_black_48dp.png", "res/drawable-mdpi-v4/abc_list_divider_mtrl_alpha.9.png", "res/drawable-mdpi-v4/abc_list_focused_holo.9.png", "res/drawable-mdpi-v4/abc_list_longpressed_holo.9.png", "res/drawable-mdpi-v4/abc_list_pressed_holo_dark.9.png", "res/drawable-mdpi-v4/abc_list_pressed_holo_light.9.png", "res/drawable-mdpi-v4/abc_list_selector_disabled_holo_dark.9.png", "res/drawable-mdpi-v4/abc_list_selector_disabled_holo_light.9.png", "res/drawable-mdpi-v4/abc_menu_hardkey_panel_mtrl_mult.9.png", "res/drawable-mdpi-v4/abc_popup_background_mtrl_mult.9.png", "res/drawable-mdpi-v4/abc_scrubber_control_off_mtrl_alpha.png", "res/drawable-mdpi-v4/abc_scrubber_control_to_pressed_mtrl_000.png", "res/drawable-mdpi-v4/abc_scrubber_control_to_pressed_mtrl_005.png", "res/drawable-mdpi-v4/abc_scrubber_primary_mtrl_alpha.9.png", "res/drawable-mdpi-v4/abc_scrubber_track_mtrl_alpha.9.png", "res/drawable-mdpi-v4/abc_spinner_mtrl_am_alpha.9.png", "res/drawable-mdpi-v4/abc_switch_track_mtrl_alpha.9.png", "res/drawable-mdpi-v4/abc_tab_indicator_mtrl_alpha.9.png", "res/drawable-mdpi-v4/abc_text_select_handle_left_mtrl_dark.png", "res/drawable-mdpi-v4/abc_text_select_handle_left_mtrl_light.png", "res/drawable-mdpi-v4/abc_text_select_handle_middle_mtrl_dark.png", "res/drawable-mdpi-v4/abc_text_select_handle_middle_mtrl_light.png", "res/drawable-mdpi-v4/abc_text_select_handle_right_mtrl_dark.png", "res/drawable-mdpi-v4/abc_text_select_handle_right_mtrl_light.png", "res/drawable-mdpi-v4/abc_textfield_activated_mtrl_alpha.9.png", "res/drawable-mdpi-v4/abc_textfield_default_mtrl_alpha.9.png", "res/drawable-mdpi-v4/abc_textfield_search_activated_mtrl_alpha.9.png", "res/drawable-mdpi-v4/abc_textfield_search_default_mtrl_alpha.9.png", "res/drawable-mdpi-v4/notification_bg_low_normal.9.png", "res/drawable-mdpi-v4/notification_bg_low_pressed.9.png", "res/drawable-mdpi-v4/notification_bg_normal.9.png", "res/drawable-mdpi-v4/notification_bg_normal_pressed.9.png", "res/drawable-mdpi-v4/notify_panel_notification_icon_bg.png", "res/drawable-v21/abc_action_bar_item_background_material.xml", "res/drawable-v21/abc_btn_colored_material.xml", "res/drawable-v21/abc_edit_text_material.xml", "res/drawable-v21/abc_ratingbar_indicator_material.xml", "res/drawable-v21/abc_ratingbar_material.xml", "res/drawable-v21/abc_ratingbar_small_material.xml", "res/drawable-v21/notification_action_background.xml", "res/drawable-v23/abc_control_background_material.xml", "res/drawable-xhdpi-v4/abc_ab_share_pack_mtrl_alpha.9.png", "res/drawable-xhdpi-v4/abc_btn_check_to_on_mtrl_000.png", "res/drawable-xhdpi-v4/abc_btn_check_to_on_mtrl_015.png", "res/drawable-xhdpi-v4/abc_btn_radio_to_on_mtrl_000.png", "res/drawable-xhdpi-v4/abc_btn_radio_to_on_mtrl_015.png", "res/drawable-xhdpi-v4/abc_btn_switch_to_on_mtrl_00001.9.png", "res/drawable-xhdpi-v4/abc_btn_switch_to_on_mtrl_00012.9.png", "res/drawable-xhdpi-v4/abc_cab_background_top_mtrl_alpha.9.png", "res/drawable-xhdpi-v4/abc_ic_commit_search_api_mtrl_alpha.png", "res/drawable-xhdpi-v4/abc_ic_menu_copy_mtrl_am_alpha.png", "res/drawable-xhdpi-v4/abc_ic_menu_cut_mtrl_alpha.png", "res/drawable-xhdpi-v4/abc_ic_menu_paste_mtrl_am_alpha.png", "res/drawable-xhdpi-v4/abc_ic_menu_selectall_mtrl_alpha.png", "res/drawable-xhdpi-v4/abc_ic_menu_share_mtrl_alpha.png", "res/drawable-xhdpi-v4/abc_ic_star_black_16dp.png", "res/drawable-xhdpi-v4/abc_ic_star_black_36dp.png", "res/drawable-xhdpi-v4/abc_ic_star_black_48dp.png", "res/drawable-xhdpi-v4/abc_ic_star_half_black_16dp.png", "res/drawable-xhdpi-v4/abc_ic_star_half_black_36dp.png", "res/drawable-xhdpi-v4/abc_ic_star_half_black_48dp.png", "res/drawable-xhdpi-v4/abc_list_divider_mtrl_alpha.9.png", "res/drawable-xhdpi-v4/abc_list_focused_holo.9.png", "res/drawable-xhdpi-v4/abc_list_longpressed_holo.9.png", "res/drawable-xhdpi-v4/abc_list_pressed_holo_dark.9.png", "res/drawable-xhdpi-v4/abc_list_pressed_holo_light.9.png", "res/drawable-xhdpi-v4/abc_list_selector_disabled_holo_dark.9.png", "res/drawable-xhdpi-v4/abc_list_selector_disabled_holo_light.9.png", "res/drawable-xhdpi-v4/abc_menu_hardkey_panel_mtrl_mult.9.png", "res/drawable-xhdpi-v4/abc_popup_background_mtrl_mult.9.png", "res/drawable-xhdpi-v4/abc_scrubber_control_off_mtrl_alpha.png", "res/drawable-xhdpi-v4/abc_scrubber_control_to_pressed_mtrl_000.png", "res/drawable-xhdpi-v4/abc_scrubber_control_to_pressed_mtrl_005.png", "res/drawable-xhdpi-v4/abc_scrubber_primary_mtrl_alpha.9.png", "res/drawable-xhdpi-v4/abc_scrubber_track_mtrl_alpha.9.png", "res/drawable-xhdpi-v4/abc_spinner_mtrl_am_alpha.9.png", "res/drawable-xhdpi-v4/abc_switch_track_mtrl_alpha.9.png", "res/drawable-xhdpi-v4/abc_tab_indicator_mtrl_alpha.9.png", "res/drawable-xhdpi-v4/abc_text_select_handle_left_mtrl_dark.png", "res/drawable-xhdpi-v4/abc_text_select_handle_left_mtrl_light.png", "res/drawable-xhdpi-v4/abc_text_select_handle_middle_mtrl_dark.png", "res/drawable-xhdpi-v4/abc_text_select_handle_middle_mtrl_light.png", "res/drawable-xhdpi-v4/abc_text_select_handle_right_mtrl_dark.png", "res/drawable-xhdpi-v4/abc_text_select_handle_right_mtrl_light.png", "res/drawable-xhdpi-v4/abc_textfield_activated_mtrl_alpha.9.png", "res/drawable-xhdpi-v4/abc_textfield_default_mtrl_alpha.9.png", "res/drawable-xhdpi-v4/abc_textfield_search_activated_mtrl_alpha.9.png", "res/drawable-xhdpi-v4/abc_textfield_search_default_mtrl_alpha.9.png", "res/drawable-xhdpi-v4/notification_bg_low_normal.9.png", "res/drawable-xhdpi-v4/notification_bg_low_pressed.9.png", "res/drawable-xhdpi-v4/notification_bg_normal.9.png", "res/drawable-xhdpi-v4/notification_bg_normal_pressed.9.png", "res/drawable-xhdpi-v4/notify_panel_notification_icon_bg.png", "res/drawable-xxhdpi-v4/abc_ab_share_pack_mtrl_alpha.9.png", "res/drawable-xxhdpi-v4/abc_btn_check_to_on_mtrl_000.png", "res/drawable-xxhdpi-v4/abc_btn_check_to_on_mtrl_015.png", "res/drawable-xxhdpi-v4/abc_btn_radio_to_on_mtrl_000.png", "res/drawable-xxhdpi-v4/abc_btn_radio_to_on_mtrl_015.png", "res/drawable-xxhdpi-v4/abc_btn_switch_to_on_mtrl_00001.9.png", "res/drawable-xxhdpi-v4/abc_btn_switch_to_on_mtrl_00012.9.png", "res/drawable-xxhdpi-v4/abc_cab_background_top_mtrl_alpha.9.png", "res/drawable-xxhdpi-v4/abc_ic_commit_search_api_mtrl_alpha.png", "res/drawable-xxhdpi-v4/abc_ic_menu_copy_mtrl_am_alpha.png", "res/drawable-xxhdpi-v4/abc_ic_menu_cut_mtrl_alpha.png", "res/drawable-xxhdpi-v4/abc_ic_menu_paste_mtrl_am_alpha.png", "res/drawable-xxhdpi-v4/abc_ic_menu_selectall_mtrl_alpha.png", "res/drawable-xxhdpi-v4/abc_ic_menu_share_mtrl_alpha.png", "res/drawable-xxhdpi-v4/abc_ic_star_black_16dp.png", "res/drawable-xxhdpi-v4/abc_ic_star_black_36dp.png", "res/drawable-xxhdpi-v4/abc_ic_star_black_48dp.png", "res/drawable-xxhdpi-v4/abc_ic_star_half_black_16dp.png", "res/drawable-xxhdpi-v4/abc_ic_star_half_black_36dp.png", "res/drawable-xxhdpi-v4/abc_ic_star_half_black_48dp.png", "res/drawable-xxhdpi-v4/abc_list_divider_mtrl_alpha.9.png", "res/drawable-xxhdpi-v4/abc_list_focused_holo.9.png", "res/drawable-xxhdpi-v4/abc_list_longpressed_holo.9.png", "res/drawable-xxhdpi-v4/abc_list_pressed_holo_dark.9.png", "res/drawable-xxhdpi-v4/abc_list_pressed_holo_light.9.png", "res/drawable-xxhdpi-v4/abc_list_selector_disabled_holo_dark.9.png", "res/drawable-xxhdpi-v4/abc_list_selector_disabled_holo_light.9.png", "res/drawable-xxhdpi-v4/abc_menu_hardkey_panel_mtrl_mult.9.png", "res/drawable-xxhdpi-v4/abc_popup_background_mtrl_mult.9.png", "res/drawable-xxhdpi-v4/abc_scrubber_control_off_mtrl_alpha.png", "res/drawable-xxhdpi-v4/abc_scrubber_control_to_pressed_mtrl_000.png", "res/drawable-xxhdpi-v4/abc_scrubber_control_to_pressed_mtrl_005.png", "res/drawable-xxhdpi-v4/abc_scrubber_primary_mtrl_alpha.9.png", "res/drawable-xxhdpi-v4/abc_scrubber_track_mtrl_alpha.9.png", "res/drawable-xxhdpi-v4/abc_spinner_mtrl_am_alpha.9.png", "res/drawable-xxhdpi-v4/abc_switch_track_mtrl_alpha.9.png", "res/drawable-xxhdpi-v4/abc_tab_indicator_mtrl_alpha.9.png", "res/drawable-xxhdpi-v4/abc_text_select_handle_left_mtrl_dark.png", "res/drawable-xxhdpi-v4/abc_text_select_handle_left_mtrl_light.png", "res/drawable-xxhdpi-v4/abc_text_select_handle_middle_mtrl_dark.png", "res/drawable-xxhdpi-v4/abc_text_select_handle_middle_mtrl_light.png", "res/drawable-xxhdpi-v4/abc_text_select_handle_right_mtrl_dark.png", "res/drawable-xxhdpi-v4/abc_text_select_handle_right_mtrl_light.png", "res/drawable-xxhdpi-v4/abc_textfield_activated_mtrl_alpha.9.png", "res/drawable-xxhdpi-v4/abc_textfield_default_mtrl_alpha.9.png", "res/drawable-xxhdpi-v4/abc_textfield_search_activated_mtrl_alpha.9.png", "res/drawable-xxhdpi-v4/abc_textfield_search_default_mtrl_alpha.9.png", "res/drawable-xxxhdpi-v4/abc_btn_check_to_on_mtrl_000.png", "res/drawable-xxxhdpi-v4/abc_btn_check_to_on_mtrl_015.png", "res/drawable-xxxhdpi-v4/abc_btn_radio_to_on_mtrl_000.png", "res/drawable-xxxhdpi-v4/abc_btn_radio_to_on_mtrl_015.png", "res/drawable-xxxhdpi-v4/abc_btn_switch_to_on_mtrl_00001.9.png", "res/drawable-xxxhdpi-v4/abc_btn_switch_to_on_mtrl_00012.9.png", "res/drawable-xxxhdpi-v4/abc_ic_menu_copy_mtrl_am_alpha.png", "res/drawable-xxxhdpi-v4/abc_ic_menu_cut_mtrl_alpha.png", "res/drawable-xxxhdpi-v4/abc_ic_menu_paste_mtrl_am_alpha.png", "res/drawable-xxxhdpi-v4/abc_ic_menu_selectall_mtrl_alpha.png", "res/drawable-xxxhdpi-v4/abc_ic_menu_share_mtrl_alpha.png", "res/drawable-xxxhdpi-v4/abc_ic_star_black_16dp.png", "res/drawable-xxxhdpi-v4/abc_ic_star_black_36dp.png", "res/drawable-xxxhdpi-v4/abc_ic_star_black_48dp.png", "res/drawable-xxxhdpi-v4/abc_ic_star_half_black_16dp.png", "res/drawable-xxxhdpi-v4/abc_ic_star_half_black_36dp.png", "res/drawable-xxxhdpi-v4/abc_ic_star_half_black_48dp.png", "res/drawable-xxxhdpi-v4/abc_scrubber_control_to_pressed_mtrl_000.png", "res/drawable-xxxhdpi-v4/abc_scrubber_control_to_pressed_mtrl_005.png", "res/drawable-xxxhdpi-v4/abc_spinner_mtrl_am_alpha.9.png", "res/drawable-xxxhdpi-v4/abc_switch_track_mtrl_alpha.9.png", "res/drawable-xxxhdpi-v4/abc_tab_indicator_mtrl_alpha.9.png", "res/drawable-xxxhdpi-v4/abc_text_select_handle_left_mtrl_dark.png", "res/drawable-xxxhdpi-v4/abc_text_select_handle_left_mtrl_light.png", "res/drawable-xxxhdpi-v4/abc_text_select_handle_right_mtrl_dark.png", "res/drawable-xxxhdpi-v4/abc_text_select_handle_right_mtrl_light.png", "res/drawable/abc_btn_borderless_material.xml", "res/drawable/abc_btn_check_material.xml", "res/drawable/abc_btn_colored_material.xml", "res/drawable/abc_btn_default_mtrl_shape.xml", "res/drawable/abc_btn_radio_material.xml", "res/drawable/abc_cab_background_internal_bg.xml", "res/drawable/abc_cab_background_top_material.xml", "res/drawable/abc_dialog_material_background.xml", "res/drawable/abc_edit_text_material.xml", "res/drawable/abc_ic_ab_back_material.xml", "res/drawable/abc_ic_arrow_drop_right_black_24dp.xml", "res/drawable/abc_ic_clear_material.xml", "res/drawable/abc_ic_go_search_api_material.xml", "res/drawable/abc_ic_menu_overflow_material.xml", "res/drawable/abc_ic_search_api_material.xml", "res/drawable/abc_ic_voice_search_api_material.xml", "res/drawable/abc_item_background_holo_dark.xml", "res/drawable/abc_item_background_holo_light.xml", "res/drawable/abc_list_selector_background_transition_holo_dark.xml", "res/drawable/abc_list_selector_background_transition_holo_light.xml", "res/drawable/abc_list_selector_holo_dark.xml", "res/drawable/abc_list_selector_holo_light.xml", "res/drawable/abc_ratingbar_indicator_material.xml", "res/drawable/abc_ratingbar_material.xml", "res/drawable/abc_ratingbar_small_material.xml", "res/drawable/abc_seekbar_thumb_material.xml", "res/drawable/abc_seekbar_tick_mark_material.xml", "res/drawable/abc_seekbar_track_material.xml", "res/drawable/abc_spinner_textfield_background_material.xml", "res/drawable/abc_switch_thumb_material.xml", "res/drawable/abc_tab_indicator_material.xml", "res/drawable/abc_text_cursor_material.xml", "res/drawable/abc_textfield_search_material.xml", "res/drawable/abc_vector_test.xml", "res/drawable/notification_bg.xml", "res/drawable/notification_bg_low.xml", "res/drawable/notification_icon_background.xml", "res/drawable/notification_tile_bg.xml", "res/layout-v11/notification_media_action.xml", "res/layout-v11/notification_media_cancel_action.xml", "res/layout-v11/notification_template_big_media.xml", "res/layout-v11/notification_template_big_media_custom.xml", "res/layout-v11/notification_template_big_media_narrow.xml", "res/layout-v11/notification_template_big_media_narrow_custom.xml", "res/layout-v16/notification_template_custom_big.xml", "res/layout-v17/abc_action_mode_close_item_material.xml", "res/layout-v17/abc_alert_dialog_button_bar_material.xml", "res/layout-v17/abc_alert_dialog_title_material.xml", "res/layout-v17/abc_dialog_title_material.xml", "res/layout-v17/abc_popup_menu_header_item_layout.xml", "res/layout-v17/abc_popup_menu_item_layout.xml", "res/layout-v17/abc_search_view.xml", "res/layout-v17/abc_select_dialog_material.xml", "res/layout-v17/notification_action.xml", "res/layout-v17/notification_action_tombstone.xml", "res/layout-v17/notification_template_big_media.xml", "res/layout-v17/notification_template_big_media_custom.xml", "res/layout-v17/notification_template_big_media_narrow.xml", "res/layout-v17/notification_template_big_media_narrow_custom.xml", "res/layout-v17/notification_template_custom_big.xml", "res/layout-v17/notification_template_lines_media.xml", "res/layout-v17/notification_template_media.xml", "res/layout-v17/notification_template_media_custom.xml", "res/layout-v17/select_dialog_multichoice_material.xml", "res/layout-v17/select_dialog_singlechoice_material.xml", "res/layout-v21/abc_screen_toolbar.xml", "res/layout-v21/notification_action.xml", "res/layout-v21/notification_action_tombstone.xml", "res/layout-v21/notification_template_custom_big.xml", "res/layout-v21/notification_template_icon_group.xml", "res/layout-v22/abc_alert_dialog_button_bar_material.xml", "res/layout/abc_action_bar_title_item.xml", "res/layout/abc_action_bar_up_container.xml", "res/layout/abc_action_bar_view_list_nav_layout.xml", "res/layout/abc_action_menu_item_layout.xml", "res/layout/abc_action_menu_layout.xml", "res/layout/abc_action_mode_bar.xml", "res/layout/abc_action_mode_close_item_material.xml", "res/layout/abc_activity_chooser_view.xml", "res/layout/abc_activity_chooser_view_list_item.xml", "res/layout/abc_alert_dialog_button_bar_material.xml", "res/layout/abc_alert_dialog_material.xml", "res/layout/abc_alert_dialog_title_material.xml", "res/layout/abc_dialog_title_material.xml", "res/layout/abc_expanded_menu_layout.xml", "res/layout/abc_list_menu_item_checkbox.xml", "res/layout/abc_list_menu_item_icon.xml", "res/layout/abc_list_menu_item_layout.xml", "res/layout/abc_list_menu_item_radio.xml", "res/layout/abc_popup_menu_header_item_layout.xml", "res/layout/abc_popup_menu_item_layout.xml", "res/layout/abc_screen_content_include.xml", "res/layout/abc_screen_simple.xml", "res/layout/abc_screen_simple_overlay_action_mode.xml", "res/layout/abc_screen_toolbar.xml", "res/layout/abc_search_dropdown_item_icons_2line.xml", "res/layout/abc_search_view.xml", "res/layout/abc_select_dialog_material.xml", "res/layout/activity_main.xml", "res/layout/notification_action.xml", "res/layout/notification_action_tombstone.xml", "res/layout/notification_template_custom_big.xml", "res/layout/notification_template_icon_group.xml", "res/layout/notification_template_lines_media.xml", "res/layout/notification_template_media.xml", "res/layout/notification_template_media_custom.xml", "res/layout/notification_template_part_chronometer.xml", "res/layout/notification_template_part_time.xml", "res/layout/select_dialog_item_material.xml", "res/layout/select_dialog_multichoice_material.xml", "res/layout/select_dialog_singlechoice_material.xml", "res/layout/support_simple_spinner_dropdown_item.xml", "res/mipmap-hdpi-v4/ic_launcher.png", "res/mipmap-hdpi-v4/ic_launcher_middle.png", "res/mipmap-hdpi-v4/ic_launcher_v.png", "res/mipmap-mdpi-v4/ic_launcher.png", "res/mipmap-mdpi-v4/ic_launcher_middle.png", "res/mipmap-mdpi-v4/ic_launcher_v.png", "res/mipmap-xhdpi-v4/ic_launcher.png", "res/mipmap-xhdpi-v4/ic_launcher_middle.png", "res/mipmap-xhdpi-v4/ic_launcher_v.png", "res/mipmap-xxhdpi-v4/ic_launcher.png", "res/mipmap-xxhdpi-v4/ic_launcher_middle.png", "res/mipmap-xxhdpi-v4/ic_launcher_v.png", "res/mipmap-xxxhdpi-v4/ic_launcher.png", "res/mipmap-xxxhdpi-v4/ic_launcher_middle.png", "res/mipmap-xxxhdpi-v4/ic_launcher_v.png", "res/raw/bounce.m4a", "resources.arsc"], "exported_count": {"exported_activities": 0, "exported_services": 0, "exported_receivers": 0, "exported_providers": 0}, "apkid": {"classes.dex": {"anti_vm": ["Build.MODEL check"], "compiler": ["dx (possible dexmerge)"], "manipulator": ["dexmerge"]}}, "quark": [], "trackers": {"detected_trackers": 0, "total_trackers": 428, "trackers": []}, "playstore_details": {"error": true}, "secrets": [], "average_cvss": null, "appsec": {"high": [{"title": "Application vulnerable to Janus Vulnerability", "description": "Application is signed with v1 signature scheme, making it vulnerable to Janus vulnerability on Android 5.0-8.0, if signed only with v1 signature scheme. Applications running on Android 5.0-7.0 signed with v1, and v2/v3 scheme is also vulnerable.", "section": "certificate"}], "warning": [{"title": "Application Data can be Backed up", "description": "[android:allowBackup=true]\nThis flag allows anyone to backup your application data via adb. It allows users who have enabled USB debugging to copy application data off of the device.", "section": "manifest"}, {"title": "The App uses an insecure Random Number Generator.", "description": "The App uses an insecure Random Number Generator.\nhttps://github.com/MobSF/owasp-mstg/blob/master/Document/0x04g-Testing-Cryptography.md#weak-random-number-generators", "section": "code"}], "info": [{"title": "The App logs information. Sensitive information should never be logged.", "description": "The App logs information. Sensitive information should never be logged.\nhttps://github.com/MobSF/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#logs", "section": "code"}], "secure": [{"title": "This application has no privacy trackers", "description": "This application does not include any user or device trackers. Unable to find trackers during static analysis.", "section": "trackers"}], "hotspot": [{"title": "Found 1 critical permission(s)", "description": "Ensure that these permissions are required by the application.\n\nandroid.permission.CAMERA (dangerous): take pictures and videos - Allows application to take pictures and videos with the camera. This allows the application to collect images that the camera is seeing at any time.", "section": "permissions"}], "total_trackers": 428, "trackers": 0, "security_score": 55, "app_name": "Form-N-Fun", "file_name": "installer3778.apk", "hash": "29073329d9dac9dcdfa4e8eee3023705", "version_name": "1.0"}, "virus_total": null, "base_url": "file:///Users/vlad/Desktop/THESIS/Mobile-Security-Framework-MobSF/mobsf", "dwd_dir": "file:///Users/vlad/.MobSF/downloads/", "host_os": "nix", "timestamp": "2022-06-13T15:41:19.158Z"}